// Rules server messages
// Times are in google.protobuf.Timestamp since Unix Epoch on January 1st, 1970

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: protos/WebAPI/rules_1.proto

package WebAPI

import (
	common "cqg-api/protos/WebAPI/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OrderEventFilterType int32

const (
	OrderEventFilterType_ORDER_EVENT_FILTER_TYPE_CONTRIBUTOR_ID OrderEventFilterType = 1
)

// Enum value maps for OrderEventFilterType.
var (
	OrderEventFilterType_name = map[int32]string{
		1: "ORDER_EVENT_FILTER_TYPE_CONTRIBUTOR_ID",
	}
	OrderEventFilterType_value = map[string]int32{
		"ORDER_EVENT_FILTER_TYPE_CONTRIBUTOR_ID": 1,
	}
)

func (x OrderEventFilterType) Enum() *OrderEventFilterType {
	p := new(OrderEventFilterType)
	*p = x
	return p
}

func (x OrderEventFilterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderEventFilterType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_rules_1_proto_enumTypes[0].Descriptor()
}

func (OrderEventFilterType) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_rules_1_proto_enumTypes[0]
}

func (x OrderEventFilterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OrderEventFilterType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OrderEventFilterType(num)
	return nil
}

// Deprecated: Use OrderEventFilterType.Descriptor instead.
func (OrderEventFilterType) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_rules_1_proto_rawDescGZIP(), []int{0}
}

type RuleResult_ResultCode int32

const (
	// Success codes (0 - 100)
	RuleResult_RESULT_CODE_SUCCESS RuleResult_ResultCode = 0
	// Request is processed and subscription is established.
	RuleResult_RESULT_CODE_SUBSCRIBED RuleResult_ResultCode = 1
	// The subscription is dropped by the client.
	RuleResult_RESULT_CODE_DROPPED RuleResult_ResultCode = 2
	// Unsolicited information update because of subscription.
	RuleResult_RESULT_CODE_UPDATE RuleResult_ResultCode = 3
	// Some problem with subscription happened and updates will not be sent. Clients should not resubscribe
	// in this case: they will receive new RuleResult message with RESULT_CODE_SUBSCRIBED code
	// as soon as the problem is fixed.
	RuleResult_RESULT_CODE_DISCONNECTED RuleResult_ResultCode = 4
	// Failure codes (100+)
	// General failure.
	RuleResult_RESULT_CODE_FAILURE RuleResult_ResultCode = 101
)

// Enum value maps for RuleResult_ResultCode.
var (
	RuleResult_ResultCode_name = map[int32]string{
		0:   "RESULT_CODE_SUCCESS",
		1:   "RESULT_CODE_SUBSCRIBED",
		2:   "RESULT_CODE_DROPPED",
		3:   "RESULT_CODE_UPDATE",
		4:   "RESULT_CODE_DISCONNECTED",
		101: "RESULT_CODE_FAILURE",
	}
	RuleResult_ResultCode_value = map[string]int32{
		"RESULT_CODE_SUCCESS":      0,
		"RESULT_CODE_SUBSCRIBED":   1,
		"RESULT_CODE_DROPPED":      2,
		"RESULT_CODE_UPDATE":       3,
		"RESULT_CODE_DISCONNECTED": 4,
		"RESULT_CODE_FAILURE":      101,
	}
)

func (x RuleResult_ResultCode) Enum() *RuleResult_ResultCode {
	p := new(RuleResult_ResultCode)
	*p = x
	return p
}

func (x RuleResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuleResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_rules_1_proto_enumTypes[1].Descriptor()
}

func (RuleResult_ResultCode) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_rules_1_proto_enumTypes[1]
}

func (x RuleResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RuleResult_ResultCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RuleResult_ResultCode(num)
	return nil
}

// Deprecated: Use RuleResult_ResultCode.Descriptor instead.
func (RuleResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_rules_1_proto_rawDescGZIP(), []int{1, 0}
}

// Rule triggering type.
type ConditionRule_TriggeringType int32

const (
	// Triggers when the rule becomes true then disables the rule (see RuleDefinition.enabled field).
	// Not supported for rules with account variables.
	ConditionRule_TRIGGERING_TYPE_ONE_TIME ConditionRule_TriggeringType = 0
	// Triggers when the rule becomes true while it was false before or if it is initially true.
	// Any condition triggerings that happen after the previous one within a suppression period are ignored.
	// See suppression_period field.
	ConditionRule_TRIGGERING_TYPE_AUTO ConditionRule_TriggeringType = 1
)

// Enum value maps for ConditionRule_TriggeringType.
var (
	ConditionRule_TriggeringType_name = map[int32]string{
		0: "TRIGGERING_TYPE_ONE_TIME",
		1: "TRIGGERING_TYPE_AUTO",
	}
	ConditionRule_TriggeringType_value = map[string]int32{
		"TRIGGERING_TYPE_ONE_TIME": 0,
		"TRIGGERING_TYPE_AUTO":     1,
	}
)

func (x ConditionRule_TriggeringType) Enum() *ConditionRule_TriggeringType {
	p := new(ConditionRule_TriggeringType)
	*p = x
	return p
}

func (x ConditionRule_TriggeringType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConditionRule_TriggeringType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_rules_1_proto_enumTypes[2].Descriptor()
}

func (ConditionRule_TriggeringType) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_rules_1_proto_enumTypes[2]
}

func (x ConditionRule_TriggeringType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ConditionRule_TriggeringType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ConditionRule_TriggeringType(num)
	return nil
}

// Deprecated: Use ConditionRule_TriggeringType.Descriptor instead.
func (ConditionRule_TriggeringType) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_rules_1_proto_rawDescGZIP(), []int{6, 0}
}

// List of operators.
// True is converted to 1 and False is converted to 0 if results of logical
// expressions are included into arithmetic operations.
// Zero is converted to False and Non Zero to True if logical value is expected.
// Integer and decimal values are implicitly converted to double format.
// Comparison between double operands is performed with epsilon precision calculated
// as 2.2204460492503131e-016 * max (1, |operand1|, |operand2|).
// Condition rule is reset to false (for AUTO rules):
//   - result of arithmetic operation is infinity or nan,
//   - required variable does not have a value (e.g. when AccountVariable with
//     TYPE_MIN_DAYS_TILL_POSITION_CONTRACT_EXPIRATION type for an account without
//     open positions),
//   - in case of any other error on rule calculation.
type Expression_Operator int32

const (
	// Arithmetical operators.
	Expression_OPERATOR_ADD      Expression_Operator = 0 // The result of left_operand + right_operand.
	Expression_OPERATOR_SUBTRACT Expression_Operator = 1 // The result of left_operand - right_operand.
	Expression_OPERATOR_MULTIPLY Expression_Operator = 2 // The result of left_operand * right_operand.
	Expression_OPERATOR_DIVIDE   Expression_Operator = 3 // The result of left_operand / right_operand.
	// Logical operators.
	Expression_OPERATOR_LESS          Expression_Operator = 10 // True if left_operand is less than right_operand.
	Expression_OPERATOR_LESS_EQUAL    Expression_Operator = 11 // True if left_operand is less than or equal to right_operand.
	Expression_OPERATOR_EQUAL         Expression_Operator = 12 // True if left_operand is equal to right_operand.
	Expression_OPERATOR_NOT_EQUAL     Expression_Operator = 18 // True if left_operand is not equal to right_operand.
	Expression_OPERATOR_GREATER_EQUAL Expression_Operator = 13 // True if left_operand is greater than or equal to right_operand.
	Expression_OPERATOR_GREATER       Expression_Operator = 14 // True if left_operand is greater than right_operand.
	Expression_OPERATOR_NOT           Expression_Operator = 15 // Inverts True/Non-zero to False and False/Zero to True in left_operand.
	Expression_OPERATOR_AND           Expression_Operator = 16 // The result of logical AND operation.
	Expression_OPERATOR_OR            Expression_Operator = 17 // The result of logical OR operation.
)

// Enum value maps for Expression_Operator.
var (
	Expression_Operator_name = map[int32]string{
		0:  "OPERATOR_ADD",
		1:  "OPERATOR_SUBTRACT",
		2:  "OPERATOR_MULTIPLY",
		3:  "OPERATOR_DIVIDE",
		10: "OPERATOR_LESS",
		11: "OPERATOR_LESS_EQUAL",
		12: "OPERATOR_EQUAL",
		18: "OPERATOR_NOT_EQUAL",
		13: "OPERATOR_GREATER_EQUAL",
		14: "OPERATOR_GREATER",
		15: "OPERATOR_NOT",
		16: "OPERATOR_AND",
		17: "OPERATOR_OR",
	}
	Expression_Operator_value = map[string]int32{
		"OPERATOR_ADD":           0,
		"OPERATOR_SUBTRACT":      1,
		"OPERATOR_MULTIPLY":      2,
		"OPERATOR_DIVIDE":        3,
		"OPERATOR_LESS":          10,
		"OPERATOR_LESS_EQUAL":    11,
		"OPERATOR_EQUAL":         12,
		"OPERATOR_NOT_EQUAL":     18,
		"OPERATOR_GREATER_EQUAL": 13,
		"OPERATOR_GREATER":       14,
		"OPERATOR_NOT":           15,
		"OPERATOR_AND":           16,
		"OPERATOR_OR":            17,
	}
)

func (x Expression_Operator) Enum() *Expression_Operator {
	p := new(Expression_Operator)
	*p = x
	return p
}

func (x Expression_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Expression_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_rules_1_proto_enumTypes[3].Descriptor()
}

func (Expression_Operator) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_rules_1_proto_enumTypes[3]
}

func (x Expression_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Expression_Operator) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Expression_Operator(num)
	return nil
}

// Deprecated: Use Expression_Operator.Descriptor instead.
func (Expression_Operator) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_rules_1_proto_rawDescGZIP(), []int{8, 0}
}

// Type of market variable.
// All price based values are provided in correct format for operations
// in expressions (float point value). No currency conversion is applied to these values.
// Some intermediate updates of market variables might be skipped from rule's expression evaluation, so
// that if the condition gets True only for a short period of time, the rule might not trigger.
// Expressions with variables that use last trade price or volume are evaluated starting from
// the first trade occurred after the rule creation.
type MarketVariable_Type int32

const (
	// Delta between the last trade and yesterday settlement: last_trade - yesterday_settlement.
	MarketVariable_TYPE_LAST_TRADE_NET_CHANGE MarketVariable_Type = 1
	// % delta between the last trade and yesterday settlement:
	// 100*(last_trade - yesterday_settlement)/yesterday_settlement.
	MarketVariable_TYPE_LAST_TRADE_NET_CHANGE_PC MarketVariable_Type = 2
	// Last trade price.
	MarketVariable_TYPE_LAST_TRADE_PRICE MarketVariable_Type = 3
	// Last trade volume.
	MarketVariable_TYPE_LAST_TRADE_VOLUME MarketVariable_Type = 4
	// Today's volume for the contract.
	MarketVariable_TYPE_CONTRACT_TOTAL_VOLUME MarketVariable_Type = 5
	// Delta between best ask and best bid: ask - bid.
	MarketVariable_TYPE_BID_ASK_SPREAD MarketVariable_Type = 6
	// Today's high.
	MarketVariable_TYPE_TODAYS_HIGH MarketVariable_Type = 7
	// Today's low.
	MarketVariable_TYPE_TODAYS_LOW MarketVariable_Type = 8
)

// Enum value maps for MarketVariable_Type.
var (
	MarketVariable_Type_name = map[int32]string{
		1: "TYPE_LAST_TRADE_NET_CHANGE",
		2: "TYPE_LAST_TRADE_NET_CHANGE_PC",
		3: "TYPE_LAST_TRADE_PRICE",
		4: "TYPE_LAST_TRADE_VOLUME",
		5: "TYPE_CONTRACT_TOTAL_VOLUME",
		6: "TYPE_BID_ASK_SPREAD",
		7: "TYPE_TODAYS_HIGH",
		8: "TYPE_TODAYS_LOW",
	}
	MarketVariable_Type_value = map[string]int32{
		"TYPE_LAST_TRADE_NET_CHANGE":    1,
		"TYPE_LAST_TRADE_NET_CHANGE_PC": 2,
		"TYPE_LAST_TRADE_PRICE":         3,
		"TYPE_LAST_TRADE_VOLUME":        4,
		"TYPE_CONTRACT_TOTAL_VOLUME":    5,
		"TYPE_BID_ASK_SPREAD":           6,
		"TYPE_TODAYS_HIGH":              7,
		"TYPE_TODAYS_LOW":               8,
	}
)

func (x MarketVariable_Type) Enum() *MarketVariable_Type {
	p := new(MarketVariable_Type)
	*p = x
	return p
}

func (x MarketVariable_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MarketVariable_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_rules_1_proto_enumTypes[4].Descriptor()
}

func (MarketVariable_Type) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_rules_1_proto_enumTypes[4]
}

func (x MarketVariable_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MarketVariable_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MarketVariable_Type(num)
	return nil
}

// Deprecated: Use MarketVariable_Type.Descriptor instead.
func (MarketVariable_Type) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_rules_1_proto_rawDescGZIP(), []int{11, 0}
}

// Type of account variable.
type AccountVariable_Type int32

const (
	AccountVariable_TYPE_UNSPECIFIED AccountVariable_Type = 0
	// Margin requirement calculated for worst-case based on open positions and working orders.
	AccountVariable_TYPE_TOTAL_MARGIN AccountVariable_Type = 1
	// Margin requirement based on current positions only.
	AccountVariable_TYPE_POSITION_MARGIN AccountVariable_Type = 2
	// Available account funds including balance, realized profit (or loss), collateral and credits.
	// OTE and MVO are included regarding the account risk parameters.
	AccountVariable_TYPE_PURCHASING_POWER AccountVariable_Type = 3
	// Open trade equity, or potential profit (or loss) from futures and future-style options positions
	// based on opening price of the position and the current future trade/best bid/best ask
	// (regarding to the risk account settings) or settlement price if trade is not available.
	AccountVariable_TYPE_OTE AccountVariable_Type = 4
	// OTE + UPL.
	AccountVariable_TYPE_OTE_UPL AccountVariable_Type = 26
	// Absolute value of (OTE + UPL) if it is negative otherwise zero value.
	AccountVariable_TYPE_OPEN_TRADE_LOSS_UNREALIZED_LOSS AccountVariable_Type = 5
	// Market value of options calculated as the current market trade/best bid/best ask of the option
	// (regarding to the risk account settings) times the number of options
	// (positive for long options and negative for short options) in the portfolio.
	AccountVariable_TYPE_MVO AccountVariable_Type = 6
	// Net Liquidity Value. It includes current balance, OTE, MVO and collateral values.
	AccountVariable_TYPE_NLV AccountVariable_Type = 7
	// Market value of futures calculated as the current market trade/best bid/best ask
	// (regarding to the risk account settings) times the number of futures
	// (positive for long and negative for short) in the portfolio.
	AccountVariable_TYPE_MVF AccountVariable_Type = 8
	// Allowable margin credit of the account.
	AccountVariable_TYPE_MARGIN_CREDIT AccountVariable_Type = 9
	// Margin excess. It consists of purchasing power minus total margin.
	AccountVariable_TYPE_MARGIN_EXCESS AccountVariable_Type = 10
	// Cash Excess.
	AccountVariable_TYPE_CASH_EXCESS AccountVariable_Type = 11
	// Current account's balance.
	AccountVariable_TYPE_CURRENT_BALANCE AccountVariable_Type = 13
	// Realized profit/loss.
	AccountVariable_TYPE_PROFIT_LOSS AccountVariable_Type = 14
	// Unrealized profit/loss for options.
	AccountVariable_TYPE_UNREALIZED_PROFIT_LOSS AccountVariable_Type = 15
	// Sum of OTE, UPL and realized profit/loss values.
	AccountVariable_TYPE_OTE_UPL_AND_PL AccountVariable_Type = 16
	// Cash balance from the last statement.
	AccountVariable_TYPE_YESTERDAY_BALANCE AccountVariable_Type = 17
	// Open trade equity from the last statement.
	AccountVariable_TYPE_YESTERDAY_OTE AccountVariable_Type = 23
	// Market value of options from the last statement.
	AccountVariable_TYPE_YESTERDAY_MVO AccountVariable_Type = 24
	// Collateral on Deposit.
	AccountVariable_TYPE_YESTERDAY_COLLATERAL AccountVariable_Type = 12
	// (profit_loss / abs(yesterday_balance)) in percentage.
	AccountVariable_TYPE_NET_CHANGE_PC AccountVariable_Type = 25
	// Sum of all fill sizes for the current day.
	AccountVariable_TYPE_TOTAL_FILLED_QTY AccountVariable_Type = 18
	// Count of filled orders for the current day.
	AccountVariable_TYPE_TOTAL_FILLED_ORDERS AccountVariable_Type = 19
	// Sum of position quantities among all long open positions on the account.
	AccountVariable_TYPE_LONG_OPEN_POSITIONS_QTY AccountVariable_Type = 20
	// Sum of position quantities among all short open positions on the account.
	AccountVariable_TYPE_SHORT_OPEN_POSITIONS_QTY AccountVariable_Type = 21
	// Minimal value of days till contract expiration (in calendar days, not trading) among
	// all open positions on contracts with expiration date on the account.
	// It does not have a value when there are no such open positions on the account.
	AccountVariable_TYPE_MIN_DAYS_TILL_POSITION_CONTRACT_EXPIRATION AccountVariable_Type = 22
)

// Enum value maps for AccountVariable_Type.
var (
	AccountVariable_Type_name = map[int32]string{
		0:  "TYPE_UNSPECIFIED",
		1:  "TYPE_TOTAL_MARGIN",
		2:  "TYPE_POSITION_MARGIN",
		3:  "TYPE_PURCHASING_POWER",
		4:  "TYPE_OTE",
		26: "TYPE_OTE_UPL",
		5:  "TYPE_OPEN_TRADE_LOSS_UNREALIZED_LOSS",
		6:  "TYPE_MVO",
		7:  "TYPE_NLV",
		8:  "TYPE_MVF",
		9:  "TYPE_MARGIN_CREDIT",
		10: "TYPE_MARGIN_EXCESS",
		11: "TYPE_CASH_EXCESS",
		13: "TYPE_CURRENT_BALANCE",
		14: "TYPE_PROFIT_LOSS",
		15: "TYPE_UNREALIZED_PROFIT_LOSS",
		16: "TYPE_OTE_UPL_AND_PL",
		17: "TYPE_YESTERDAY_BALANCE",
		23: "TYPE_YESTERDAY_OTE",
		24: "TYPE_YESTERDAY_MVO",
		12: "TYPE_YESTERDAY_COLLATERAL",
		25: "TYPE_NET_CHANGE_PC",
		18: "TYPE_TOTAL_FILLED_QTY",
		19: "TYPE_TOTAL_FILLED_ORDERS",
		20: "TYPE_LONG_OPEN_POSITIONS_QTY",
		21: "TYPE_SHORT_OPEN_POSITIONS_QTY",
		22: "TYPE_MIN_DAYS_TILL_POSITION_CONTRACT_EXPIRATION",
	}
	AccountVariable_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED":                                0,
		"TYPE_TOTAL_MARGIN":                               1,
		"TYPE_POSITION_MARGIN":                            2,
		"TYPE_PURCHASING_POWER":                           3,
		"TYPE_OTE":                                        4,
		"TYPE_OTE_UPL":                                    26,
		"TYPE_OPEN_TRADE_LOSS_UNREALIZED_LOSS":            5,
		"TYPE_MVO":                                        6,
		"TYPE_NLV":                                        7,
		"TYPE_MVF":                                        8,
		"TYPE_MARGIN_CREDIT":                              9,
		"TYPE_MARGIN_EXCESS":                              10,
		"TYPE_CASH_EXCESS":                                11,
		"TYPE_CURRENT_BALANCE":                            13,
		"TYPE_PROFIT_LOSS":                                14,
		"TYPE_UNREALIZED_PROFIT_LOSS":                     15,
		"TYPE_OTE_UPL_AND_PL":                             16,
		"TYPE_YESTERDAY_BALANCE":                          17,
		"TYPE_YESTERDAY_OTE":                              23,
		"TYPE_YESTERDAY_MVO":                              24,
		"TYPE_YESTERDAY_COLLATERAL":                       12,
		"TYPE_NET_CHANGE_PC":                              25,
		"TYPE_TOTAL_FILLED_QTY":                           18,
		"TYPE_TOTAL_FILLED_ORDERS":                        19,
		"TYPE_LONG_OPEN_POSITIONS_QTY":                    20,
		"TYPE_SHORT_OPEN_POSITIONS_QTY":                   21,
		"TYPE_MIN_DAYS_TILL_POSITION_CONTRACT_EXPIRATION": 22,
	}
)

func (x AccountVariable_Type) Enum() *AccountVariable_Type {
	p := new(AccountVariable_Type)
	*p = x
	return p
}

func (x AccountVariable_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountVariable_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_rules_1_proto_enumTypes[5].Descriptor()
}

func (AccountVariable_Type) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_rules_1_proto_enumTypes[5]
}

func (x AccountVariable_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AccountVariable_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AccountVariable_Type(num)
	return nil
}

// Deprecated: Use AccountVariable_Type.Descriptor instead.
func (AccountVariable_Type) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_rules_1_proto_rawDescGZIP(), []int{12, 0}
}

// Client rule (alert) messages.
// Only one rule operation is allowed.
type RuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Request identifier.
	RequestId *string `protobuf:"bytes,1,req,name=request_id,json=requestId" json:"request_id,omitempty"`
	// Affects requests supporting subscription. It is ignored in case of other requests.
	// If present and set to true, the subscription will be established.
	// If present and set to false, the subscription will be dropped.
	// If omitted the request is not considered as subscription.
	// Note: this field is ignored by all requests except RuleListRequest and RuleEventSubscription one.
	Subscribe *bool `protobuf:"varint,10,opt,name=subscribe" json:"subscribe,omitempty"`
	// Create or update a rule.
	SetRuleRequest *SetRuleRequest `protobuf:"bytes,2,opt,name=set_rule_request,json=setRuleRequest" json:"set_rule_request,omitempty"`
	// Lightweight rule modification.
	ModifyRuleRequest *ModifyRuleRequest `protobuf:"bytes,12,opt,name=modify_rule_request,json=modifyRuleRequest" json:"modify_rule_request,omitempty"`
	// Delete a rule.
	DeleteRuleRequest *DeleteRuleRequest `protobuf:"bytes,3,opt,name=delete_rule_request,json=deleteRuleRequest" json:"delete_rule_request,omitempty"`
	// Get or subscribe to the rule list.
	RuleListRequest *RuleListRequest `protobuf:"bytes,4,opt,name=rule_list_request,json=ruleListRequest" json:"rule_list_request,omitempty"`
	// Request rule event history.
	RuleEventHistoryRequest *RuleEventHistoryRequest `protobuf:"bytes,5,opt,name=rule_event_history_request,json=ruleEventHistoryRequest" json:"rule_event_history_request,omitempty"`
	// Subscription to rule events.
	RuleEventSubscription *RuleEventSubscription `protobuf:"bytes,9,opt,name=rule_event_subscription,json=ruleEventSubscription" json:"rule_event_subscription,omitempty"`
	// Creates or modifies a destination group.
	CreateOrModifyDestinationGroupRequest *CreateOrModifyDestinationGroupRequest `protobuf:"bytes,6,opt,name=create_or_modify_destination_group_request,json=createOrModifyDestinationGroupRequest" json:"create_or_modify_destination_group_request,omitempty"`
	// List destination groups.
	DestinationGroupListRequest *DestinationGroupListRequest `protobuf:"bytes,8,opt,name=destination_group_list_request,json=destinationGroupListRequest" json:"destination_group_list_request,omitempty"`
	// Update destination expiration time.
	UpdateDestinationExpirationTimeRequest *UpdateDestinationExpirationTimeRequest `protobuf:"bytes,11,opt,name=update_destination_expiration_time_request,json=updateDestinationExpirationTimeRequest" json:"update_destination_expiration_time_request,omitempty"`
}

func (x *RuleRequest) Reset() {
	*x = RuleRequest{}
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleRequest) ProtoMessage() {}

func (x *RuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleRequest.ProtoReflect.Descriptor instead.
func (*RuleRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_rules_1_proto_rawDescGZIP(), []int{0}
}

func (x *RuleRequest) GetRequestId() string {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return ""
}

func (x *RuleRequest) GetSubscribe() bool {
	if x != nil && x.Subscribe != nil {
		return *x.Subscribe
	}
	return false
}

func (x *RuleRequest) GetSetRuleRequest() *SetRuleRequest {
	if x != nil {
		return x.SetRuleRequest
	}
	return nil
}

func (x *RuleRequest) GetModifyRuleRequest() *ModifyRuleRequest {
	if x != nil {
		return x.ModifyRuleRequest
	}
	return nil
}

func (x *RuleRequest) GetDeleteRuleRequest() *DeleteRuleRequest {
	if x != nil {
		return x.DeleteRuleRequest
	}
	return nil
}

func (x *RuleRequest) GetRuleListRequest() *RuleListRequest {
	if x != nil {
		return x.RuleListRequest
	}
	return nil
}

func (x *RuleRequest) GetRuleEventHistoryRequest() *RuleEventHistoryRequest {
	if x != nil {
		return x.RuleEventHistoryRequest
	}
	return nil
}

func (x *RuleRequest) GetRuleEventSubscription() *RuleEventSubscription {
	if x != nil {
		return x.RuleEventSubscription
	}
	return nil
}

func (x *RuleRequest) GetCreateOrModifyDestinationGroupRequest() *CreateOrModifyDestinationGroupRequest {
	if x != nil {
		return x.CreateOrModifyDestinationGroupRequest
	}
	return nil
}

func (x *RuleRequest) GetDestinationGroupListRequest() *DestinationGroupListRequest {
	if x != nil {
		return x.DestinationGroupListRequest
	}
	return nil
}

func (x *RuleRequest) GetUpdateDestinationExpirationTimeRequest() *UpdateDestinationExpirationTimeRequest {
	if x != nil {
		return x.UpdateDestinationExpirationTimeRequest
	}
	return nil
}

// Server rule (alert) messages.
// Note: all optional fields may be missing (in case of RESULT_CODE_DISCONNECTED status for example).
// Use request_id field to identify corresponding request.
type RuleResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of a corresponding request or subscription.
	RequestId *string `protobuf:"bytes,1,req,name=request_id,json=requestId" json:"request_id,omitempty"`
	// Operation status.
	// This field is associated with ResultCode enum.
	ResultCode *uint32 `protobuf:"varint,2,req,name=result_code,json=resultCode" json:"result_code,omitempty"`
	// Operation details.
	Details *common.Text `protobuf:"bytes,3,opt,name=details" json:"details,omitempty"`
	// Result of set rule operation.
	SetRuleResult *SetRuleResult `protobuf:"bytes,4,opt,name=set_rule_result,json=setRuleResult" json:"set_rule_result,omitempty"`
	// Result of rule modification operation.
	ModifyRuleResult *ModifyRuleResult `protobuf:"bytes,13,opt,name=modify_rule_result,json=modifyRuleResult" json:"modify_rule_result,omitempty"`
	// Result of delete rule operation.
	DeleteRuleResult *DeleteRuleResult `protobuf:"bytes,5,opt,name=delete_rule_result,json=deleteRuleResult" json:"delete_rule_result,omitempty"`
	// Result of rule list request.
	RuleListResult *RuleListResult `protobuf:"bytes,6,opt,name=rule_list_result,json=ruleListResult" json:"rule_list_result,omitempty"`
	// Result of rule event history request.
	RuleEventHistoryResult *RuleEventHistoryResult `protobuf:"bytes,7,opt,name=rule_event_history_result,json=ruleEventHistoryResult" json:"rule_event_history_result,omitempty"`
	// Result/updates for rule events subscription.
	RuleEventSubscriptionStatus *RuleEventSubscriptionStatus `protobuf:"bytes,11,opt,name=rule_event_subscription_status,json=ruleEventSubscriptionStatus" json:"rule_event_subscription_status,omitempty"`
	// Result of create or modify destination group operation.
	CreateOrModifyDestinationGroupResult *CreateOrModifyDestinationGroupResult `protobuf:"bytes,8,opt,name=create_or_modify_destination_group_result,json=createOrModifyDestinationGroupResult" json:"create_or_modify_destination_group_result,omitempty"`
	// Result of list destination groups request.
	DestinationGroupListResult *DestinationGroupListResult `protobuf:"bytes,10,opt,name=destination_group_list_result,json=destinationGroupListResult" json:"destination_group_list_result,omitempty"`
	// Result of update destination expiration time operation.
	UpdateDestinationExpirationTimeResult *UpdateDestinationExpirationTimeResult `protobuf:"bytes,12,opt,name=update_destination_expiration_time_result,json=updateDestinationExpirationTimeResult" json:"update_destination_expiration_time_result,omitempty"`
}

func (x *RuleResult) Reset() {
	*x = RuleResult{}
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuleResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleResult) ProtoMessage() {}

func (x *RuleResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleResult.ProtoReflect.Descriptor instead.
func (*RuleResult) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_rules_1_proto_rawDescGZIP(), []int{1}
}

func (x *RuleResult) GetRequestId() string {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return ""
}

func (x *RuleResult) GetResultCode() uint32 {
	if x != nil && x.ResultCode != nil {
		return *x.ResultCode
	}
	return 0
}

func (x *RuleResult) GetDetails() *common.Text {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *RuleResult) GetSetRuleResult() *SetRuleResult {
	if x != nil {
		return x.SetRuleResult
	}
	return nil
}

func (x *RuleResult) GetModifyRuleResult() *ModifyRuleResult {
	if x != nil {
		return x.ModifyRuleResult
	}
	return nil
}

func (x *RuleResult) GetDeleteRuleResult() *DeleteRuleResult {
	if x != nil {
		return x.DeleteRuleResult
	}
	return nil
}

func (x *RuleResult) GetRuleListResult() *RuleListResult {
	if x != nil {
		return x.RuleListResult
	}
	return nil
}

func (x *RuleResult) GetRuleEventHistoryResult() *RuleEventHistoryResult {
	if x != nil {
		return x.RuleEventHistoryResult
	}
	return nil
}

func (x *RuleResult) GetRuleEventSubscriptionStatus() *RuleEventSubscriptionStatus {
	if x != nil {
		return x.RuleEventSubscriptionStatus
	}
	return nil
}

func (x *RuleResult) GetCreateOrModifyDestinationGroupResult() *CreateOrModifyDestinationGroupResult {
	if x != nil {
		return x.CreateOrModifyDestinationGroupResult
	}
	return nil
}

func (x *RuleResult) GetDestinationGroupListResult() *DestinationGroupListResult {
	if x != nil {
		return x.DestinationGroupListResult
	}
	return nil
}

func (x *RuleResult) GetUpdateDestinationExpirationTimeResult() *UpdateDestinationExpirationTimeResult {
	if x != nil {
		return x.UpdateDestinationExpirationTimeResult
	}
	return nil
}

// Rule definition contains one of the specific rules.
// Only one specific rule can be specified.
// The complete definition is expected regardless if these is a new rule or an update of existing one.
// Note that overall serialized RuleDefinition message size is limited (100KB by default).
type RuleDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Client ID of the rule.
	// It has to be unique for this client.
	RuleId *string `protobuf:"bytes,1,req,name=rule_id,json=ruleId" json:"rule_id,omitempty"`
	// List of optional client rule tags.
	// Number of tags is limited. If limit is exceeded, maximum allowed number of tags is provided in error message.
	// See RuleEventSubscription.rule_tags and RuleEventHistoryRequest.rule_tags fields
	RuleTags []string `protobuf:"bytes,2,rep,name=rule_tags,json=ruleTags" json:"rule_tags,omitempty"`
	// List of actions for rule execution.
	Actions []*Action `protobuf:"bytes,4,rep,name=actions" json:"actions,omitempty"`
	// Order event rule definition.
	OrderEventRule *OrderEventRule `protobuf:"bytes,5,opt,name=order_event_rule,json=orderEventRule" json:"order_event_rule,omitempty"`
	// Condition rule definition.
	ConditionRule *ConditionRule `protobuf:"bytes,7,opt,name=condition_rule,json=conditionRule" json:"condition_rule,omitempty"`
	// True means the rule is in execution.
	// To enable or disable the rule the client updates the rule
	// with a corresponding values of this flag.
	Enabled *bool `protobuf:"varint,6,opt,name=enabled,def=1" json:"enabled,omitempty"`
	// List of custom rule attributes defined by client.
	// Note that full list of attributes has to be specified on rule's modification.
	Attributes []*common.NamedValue `protobuf:"bytes,8,rep,name=attributes" json:"attributes,omitempty"`
	// If set to true the rule with given rule_id has been deleted.
	Deleted *bool `protobuf:"varint,9,opt,name=deleted" json:"deleted,omitempty"`
	// Rule expiration time.
	// The rule is disabled on expiration.
	// This is optional field for condition rules with MarketVariable or StudySymbol.
	// If this field is omitted it is set to "now + 1 year".
	// Other rules don't support this field.
	ExpirationTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=expiration_time,json=expirationTime" json:"expiration_time,omitempty"`
}

// Default values for RuleDefinition fields.
const (
	Default_RuleDefinition_Enabled = bool(true)
)

func (x *RuleDefinition) Reset() {
	*x = RuleDefinition{}
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuleDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleDefinition) ProtoMessage() {}

func (x *RuleDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleDefinition.ProtoReflect.Descriptor instead.
func (*RuleDefinition) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_rules_1_proto_rawDescGZIP(), []int{2}
}

func (x *RuleDefinition) GetRuleId() string {
	if x != nil && x.RuleId != nil {
		return *x.RuleId
	}
	return ""
}

func (x *RuleDefinition) GetRuleTags() []string {
	if x != nil {
		return x.RuleTags
	}
	return nil
}

func (x *RuleDefinition) GetActions() []*Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *RuleDefinition) GetOrderEventRule() *OrderEventRule {
	if x != nil {
		return x.OrderEventRule
	}
	return nil
}

func (x *RuleDefinition) GetConditionRule() *ConditionRule {
	if x != nil {
		return x.ConditionRule
	}
	return nil
}

func (x *RuleDefinition) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return Default_RuleDefinition_Enabled
}

func (x *RuleDefinition) GetAttributes() []*common.NamedValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *RuleDefinition) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

func (x *RuleDefinition) GetExpirationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationTime
	}
	return nil
}

// Possible actions for rule execution.
type Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of destinations to notify.
	Destinations []*common.Destination `protobuf:"bytes,4,rep,name=destinations" json:"destinations,omitempty"`
	// Destination group to notify.
	DestinationGroupId *string `protobuf:"bytes,5,opt,name=destination_group_id,json=destinationGroupId" json:"destination_group_id,omitempty"`
	// Cancel all orders and liquidate all open positions.
	GoFlat *GoFlatAction `protobuf:"bytes,6,opt,name=go_flat,json=goFlat" json:"go_flat,omitempty"`
}

func (x *Action) Reset() {
	*x = Action{}
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_rules_1_proto_rawDescGZIP(), []int{3}
}

func (x *Action) GetDestinations() []*common.Destination {
	if x != nil {
		return x.Destinations
	}
	return nil
}

func (x *Action) GetDestinationGroupId() string {
	if x != nil && x.DestinationGroupId != nil {
		return *x.DestinationGroupId
	}
	return ""
}

func (x *Action) GetGoFlat() *GoFlatAction {
	if x != nil {
		return x.GoFlat
	}
	return nil
}

// Cancel all orders (including parked) and liquidate all open positions.
// The action is allowed only for condition rules with account variables.
// The action is applied to an account which account variables triggered the condition rule.
// It is required to specify at least one notification destination in a rule with 'go-flat' action.
type GoFlatAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GoFlatAction) Reset() {
	*x = GoFlatAction{}
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GoFlatAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoFlatAction) ProtoMessage() {}

func (x *GoFlatAction) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoFlatAction.ProtoReflect.Descriptor instead.
func (*GoFlatAction) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_rules_1_proto_rawDescGZIP(), []int{4}
}

// Order event notification rule.
// Use it to get notifications for order events.
type OrderEventRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional list of accounts.
	// All accounts of the client if not specified.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/rules_1.proto.
	AccountIds []int32 `protobuf:"zigzag32,1,rep,name=account_ids,json=accountIds" json:"account_ids,omitempty"`
	// Optional list of order statuses that server will notify about.
	// Note: It is not allowed to use any of the following statuses: APPROVE_REQUIRED, APPROVED_BY_EXCHANGE,
	// APPROVE_REJECTED, MATCHED, PARTIALLY_MATCHED, TRADE_BROKEN.
	// The server will notify about all order statuses (except those listed above) if not specified.
	// Associated with shared_1.OrderStatus.Status enum type.
	OrderStatuses []uint32 `protobuf:"varint,2,rep,name=order_statuses,json=orderStatuses" json:"order_statuses,omitempty"`
	// Optional list of transaction statuses that server will notify about.
	// Note: It is not allowed to use any of the following statuses: APPROVING, APPROVE_REQUESTED, APPROVED_BY_EXCHANGE,
	// REJECTED_BY_USER, MATCHED, TRADE_BROKEN, TRADE_AMENDED.
	// The server will notify about all transaction statuses (except those listed above) if not specified.
	// Note: if it's specified along with order_status field only notifications matching both filters will be sent.
	// Associated with shared_1.TransactionStatus.Status enum type.
	TransactionStatuses []uint32 `protobuf:"varint,3,rep,name=transaction_statuses,json=transactionStatuses" json:"transaction_statuses,omitempty"`
	// Custom order event filters.
	Filters []*OrderEventFilter `protobuf:"bytes,4,rep,name=filters" json:"filters,omitempty"`
}

func (x *OrderEventRule) Reset() {
	*x = OrderEventRule{}
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderEventRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderEventRule) ProtoMessage() {}

func (x *OrderEventRule) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderEventRule.ProtoReflect.Descriptor instead.
func (*OrderEventRule) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_rules_1_proto_rawDescGZIP(), []int{5}
}

// Deprecated: Marked as deprecated in protos/WebAPI/rules_1.proto.
func (x *OrderEventRule) GetAccountIds() []int32 {
	if x != nil {
		return x.AccountIds
	}
	return nil
}

func (x *OrderEventRule) GetOrderStatuses() []uint32 {
	if x != nil {
		return x.OrderStatuses
	}
	return nil
}

func (x *OrderEventRule) GetTransactionStatuses() []uint32 {
	if x != nil {
		return x.TransactionStatuses
	}
	return nil
}

func (x *OrderEventRule) GetFilters() []*OrderEventFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

// Condition based rule.
type ConditionRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Rule triggering type, ONE_TIME by default.
	TriggeringType *uint32 `protobuf:"varint,1,opt,name=triggering_type,json=triggeringType" json:"triggering_type,omitempty"`
	// Expression that describes the condition.
	// A logical expression to evaluate.
	// If the expression evaluates to a numeric value then zero value is considered to be false,
	// true otherwise.
	Expression *Expression `protobuf:"bytes,2,req,name=expression" json:"expression,omitempty"`
	// Title of notification to be sent on condition rule triggering.
	// The notification is sent without waiting for all rule's actions to be executed.
	// The length of this field is limited. If the limit is exceeded, maximum allowed length is provided in error message.
	NotificationTitle *TemplateText `protobuf:"bytes,3,opt,name=notification_title,json=notificationTitle" json:"notification_title,omitempty"`
	// Body of notification to be sent on condition rule triggering.
	// The notification is sent without waiting for all rule's actions to be executed.
	// The length of this field is limited. If the limit is exceeded, maximum allowed length is provided in error message.
	// Note that actual notification might also include additional info, e.g. account information
	// for rules based on account variables.
	NotificationBody *TemplateText `protobuf:"bytes,4,opt,name=notification_body,json=notificationBody" json:"notification_body,omitempty"`
	// Condition rule triggering suppression period in seconds.
	// The rule is not triggered more often than once in this period.
	// Server side value is used if omitted in the rule definition (30 seconds by default).
	// Rules with account variables handles this suppression separately for each account.
	// Server has minimal allowed suppression period (5 seconds by default). It is used if lesser
	// value is specified.
	SuppressionPeriod *uint32 `protobuf:"varint,5,opt,name=suppression_period,json=suppressionPeriod" json:"suppression_period,omitempty"`
}

func (x *ConditionRule) Reset() {
	*x = ConditionRule{}
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConditionRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionRule) ProtoMessage() {}

func (x *ConditionRule) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionRule.ProtoReflect.Descriptor instead.
func (*ConditionRule) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_rules_1_proto_rawDescGZIP(), []int{6}
}

func (x *ConditionRule) GetTriggeringType() uint32 {
	if x != nil && x.TriggeringType != nil {
		return *x.TriggeringType
	}
	return 0
}

func (x *ConditionRule) GetExpression() *Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *ConditionRule) GetNotificationTitle() *TemplateText {
	if x != nil {
		return x.NotificationTitle
	}
	return nil
}

func (x *ConditionRule) GetNotificationBody() *TemplateText {
	if x != nil {
		return x.NotificationBody
	}
	return nil
}

func (x *ConditionRule) GetSuppressionPeriod() uint32 {
	if x != nil && x.SuppressionPeriod != nil {
		return *x.SuppressionPeriod
	}
	return 0
}

// Template text.
// For rules with market variables or study symbols "{contract_symbol}" occurrences if present are substituted
// with current contract's symbol in CQG dialect.
type TemplateText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text *string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
}

func (x *TemplateText) Reset() {
	*x = TemplateText{}
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TemplateText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateText) ProtoMessage() {}

func (x *TemplateText) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateText.ProtoReflect.Descriptor instead.
func (*TemplateText) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_rules_1_proto_rawDescGZIP(), []int{7}
}

func (x *TemplateText) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

// Logical, arithmetical or function expression.
// The depth of expression is limited by 10 levels.
// Only variables of the same domain are allowed within a single expression (e.g. only account variables).
type Expression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Expression type.
	// ADD operator is used if neither operator nor function field is specified.
	//
	// Types that are assignable to ExpressionType:
	//
	//	*Expression_Operator_
	//	*Expression_Function
	ExpressionType isExpression_ExpressionType `protobuf_oneof:"expression_type"`
	// Left-hand side operand.
	// Zero constant by default.
	// Used only when operator field is specified and ignored otherwise.
	LeftOperand *Operand `protobuf:"bytes,2,opt,name=left_operand,json=leftOperand" json:"left_operand,omitempty"`
	// Right-hand side operand.
	// Zero constant by default.
	// Not used for unary operations.
	// Used only when operator field is specified and ignored otherwise.
	RightOperand *Operand `protobuf:"bytes,3,opt,name=right_operand,json=rightOperand" json:"right_operand,omitempty"`
	// List of function arguments.
	// Used only when function field is specified and ignored otherwise.
	Arguments []*Operand `protobuf:"bytes,5,rep,name=arguments" json:"arguments,omitempty"`
}

func (x *Expression) Reset() {
	*x = Expression{}
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression) ProtoMessage() {}

func (x *Expression) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression.ProtoReflect.Descriptor instead.
func (*Expression) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_rules_1_proto_rawDescGZIP(), []int{8}
}

func (m *Expression) GetExpressionType() isExpression_ExpressionType {
	if m != nil {
		return m.ExpressionType
	}
	return nil
}

func (x *Expression) GetOperator() uint32 {
	if x, ok := x.GetExpressionType().(*Expression_Operator_); ok {
		return x.Operator
	}
	return 0
}

func (x *Expression) GetFunction() string {
	if x, ok := x.GetExpressionType().(*Expression_Function); ok {
		return x.Function
	}
	return ""
}

func (x *Expression) GetLeftOperand() *Operand {
	if x != nil {
		return x.LeftOperand
	}
	return nil
}

func (x *Expression) GetRightOperand() *Operand {
	if x != nil {
		return x.RightOperand
	}
	return nil
}

func (x *Expression) GetArguments() []*Operand {
	if x != nil {
		return x.Arguments
	}
	return nil
}

type isExpression_ExpressionType interface {
	isExpression_ExpressionType()
}

type Expression_Operator_ struct {
	// Operator of the expression (see left_operand and right_operand fields).
	Operator uint32 `protobuf:"varint,1,opt,name=operator,oneof"`
}

type Expression_Function struct {
	// Function name for the function expression (see arguments field).
	// Please contact CQG to get the list of supported functions.
	Function string `protobuf:"bytes,4,opt,name=function,oneof"`
}

func (*Expression_Operator_) isExpression_ExpressionType() {}

func (*Expression_Function) isExpression_ExpressionType() {}

// Operand for the expression.
// One and only one field is expected.
type Operand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Another expression.
	Expression *Expression `protobuf:"bytes,1,opt,name=expression" json:"expression,omitempty"`
	// Constant value.
	Constant *Constant `protobuf:"bytes,2,opt,name=constant" json:"constant,omitempty"`
	// Market data based variable.
	MarketVariable *MarketVariable `protobuf:"bytes,3,opt,name=market_variable,json=marketVariable" json:"market_variable,omitempty"`
	// Account based variable.
	AccountVariable *AccountVariable `protobuf:"bytes,4,opt,name=account_variable,json=accountVariable" json:"account_variable,omitempty"`
	// Study symbol.
	StudySymbol *StudySymbol `protobuf:"bytes,5,opt,name=study_symbol,json=studySymbol" json:"study_symbol,omitempty"`
}

func (x *Operand) Reset() {
	*x = Operand{}
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Operand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operand) ProtoMessage() {}

func (x *Operand) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operand.ProtoReflect.Descriptor instead.
func (*Operand) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_rules_1_proto_rawDescGZIP(), []int{9}
}

func (x *Operand) GetExpression() *Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *Operand) GetConstant() *Constant {
	if x != nil {
		return x.Constant
	}
	return nil
}

func (x *Operand) GetMarketVariable() *MarketVariable {
	if x != nil {
		return x.MarketVariable
	}
	return nil
}

func (x *Operand) GetAccountVariable() *AccountVariable {
	if x != nil {
		return x.AccountVariable
	}
	return nil
}

func (x *Operand) GetStudySymbol() *StudySymbol {
	if x != nil {
		return x.StudySymbol
	}
	return nil
}

// Constant value.
type Constant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// double value.
	// Note that double operands are compared with epsilon precision. See Operator enum description.
	DoubleValue *float64 `protobuf:"fixed64,1,opt,name=double_value,json=doubleValue" json:"double_value,omitempty"`
	// string value.
	// It can only be used as an argument in function expressions (see Expression.function).
	StringValue *string `protobuf:"bytes,2,opt,name=string_value,json=stringValue" json:"string_value,omitempty"`
}

func (x *Constant) Reset() {
	*x = Constant{}
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Constant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Constant) ProtoMessage() {}

func (x *Constant) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Constant.ProtoReflect.Descriptor instead.
func (*Constant) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_rules_1_proto_rawDescGZIP(), []int{10}
}

func (x *Constant) GetDoubleValue() float64 {
	if x != nil && x.DoubleValue != nil {
		return *x.DoubleValue
	}
	return 0
}

func (x *Constant) GetStringValue() string {
	if x != nil && x.StringValue != nil {
		return *x.StringValue
	}
	return ""
}

// Market data-based variable.
// Number of rules with market variables (price alerts) is limited (10 by default).
type MarketVariable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Symbol pattern to resolve into a contract and use its market data.
	// Symbol must be specified in CQG dialect.
	// It is allowed to specify a relative symbol (e.g. "EP") so that the rule will switch to a new most active
	// contract on a rollover event.
	// If there is no need in contract switching a full contract symbol needs to be specified
	// (e.g. webapi_1.ContractMetadata.cqg_contract_symbol).
	// For option contracts only full symbols are allowed.
	// The rule becomes disabled (see RuleDefinition.enabled field) when the market data on the current contract is
	// no longer available.
	// Multiple market variables can use the same symbol pattern but only one symbol pattern
	// is allowed for a condition rule.
	// It is not allowed to use contracts with non-empty ContractMetadata.contributor_parameters.parameters lists
	// at the moment.
	// This is required field.
	Symbol *string `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	// Type of market variable.
	// This field is associated with MarketVariable.Type enum.
	// This is required field.
	Type *uint32 `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
}

func (x *MarketVariable) Reset() {
	*x = MarketVariable{}
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarketVariable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketVariable) ProtoMessage() {}

func (x *MarketVariable) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketVariable.ProtoReflect.Descriptor instead.
func (*MarketVariable) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_rules_1_proto_rawDescGZIP(), []int{11}
}

func (x *MarketVariable) GetSymbol() string {
	if x != nil && x.Symbol != nil {
		return *x.Symbol
	}
	return ""
}

func (x *MarketVariable) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

// Account based variable.
// Rule with account variables (account alert) is processed and evaluated separately for each available account.
// Accounts excluded from processing:
//   - Omnibus accounts.
//   - Accounts that are members of account groups.
//   - Accounts related to non-derivative brokerages.
//   - Accounts without statement support (without trading_account_2.Account.cleared_by_statements=True).
//   - Accounts that had "Zero positions at the end of the day" option during last account's clearing.
//   - Accounts that had "Zero balances at the end of the day" option during last account's clearing.
//
// Note that there is a common limit on triggering rate among all user's rules with account variables,
// 500 rule triggerings per hour per account by default. If it exceeds, further triggerings are suppressed
// until rate lowers.
// Note: Price based account variable will produce values in USD.
type AccountVariable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of account variable.
	// This is required field.
	// This field is associated with AccountVariable.Type enum.
	Type *uint32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
}

func (x *AccountVariable) Reset() {
	*x = AccountVariable{}
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountVariable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountVariable) ProtoMessage() {}

func (x *AccountVariable) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountVariable.ProtoReflect.Descriptor instead.
func (*AccountVariable) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_rules_1_proto_rawDescGZIP(), []int{12}
}

func (x *AccountVariable) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

// Study symbol.
// Number of rules with study symbols (study alerts) is limited (10 by default).
// Note that study symbols are only allowed in function expressions (see Expression.arguments).
type StudySymbol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Symbol pattern to resolve into a contract and use its market data.
	// Symbol must be specified in CQG dialect.
	// It is allowed to specify a relative symbol (e.g. "EP") so that the rule will switch to a new most active
	// contract on a rollover event.
	// If there is no need in contract switching a full contract symbol needs to be specified
	// (e.g. webapi_1.ContractMetadata.cqg_contract_symbol).
	// For option contracts only full symbols are allowed.
	// The rule becomes disabled (see RuleDefinition.enabled field) when the market data on the current contract is
	// no longer available.
	// This is required field.
	Symbol *string `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
}

func (x *StudySymbol) Reset() {
	*x = StudySymbol{}
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StudySymbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudySymbol) ProtoMessage() {}

func (x *StudySymbol) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudySymbol.ProtoReflect.Descriptor instead.
func (*StudySymbol) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_rules_1_proto_rawDescGZIP(), []int{13}
}

func (x *StudySymbol) GetSymbol() string {
	if x != nil && x.Symbol != nil {
		return *x.Symbol
	}
	return ""
}

// Rule related event.
// It might be related to a triggering of a specific rule or be a general event
// (e.g., indicating too high overall triggering rate).
type RuleEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Event title.
	Title *common.Text `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	// Event body.
	Body *common.Text `protobuf:"bytes,2,opt,name=body" json:"body,omitempty"`
	// Rule ID.
	// Filled when the event is related to specific rule.
	RuleId *string `protobuf:"bytes,3,opt,name=rule_id,json=ruleId" json:"rule_id,omitempty"`
	// Optional notification specific information.
	NotificationProperties []*common.NotificationProperty `protobuf:"bytes,4,rep,name=notification_properties,json=notificationProperties" json:"notification_properties,omitempty"`
	// Event time.
	WhenUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=when_utc_timestamp,json=whenUtcTimestamp" json:"when_utc_timestamp,omitempty"`
	// Optional error details.
	// Filled e.g., if some of rule's actions failed to execute on rule triggering.
	ErrorDetails *common.Text `protobuf:"bytes,6,opt,name=error_details,json=errorDetails" json:"error_details,omitempty"`
	// Rule tags.
	RuleTags []string `protobuf:"bytes,7,rep,name=rule_tags,json=ruleTags" json:"rule_tags,omitempty"`
}

func (x *RuleEvent) Reset() {
	*x = RuleEvent{}
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuleEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleEvent) ProtoMessage() {}

func (x *RuleEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleEvent.ProtoReflect.Descriptor instead.
func (*RuleEvent) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_rules_1_proto_rawDescGZIP(), []int{14}
}

func (x *RuleEvent) GetTitle() *common.Text {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *RuleEvent) GetBody() *common.Text {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *RuleEvent) GetRuleId() string {
	if x != nil && x.RuleId != nil {
		return *x.RuleId
	}
	return ""
}

func (x *RuleEvent) GetNotificationProperties() []*common.NotificationProperty {
	if x != nil {
		return x.NotificationProperties
	}
	return nil
}

func (x *RuleEvent) GetWhenUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.WhenUtcTimestamp
	}
	return nil
}

func (x *RuleEvent) GetErrorDetails() *common.Text {
	if x != nil {
		return x.ErrorDetails
	}
	return nil
}

func (x *RuleEvent) GetRuleTags() []string {
	if x != nil {
		return x.RuleTags
	}
	return nil
}

// Represents configured order rule filter for specific event.
type OrderEventFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filter type.
	// This field is associated with EventFilterType enum.
	// It is required field.
	FilterType *uint32 `protobuf:"varint,1,opt,name=filter_type,json=filterType" json:"filter_type,omitempty"`
	// Custom filter value. (max length = 128).
	// If value is not set, it means subject filtration with empty (not set) value.
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *OrderEventFilter) Reset() {
	*x = OrderEventFilter{}
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderEventFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderEventFilter) ProtoMessage() {}

func (x *OrderEventFilter) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderEventFilter.ProtoReflect.Descriptor instead.
func (*OrderEventFilter) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_rules_1_proto_rawDescGZIP(), []int{15}
}

func (x *OrderEventFilter) GetFilterType() uint32 {
	if x != nil && x.FilterType != nil {
		return *x.FilterType
	}
	return 0
}

func (x *OrderEventFilter) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// Create or update a rule.
// Note that update of a condition rule may trigger rule actions if rule expression is evaluated to true initially,
// even if the rule triggered in the past with the same expression and it is still true.
// In this case you may use ModifyRuleRequest to avoid extra triggerings.
type SetRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Definition of the rule.
	// The complete definition is expected
	// regardless if these are new rules of updates.
	RuleDefinition *RuleDefinition `protobuf:"bytes,1,req,name=rule_definition,json=ruleDefinition" json:"rule_definition,omitempty"`
}

func (x *SetRuleRequest) Reset() {
	*x = SetRuleRequest{}
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRuleRequest) ProtoMessage() {}

func (x *SetRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRuleRequest.ProtoReflect.Descriptor instead.
func (*SetRuleRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_rules_1_proto_rawDescGZIP(), []int{16}
}

func (x *SetRuleRequest) GetRuleDefinition() *RuleDefinition {
	if x != nil {
		return x.RuleDefinition
	}
	return nil
}

// Result of set rule operation.
type SetRuleResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetRuleResult) Reset() {
	*x = SetRuleResult{}
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRuleResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRuleResult) ProtoMessage() {}

func (x *SetRuleResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRuleResult.ProtoReflect.Descriptor instead.
func (*SetRuleResult) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_rules_1_proto_rawDescGZIP(), []int{17}
}

// Lightweight rule modification.
// The request contains part of rule definition that can be modified without affecting rule execution.
type ModifyRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Client ID of the rule.
	RuleId *string `protobuf:"bytes,1,req,name=rule_id,json=ruleId" json:"rule_id,omitempty"`
	// List of actions for rule execution.
	// If present, the list of actions in rule definition will be replaced by the given actions.
	// If omitted (empty), this list of actions will not change.
	Actions []*Action `protobuf:"bytes,2,rep,name=actions" json:"actions,omitempty"`
	// Rule revision to check before executing the request.
	// The request will fail if the rule was modified and its rule revision changed.
	// Optional. If omitted, rule revision is not checked.
	// Internal field. Rule revisions are currently not available for external clients.
	RuleRevision *uint64 `protobuf:"varint,3,opt,name=rule_revision,json=ruleRevision" json:"rule_revision,omitempty"`
}

func (x *ModifyRuleRequest) Reset() {
	*x = ModifyRuleRequest{}
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifyRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyRuleRequest) ProtoMessage() {}

func (x *ModifyRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyRuleRequest.ProtoReflect.Descriptor instead.
func (*ModifyRuleRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_rules_1_proto_rawDescGZIP(), []int{18}
}

func (x *ModifyRuleRequest) GetRuleId() string {
	if x != nil && x.RuleId != nil {
		return *x.RuleId
	}
	return ""
}

func (x *ModifyRuleRequest) GetActions() []*Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *ModifyRuleRequest) GetRuleRevision() uint64 {
	if x != nil && x.RuleRevision != nil {
		return *x.RuleRevision
	}
	return 0
}

// Result of rule modification operation.
type ModifyRuleResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ModifyRuleResult) Reset() {
	*x = ModifyRuleResult{}
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifyRuleResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyRuleResult) ProtoMessage() {}

func (x *ModifyRuleResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyRuleResult.ProtoReflect.Descriptor instead.
func (*ModifyRuleResult) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_rules_1_proto_rawDescGZIP(), []int{19}
}

// Delete a rule.
type DeleteRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Rule to delete.
	RuleId *string `protobuf:"bytes,1,req,name=rule_id,json=ruleId" json:"rule_id,omitempty"`
	// Rule revision to check before executing the request.
	// The request will fail if the rule was modified and its rule revision changed.
	// Optional. If omitted, rule revision is not checked.
	// Internal field. Rule revisions are currently not available for external clients.
	RuleRevision *uint64 `protobuf:"varint,2,opt,name=rule_revision,json=ruleRevision" json:"rule_revision,omitempty"`
}

func (x *DeleteRuleRequest) Reset() {
	*x = DeleteRuleRequest{}
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRuleRequest) ProtoMessage() {}

func (x *DeleteRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRuleRequest.ProtoReflect.Descriptor instead.
func (*DeleteRuleRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_rules_1_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteRuleRequest) GetRuleId() string {
	if x != nil && x.RuleId != nil {
		return *x.RuleId
	}
	return ""
}

func (x *DeleteRuleRequest) GetRuleRevision() uint64 {
	if x != nil && x.RuleRevision != nil {
		return *x.RuleRevision
	}
	return 0
}

// Result of delete rule operation.
type DeleteRuleResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteRuleResult) Reset() {
	*x = DeleteRuleResult{}
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRuleResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRuleResult) ProtoMessage() {}

func (x *DeleteRuleResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRuleResult.ProtoReflect.Descriptor instead.
func (*DeleteRuleResult) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_rules_1_proto_rawDescGZIP(), []int{21}
}

// Get a list of rules.
type RuleListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RuleListRequest) Reset() {
	*x = RuleListRequest{}
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuleListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleListRequest) ProtoMessage() {}

func (x *RuleListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleListRequest.ProtoReflect.Descriptor instead.
func (*RuleListRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_rules_1_proto_rawDescGZIP(), []int{22}
}

// Result of rule list request.
// If request does not contain 'subscribe' field or if it is set to true, this message contains all user's rules,
// 'is_snapshot' field is set to true.
// This message is also sent to notify about updated rules if there is active rule list subscription.
// In this case message contains updated rules only, 'is_snapshot' field is omitted.
// Note: If client received RESULT_CODE_DISCONNECTED result code for rule list subscription for some reason,
// subscription will be restored later and client will receive a new RuleResult message, containing
// RESULT_CODE_SUBSCRIBED result code and RuleListResult message with actual list of rules
// and 'is_snapshot' field set to true.
type RuleListResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Rule list.
	// Clients have to be ready to receive rules that they cannot recognize
	// and ignore them. They must not remove or update unknown rules since they
	// can be used by different applications or different versions of the same application.
	RuleDefinitions []*RuleDefinition `protobuf:"bytes,1,rep,name=rule_definitions,json=ruleDefinitions" json:"rule_definitions,omitempty"`
	// If set to true, rule_definitions contains all found rules.
	// If omitted, rule_definitions contain changed rules only.
	IsSnapshot *bool `protobuf:"varint,2,opt,name=is_snapshot,json=isSnapshot" json:"is_snapshot,omitempty"`
}

func (x *RuleListResult) Reset() {
	*x = RuleListResult{}
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuleListResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleListResult) ProtoMessage() {}

func (x *RuleListResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleListResult.ProtoReflect.Descriptor instead.
func (*RuleListResult) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_rules_1_proto_rawDescGZIP(), []int{23}
}

func (x *RuleListResult) GetRuleDefinitions() []*RuleDefinition {
	if x != nil {
		return x.RuleDefinitions
	}
	return nil
}

func (x *RuleListResult) GetIsSnapshot() bool {
	if x != nil && x.IsSnapshot != nil {
		return *x.IsSnapshot
	}
	return false
}

// Request for rule event history.
// The history is limited to 30 last days.
type RuleEventHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Start point for the history request, inclusive.
	// Maximum allowed history is returned if omitted.
	FromUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=from_utc_timestamp,json=fromUtcTimestamp" json:"from_utc_timestamp,omitempty"`
	// Stop point for the history request, inclusive.
	// History up till now is returned if omitted.
	ToUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=to_utc_timestamp,json=toUtcTimestamp" json:"to_utc_timestamp,omitempty"`
	// Filter events by rule tags.
	// Result contains events, triggered by rules with tags, containing at least one tag from this list.
	// All events are returned if omitted.
	// Number of tags is limited. If limit is exceeded, maximum allowed number of tags is provided in error message.
	RuleTags []string `protobuf:"bytes,3,rep,name=rule_tags,json=ruleTags" json:"rule_tags,omitempty"`
}

func (x *RuleEventHistoryRequest) Reset() {
	*x = RuleEventHistoryRequest{}
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuleEventHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleEventHistoryRequest) ProtoMessage() {}

func (x *RuleEventHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleEventHistoryRequest.ProtoReflect.Descriptor instead.
func (*RuleEventHistoryRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_rules_1_proto_rawDescGZIP(), []int{24}
}

func (x *RuleEventHistoryRequest) GetFromUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.FromUtcTimestamp
	}
	return nil
}

func (x *RuleEventHistoryRequest) GetToUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ToUtcTimestamp
	}
	return nil
}

func (x *RuleEventHistoryRequest) GetRuleTags() []string {
	if x != nil {
		return x.RuleTags
	}
	return nil
}

// Result of rule event history request.
type RuleEventHistoryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of rule events.
	RuleEvents []*RuleEvent `protobuf:"bytes,1,rep,name=rule_events,json=ruleEvents" json:"rule_events,omitempty"`
	// True means that this is the last message for the request.
	// False or empty means that more messages are expected.
	Complete *bool `protobuf:"varint,2,opt,name=complete" json:"complete,omitempty"`
}

func (x *RuleEventHistoryResult) Reset() {
	*x = RuleEventHistoryResult{}
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuleEventHistoryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleEventHistoryResult) ProtoMessage() {}

func (x *RuleEventHistoryResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleEventHistoryResult.ProtoReflect.Descriptor instead.
func (*RuleEventHistoryResult) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_rules_1_proto_rawDescGZIP(), []int{25}
}

func (x *RuleEventHistoryResult) GetRuleEvents() []*RuleEvent {
	if x != nil {
		return x.RuleEvents
	}
	return nil
}

func (x *RuleEventHistoryResult) GetComplete() bool {
	if x != nil && x.Complete != nil {
		return *x.Complete
	}
	return false
}

// Request subscription to rules events.
// If RuleRequest message contains this request, it must contain "subscribe" field with true or false value.
// Otherwise the message is considered as invalid.
// Note: it does not response with events snapshot.
// Instead, it starts to send the rule events triggered after subscription.
// For events snapshot use RuleEventHistoryRequest.
// Note: if RESULT_CODE_DISCONNECTED status is received while the subscription is already established,
// client may lose some events, because they will not be resent later when RESULT_CODE_SUBSCRIBED status is received
// again. It's necessary to use RuleEventHistoryRequest request to get events snapshot.
type RuleEventSubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filter events by rule tags.
	// Result contains events, triggered by rules with tags, containing at least one tag from this list.
	// All events are returned if omitted.
	// Number of tags is limited. If limit is exceeded, maximum allowed number of tags is provided in error message.
	RuleTags []string `protobuf:"bytes,1,rep,name=rule_tags,json=ruleTags" json:"rule_tags,omitempty"`
}

func (x *RuleEventSubscription) Reset() {
	*x = RuleEventSubscription{}
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuleEventSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleEventSubscription) ProtoMessage() {}

func (x *RuleEventSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleEventSubscription.ProtoReflect.Descriptor instead.
func (*RuleEventSubscription) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_rules_1_proto_rawDescGZIP(), []int{26}
}

func (x *RuleEventSubscription) GetRuleTags() []string {
	if x != nil {
		return x.RuleTags
	}
	return nil
}

// Response for RuleEventSubscription.
// Note: if RuleEventHistoryRequest and RuleEventSubscription requests are sent with small interval between them,
// their responses (RuleEventHistoryResult and RuleEventSubscriptionStatus) may contain some duplicated events.
// To identify duplicates use
// (RuleEvent.rule_id, RuleEvent.when_utc_timestamp, RuleEvent.notification_properties["event_id"]) fields.
type RuleEventSubscriptionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of rule events.
	RuleEvents []*RuleEvent `protobuf:"bytes,1,rep,name=rule_events,json=ruleEvents" json:"rule_events,omitempty"`
}

func (x *RuleEventSubscriptionStatus) Reset() {
	*x = RuleEventSubscriptionStatus{}
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuleEventSubscriptionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleEventSubscriptionStatus) ProtoMessage() {}

func (x *RuleEventSubscriptionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleEventSubscriptionStatus.ProtoReflect.Descriptor instead.
func (*RuleEventSubscriptionStatus) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_rules_1_proto_rawDescGZIP(), []int{27}
}

func (x *RuleEventSubscriptionStatus) GetRuleEvents() []*RuleEvent {
	if x != nil {
		return x.RuleEvents
	}
	return nil
}

// Create or modify a destination group.
type CreateOrModifyDestinationGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the group to modify or create if it does not exist.
	DestinationGroupId *string `protobuf:"bytes,1,req,name=destination_group_id,json=destinationGroupId" json:"destination_group_id,omitempty"`
	// Destination to remove from the group.
	// If it is not found among the existing ones, it is ignored.
	// Destination is identified by the following set of parameters:
	// (device_token, app_id) for ApplePushNotif,
	// (registration_token, sender_id) for GooglePushNotif,
	// (recipients) for EmailNotif,
	// (phone_number) for SmsNotif.
	// Note: either this or destination_to_add_or_update field must be specified.
	DestinationToRemove *common.Destination `protobuf:"bytes,2,opt,name=destination_to_remove,json=destinationToRemove" json:"destination_to_remove,omitempty"`
	// Destination to add or update in the group.
	// Existing member in the group referring the same destination will be overwritten.
	// See comment of destination_to_remove field of how destinations are identified.
	DestinationToAddOrUpdate *common.Destination `protobuf:"bytes,3,opt,name=destination_to_add_or_update,json=destinationToAddOrUpdate" json:"destination_to_add_or_update,omitempty"`
}

func (x *CreateOrModifyDestinationGroupRequest) Reset() {
	*x = CreateOrModifyDestinationGroupRequest{}
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrModifyDestinationGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrModifyDestinationGroupRequest) ProtoMessage() {}

func (x *CreateOrModifyDestinationGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrModifyDestinationGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateOrModifyDestinationGroupRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_rules_1_proto_rawDescGZIP(), []int{28}
}

func (x *CreateOrModifyDestinationGroupRequest) GetDestinationGroupId() string {
	if x != nil && x.DestinationGroupId != nil {
		return *x.DestinationGroupId
	}
	return ""
}

func (x *CreateOrModifyDestinationGroupRequest) GetDestinationToRemove() *common.Destination {
	if x != nil {
		return x.DestinationToRemove
	}
	return nil
}

func (x *CreateOrModifyDestinationGroupRequest) GetDestinationToAddOrUpdate() *common.Destination {
	if x != nil {
		return x.DestinationToAddOrUpdate
	}
	return nil
}

// Result of create or modify destination group operation.
type CreateOrModifyDestinationGroupResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateOrModifyDestinationGroupResult) Reset() {
	*x = CreateOrModifyDestinationGroupResult{}
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrModifyDestinationGroupResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrModifyDestinationGroupResult) ProtoMessage() {}

func (x *CreateOrModifyDestinationGroupResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrModifyDestinationGroupResult.ProtoReflect.Descriptor instead.
func (*CreateOrModifyDestinationGroupResult) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_rules_1_proto_rawDescGZIP(), []int{29}
}

// Lists destination groups.
type DestinationGroupListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DestinationGroupListRequest) Reset() {
	*x = DestinationGroupListRequest{}
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DestinationGroupListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestinationGroupListRequest) ProtoMessage() {}

func (x *DestinationGroupListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestinationGroupListRequest.ProtoReflect.Descriptor instead.
func (*DestinationGroupListRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_rules_1_proto_rawDescGZIP(), []int{30}
}

// Result of list destination group operation.
type DestinationGroupListResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of available destination groups.
	DestinationGroups []*DestinationGroup `protobuf:"bytes,1,rep,name=destination_groups,json=destinationGroups" json:"destination_groups,omitempty"`
}

func (x *DestinationGroupListResult) Reset() {
	*x = DestinationGroupListResult{}
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DestinationGroupListResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestinationGroupListResult) ProtoMessage() {}

func (x *DestinationGroupListResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestinationGroupListResult.ProtoReflect.Descriptor instead.
func (*DestinationGroupListResult) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_rules_1_proto_rawDescGZIP(), []int{31}
}

func (x *DestinationGroupListResult) GetDestinationGroups() []*DestinationGroup {
	if x != nil {
		return x.DestinationGroups
	}
	return nil
}

// Group of destinations.
// Multiple rules can have the same destination group. A group can be modified independently on rules which using it.
type DestinationGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the group.
	DestinationGroupId *string `protobuf:"bytes,1,req,name=destination_group_id,json=destinationGroupId" json:"destination_group_id,omitempty"`
	// List of destinations in the group.
	Destinations []*common.Destination `protobuf:"bytes,2,rep,name=destinations" json:"destinations,omitempty"`
}

func (x *DestinationGroup) Reset() {
	*x = DestinationGroup{}
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DestinationGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestinationGroup) ProtoMessage() {}

func (x *DestinationGroup) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestinationGroup.ProtoReflect.Descriptor instead.
func (*DestinationGroup) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_rules_1_proto_rawDescGZIP(), []int{32}
}

func (x *DestinationGroup) GetDestinationGroupId() string {
	if x != nil && x.DestinationGroupId != nil {
		return *x.DestinationGroupId
	}
	return ""
}

func (x *DestinationGroup) GetDestinations() []*common.Destination {
	if x != nil {
		return x.Destinations
	}
	return nil
}

// Update destination expiration time.
// The request must be sent regularly (e.g., daily, after logon) for current user's device.
// The request should be sent before or together with request that adds the destination to a rule or destination group.
// Destination expiration time is set to 2 months by default (configurable) after receiving the request.
// When destination expires, the server deletes it from rules and destination groups:
//   - If the list of actions in a rule becomes emtpy, the server deletes the rule;
//   - If a destination group becomes empty, the server leaves it as is.
//
// Thus, the server never deletes a rule that has a destination group (including empty group)
// or a destination that does not expire (e.g., email_notif or profile_sms_notif).
type UpdateDestinationExpirationTimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Destination:
	//
	//	*UpdateDestinationExpirationTimeRequest_ApplePushNotif
	//	*UpdateDestinationExpirationTimeRequest_GooglePushNotif
	Destination isUpdateDestinationExpirationTimeRequest_Destination `protobuf_oneof:"destination"`
}

func (x *UpdateDestinationExpirationTimeRequest) Reset() {
	*x = UpdateDestinationExpirationTimeRequest{}
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDestinationExpirationTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDestinationExpirationTimeRequest) ProtoMessage() {}

func (x *UpdateDestinationExpirationTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDestinationExpirationTimeRequest.ProtoReflect.Descriptor instead.
func (*UpdateDestinationExpirationTimeRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_rules_1_proto_rawDescGZIP(), []int{33}
}

func (m *UpdateDestinationExpirationTimeRequest) GetDestination() isUpdateDestinationExpirationTimeRequest_Destination {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (x *UpdateDestinationExpirationTimeRequest) GetApplePushNotif() *common.ApplePushNotif {
	if x, ok := x.GetDestination().(*UpdateDestinationExpirationTimeRequest_ApplePushNotif); ok {
		return x.ApplePushNotif
	}
	return nil
}

func (x *UpdateDestinationExpirationTimeRequest) GetGooglePushNotif() *common.GooglePushNotif {
	if x, ok := x.GetDestination().(*UpdateDestinationExpirationTimeRequest_GooglePushNotif); ok {
		return x.GooglePushNotif
	}
	return nil
}

type isUpdateDestinationExpirationTimeRequest_Destination interface {
	isUpdateDestinationExpirationTimeRequest_Destination()
}

type UpdateDestinationExpirationTimeRequest_ApplePushNotif struct {
	// APN destination (for iOS devices).
	ApplePushNotif *common.ApplePushNotif `protobuf:"bytes,1,opt,name=apple_push_notif,json=applePushNotif,oneof"`
}

type UpdateDestinationExpirationTimeRequest_GooglePushNotif struct {
	// GCM destination (for Android devices).
	GooglePushNotif *common.GooglePushNotif `protobuf:"bytes,2,opt,name=google_push_notif,json=googlePushNotif,oneof"`
}

func (*UpdateDestinationExpirationTimeRequest_ApplePushNotif) isUpdateDestinationExpirationTimeRequest_Destination() {
}

func (*UpdateDestinationExpirationTimeRequest_GooglePushNotif) isUpdateDestinationExpirationTimeRequest_Destination() {
}

// Result of update destination expiration time operation.
type UpdateDestinationExpirationTimeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateDestinationExpirationTimeResult) Reset() {
	*x = UpdateDestinationExpirationTimeResult{}
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDestinationExpirationTimeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDestinationExpirationTimeResult) ProtoMessage() {}

func (x *UpdateDestinationExpirationTimeResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_rules_1_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDestinationExpirationTimeResult.ProtoReflect.Descriptor instead.
func (*UpdateDestinationExpirationTimeResult) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_rules_1_proto_rawDescGZIP(), []int{34}
}

var File_protos_WebAPI_rules_1_proto protoreflect.FileDescriptor

var file_protos_WebAPI_rules_1_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49, 0x2f,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x5f, 0x31, 0x1a, 0x23, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57,
	0x65, 0x62, 0x41, 0x50, 0x49, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x5f, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xad, 0x07, 0x0a,
	0x0b, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x41, 0x0a, 0x10, 0x73, 0x65, 0x74,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x31, 0x2e, 0x53, 0x65,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x73, 0x65,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x13,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x5f, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x11, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f, 0x72, 0x75, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x1a, 0x72, 0x75,
	0x6c, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x17, 0x72, 0x75, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x17, 0x72, 0x75, 0x6c,
	0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x5f, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x72, 0x75, 0x6c, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x89, 0x01, 0x0a, 0x2a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x5f,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x25, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a,
	0x1e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x31, 0x2e,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x1b, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x8b, 0x01, 0x0a, 0x2a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x26,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0x80, 0x09, 0x0a,
	0x0a, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3e, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0d, 0x73, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x47, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x10, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x47,
	0x0a, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x5f, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x41, 0x0a, 0x10, 0x72, 0x75, 0x6c, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0e, 0x72, 0x75, 0x6c, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x5a, 0x0a, 0x19, 0x72, 0x75,
	0x6c, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x16,
	0x72, 0x75, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x69, 0x0a, 0x1e, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x1b, 0x72, 0x75, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x86, 0x01, 0x0a, 0x29, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x5f,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x24, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x66, 0x0a, 0x1d, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x1a, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x88, 0x01, 0x0a, 0x29, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x25, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xa9, 0x01,
	0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x13,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45,
	0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x65, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x22,
	0xae, 0x03, 0x0a, 0x0e, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x75, 0x6c, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x75, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x5f, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x41, 0x0a, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x5f, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04,
	0x22, 0xa5, 0x01, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0c, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x31, 0x2e, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x67, 0x6f, 0x5f, 0x66,
	0x6c, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x5f, 0x31, 0x2e, 0x47, 0x6f, 0x46, 0x6c, 0x61, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x67, 0x6f, 0x46, 0x6c, 0x61, 0x74, 0x22, 0x0e, 0x0a, 0x0c, 0x47, 0x6f, 0x46, 0x6c,
	0x61, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc4, 0x01, 0x0a, 0x0e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0b, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x11,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x5f, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22,
	0xf0, 0x02, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x44, 0x0a, 0x12, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x5f, 0x31, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x78, 0x74, 0x52, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x42, 0x0a, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x31, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x10, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x75, 0x70,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x48, 0x0a, 0x0e, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x52,
	0x49, 0x47, 0x47, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4e,
	0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x52, 0x49, 0x47,
	0x47, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f,
	0x10, 0x01, 0x22, 0x22, 0x0a, 0x0c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x98, 0x04, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x33, 0x0a, 0x0c, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f,
	0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x0b, 0x6c, 0x65, 0x66, 0x74, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x35, 0x0a, 0x0d, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x52,
	0x0c, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x2e, 0x0a,
	0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x9e, 0x02,
	0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x52, 0x41, 0x43,
	0x54, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f,
	0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x44, 0x49, 0x56, 0x49, 0x44, 0x45, 0x10, 0x03, 0x12,
	0x11, 0x0a, 0x0d, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4c, 0x45, 0x53, 0x53,
	0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4c,
	0x45, 0x53, 0x53, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x0c, 0x12,
	0x16, 0x0a, 0x12, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x12, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x4f, 0x52, 0x5f, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41,
	0x4c, 0x10, 0x0d, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f,
	0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x10, 0x0e, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x10, 0x0f, 0x12, 0x10, 0x0a, 0x0c, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x4e, 0x44, 0x10, 0x10, 0x12, 0x0f, 0x0a,
	0x0b, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x10, 0x11, 0x42, 0x11,
	0x0a, 0x0f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x22, 0xad, 0x02, 0x0a, 0x07, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x33, 0x0a,
	0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x12, 0x40, 0x0a, 0x0f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x5f, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x43, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x0b, 0x73, 0x74, 0x75, 0x64, 0x79, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x22, 0x50, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xa3, 0x02, 0x0a, 0x0e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0xe4, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x4e,
	0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x4e,
	0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x43, 0x10, 0x02, 0x12, 0x19,
	0x0a, 0x15, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x44,
	0x45, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x56, 0x4f, 0x4c,
	0x55, 0x4d, 0x45, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x56, 0x4f, 0x4c,
	0x55, 0x4d, 0x45, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x49,
	0x44, 0x5f, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x50, 0x52, 0x45, 0x41, 0x44, 0x10, 0x06, 0x12, 0x14,
	0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x4f, 0x44, 0x41, 0x59, 0x53, 0x5f, 0x48, 0x49,
	0x47, 0x48, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x4f, 0x44,
	0x41, 0x59, 0x53, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x08, 0x22, 0xf0, 0x05, 0x0a, 0x0f, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0xc2, 0x05, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x4d,
	0x41, 0x52, 0x47, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x10,
	0x02, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41,
	0x53, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x54, 0x45, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4f, 0x54, 0x45, 0x5f, 0x55, 0x50, 0x4c, 0x10, 0x1a, 0x12, 0x28, 0x0a, 0x24,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f,
	0x4c, 0x4f, 0x53, 0x53, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x5f,
	0x4c, 0x4f, 0x53, 0x53, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x56, 0x4f, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4c, 0x56,
	0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x56, 0x46, 0x10, 0x08,
	0x12, 0x16, 0x0a, 0x12, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f,
	0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x53, 0x53, 0x10, 0x0a,
	0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x53, 0x48, 0x5f, 0x45, 0x58,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x0b, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x0d,
	0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x54, 0x5f,
	0x4c, 0x4f, 0x53, 0x53, 0x10, 0x0e, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x52, 0x45, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x54,
	0x5f, 0x4c, 0x4f, 0x53, 0x53, 0x10, 0x0f, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4f, 0x54, 0x45, 0x5f, 0x55, 0x50, 0x4c, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x50, 0x4c, 0x10, 0x10,
	0x12, 0x1a, 0x0a, 0x16, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x59, 0x45, 0x53, 0x54, 0x45, 0x52, 0x44,
	0x41, 0x59, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x11, 0x12, 0x16, 0x0a, 0x12,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x59, 0x45, 0x53, 0x54, 0x45, 0x52, 0x44, 0x41, 0x59, 0x5f, 0x4f,
	0x54, 0x45, 0x10, 0x17, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x59, 0x45, 0x53,
	0x54, 0x45, 0x52, 0x44, 0x41, 0x59, 0x5f, 0x4d, 0x56, 0x4f, 0x10, 0x18, 0x12, 0x1d, 0x0a, 0x19,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x59, 0x45, 0x53, 0x54, 0x45, 0x52, 0x44, 0x41, 0x59, 0x5f, 0x43,
	0x4f, 0x4c, 0x4c, 0x41, 0x54, 0x45, 0x52, 0x41, 0x4c, 0x10, 0x0c, 0x12, 0x16, 0x0a, 0x12, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50,
	0x43, 0x10, 0x19, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x4f, 0x54, 0x41,
	0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x51, 0x54, 0x59, 0x10, 0x12, 0x12, 0x1c,
	0x0a, 0x18, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x4c,
	0x4c, 0x45, 0x44, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x53, 0x10, 0x13, 0x12, 0x20, 0x0a, 0x1c,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x51, 0x54, 0x59, 0x10, 0x14, 0x12, 0x21,
	0x0a, 0x1d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x5f, 0x4f, 0x50, 0x45,
	0x4e, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x51, 0x54, 0x59, 0x10,
	0x15, 0x12, 0x33, 0x0a, 0x2f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x5f, 0x44, 0x41,
	0x59, 0x53, 0x5f, 0x54, 0x49, 0x4c, 0x4c, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x16, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x25, 0x0a, 0x0b,
	0x53, 0x74, 0x75, 0x64, 0x79, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x22, 0xe3, 0x02, 0x0a, 0x09, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x24, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x31,
	0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x72,
	0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x75,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x17, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x31,
	0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x16, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x48, 0x0a,
	0x12, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x77, 0x68, 0x65, 0x6e, 0x55, 0x74, 0x63, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x33, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0c,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x75, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x73, 0x22, 0x49, 0x0a, 0x10, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a,
	0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x52, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x72, 0x75, 0x6c, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x0f, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x7c, 0x0a, 0x11, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x5f, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x12, 0x0a, 0x10, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x51, 0x0a, 0x11, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x75, 0x6c,
	0x65, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x72, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x12,
	0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x17, 0x0a, 0x0f, 0x52, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x75, 0x0a, 0x0e, 0x52,
	0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x42, 0x0a,
	0x10, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f,
	0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0f, 0x72, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x22, 0xc6, 0x01, 0x0a, 0x17, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48,
	0x0a, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x74, 0x63, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x44, 0x0a, 0x10, 0x74, 0x6f, 0x5f, 0x75,
	0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e,
	0x74, 0x6f, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x73, 0x22, 0x69, 0x0a, 0x16, 0x52,
	0x75, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x0b, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x5f, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0a,
	0x72, 0x75, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x34, 0x0a, 0x15, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x73, 0x22, 0x52, 0x0a, 0x1b,
	0x52, 0x75, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x0b, 0x72,
	0x75, 0x6c, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x72, 0x75, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0xfb, 0x01, 0x0a, 0x25, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x15,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x5f, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x55, 0x0a, 0x1c, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x6f, 0x72,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x26,
	0x0a, 0x24, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x1d, 0x0a, 0x1b, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x66, 0x0a, 0x1a, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x48, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x11, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x7f, 0x0a,
	0x10, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x5f, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xc6,
	0x01, 0x0a, 0x26, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x10, 0x61, 0x70, 0x70,
	0x6c, 0x65, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x31, 0x2e, 0x41,
	0x70, 0x70, 0x6c, 0x65, 0x50, 0x75, 0x73, 0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x48, 0x00, 0x52,
	0x0e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x50, 0x75, 0x73, 0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x12,
	0x47, 0x0a, 0x11, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x5f, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x50, 0x75, 0x73, 0x68,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x48, 0x00, 0x52, 0x0f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x50,
	0x75, 0x73, 0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x42, 0x0d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x27, 0x0a, 0x25, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x2a, 0x42, 0x0a, 0x14, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x26, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x4f, 0x52, 0x5f,
	0x49, 0x44, 0x10, 0x01, 0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49,
}

var (
	file_protos_WebAPI_rules_1_proto_rawDescOnce sync.Once
	file_protos_WebAPI_rules_1_proto_rawDescData = file_protos_WebAPI_rules_1_proto_rawDesc
)

func file_protos_WebAPI_rules_1_proto_rawDescGZIP() []byte {
	file_protos_WebAPI_rules_1_proto_rawDescOnce.Do(func() {
		file_protos_WebAPI_rules_1_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_WebAPI_rules_1_proto_rawDescData)
	})
	return file_protos_WebAPI_rules_1_proto_rawDescData
}

var file_protos_WebAPI_rules_1_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_protos_WebAPI_rules_1_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_protos_WebAPI_rules_1_proto_goTypes = []any{
	(OrderEventFilterType)(0),                      // 0: rules_1.OrderEventFilterType
	(RuleResult_ResultCode)(0),                     // 1: rules_1.RuleResult.ResultCode
	(ConditionRule_TriggeringType)(0),              // 2: rules_1.ConditionRule.TriggeringType
	(Expression_Operator)(0),                       // 3: rules_1.Expression.Operator
	(MarketVariable_Type)(0),                       // 4: rules_1.MarketVariable.Type
	(AccountVariable_Type)(0),                      // 5: rules_1.AccountVariable.Type
	(*RuleRequest)(nil),                            // 6: rules_1.RuleRequest
	(*RuleResult)(nil),                             // 7: rules_1.RuleResult
	(*RuleDefinition)(nil),                         // 8: rules_1.RuleDefinition
	(*Action)(nil),                                 // 9: rules_1.Action
	(*GoFlatAction)(nil),                           // 10: rules_1.GoFlatAction
	(*OrderEventRule)(nil),                         // 11: rules_1.OrderEventRule
	(*ConditionRule)(nil),                          // 12: rules_1.ConditionRule
	(*TemplateText)(nil),                           // 13: rules_1.TemplateText
	(*Expression)(nil),                             // 14: rules_1.Expression
	(*Operand)(nil),                                // 15: rules_1.Operand
	(*Constant)(nil),                               // 16: rules_1.Constant
	(*MarketVariable)(nil),                         // 17: rules_1.MarketVariable
	(*AccountVariable)(nil),                        // 18: rules_1.AccountVariable
	(*StudySymbol)(nil),                            // 19: rules_1.StudySymbol
	(*RuleEvent)(nil),                              // 20: rules_1.RuleEvent
	(*OrderEventFilter)(nil),                       // 21: rules_1.OrderEventFilter
	(*SetRuleRequest)(nil),                         // 22: rules_1.SetRuleRequest
	(*SetRuleResult)(nil),                          // 23: rules_1.SetRuleResult
	(*ModifyRuleRequest)(nil),                      // 24: rules_1.ModifyRuleRequest
	(*ModifyRuleResult)(nil),                       // 25: rules_1.ModifyRuleResult
	(*DeleteRuleRequest)(nil),                      // 26: rules_1.DeleteRuleRequest
	(*DeleteRuleResult)(nil),                       // 27: rules_1.DeleteRuleResult
	(*RuleListRequest)(nil),                        // 28: rules_1.RuleListRequest
	(*RuleListResult)(nil),                         // 29: rules_1.RuleListResult
	(*RuleEventHistoryRequest)(nil),                // 30: rules_1.RuleEventHistoryRequest
	(*RuleEventHistoryResult)(nil),                 // 31: rules_1.RuleEventHistoryResult
	(*RuleEventSubscription)(nil),                  // 32: rules_1.RuleEventSubscription
	(*RuleEventSubscriptionStatus)(nil),            // 33: rules_1.RuleEventSubscriptionStatus
	(*CreateOrModifyDestinationGroupRequest)(nil),  // 34: rules_1.CreateOrModifyDestinationGroupRequest
	(*CreateOrModifyDestinationGroupResult)(nil),   // 35: rules_1.CreateOrModifyDestinationGroupResult
	(*DestinationGroupListRequest)(nil),            // 36: rules_1.DestinationGroupListRequest
	(*DestinationGroupListResult)(nil),             // 37: rules_1.DestinationGroupListResult
	(*DestinationGroup)(nil),                       // 38: rules_1.DestinationGroup
	(*UpdateDestinationExpirationTimeRequest)(nil), // 39: rules_1.UpdateDestinationExpirationTimeRequest
	(*UpdateDestinationExpirationTimeResult)(nil),  // 40: rules_1.UpdateDestinationExpirationTimeResult
	(*common.Text)(nil),                            // 41: shared_1.Text
	(*common.NamedValue)(nil),                      // 42: shared_1.NamedValue
	(*timestamppb.Timestamp)(nil),                  // 43: google.protobuf.Timestamp
	(*common.Destination)(nil),                     // 44: shared_1.Destination
	(*common.NotificationProperty)(nil),            // 45: shared_1.NotificationProperty
	(*common.ApplePushNotif)(nil),                  // 46: shared_1.ApplePushNotif
	(*common.GooglePushNotif)(nil),                 // 47: shared_1.GooglePushNotif
}
var file_protos_WebAPI_rules_1_proto_depIdxs = []int32{
	22, // 0: rules_1.RuleRequest.set_rule_request:type_name -> rules_1.SetRuleRequest
	24, // 1: rules_1.RuleRequest.modify_rule_request:type_name -> rules_1.ModifyRuleRequest
	26, // 2: rules_1.RuleRequest.delete_rule_request:type_name -> rules_1.DeleteRuleRequest
	28, // 3: rules_1.RuleRequest.rule_list_request:type_name -> rules_1.RuleListRequest
	30, // 4: rules_1.RuleRequest.rule_event_history_request:type_name -> rules_1.RuleEventHistoryRequest
	32, // 5: rules_1.RuleRequest.rule_event_subscription:type_name -> rules_1.RuleEventSubscription
	34, // 6: rules_1.RuleRequest.create_or_modify_destination_group_request:type_name -> rules_1.CreateOrModifyDestinationGroupRequest
	36, // 7: rules_1.RuleRequest.destination_group_list_request:type_name -> rules_1.DestinationGroupListRequest
	39, // 8: rules_1.RuleRequest.update_destination_expiration_time_request:type_name -> rules_1.UpdateDestinationExpirationTimeRequest
	41, // 9: rules_1.RuleResult.details:type_name -> shared_1.Text
	23, // 10: rules_1.RuleResult.set_rule_result:type_name -> rules_1.SetRuleResult
	25, // 11: rules_1.RuleResult.modify_rule_result:type_name -> rules_1.ModifyRuleResult
	27, // 12: rules_1.RuleResult.delete_rule_result:type_name -> rules_1.DeleteRuleResult
	29, // 13: rules_1.RuleResult.rule_list_result:type_name -> rules_1.RuleListResult
	31, // 14: rules_1.RuleResult.rule_event_history_result:type_name -> rules_1.RuleEventHistoryResult
	33, // 15: rules_1.RuleResult.rule_event_subscription_status:type_name -> rules_1.RuleEventSubscriptionStatus
	35, // 16: rules_1.RuleResult.create_or_modify_destination_group_result:type_name -> rules_1.CreateOrModifyDestinationGroupResult
	37, // 17: rules_1.RuleResult.destination_group_list_result:type_name -> rules_1.DestinationGroupListResult
	40, // 18: rules_1.RuleResult.update_destination_expiration_time_result:type_name -> rules_1.UpdateDestinationExpirationTimeResult
	9,  // 19: rules_1.RuleDefinition.actions:type_name -> rules_1.Action
	11, // 20: rules_1.RuleDefinition.order_event_rule:type_name -> rules_1.OrderEventRule
	12, // 21: rules_1.RuleDefinition.condition_rule:type_name -> rules_1.ConditionRule
	42, // 22: rules_1.RuleDefinition.attributes:type_name -> shared_1.NamedValue
	43, // 23: rules_1.RuleDefinition.expiration_time:type_name -> google.protobuf.Timestamp
	44, // 24: rules_1.Action.destinations:type_name -> shared_1.Destination
	10, // 25: rules_1.Action.go_flat:type_name -> rules_1.GoFlatAction
	21, // 26: rules_1.OrderEventRule.filters:type_name -> rules_1.OrderEventFilter
	14, // 27: rules_1.ConditionRule.expression:type_name -> rules_1.Expression
	13, // 28: rules_1.ConditionRule.notification_title:type_name -> rules_1.TemplateText
	13, // 29: rules_1.ConditionRule.notification_body:type_name -> rules_1.TemplateText
	15, // 30: rules_1.Expression.left_operand:type_name -> rules_1.Operand
	15, // 31: rules_1.Expression.right_operand:type_name -> rules_1.Operand
	15, // 32: rules_1.Expression.arguments:type_name -> rules_1.Operand
	14, // 33: rules_1.Operand.expression:type_name -> rules_1.Expression
	16, // 34: rules_1.Operand.constant:type_name -> rules_1.Constant
	17, // 35: rules_1.Operand.market_variable:type_name -> rules_1.MarketVariable
	18, // 36: rules_1.Operand.account_variable:type_name -> rules_1.AccountVariable
	19, // 37: rules_1.Operand.study_symbol:type_name -> rules_1.StudySymbol
	41, // 38: rules_1.RuleEvent.title:type_name -> shared_1.Text
	41, // 39: rules_1.RuleEvent.body:type_name -> shared_1.Text
	45, // 40: rules_1.RuleEvent.notification_properties:type_name -> shared_1.NotificationProperty
	43, // 41: rules_1.RuleEvent.when_utc_timestamp:type_name -> google.protobuf.Timestamp
	41, // 42: rules_1.RuleEvent.error_details:type_name -> shared_1.Text
	8,  // 43: rules_1.SetRuleRequest.rule_definition:type_name -> rules_1.RuleDefinition
	9,  // 44: rules_1.ModifyRuleRequest.actions:type_name -> rules_1.Action
	8,  // 45: rules_1.RuleListResult.rule_definitions:type_name -> rules_1.RuleDefinition
	43, // 46: rules_1.RuleEventHistoryRequest.from_utc_timestamp:type_name -> google.protobuf.Timestamp
	43, // 47: rules_1.RuleEventHistoryRequest.to_utc_timestamp:type_name -> google.protobuf.Timestamp
	20, // 48: rules_1.RuleEventHistoryResult.rule_events:type_name -> rules_1.RuleEvent
	20, // 49: rules_1.RuleEventSubscriptionStatus.rule_events:type_name -> rules_1.RuleEvent
	44, // 50: rules_1.CreateOrModifyDestinationGroupRequest.destination_to_remove:type_name -> shared_1.Destination
	44, // 51: rules_1.CreateOrModifyDestinationGroupRequest.destination_to_add_or_update:type_name -> shared_1.Destination
	38, // 52: rules_1.DestinationGroupListResult.destination_groups:type_name -> rules_1.DestinationGroup
	44, // 53: rules_1.DestinationGroup.destinations:type_name -> shared_1.Destination
	46, // 54: rules_1.UpdateDestinationExpirationTimeRequest.apple_push_notif:type_name -> shared_1.ApplePushNotif
	47, // 55: rules_1.UpdateDestinationExpirationTimeRequest.google_push_notif:type_name -> shared_1.GooglePushNotif
	56, // [56:56] is the sub-list for method output_type
	56, // [56:56] is the sub-list for method input_type
	56, // [56:56] is the sub-list for extension type_name
	56, // [56:56] is the sub-list for extension extendee
	0,  // [0:56] is the sub-list for field type_name
}

func init() { file_protos_WebAPI_rules_1_proto_init() }
func file_protos_WebAPI_rules_1_proto_init() {
	if File_protos_WebAPI_rules_1_proto != nil {
		return
	}
	file_protos_WebAPI_rules_1_proto_msgTypes[8].OneofWrappers = []any{
		(*Expression_Operator_)(nil),
		(*Expression_Function)(nil),
	}
	file_protos_WebAPI_rules_1_proto_msgTypes[33].OneofWrappers = []any{
		(*UpdateDestinationExpirationTimeRequest_ApplePushNotif)(nil),
		(*UpdateDestinationExpirationTimeRequest_GooglePushNotif)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_WebAPI_rules_1_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_WebAPI_rules_1_proto_goTypes,
		DependencyIndexes: file_protos_WebAPI_rules_1_proto_depIdxs,
		EnumInfos:         file_protos_WebAPI_rules_1_proto_enumTypes,
		MessageInfos:      file_protos_WebAPI_rules_1_proto_msgTypes,
	}.Build()
	File_protos_WebAPI_rules_1_proto = out.File
	file_protos_WebAPI_rules_1_proto_rawDesc = nil
	file_protos_WebAPI_rules_1_proto_goTypes = nil
	file_protos_WebAPI_rules_1_proto_depIdxs = nil
}
