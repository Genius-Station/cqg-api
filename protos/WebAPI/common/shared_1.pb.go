// Entities shared between different protocols.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: shared_1.proto

package common

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Status of the order.
type OrderStatus_Status int32

const (
	// Original order is sent to execution system.
	OrderStatus_IN_TRANSIT OrderStatus_Status = 1
	// Order is rejected.
	OrderStatus_REJECTED OrderStatus_Status = 2
	// Order is acknowledged by execution system and perhaps partially filled.
	OrderStatus_WORKING OrderStatus_Status = 3
	// Order is expired.
	OrderStatus_EXPIRED OrderStatus_Status = 4
	// Cancel request is sent to execution system.
	OrderStatus_IN_CANCEL OrderStatus_Status = 5
	// Modify request is sent to execution system.
	OrderStatus_IN_MODIFY OrderStatus_Status = 6
	// Order is canceled.
	OrderStatus_CANCELLED OrderStatus_Status = 7
	// Order is completely filled by execution system.
	OrderStatus_FILLED OrderStatus_Status = 8
	// Order is waiting submission to execution system.
	OrderStatus_SUSPENDED OrderStatus_Status = 9
	// Order may be canceled because a disconnect occurred.
	OrderStatus_DISCONNECTED OrderStatus_Status = 10
	// Order will be placed at a specified time (waiting execution system to start accepting orders).
	OrderStatus_ACTIVEAT OrderStatus_Status = 11
	// Cross order is sent to exchange and waiting for approval from exchange and/or counter-parties.
	OrderStatus_APPROVE_REQUIRED OrderStatus_Status = 12
	// The exchange approved the cross order.
	// Note that this approve relates only to the sides/participants specified in the order.
	// Thus, it is not implied the exchange approved the other sides of the order (counter-parties).
	OrderStatus_APPROVED_BY_EXCHANGE OrderStatus_Status = 13
	// Cross order is rejected by one of its participants.
	// Note that if a participant rejects its own side of the cross order, the counter-parties may not receive
	// any reject messages if exchange does not support this notification.
	OrderStatus_APPROVE_REJECTED OrderStatus_Status = 14
	// Cross order is completely executed on exchange, this is the final state of the cross order unless any of its
	// trades/legs is subsequently broken by the exchange.
	OrderStatus_MATCHED OrderStatus_Status = 15
	// Cross order/leg is executed on exchange, this is transit state until all transactions for trades/breaks are
	// received.
	OrderStatus_PARTIALLY_MATCHED OrderStatus_Status = 16
	// Cross order was executed on exchange, but now all its trades/legs have been broken by the exchange.
	OrderStatus_TRADE_BROKEN OrderStatus_Status = 17
)

// Enum value maps for OrderStatus_Status.
var (
	OrderStatus_Status_name = map[int32]string{
		1:  "IN_TRANSIT",
		2:  "REJECTED",
		3:  "WORKING",
		4:  "EXPIRED",
		5:  "IN_CANCEL",
		6:  "IN_MODIFY",
		7:  "CANCELLED",
		8:  "FILLED",
		9:  "SUSPENDED",
		10: "DISCONNECTED",
		11: "ACTIVEAT",
		12: "APPROVE_REQUIRED",
		13: "APPROVED_BY_EXCHANGE",
		14: "APPROVE_REJECTED",
		15: "MATCHED",
		16: "PARTIALLY_MATCHED",
		17: "TRADE_BROKEN",
	}
	OrderStatus_Status_value = map[string]int32{
		"IN_TRANSIT":           1,
		"REJECTED":             2,
		"WORKING":              3,
		"EXPIRED":              4,
		"IN_CANCEL":            5,
		"IN_MODIFY":            6,
		"CANCELLED":            7,
		"FILLED":               8,
		"SUSPENDED":            9,
		"DISCONNECTED":         10,
		"ACTIVEAT":             11,
		"APPROVE_REQUIRED":     12,
		"APPROVED_BY_EXCHANGE": 13,
		"APPROVE_REJECTED":     14,
		"MATCHED":              15,
		"PARTIALLY_MATCHED":    16,
		"TRADE_BROKEN":         17,
	}
)

func (x OrderStatus_Status) Enum() *OrderStatus_Status {
	p := new(OrderStatus_Status)
	*p = x
	return p
}

func (x OrderStatus_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderStatus_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_shared_1_proto_enumTypes[0].Descriptor()
}

func (OrderStatus_Status) Type() protoreflect.EnumType {
	return &file_shared_1_proto_enumTypes[0]
}

func (x OrderStatus_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OrderStatus_Status) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OrderStatus_Status(num)
	return nil
}

// Deprecated: Use OrderStatus_Status.Descriptor instead.
func (OrderStatus_Status) EnumDescriptor() ([]byte, []int) {
	return file_shared_1_proto_rawDescGZIP(), []int{1, 0}
}

// Status of the transaction.
type TransactionStatus_Status int32

const (
	// Original order is sent to execution system.
	TransactionStatus_IN_TRANSIT TransactionStatus_Status = 1
	// Original order is rejected (exception).
	TransactionStatus_REJECTED TransactionStatus_Status = 2
	// Order is acknowledged by execution system.
	TransactionStatus_ACK_PLACE TransactionStatus_Status = 3
	// Order is expired (exception).
	TransactionStatus_EXPIRED TransactionStatus_Status = 4
	// Cancel request is sent to execution system.
	TransactionStatus_IN_CANCEL TransactionStatus_Status = 5
	// Cancel is acknowledged by execution system.
	TransactionStatus_ACK_CANCEL TransactionStatus_Status = 6
	// Cancel request is rejected (exception).
	TransactionStatus_REJECT_CANCEL TransactionStatus_Status = 7
	// Modify request is sent to execution system.
	TransactionStatus_IN_MODIFY TransactionStatus_Status = 8
	// Modify is acknowledged by execution system.
	TransactionStatus_ACK_MODIFY TransactionStatus_Status = 9
	// Modify request is rejected (exception).
	TransactionStatus_REJECT_MODIFY TransactionStatus_Status = 10
	// Fill event is received from execution system.
	TransactionStatus_FILL TransactionStatus_Status = 11
	// Order is suspended (parked).
	TransactionStatus_SUSPEND TransactionStatus_Status = 12
	// Referenced fill is corrected.
	TransactionStatus_FILL_CORRECT TransactionStatus_Status = 13
	// Referenced fill is canceled (exception).
	TransactionStatus_FILL_CANCEL TransactionStatus_Status = 14
	// Referenced fill is busted (exception).
	TransactionStatus_FILL_BUST TransactionStatus_Status = 15
	// Acknowledgment that order will activate at specified time.
	TransactionStatus_ACTIVEAT TransactionStatus_Status = 16
	// Order may be canceled because a disconnect occurred (exception).
	TransactionStatus_DISCONNECT TransactionStatus_Status = 17
	// Synthetic order was sent to the actual execution system.
	TransactionStatus_SYNTHETIC_ACTIVATED TransactionStatus_Status = 18
	// Order status and/ or attributes are updated.
	TransactionStatus_UPDATE TransactionStatus_Status = 19
	// Synthetic strategy execution failed, expect 'text_message'
	// attribute with further details. The client may identify outright orders used
	// when attempting to execute the synthetic strategy by finding orders in its
	// book where OrderStatus.origin_order_id == OrderStatus.order_id.
	TransactionStatus_SYNTHETIC_FAILED TransactionStatus_Status = 20
	// Synthetic strategy order has at least one overfilled leg, 'synthetic_hang' attribute is populated.
	TransactionStatus_SYNTHETIC_OVERFILL TransactionStatus_Status = 21
	// Hanging quantity update for the synthetic strategy order.
	TransactionStatus_SYNTHETIC_HANG TransactionStatus_Status = 22
	// Cross order is in OrderStatus.APPROVE_REQUIRED and TransactionStatus.APPROVING state when it is
	// acknowledged by exchange but waiting for approval from counter-parties.
	// Note: if exchange does not support this status, APPROVED_BY_EXCHANGE status is sent instead.
	TransactionStatus_APPROVING TransactionStatus_Status = 23
	// Cross order is in OrderStatus.APPROVE_REQUIRED and TransactionStatus.APPROVE_REQUESTED state when
	// it is waiting for approval from the client (i.e. from the side/participant that received this transaction).
	TransactionStatus_APPROVE_REQUESTED TransactionStatus_Status = 24
	// The exchange approved the cross order.
	// Note that this approve relates only to the sides/participants specified in the order.
	// Thus, it is not implied the exchange approved the other sides of the order (counter-parties).
	TransactionStatus_APPROVED_BY_EXCHANGE TransactionStatus_Status = 25
	// Cross order is rejected by one of its participants.
	// Note that if a participant rejects its own side of the cross order, the counter-parties may not receive
	// any reject messages if exchange does not support this notification.
	TransactionStatus_REJECTED_BY_USER TransactionStatus_Status = 26
	// Cross order is executed on exchange.
	TransactionStatus_MATCHED TransactionStatus_Status = 27
	// Cross order/leg have been broken by the exchange.
	TransactionStatus_TRADE_BROKEN TransactionStatus_Status = 28
	// Previously matched cross order/leg have been amended by the exchange.
	TransactionStatus_TRADE_AMENDED TransactionStatus_Status = 29
)

// Enum value maps for TransactionStatus_Status.
var (
	TransactionStatus_Status_name = map[int32]string{
		1:  "IN_TRANSIT",
		2:  "REJECTED",
		3:  "ACK_PLACE",
		4:  "EXPIRED",
		5:  "IN_CANCEL",
		6:  "ACK_CANCEL",
		7:  "REJECT_CANCEL",
		8:  "IN_MODIFY",
		9:  "ACK_MODIFY",
		10: "REJECT_MODIFY",
		11: "FILL",
		12: "SUSPEND",
		13: "FILL_CORRECT",
		14: "FILL_CANCEL",
		15: "FILL_BUST",
		16: "ACTIVEAT",
		17: "DISCONNECT",
		18: "SYNTHETIC_ACTIVATED",
		19: "UPDATE",
		20: "SYNTHETIC_FAILED",
		21: "SYNTHETIC_OVERFILL",
		22: "SYNTHETIC_HANG",
		23: "APPROVING",
		24: "APPROVE_REQUESTED",
		25: "APPROVED_BY_EXCHANGE",
		26: "REJECTED_BY_USER",
		27: "MATCHED",
		28: "TRADE_BROKEN",
		29: "TRADE_AMENDED",
	}
	TransactionStatus_Status_value = map[string]int32{
		"IN_TRANSIT":           1,
		"REJECTED":             2,
		"ACK_PLACE":            3,
		"EXPIRED":              4,
		"IN_CANCEL":            5,
		"ACK_CANCEL":           6,
		"REJECT_CANCEL":        7,
		"IN_MODIFY":            8,
		"ACK_MODIFY":           9,
		"REJECT_MODIFY":        10,
		"FILL":                 11,
		"SUSPEND":              12,
		"FILL_CORRECT":         13,
		"FILL_CANCEL":          14,
		"FILL_BUST":            15,
		"ACTIVEAT":             16,
		"DISCONNECT":           17,
		"SYNTHETIC_ACTIVATED":  18,
		"UPDATE":               19,
		"SYNTHETIC_FAILED":     20,
		"SYNTHETIC_OVERFILL":   21,
		"SYNTHETIC_HANG":       22,
		"APPROVING":            23,
		"APPROVE_REQUESTED":    24,
		"APPROVED_BY_EXCHANGE": 25,
		"REJECTED_BY_USER":     26,
		"MATCHED":              27,
		"TRADE_BROKEN":         28,
		"TRADE_AMENDED":        29,
	}
)

func (x TransactionStatus_Status) Enum() *TransactionStatus_Status {
	p := new(TransactionStatus_Status)
	*p = x
	return p
}

func (x TransactionStatus_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionStatus_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_shared_1_proto_enumTypes[1].Descriptor()
}

func (TransactionStatus_Status) Type() protoreflect.EnumType {
	return &file_shared_1_proto_enumTypes[1]
}

func (x TransactionStatus_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TransactionStatus_Status) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TransactionStatus_Status(num)
	return nil
}

// Deprecated: Use TransactionStatus_Status.Descriptor instead.
func (TransactionStatus_Status) EnumDescriptor() ([]byte, []int) {
	return file_shared_1_proto_rawDescGZIP(), []int{2, 0}
}

type SignOnResult_ResultCode int32

const (
	// / success codes (0 - 100)
	SignOnResult_SUCCESS SignOnResult_ResultCode = 0
	// // failure codes (100+)
	// General failure.
	SignOnResult_FAILURE SignOnResult_ResultCode = 101
)

// Enum value maps for SignOnResult_ResultCode.
var (
	SignOnResult_ResultCode_name = map[int32]string{
		0:   "SUCCESS",
		101: "FAILURE",
	}
	SignOnResult_ResultCode_value = map[string]int32{
		"SUCCESS": 0,
		"FAILURE": 101,
	}
)

func (x SignOnResult_ResultCode) Enum() *SignOnResult_ResultCode {
	p := new(SignOnResult_ResultCode)
	*p = x
	return p
}

func (x SignOnResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignOnResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_shared_1_proto_enumTypes[2].Descriptor()
}

func (SignOnResult_ResultCode) Type() protoreflect.EnumType {
	return &file_shared_1_proto_enumTypes[2]
}

func (x SignOnResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SignOnResult_ResultCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SignOnResult_ResultCode(num)
	return nil
}

// Deprecated: Use SignOnResult_ResultCode.Descriptor instead.
func (SignOnResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_shared_1_proto_rawDescGZIP(), []int{4, 0}
}

type Entitlement_EntitlementType int32

const (
	// Feature entitlement.
	// The code points to a feature number.
	Entitlement_FEATURE Entitlement_EntitlementType = 8
	// News entitlement.
	// The code points to the enabled news feed.
	Entitlement_NEWS Entitlement_EntitlementType = 10
	// Dow Jones news entitlement
	// The code points to DJ news feed.
	Entitlement_DJNEWS Entitlement_EntitlementType = 26
	// Studies.
	Entitlement_STUDIES Entitlement_EntitlementType = 36
	// Manage metadata on a security (prefix) level.
	// The code points to a contributor id.
	Entitlement_MANAGE_SECURITY_METADATA Entitlement_EntitlementType = 49
	// Manage metadata on a contract level.
	// The code points to a contributor id.
	Entitlement_MANAGE_CONTRACT_METADATA Entitlement_EntitlementType = 50
	// Manage OTC state.
	// The code points to a group of OTC services.
	Entitlement_OTC_MANAGE_TAILS Entitlement_EntitlementType = 51
)

// Enum value maps for Entitlement_EntitlementType.
var (
	Entitlement_EntitlementType_name = map[int32]string{
		8:  "FEATURE",
		10: "NEWS",
		26: "DJNEWS",
		36: "STUDIES",
		49: "MANAGE_SECURITY_METADATA",
		50: "MANAGE_CONTRACT_METADATA",
		51: "OTC_MANAGE_TAILS",
	}
	Entitlement_EntitlementType_value = map[string]int32{
		"FEATURE":                  8,
		"NEWS":                     10,
		"DJNEWS":                   26,
		"STUDIES":                  36,
		"MANAGE_SECURITY_METADATA": 49,
		"MANAGE_CONTRACT_METADATA": 50,
		"OTC_MANAGE_TAILS":         51,
	}
)

func (x Entitlement_EntitlementType) Enum() *Entitlement_EntitlementType {
	p := new(Entitlement_EntitlementType)
	*p = x
	return p
}

func (x Entitlement_EntitlementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Entitlement_EntitlementType) Descriptor() protoreflect.EnumDescriptor {
	return file_shared_1_proto_enumTypes[3].Descriptor()
}

func (Entitlement_EntitlementType) Type() protoreflect.EnumType {
	return &file_shared_1_proto_enumTypes[3]
}

func (x Entitlement_EntitlementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Entitlement_EntitlementType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Entitlement_EntitlementType(num)
	return nil
}

// Deprecated: Use Entitlement_EntitlementType.Descriptor instead.
func (Entitlement_EntitlementType) EnumDescriptor() ([]byte, []int) {
	return file_shared_1_proto_rawDescGZIP(), []int{7, 0}
}

// Text with a unique key. Possible text messages are listed in a separate document.
type Text struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Message unique key.
	Key *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	// Message text.
	Text *string `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	// Optional message format string which is sent only if a message has parameters.
	// Format is defined as a sample for localized clients to replace it with a translated version
	// and compose a message using variable parameters.
	// Format string sample: "The request is rejected because %1% limit of %2% per %3% seconds is exceeded"
	Format *string `protobuf:"bytes,3,opt,name=format" json:"format,omitempty"`
	// Optional list of format string parameters ordered according to the format string placeholders.
	// E.g. parameters for the sample format string above could be: ["request rate", "1000", "10"].
	// Note: float numbers are always defined in decimal format with a dot separator like "23434.34"
	// and date and time in extended ISO 8601 format as "2016-11-09 15:11:20.323" (time part is optional for
	// dates, date part is optional for time only, seconds in time part also may not have fractional part).
	// Client can convert these values to different formats if they need to.
	Param []string `protobuf:"bytes,4,rep,name=param" json:"param,omitempty"`
}

func (x *Text) Reset() {
	*x = Text{}
	mi := &file_shared_1_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Text) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Text) ProtoMessage() {}

func (x *Text) ProtoReflect() protoreflect.Message {
	mi := &file_shared_1_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Text.ProtoReflect.Descriptor instead.
func (*Text) Descriptor() ([]byte, []int) {
	return file_shared_1_proto_rawDescGZIP(), []int{0}
}

func (x *Text) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *Text) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *Text) GetFormat() string {
	if x != nil && x.Format != nil {
		return *x.Format
	}
	return ""
}

func (x *Text) GetParam() []string {
	if x != nil {
		return x.Param
	}
	return nil
}

// Message for holding OrderStatus enum values as a name space.
type OrderStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OrderStatus) Reset() {
	*x = OrderStatus{}
	mi := &file_shared_1_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderStatus) ProtoMessage() {}

func (x *OrderStatus) ProtoReflect() protoreflect.Message {
	mi := &file_shared_1_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderStatus.ProtoReflect.Descriptor instead.
func (*OrderStatus) Descriptor() ([]byte, []int) {
	return file_shared_1_proto_rawDescGZIP(), []int{1}
}

// Message for holding TransactionStatus enum values as a name space.
type TransactionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TransactionStatus) Reset() {
	*x = TransactionStatus{}
	mi := &file_shared_1_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionStatus) ProtoMessage() {}

func (x *TransactionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_shared_1_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionStatus.ProtoReflect.Descriptor instead.
func (*TransactionStatus) Descriptor() ([]byte, []int) {
	return file_shared_1_proto_rawDescGZIP(), []int{2}
}

// Initial message to obtain access.
type SignOnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessKey *string `protobuf:"bytes,1,req,name=access_key,json=accessKey" json:"access_key,omitempty"`
}

func (x *SignOnRequest) Reset() {
	*x = SignOnRequest{}
	mi := &file_shared_1_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignOnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignOnRequest) ProtoMessage() {}

func (x *SignOnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_shared_1_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignOnRequest.ProtoReflect.Descriptor instead.
func (*SignOnRequest) Descriptor() ([]byte, []int) {
	return file_shared_1_proto_rawDescGZIP(), []int{3}
}

func (x *SignOnRequest) GetAccessKey() string {
	if x != nil && x.AccessKey != nil {
		return *x.AccessKey
	}
	return ""
}

// Sign On result.
type SignOnResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operation status.
	// This field is associated with ResultCode enum.
	ResultCode *uint32 `protobuf:"varint,1,req,name=result_code,json=resultCode" json:"result_code,omitempty"`
	// Operation details.
	Details *Text `protobuf:"bytes,2,opt,name=details" json:"details,omitempty"`
}

func (x *SignOnResult) Reset() {
	*x = SignOnResult{}
	mi := &file_shared_1_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignOnResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignOnResult) ProtoMessage() {}

func (x *SignOnResult) ProtoReflect() protoreflect.Message {
	mi := &file_shared_1_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignOnResult.ProtoReflect.Descriptor instead.
func (*SignOnResult) Descriptor() ([]byte, []int) {
	return file_shared_1_proto_rawDescGZIP(), []int{4}
}

func (x *SignOnResult) GetResultCode() uint32 {
	if x != nil && x.ResultCode != nil {
		return *x.ResultCode
	}
	return 0
}

func (x *SignOnResult) GetDetails() *Text {
	if x != nil {
		return x.Details
	}
	return nil
}

// Request for a list of entitlements of the current user.
type EntitlementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, add cryptographic signature to the responses.
	SignResponses *bool `protobuf:"varint,1,opt,name=sign_responses,json=signResponses" json:"sign_responses,omitempty"`
}

func (x *EntitlementRequest) Reset() {
	*x = EntitlementRequest{}
	mi := &file_shared_1_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntitlementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntitlementRequest) ProtoMessage() {}

func (x *EntitlementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_shared_1_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntitlementRequest.ProtoReflect.Descriptor instead.
func (*EntitlementRequest) Descriptor() ([]byte, []int) {
	return file_shared_1_proto_rawDescGZIP(), []int{5}
}

func (x *EntitlementRequest) GetSignResponses() bool {
	if x != nil && x.SignResponses != nil {
		return *x.SignResponses
	}
	return false
}

// Report with a list of entitlements of the current user.
type EntitlementReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of entitlements.
	Entitlement []*Entitlement `protobuf:"bytes,1,rep,name=entitlement" json:"entitlement,omitempty"`
	// Cryptographic signature.
	Signature []byte `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
}

func (x *EntitlementReport) Reset() {
	*x = EntitlementReport{}
	mi := &file_shared_1_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntitlementReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntitlementReport) ProtoMessage() {}

func (x *EntitlementReport) ProtoReflect() protoreflect.Message {
	mi := &file_shared_1_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntitlementReport.ProtoReflect.Descriptor instead.
func (*EntitlementReport) Descriptor() ([]byte, []int) {
	return file_shared_1_proto_rawDescGZIP(), []int{6}
}

func (x *EntitlementReport) GetEntitlement() []*Entitlement {
	if x != nil {
		return x.Entitlement
	}
	return nil
}

func (x *EntitlementReport) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type Entitlement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This value is associated with EntitlementType enum.
	// Ignore Entitlement entry if entitlement_type is not one of EntitlementType
	EntitlementType *uint32 `protobuf:"varint,1,req,name=entitlement_type,json=entitlementType" json:"entitlement_type,omitempty"`
	// The code that depends on the type.
	EntitlementCode *string `protobuf:"bytes,2,req,name=entitlement_code,json=entitlementCode" json:"entitlement_code,omitempty"`
	// Deleted flag is used in updates when entity is removed.
	Deleted *bool `protobuf:"varint,3,opt,name=deleted" json:"deleted,omitempty"`
}

func (x *Entitlement) Reset() {
	*x = Entitlement{}
	mi := &file_shared_1_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Entitlement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entitlement) ProtoMessage() {}

func (x *Entitlement) ProtoReflect() protoreflect.Message {
	mi := &file_shared_1_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entitlement.ProtoReflect.Descriptor instead.
func (*Entitlement) Descriptor() ([]byte, []int) {
	return file_shared_1_proto_rawDescGZIP(), []int{7}
}

func (x *Entitlement) GetEntitlementType() uint32 {
	if x != nil && x.EntitlementType != nil {
		return *x.EntitlementType
	}
	return 0
}

func (x *Entitlement) GetEntitlementCode() string {
	if x != nil && x.EntitlementCode != nil {
		return *x.EntitlementCode
	}
	return ""
}

func (x *Entitlement) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

// Destination specification.
// Only one type of destination can be specified.
type Destination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional destination description.
	Description *string `protobuf:"bytes,1,opt,name=description" json:"description,omitempty"`
	// APN destination (for iOS devices).
	ApplePushNotif *ApplePushNotif `protobuf:"bytes,2,opt,name=apple_push_notif,json=applePushNotif" json:"apple_push_notif,omitempty"`
	// GCM destination (for Android devices).
	GooglePushNotif *GooglePushNotif `protobuf:"bytes,3,opt,name=google_push_notif,json=googlePushNotif" json:"google_push_notif,omitempty"`
	// Email destination.
	EmailNotif *EmailNotif `protobuf:"bytes,4,opt,name=email_notif,json=emailNotif" json:"email_notif,omitempty"`
	// Notification to an email specified in trader's profile.
	ProfileEmailNotif *EmailFromProfileNotif `protobuf:"bytes,6,opt,name=profile_email_notif,json=profileEmailNotif" json:"profile_email_notif,omitempty"`
	// SMS.
	SmsNotif *SmsNotif `protobuf:"bytes,5,opt,name=sms_notif,json=smsNotif" json:"sms_notif,omitempty"`
	// Sms notification to a phone number specified in trader's profile.
	ProfileSmsNotif *SmsToPhoneFromProfileNotif `protobuf:"bytes,7,opt,name=profile_sms_notif,json=profileSmsNotif" json:"profile_sms_notif,omitempty"`
}

func (x *Destination) Reset() {
	*x = Destination{}
	mi := &file_shared_1_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Destination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Destination) ProtoMessage() {}

func (x *Destination) ProtoReflect() protoreflect.Message {
	mi := &file_shared_1_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Destination.ProtoReflect.Descriptor instead.
func (*Destination) Descriptor() ([]byte, []int) {
	return file_shared_1_proto_rawDescGZIP(), []int{8}
}

func (x *Destination) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Destination) GetApplePushNotif() *ApplePushNotif {
	if x != nil {
		return x.ApplePushNotif
	}
	return nil
}

func (x *Destination) GetGooglePushNotif() *GooglePushNotif {
	if x != nil {
		return x.GooglePushNotif
	}
	return nil
}

func (x *Destination) GetEmailNotif() *EmailNotif {
	if x != nil {
		return x.EmailNotif
	}
	return nil
}

func (x *Destination) GetProfileEmailNotif() *EmailFromProfileNotif {
	if x != nil {
		return x.ProfileEmailNotif
	}
	return nil
}

func (x *Destination) GetSmsNotif() *SmsNotif {
	if x != nil {
		return x.SmsNotif
	}
	return nil
}

func (x *Destination) GetProfileSmsNotif() *SmsToPhoneFromProfileNotif {
	if x != nil {
		return x.ProfileSmsNotif
	}
	return nil
}

// Push notification for iOS devices.
type ApplePushNotif struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// iOS device token
	DeviceToken *string `protobuf:"bytes,1,req,name=device_token,json=deviceToken" json:"device_token,omitempty"`
	// APN application ID
	AppId *string `protobuf:"bytes,2,req,name=app_id,json=appId" json:"app_id,omitempty"`
}

func (x *ApplePushNotif) Reset() {
	*x = ApplePushNotif{}
	mi := &file_shared_1_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplePushNotif) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplePushNotif) ProtoMessage() {}

func (x *ApplePushNotif) ProtoReflect() protoreflect.Message {
	mi := &file_shared_1_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplePushNotif.ProtoReflect.Descriptor instead.
func (*ApplePushNotif) Descriptor() ([]byte, []int) {
	return file_shared_1_proto_rawDescGZIP(), []int{9}
}

func (x *ApplePushNotif) GetDeviceToken() string {
	if x != nil && x.DeviceToken != nil {
		return *x.DeviceToken
	}
	return ""
}

func (x *ApplePushNotif) GetAppId() string {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return ""
}

// Push notification for Android devices.
type GooglePushNotif struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// registration token for Android device and app
	RegistrationToken *string `protobuf:"bytes,1,req,name=registration_token,json=registrationToken" json:"registration_token,omitempty"`
	// GCN sender id
	SenderId *string `protobuf:"bytes,2,req,name=sender_id,json=senderId" json:"sender_id,omitempty"`
}

func (x *GooglePushNotif) Reset() {
	*x = GooglePushNotif{}
	mi := &file_shared_1_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GooglePushNotif) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GooglePushNotif) ProtoMessage() {}

func (x *GooglePushNotif) ProtoReflect() protoreflect.Message {
	mi := &file_shared_1_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GooglePushNotif.ProtoReflect.Descriptor instead.
func (*GooglePushNotif) Descriptor() ([]byte, []int) {
	return file_shared_1_proto_rawDescGZIP(), []int{10}
}

func (x *GooglePushNotif) GetRegistrationToken() string {
	if x != nil && x.RegistrationToken != nil {
		return *x.RegistrationToken
	}
	return ""
}

func (x *GooglePushNotif) GetSenderId() string {
	if x != nil && x.SenderId != nil {
		return *x.SenderId
	}
	return ""
}

// Notification property (e.g. order related information for order event rule notifications).
type NotificationProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Property name.
	PropertyName *string `protobuf:"bytes,1,req,name=property_name,json=propertyName" json:"property_name,omitempty"`
	// Property value.
	PropertyValue *string `protobuf:"bytes,2,req,name=property_value,json=propertyValue" json:"property_value,omitempty"`
}

func (x *NotificationProperty) Reset() {
	*x = NotificationProperty{}
	mi := &file_shared_1_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotificationProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationProperty) ProtoMessage() {}

func (x *NotificationProperty) ProtoReflect() protoreflect.Message {
	mi := &file_shared_1_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationProperty.ProtoReflect.Descriptor instead.
func (*NotificationProperty) Descriptor() ([]byte, []int) {
	return file_shared_1_proto_rawDescGZIP(), []int{11}
}

func (x *NotificationProperty) GetPropertyName() string {
	if x != nil && x.PropertyName != nil {
		return *x.PropertyName
	}
	return ""
}

func (x *NotificationProperty) GetPropertyValue() string {
	if x != nil && x.PropertyValue != nil {
		return *x.PropertyValue
	}
	return ""
}

// Email notification.
type EmailNotif struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of recipients to send email to. At least one entry must be present.
	Recipients []string `protobuf:"bytes,1,rep,name=recipients" json:"recipients,omitempty"`
}

func (x *EmailNotif) Reset() {
	*x = EmailNotif{}
	mi := &file_shared_1_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmailNotif) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailNotif) ProtoMessage() {}

func (x *EmailNotif) ProtoReflect() protoreflect.Message {
	mi := &file_shared_1_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailNotif.ProtoReflect.Descriptor instead.
func (*EmailNotif) Descriptor() ([]byte, []int) {
	return file_shared_1_proto_rawDescGZIP(), []int{12}
}

func (x *EmailNotif) GetRecipients() []string {
	if x != nil {
		return x.Recipients
	}
	return nil
}

// Notification to an email specified in trader's profile
// (to the first email in case there are multiple in the profile).
type EmailFromProfileNotif struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmailFromProfileNotif) Reset() {
	*x = EmailFromProfileNotif{}
	mi := &file_shared_1_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmailFromProfileNotif) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailFromProfileNotif) ProtoMessage() {}

func (x *EmailFromProfileNotif) ProtoReflect() protoreflect.Message {
	mi := &file_shared_1_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailFromProfileNotif.ProtoReflect.Descriptor instead.
func (*EmailFromProfileNotif) Descriptor() ([]byte, []int) {
	return file_shared_1_proto_rawDescGZIP(), []int{13}
}

// Sms notification.
type SmsNotif struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Destination phone number.
	PhoneNumber *string `protobuf:"bytes,1,req,name=phone_number,json=phoneNumber" json:"phone_number,omitempty"`
}

func (x *SmsNotif) Reset() {
	*x = SmsNotif{}
	mi := &file_shared_1_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SmsNotif) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmsNotif) ProtoMessage() {}

func (x *SmsNotif) ProtoReflect() protoreflect.Message {
	mi := &file_shared_1_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmsNotif.ProtoReflect.Descriptor instead.
func (*SmsNotif) Descriptor() ([]byte, []int) {
	return file_shared_1_proto_rawDescGZIP(), []int{14}
}

func (x *SmsNotif) GetPhoneNumber() string {
	if x != nil && x.PhoneNumber != nil {
		return *x.PhoneNumber
	}
	return ""
}

// Sms notification to a phone number specified in trader's profile
// (to the first phone number in case there are multiple in the profile).
type SmsToPhoneFromProfileNotif struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SmsToPhoneFromProfileNotif) Reset() {
	*x = SmsToPhoneFromProfileNotif{}
	mi := &file_shared_1_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SmsToPhoneFromProfileNotif) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmsToPhoneFromProfileNotif) ProtoMessage() {}

func (x *SmsToPhoneFromProfileNotif) ProtoReflect() protoreflect.Message {
	mi := &file_shared_1_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmsToPhoneFromProfileNotif.ProtoReflect.Descriptor instead.
func (*SmsToPhoneFromProfileNotif) Descriptor() ([]byte, []int) {
	return file_shared_1_proto_rawDescGZIP(), []int{15}
}

// Named value that can be used for custom parameters or properties.
type NamedValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Attribute name.
	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// Attribute value.
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	// An optional "deleted" flag for update operations.
	Deleted *bool `protobuf:"varint,3,opt,name=deleted,def=0" json:"deleted,omitempty"`
}

// Default values for NamedValue fields.
const (
	Default_NamedValue_Deleted = bool(false)
)

func (x *NamedValue) Reset() {
	*x = NamedValue{}
	mi := &file_shared_1_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NamedValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamedValue) ProtoMessage() {}

func (x *NamedValue) ProtoReflect() protoreflect.Message {
	mi := &file_shared_1_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamedValue.ProtoReflect.Descriptor instead.
func (*NamedValue) Descriptor() ([]byte, []int) {
	return file_shared_1_proto_rawDescGZIP(), []int{16}
}

func (x *NamedValue) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *NamedValue) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *NamedValue) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return Default_NamedValue_Deleted
}

var File_shared_1_proto protoreflect.FileDescriptor

var file_shared_1_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x31, 0x22, 0x5a, 0x0a, 0x04, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0xb4, 0x02, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa4, 0x02, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x0b, 0x0a, 0x07, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07,
	0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x5f, 0x4d,
	0x4f, 0x44, 0x49, 0x46, 0x59, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x49, 0x4c, 0x4c, 0x45, 0x44,
	0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10,
	0x09, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x41, 0x54, 0x10,
	0x0b, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x50, 0x50, 0x52, 0x4f,
	0x56, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10,
	0x0d, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x4a,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0e, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x45, 0x44, 0x10, 0x0f, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c,
	0x59, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x45, 0x44, 0x10, 0x10, 0x12, 0x10, 0x0a, 0x0c, 0x54,
	0x52, 0x41, 0x44, 0x45, 0x5f, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x11, 0x22, 0x92, 0x04,
	0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xfc, 0x03, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e,
	0x0a, 0x0a, 0x49, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09,
	0x41, 0x43, 0x4b, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x45,
	0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x5f, 0x43,
	0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x43, 0x4b, 0x5f, 0x43,
	0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e,
	0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x43, 0x4b,
	0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x10, 0x0a, 0x12, 0x08, 0x0a, 0x04,
	0x46, 0x49, 0x4c, 0x4c, 0x10, 0x0b, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e,
	0x44, 0x10, 0x0c, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x4f, 0x52, 0x52,
	0x45, 0x43, 0x54, 0x10, 0x0d, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x10, 0x0e, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x42,
	0x55, 0x53, 0x54, 0x10, 0x0f, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x41,
	0x54, 0x10, 0x10, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x10, 0x11, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x59, 0x4e, 0x54, 0x48, 0x45, 0x54, 0x49, 0x43,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x44, 0x10, 0x12, 0x12, 0x0a, 0x0a, 0x06,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x13, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x59, 0x4e, 0x54,
	0x48, 0x45, 0x54, 0x49, 0x43, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x14, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x59, 0x4e, 0x54, 0x48, 0x45, 0x54, 0x49, 0x43, 0x5f, 0x4f, 0x56, 0x45, 0x52,
	0x46, 0x49, 0x4c, 0x4c, 0x10, 0x15, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x59, 0x4e, 0x54, 0x48, 0x45,
	0x54, 0x49, 0x43, 0x5f, 0x48, 0x41, 0x4e, 0x47, 0x10, 0x16, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x50,
	0x50, 0x52, 0x4f, 0x56, 0x49, 0x4e, 0x47, 0x10, 0x17, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x50, 0x50,
	0x52, 0x4f, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x18,
	0x12, 0x18, 0x0a, 0x14, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x5f,
	0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x19, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45,
	0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x1a,
	0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x45, 0x44, 0x10, 0x1b, 0x12, 0x10, 0x0a,
	0x0c, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x1c, 0x12,
	0x11, 0x0a, 0x0d, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x41, 0x4d, 0x45, 0x4e, 0x44, 0x45, 0x44,
	0x10, 0x1d, 0x22, 0x2e, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b,
	0x65, 0x79, 0x22, 0x81, 0x01, 0x0a, 0x0c, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x31,
	0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x26,
	0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x10, 0x65, 0x22, 0x3b, 0x0a, 0x12, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x69, 0x67, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x22, 0x6a, 0x0a, 0x11, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22,
	0x93, 0x02, 0x0a, 0x0b, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x29, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22,
	0x93, 0x01, 0x0a, 0x0f, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x08,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x45, 0x57, 0x53, 0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x4a,
	0x4e, 0x45, 0x57, 0x53, 0x10, 0x1a, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x55, 0x44, 0x49, 0x45,
	0x53, 0x10, 0x24, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x45,
	0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x10,
	0x31, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x41, 0x43, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x10, 0x32, 0x12,
	0x14, 0x0a, 0x10, 0x4f, 0x54, 0x43, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x41,
	0x49, 0x4c, 0x53, 0x10, 0x33, 0x22, 0xc5, 0x03, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x65,
	0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x31, 0x2e, 0x41, 0x70, 0x70,
	0x6c, 0x65, 0x50, 0x75, 0x73, 0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x52, 0x0e, 0x61, 0x70, 0x70,
	0x6c, 0x65, 0x50, 0x75, 0x73, 0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x12, 0x45, 0x0a, 0x11, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x50, 0x75, 0x73, 0x68, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x52, 0x0f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x50, 0x75, 0x73, 0x68, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x12, 0x35, 0x0a, 0x0b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x5f, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x52, 0x0a, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x12, 0x4f, 0x0a, 0x13, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f,
	0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x12, 0x2f, 0x0a, 0x09, 0x73, 0x6d,
	0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x31, 0x2e, 0x53, 0x6d, 0x73, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x52, 0x08, 0x73, 0x6d, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x12, 0x50, 0x0a, 0x11, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x6d, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f,
	0x31, 0x2e, 0x53, 0x6d, 0x73, 0x54, 0x6f, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x46, 0x72, 0x6f, 0x6d,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x52, 0x0f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x6d, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x22, 0x4a, 0x0a,
	0x0e, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x50, 0x75, 0x73, 0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x0f, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x50, 0x75, 0x73, 0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x12, 0x2d, 0x0a, 0x12,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x14, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0d, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2c, 0x0a, 0x0a,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x17, 0x0a, 0x15, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x22, 0x2d, 0x0a, 0x08, 0x53, 0x6d, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0x1c, 0x0a, 0x1a, 0x53, 0x6d, 0x73, 0x54, 0x6f, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x22, 0x57, 0x0a, 0x0a, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x18, 0x5a, 0x16, 0x2e, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e,
}

var (
	file_shared_1_proto_rawDescOnce sync.Once
	file_shared_1_proto_rawDescData = file_shared_1_proto_rawDesc
)

func file_shared_1_proto_rawDescGZIP() []byte {
	file_shared_1_proto_rawDescOnce.Do(func() {
		file_shared_1_proto_rawDescData = protoimpl.X.CompressGZIP(file_shared_1_proto_rawDescData)
	})
	return file_shared_1_proto_rawDescData
}

var file_shared_1_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_shared_1_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_shared_1_proto_goTypes = []any{
	(OrderStatus_Status)(0),            // 0: shared_1.OrderStatus.Status
	(TransactionStatus_Status)(0),      // 1: shared_1.TransactionStatus.Status
	(SignOnResult_ResultCode)(0),       // 2: shared_1.SignOnResult.ResultCode
	(Entitlement_EntitlementType)(0),   // 3: shared_1.Entitlement.EntitlementType
	(*Text)(nil),                       // 4: shared_1.Text
	(*OrderStatus)(nil),                // 5: shared_1.OrderStatus
	(*TransactionStatus)(nil),          // 6: shared_1.TransactionStatus
	(*SignOnRequest)(nil),              // 7: shared_1.SignOnRequest
	(*SignOnResult)(nil),               // 8: shared_1.SignOnResult
	(*EntitlementRequest)(nil),         // 9: shared_1.EntitlementRequest
	(*EntitlementReport)(nil),          // 10: shared_1.EntitlementReport
	(*Entitlement)(nil),                // 11: shared_1.Entitlement
	(*Destination)(nil),                // 12: shared_1.Destination
	(*ApplePushNotif)(nil),             // 13: shared_1.ApplePushNotif
	(*GooglePushNotif)(nil),            // 14: shared_1.GooglePushNotif
	(*NotificationProperty)(nil),       // 15: shared_1.NotificationProperty
	(*EmailNotif)(nil),                 // 16: shared_1.EmailNotif
	(*EmailFromProfileNotif)(nil),      // 17: shared_1.EmailFromProfileNotif
	(*SmsNotif)(nil),                   // 18: shared_1.SmsNotif
	(*SmsToPhoneFromProfileNotif)(nil), // 19: shared_1.SmsToPhoneFromProfileNotif
	(*NamedValue)(nil),                 // 20: shared_1.NamedValue
}
var file_shared_1_proto_depIdxs = []int32{
	4,  // 0: shared_1.SignOnResult.details:type_name -> shared_1.Text
	11, // 1: shared_1.EntitlementReport.entitlement:type_name -> shared_1.Entitlement
	13, // 2: shared_1.Destination.apple_push_notif:type_name -> shared_1.ApplePushNotif
	14, // 3: shared_1.Destination.google_push_notif:type_name -> shared_1.GooglePushNotif
	16, // 4: shared_1.Destination.email_notif:type_name -> shared_1.EmailNotif
	17, // 5: shared_1.Destination.profile_email_notif:type_name -> shared_1.EmailFromProfileNotif
	18, // 6: shared_1.Destination.sms_notif:type_name -> shared_1.SmsNotif
	19, // 7: shared_1.Destination.profile_sms_notif:type_name -> shared_1.SmsToPhoneFromProfileNotif
	8,  // [8:8] is the sub-list for method output_type
	8,  // [8:8] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_shared_1_proto_init() }
func file_shared_1_proto_init() {
	if File_shared_1_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_shared_1_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_shared_1_proto_goTypes,
		DependencyIndexes: file_shared_1_proto_depIdxs,
		EnumInfos:         file_shared_1_proto_enumTypes,
		MessageInfos:      file_shared_1_proto_msgTypes,
	}.Build()
	File_shared_1_proto = out.File
	file_shared_1_proto_rawDesc = nil
	file_shared_1_proto_goTypes = nil
	file_shared_1_proto_depIdxs = nil
}
