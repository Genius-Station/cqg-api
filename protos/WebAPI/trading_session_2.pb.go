// Trading session related messages

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: protos/WebAPI/trading_session_2.proto

package WebAPI

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Days of week enumeration.
type DayOfWeek int32

const (
	DayOfWeek_DAY_OF_WEEK_SUNDAY    DayOfWeek = 0
	DayOfWeek_DAY_OF_WEEK_MONDAY    DayOfWeek = 1
	DayOfWeek_DAY_OF_WEEK_TUESDAY   DayOfWeek = 2
	DayOfWeek_DAY_OF_WEEK_WEDNESDAY DayOfWeek = 3
	DayOfWeek_DAY_OF_WEEK_THURSDAY  DayOfWeek = 4
	DayOfWeek_DAY_OF_WEEK_FRIDAY    DayOfWeek = 5
	DayOfWeek_DAY_OF_WEEK_SATURDAY  DayOfWeek = 6
)

// Enum value maps for DayOfWeek.
var (
	DayOfWeek_name = map[int32]string{
		0: "DAY_OF_WEEK_SUNDAY",
		1: "DAY_OF_WEEK_MONDAY",
		2: "DAY_OF_WEEK_TUESDAY",
		3: "DAY_OF_WEEK_WEDNESDAY",
		4: "DAY_OF_WEEK_THURSDAY",
		5: "DAY_OF_WEEK_FRIDAY",
		6: "DAY_OF_WEEK_SATURDAY",
	}
	DayOfWeek_value = map[string]int32{
		"DAY_OF_WEEK_SUNDAY":    0,
		"DAY_OF_WEEK_MONDAY":    1,
		"DAY_OF_WEEK_TUESDAY":   2,
		"DAY_OF_WEEK_WEDNESDAY": 3,
		"DAY_OF_WEEK_THURSDAY":  4,
		"DAY_OF_WEEK_FRIDAY":    5,
		"DAY_OF_WEEK_SATURDAY":  6,
	}
)

func (x DayOfWeek) Enum() *DayOfWeek {
	p := new(DayOfWeek)
	*p = x
	return p
}

func (x DayOfWeek) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DayOfWeek) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_trading_session_2_proto_enumTypes[0].Descriptor()
}

func (DayOfWeek) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_trading_session_2_proto_enumTypes[0]
}

func (x DayOfWeek) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DayOfWeek) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DayOfWeek(num)
	return nil
}

// Deprecated: Use DayOfWeek.Descriptor instead.
func (DayOfWeek) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_trading_session_2_proto_rawDescGZIP(), []int{0}
}

// Request for session information per instrument group.
type SessionInformationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of a session information from contract meta-data.
	SessionInfoId *int32 `protobuf:"zigzag32,1,req,name=session_info_id,json=sessionInfoId" json:"session_info_id,omitempty"`
	// UTC time from which session information is requested (e.g. if historical session times are necessary).
	// Current time is used by default.
	FromUtcTime *int64 `protobuf:"zigzag64,2,opt,name=from_utc_time,json=fromUtcTime" json:"from_utc_time,omitempty"`
	// UTC time up to which session information is requested (e.g. if future session times are necessary).
	// Current time is used by default. This field must not be used with subscriptions.
	ToUtcTime *int64 `protobuf:"zigzag64,3,opt,name=to_utc_time,json=toUtcTime" json:"to_utc_time,omitempty"`
}

func (x *SessionInformationRequest) Reset() {
	*x = SessionInformationRequest{}
	mi := &file_protos_WebAPI_trading_session_2_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionInformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionInformationRequest) ProtoMessage() {}

func (x *SessionInformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trading_session_2_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionInformationRequest.ProtoReflect.Descriptor instead.
func (*SessionInformationRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trading_session_2_proto_rawDescGZIP(), []int{0}
}

func (x *SessionInformationRequest) GetSessionInfoId() int32 {
	if x != nil && x.SessionInfoId != nil {
		return *x.SessionInfoId
	}
	return 0
}

func (x *SessionInformationRequest) GetFromUtcTime() int64 {
	if x != nil && x.FromUtcTime != nil {
		return *x.FromUtcTime
	}
	return 0
}

func (x *SessionInformationRequest) GetToUtcTime() int64 {
	if x != nil && x.ToUtcTime != nil {
		return *x.ToUtcTime
	}
	return 0
}

// Report with session information.
type SessionInformationReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Session information ID.
	SessionInfoId *int32 `protobuf:"zigzag32,1,req,name=session_info_id,json=sessionInfoId" json:"session_info_id,omitempty"`
	// List of session segment records.
	SessionSegments []*SessionSegment `protobuf:"bytes,2,rep,name=session_segments,json=sessionSegments" json:"session_segments,omitempty"`
}

func (x *SessionInformationReport) Reset() {
	*x = SessionInformationReport{}
	mi := &file_protos_WebAPI_trading_session_2_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionInformationReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionInformationReport) ProtoMessage() {}

func (x *SessionInformationReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trading_session_2_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionInformationReport.ProtoReflect.Descriptor instead.
func (*SessionInformationReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trading_session_2_proto_rawDescGZIP(), []int{1}
}

func (x *SessionInformationReport) GetSessionInfoId() int32 {
	if x != nil && x.SessionInfoId != nil {
		return *x.SessionInfoId
	}
	return 0
}

func (x *SessionInformationReport) GetSessionSegments() []*SessionSegment {
	if x != nil {
		return x.SessionSegments
	}
	return nil
}

// Session segment record.
type SessionSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Session segment ID useful for updates.
	SessionSegmentId *int64 `protobuf:"zigzag64,1,req,name=session_segment_id,json=sessionSegmentId" json:"session_segment_id,omitempty"`
	// Session group is deleted (used for updates).
	Deleted *bool `protobuf:"varint,2,opt,name=deleted" json:"deleted,omitempty"`
	// UTC time from which this session information is effective (inclusive).
	// It is omitted if this session information was the same since Instrument group was introduced.
	FromUtcTime *int64 `protobuf:"zigzag64,3,opt,name=from_utc_time,json=fromUtcTime" json:"from_utc_time,omitempty"`
	// UTC time up to which this session information is effective (exclusive).
	// It is omitted if this session information is not planned yet to be changed.
	ToUtcTime *int64 `protobuf:"zigzag64,4,opt,name=to_utc_time,json=toUtcTime" json:"to_utc_time,omitempty"`
	// Schedule for all sessions.
	SessionSchedules []*SessionSchedule `protobuf:"bytes,5,rep,name=session_schedules,json=sessionSchedules" json:"session_schedules,omitempty"`
	// Trading day schedule.
	TradingDays []*TradingDay `protobuf:"bytes,6,rep,name=trading_days,json=tradingDays" json:"trading_days,omitempty"`
	// Daily holidays. May have some sessions interday, but daily bar is not created.
	DailyHolidays []*SessionHoliday `protobuf:"bytes,7,rep,name=daily_holidays,json=dailyHolidays" json:"daily_holidays,omitempty"`
}

func (x *SessionSegment) Reset() {
	*x = SessionSegment{}
	mi := &file_protos_WebAPI_trading_session_2_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionSegment) ProtoMessage() {}

func (x *SessionSegment) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trading_session_2_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionSegment.ProtoReflect.Descriptor instead.
func (*SessionSegment) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trading_session_2_proto_rawDescGZIP(), []int{2}
}

func (x *SessionSegment) GetSessionSegmentId() int64 {
	if x != nil && x.SessionSegmentId != nil {
		return *x.SessionSegmentId
	}
	return 0
}

func (x *SessionSegment) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

func (x *SessionSegment) GetFromUtcTime() int64 {
	if x != nil && x.FromUtcTime != nil {
		return *x.FromUtcTime
	}
	return 0
}

func (x *SessionSegment) GetToUtcTime() int64 {
	if x != nil && x.ToUtcTime != nil {
		return *x.ToUtcTime
	}
	return 0
}

func (x *SessionSegment) GetSessionSchedules() []*SessionSchedule {
	if x != nil {
		return x.SessionSchedules
	}
	return nil
}

func (x *SessionSegment) GetTradingDays() []*TradingDay {
	if x != nil {
		return x.TradingDays
	}
	return nil
}

func (x *SessionSegment) GetDailyHolidays() []*SessionHoliday {
	if x != nil {
		return x.DailyHolidays
	}
	return nil
}

// Session schedule.
type SessionSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Session name.
	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// List of session times per day of week.
	SessionDays []*SessionDay `protobuf:"bytes,2,rep,name=session_days,json=sessionDays" json:"session_days,omitempty"`
	// List of exchange specific dates when this session is closed.
	SessionHolidays []*SessionHoliday `protobuf:"bytes,3,rep,name=session_holidays,json=sessionHolidays" json:"session_holidays,omitempty"`
	// True if this is a primary session.
	IsPrimary *bool `protobuf:"varint,4,opt,name=is_primary,json=isPrimary" json:"is_primary,omitempty"`
}

func (x *SessionSchedule) Reset() {
	*x = SessionSchedule{}
	mi := &file_protos_WebAPI_trading_session_2_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionSchedule) ProtoMessage() {}

func (x *SessionSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trading_session_2_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionSchedule.ProtoReflect.Descriptor instead.
func (*SessionSchedule) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trading_session_2_proto_rawDescGZIP(), []int{3}
}

func (x *SessionSchedule) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SessionSchedule) GetSessionDays() []*SessionDay {
	if x != nil {
		return x.SessionDays
	}
	return nil
}

func (x *SessionSchedule) GetSessionHolidays() []*SessionHoliday {
	if x != nil {
		return x.SessionHolidays
	}
	return nil
}

func (x *SessionSchedule) GetIsPrimary() bool {
	if x != nil && x.IsPrimary != nil {
		return *x.IsPrimary
	}
	return false
}

// Trading day schedule.
type TradingDay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Days of week list with the same day schedule.
	DaysOfWeek []DayOfWeek `protobuf:"varint,1,rep,name=days_of_week,json=daysOfWeek,enum=trading_session_2.DayOfWeek" json:"days_of_week,omitempty"`
	// Trading day start offset in milliseconds from 00:00 UTC.
	StartOffset *int64 `protobuf:"zigzag64,2,opt,name=start_offset,json=startOffset" json:"start_offset,omitempty"`
}

func (x *TradingDay) Reset() {
	*x = TradingDay{}
	mi := &file_protos_WebAPI_trading_session_2_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradingDay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingDay) ProtoMessage() {}

func (x *TradingDay) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trading_session_2_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingDay.ProtoReflect.Descriptor instead.
func (*TradingDay) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trading_session_2_proto_rawDescGZIP(), []int{4}
}

func (x *TradingDay) GetDaysOfWeek() []DayOfWeek {
	if x != nil {
		return x.DaysOfWeek
	}
	return nil
}

func (x *TradingDay) GetStartOffset() int64 {
	if x != nil && x.StartOffset != nil {
		return *x.StartOffset
	}
	return 0
}

// Session times per day of week.
// All time offsets are in milliseconds from 00:00 UTC time of a specific date that corresponds to specific day of week.
// Offset values are optional and can be positive and negative
// (e.g. session can be completely 'pre-open' so only pre_open_offset and post_close_offset values are set).
// NOTE: Session times may not match exact exchange schedule especially if exchange have dynamic times
// (e.g. session starts after publishing a settlement, after underlying contract trade, etc.)
// or if exchange sends market data outside of session boundaries (e.g. late trades)
type SessionDay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Days of week list with the same day schedule.
	DaysOfWeek []DayOfWeek `protobuf:"varint,1,rep,name=days_of_week,json=daysOfWeek,enum=trading_session_2.DayOfWeek" json:"days_of_week,omitempty"`
	// Session pre-open time offset.
	PreOpenOffset *int64 `protobuf:"zigzag64,2,opt,name=pre_open_offset,json=preOpenOffset" json:"pre_open_offset,omitempty"`
	// Session open time offset.
	OpenOffset *int64 `protobuf:"zigzag64,3,opt,name=open_offset,json=openOffset" json:"open_offset,omitempty"`
	// Session close time offset.
	CloseOffset *int64 `protobuf:"zigzag64,4,opt,name=close_offset,json=closeOffset" json:"close_offset,omitempty"`
	// Session post-close time offset.
	PostCloseOffset *int64 `protobuf:"zigzag64,5,opt,name=post_close_offset,json=postCloseOffset" json:"post_close_offset,omitempty"`
	// Original day if the session was reallocated to the next trading day.
	// Holidays have to be applied to the original day.
	// SessionDay with original day of week has a single day in the days_of_week list.
	OriginalDayOfWeek *DayOfWeek `protobuf:"varint,6,opt,name=original_day_of_week,json=originalDayOfWeek,enum=trading_session_2.DayOfWeek" json:"original_day_of_week,omitempty"`
}

func (x *SessionDay) Reset() {
	*x = SessionDay{}
	mi := &file_protos_WebAPI_trading_session_2_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionDay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionDay) ProtoMessage() {}

func (x *SessionDay) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trading_session_2_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionDay.ProtoReflect.Descriptor instead.
func (*SessionDay) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trading_session_2_proto_rawDescGZIP(), []int{5}
}

func (x *SessionDay) GetDaysOfWeek() []DayOfWeek {
	if x != nil {
		return x.DaysOfWeek
	}
	return nil
}

func (x *SessionDay) GetPreOpenOffset() int64 {
	if x != nil && x.PreOpenOffset != nil {
		return *x.PreOpenOffset
	}
	return 0
}

func (x *SessionDay) GetOpenOffset() int64 {
	if x != nil && x.OpenOffset != nil {
		return *x.OpenOffset
	}
	return 0
}

func (x *SessionDay) GetCloseOffset() int64 {
	if x != nil && x.CloseOffset != nil {
		return *x.CloseOffset
	}
	return 0
}

func (x *SessionDay) GetPostCloseOffset() int64 {
	if x != nil && x.PostCloseOffset != nil {
		return *x.PostCloseOffset
	}
	return 0
}

func (x *SessionDay) GetOriginalDayOfWeek() DayOfWeek {
	if x != nil && x.OriginalDayOfWeek != nil {
		return *x.OriginalDayOfWeek
	}
	return DayOfWeek_DAY_OF_WEEK_SUNDAY
}

// Session holiday record.
type SessionHoliday struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Date of a holiday.
	HolidayDate *int64 `protobuf:"zigzag64,1,req,name=holiday_date,json=holidayDate" json:"holiday_date,omitempty"`
	// Name of a holiday.
	HolidayName *string `protobuf:"bytes,2,req,name=holiday_name,json=holidayName" json:"holiday_name,omitempty"`
}

func (x *SessionHoliday) Reset() {
	*x = SessionHoliday{}
	mi := &file_protos_WebAPI_trading_session_2_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionHoliday) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionHoliday) ProtoMessage() {}

func (x *SessionHoliday) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trading_session_2_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionHoliday.ProtoReflect.Descriptor instead.
func (*SessionHoliday) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trading_session_2_proto_rawDescGZIP(), []int{6}
}

func (x *SessionHoliday) GetHolidayDate() int64 {
	if x != nil && x.HolidayDate != nil {
		return *x.HolidayDate
	}
	return 0
}

func (x *SessionHoliday) GetHolidayName() string {
	if x != nil && x.HolidayName != nil {
		return *x.HolidayName
	}
	return ""
}

// Request for session open/close times.
type SessionTimeRangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of a session information from contract meta-data.
	SessionInfoId *int32 `protobuf:"zigzag32,1,req,name=session_info_id,json=sessionInfoId" json:"session_info_id,omitempty"`
	// Exactly two of the next three fields have to be set:
	// UTC time of start of the time range to get information for.
	// Sessions with post-close time > from_utc_time are returned.
	FromUtcTime *int64 `protobuf:"zigzag64,2,opt,name=from_utc_time,json=fromUtcTime" json:"from_utc_time,omitempty"`
	// UTC time of end of the time range to get information for.
	// Sessions with pre-open time < to_utc_time are returned.
	ToUtcTime *int64 `protobuf:"zigzag64,3,opt,name=to_utc_time,json=toUtcTime" json:"to_utc_time,omitempty"`
	// Number of session timeranges to return.
	// If used with from_utc_time then it is the number of timeranges to return starting from that time.
	// If used with to_utc_time then it is the number of timeranges to return preceding that time.
	Count *uint32 `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
}

func (x *SessionTimeRangeRequest) Reset() {
	*x = SessionTimeRangeRequest{}
	mi := &file_protos_WebAPI_trading_session_2_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionTimeRangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionTimeRangeRequest) ProtoMessage() {}

func (x *SessionTimeRangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trading_session_2_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionTimeRangeRequest.ProtoReflect.Descriptor instead.
func (*SessionTimeRangeRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trading_session_2_proto_rawDescGZIP(), []int{7}
}

func (x *SessionTimeRangeRequest) GetSessionInfoId() int32 {
	if x != nil && x.SessionInfoId != nil {
		return *x.SessionInfoId
	}
	return 0
}

func (x *SessionTimeRangeRequest) GetFromUtcTime() int64 {
	if x != nil && x.FromUtcTime != nil {
		return *x.FromUtcTime
	}
	return 0
}

func (x *SessionTimeRangeRequest) GetToUtcTime() int64 {
	if x != nil && x.ToUtcTime != nil {
		return *x.ToUtcTime
	}
	return 0
}

func (x *SessionTimeRangeRequest) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// This may come in multiple chunks if many items are reported.
type SessionTimeRangeReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Session open/close times.
	SessionTimeRanges []*SessionTimeRange `protobuf:"bytes,1,rep,name=session_time_ranges,json=sessionTimeRanges" json:"session_time_ranges,omitempty"`
	// Request was done for the range that was too long, so it was truncated.
	Truncated *bool `protobuf:"varint,2,opt,name=truncated" json:"truncated,omitempty"`
}

func (x *SessionTimeRangeReport) Reset() {
	*x = SessionTimeRangeReport{}
	mi := &file_protos_WebAPI_trading_session_2_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionTimeRangeReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionTimeRangeReport) ProtoMessage() {}

func (x *SessionTimeRangeReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trading_session_2_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionTimeRangeReport.ProtoReflect.Descriptor instead.
func (*SessionTimeRangeReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trading_session_2_proto_rawDescGZIP(), []int{8}
}

func (x *SessionTimeRangeReport) GetSessionTimeRanges() []*SessionTimeRange {
	if x != nil {
		return x.SessionTimeRanges
	}
	return nil
}

func (x *SessionTimeRangeReport) GetTruncated() bool {
	if x != nil && x.Truncated != nil {
		return *x.Truncated
	}
	return false
}

// Session open/close times and trading day date.
type SessionTimeRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UTC time of session pre-open.
	PreOpenUtcTime *int64 `protobuf:"zigzag64,1,req,name=pre_open_utc_time,json=preOpenUtcTime" json:"pre_open_utc_time,omitempty"`
	// UTC time of session open.
	OpenUtcTime *int64 `protobuf:"zigzag64,2,req,name=open_utc_time,json=openUtcTime" json:"open_utc_time,omitempty"`
	// UTC time of session close.
	CloseUtcTime *int64 `protobuf:"zigzag64,3,req,name=close_utc_time,json=closeUtcTime" json:"close_utc_time,omitempty"`
	// UTC time of session post-close.
	PostCloseUtcTime *int64 `protobuf:"zigzag64,4,req,name=post_close_utc_time,json=postCloseUtcTime" json:"post_close_utc_time,omitempty"`
	// Trading date the session belongs to, local to exchange, time part is not used (set to 00:00).
	TradeDate *int64 `protobuf:"zigzag64,5,req,name=trade_date,json=tradeDate" json:"trade_date,omitempty"`
	// Session name.
	SessionName *string `protobuf:"bytes,6,req,name=session_name,json=sessionName" json:"session_name,omitempty"`
}

func (x *SessionTimeRange) Reset() {
	*x = SessionTimeRange{}
	mi := &file_protos_WebAPI_trading_session_2_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionTimeRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionTimeRange) ProtoMessage() {}

func (x *SessionTimeRange) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trading_session_2_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionTimeRange.ProtoReflect.Descriptor instead.
func (*SessionTimeRange) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trading_session_2_proto_rawDescGZIP(), []int{9}
}

func (x *SessionTimeRange) GetPreOpenUtcTime() int64 {
	if x != nil && x.PreOpenUtcTime != nil {
		return *x.PreOpenUtcTime
	}
	return 0
}

func (x *SessionTimeRange) GetOpenUtcTime() int64 {
	if x != nil && x.OpenUtcTime != nil {
		return *x.OpenUtcTime
	}
	return 0
}

func (x *SessionTimeRange) GetCloseUtcTime() int64 {
	if x != nil && x.CloseUtcTime != nil {
		return *x.CloseUtcTime
	}
	return 0
}

func (x *SessionTimeRange) GetPostCloseUtcTime() int64 {
	if x != nil && x.PostCloseUtcTime != nil {
		return *x.PostCloseUtcTime
	}
	return 0
}

func (x *SessionTimeRange) GetTradeDate() int64 {
	if x != nil && x.TradeDate != nil {
		return *x.TradeDate
	}
	return 0
}

func (x *SessionTimeRange) GetSessionName() string {
	if x != nil && x.SessionName != nil {
		return *x.SessionName
	}
	return ""
}

// Request for trading day open/close times.
type TradingDayTimeRangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of a session information from contract meta-data.
	SessionInfoId *int32 `protobuf:"zigzag32,1,req,name=session_info_id,json=sessionInfoId" json:"session_info_id,omitempty"`
	// True if holidays should be included in the response.
	IncludeHolidays *bool `protobuf:"varint,2,opt,name=include_holidays,json=includeHolidays" json:"include_holidays,omitempty"`
	// Exactly two of the next three fields have to be set:
	// UTC time of start of the time range to get information for.
	// Trading days with end time > from_utc_time are returned.
	FromUtcTime *int64 `protobuf:"zigzag64,3,opt,name=from_utc_time,json=fromUtcTime" json:"from_utc_time,omitempty"`
	// UTC time of end of the time range to get information for.
	// Trading days with start time < to_utc_time are returned.
	ToUtcTime *int64 `protobuf:"zigzag64,4,opt,name=to_utc_time,json=toUtcTime" json:"to_utc_time,omitempty"`
	// Number of trading day timeranges to return.
	// If used with from_utc_time then it is the number of timeranges to return starting from that time.
	// If used with to_utc_time then it is the number of timeranges to return preceding that time.
	Count *uint32 `protobuf:"varint,5,opt,name=count" json:"count,omitempty"`
}

func (x *TradingDayTimeRangeRequest) Reset() {
	*x = TradingDayTimeRangeRequest{}
	mi := &file_protos_WebAPI_trading_session_2_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradingDayTimeRangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingDayTimeRangeRequest) ProtoMessage() {}

func (x *TradingDayTimeRangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trading_session_2_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingDayTimeRangeRequest.ProtoReflect.Descriptor instead.
func (*TradingDayTimeRangeRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trading_session_2_proto_rawDescGZIP(), []int{10}
}

func (x *TradingDayTimeRangeRequest) GetSessionInfoId() int32 {
	if x != nil && x.SessionInfoId != nil {
		return *x.SessionInfoId
	}
	return 0
}

func (x *TradingDayTimeRangeRequest) GetIncludeHolidays() bool {
	if x != nil && x.IncludeHolidays != nil {
		return *x.IncludeHolidays
	}
	return false
}

func (x *TradingDayTimeRangeRequest) GetFromUtcTime() int64 {
	if x != nil && x.FromUtcTime != nil {
		return *x.FromUtcTime
	}
	return 0
}

func (x *TradingDayTimeRangeRequest) GetToUtcTime() int64 {
	if x != nil && x.ToUtcTime != nil {
		return *x.ToUtcTime
	}
	return 0
}

func (x *TradingDayTimeRangeRequest) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// This may come in multiple chunks if many items are reported.
type TradingDayTimeRangeReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Trading day start/end times.
	TradingDayTimeRanges []*TradingDayTimeRange `protobuf:"bytes,1,rep,name=trading_day_time_ranges,json=tradingDayTimeRanges" json:"trading_day_time_ranges,omitempty"`
	// Request was done for the range that was too long, so it was truncated.
	Truncated *bool `protobuf:"varint,2,opt,name=truncated" json:"truncated,omitempty"`
}

func (x *TradingDayTimeRangeReport) Reset() {
	*x = TradingDayTimeRangeReport{}
	mi := &file_protos_WebAPI_trading_session_2_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradingDayTimeRangeReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingDayTimeRangeReport) ProtoMessage() {}

func (x *TradingDayTimeRangeReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trading_session_2_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingDayTimeRangeReport.ProtoReflect.Descriptor instead.
func (*TradingDayTimeRangeReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trading_session_2_proto_rawDescGZIP(), []int{11}
}

func (x *TradingDayTimeRangeReport) GetTradingDayTimeRanges() []*TradingDayTimeRange {
	if x != nil {
		return x.TradingDayTimeRanges
	}
	return nil
}

func (x *TradingDayTimeRangeReport) GetTruncated() bool {
	if x != nil && x.Truncated != nil {
		return *x.Truncated
	}
	return false
}

// Trading day pre-open/post-close, open/close times and date.
type TradingDayTimeRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Trading date, local to exchange, time part is not used (set to 00:00).
	TradeDate *int64 `protobuf:"zigzag64,1,req,name=trade_date,json=tradeDate" json:"trade_date,omitempty"`
	// The next fields are not present for holidays,
	// because there’s no trading day for these dates, hence no pre-open/post-close and open/close times.
	// UTC time of trading day pre-open (first session pre-open time).
	TradingDayPreOpenUtcTime *int64 `protobuf:"zigzag64,2,opt,name=trading_day_pre_open_utc_time,json=tradingDayPreOpenUtcTime" json:"trading_day_pre_open_utc_time,omitempty"`
	// UTC time of trading day open (first session open time).
	TradingDayOpenUtcTime *int64 `protobuf:"zigzag64,6,opt,name=trading_day_open_utc_time,json=tradingDayOpenUtcTime" json:"trading_day_open_utc_time,omitempty"`
	// UTC time of trading day close (last session close time).
	TradingDayCloseUtcTime *int64 `protobuf:"zigzag64,7,opt,name=trading_day_close_utc_time,json=tradingDayCloseUtcTime" json:"trading_day_close_utc_time,omitempty"`
	// UTC time of trading day post-close (last session post-Close time).
	TradingDayPostCloseUtcTime *int64 `protobuf:"zigzag64,3,opt,name=trading_day_post_close_utc_time,json=tradingDayPostCloseUtcTime" json:"trading_day_post_close_utc_time,omitempty"`
	// Primary session open UTC time of trading day.
	OpenPrimaryUtcTime *int64 `protobuf:"zigzag64,4,opt,name=open_primary_utc_time,json=openPrimaryUtcTime" json:"open_primary_utc_time,omitempty"`
	// Primary session close UTC time of trading day.
	ClosePrimaryUtcTime *int64 `protobuf:"zigzag64,5,opt,name=close_primary_utc_time,json=closePrimaryUtcTime" json:"close_primary_utc_time,omitempty"`
}

func (x *TradingDayTimeRange) Reset() {
	*x = TradingDayTimeRange{}
	mi := &file_protos_WebAPI_trading_session_2_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradingDayTimeRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingDayTimeRange) ProtoMessage() {}

func (x *TradingDayTimeRange) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trading_session_2_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingDayTimeRange.ProtoReflect.Descriptor instead.
func (*TradingDayTimeRange) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trading_session_2_proto_rawDescGZIP(), []int{12}
}

func (x *TradingDayTimeRange) GetTradeDate() int64 {
	if x != nil && x.TradeDate != nil {
		return *x.TradeDate
	}
	return 0
}

func (x *TradingDayTimeRange) GetTradingDayPreOpenUtcTime() int64 {
	if x != nil && x.TradingDayPreOpenUtcTime != nil {
		return *x.TradingDayPreOpenUtcTime
	}
	return 0
}

func (x *TradingDayTimeRange) GetTradingDayOpenUtcTime() int64 {
	if x != nil && x.TradingDayOpenUtcTime != nil {
		return *x.TradingDayOpenUtcTime
	}
	return 0
}

func (x *TradingDayTimeRange) GetTradingDayCloseUtcTime() int64 {
	if x != nil && x.TradingDayCloseUtcTime != nil {
		return *x.TradingDayCloseUtcTime
	}
	return 0
}

func (x *TradingDayTimeRange) GetTradingDayPostCloseUtcTime() int64 {
	if x != nil && x.TradingDayPostCloseUtcTime != nil {
		return *x.TradingDayPostCloseUtcTime
	}
	return 0
}

func (x *TradingDayTimeRange) GetOpenPrimaryUtcTime() int64 {
	if x != nil && x.OpenPrimaryUtcTime != nil {
		return *x.OpenPrimaryUtcTime
	}
	return 0
}

func (x *TradingDayTimeRange) GetClosePrimaryUtcTime() int64 {
	if x != nil && x.ClosePrimaryUtcTime != nil {
		return *x.ClosePrimaryUtcTime
	}
	return 0
}

var File_protos_WebAPI_trading_session_2_proto protoreflect.FileDescriptor

var file_protos_WebAPI_trading_session_2_proto_rawDesc = []byte{
	0x0a, 0x25, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49, 0x2f,
	0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x22, 0x87, 0x01, 0x0a, 0x19, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x11, 0x52, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x74, 0x63,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x6f, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x12, 0x52, 0x09, 0x74, 0x6f, 0x55, 0x74, 0x63,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x18, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x11, 0x52, 0x0d, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x10, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xf9, 0x02, 0x0a, 0x0e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x12, 0x52, 0x10, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x55,
	0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x6f, 0x5f, 0x75, 0x74, 0x63,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x12, 0x52, 0x09, 0x74, 0x6f, 0x55,
	0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x11, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x10, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x32, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x52, 0x0b, 0x74, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x73, 0x12, 0x48, 0x0a, 0x0e, 0x64, 0x61, 0x69,
	0x6c, 0x79, 0x5f, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x6c,
	0x69, 0x64, 0x61, 0x79, 0x52, 0x0d, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x48, 0x6f, 0x6c, 0x69, 0x64,
	0x61, 0x79, 0x73, 0x22, 0xd4, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79,
	0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x4c, 0x0a,
	0x10, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x52, 0x0f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x6f, 0x0a, 0x0a, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x3e, 0x0a, 0x0c, 0x64, 0x61, 0x79, 0x73,
	0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x32, 0x2e, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x52, 0x0a, 0x64, 0x61,
	0x79, 0x73, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0b,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0xb3, 0x02, 0x0a, 0x0a,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x12, 0x3e, 0x0a, 0x0c, 0x64, 0x61,
	0x79, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x52, 0x0a,
	0x64, 0x61, 0x79, 0x73, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72,
	0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x12, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x12, 0x52, 0x0f, 0x70, 0x6f, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x4d, 0x0a, 0x14, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64,
	0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x52, 0x11,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65,
	0x6b, 0x22, 0x56, 0x0a, 0x0e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x6c, 0x69,
	0x64, 0x61, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x12, 0x52, 0x0b, 0x68, 0x6f, 0x6c, 0x69, 0x64,
	0x61, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x6f,
	0x6c, 0x69, 0x64, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x17, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x11, 0x52, 0x0d,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x12, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x6f, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x12, 0x52, 0x09, 0x74, 0x6f, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x53, 0x0a, 0x13, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x32, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x11, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x75, 0x6e, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x74, 0x72, 0x75, 0x6e,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x22, 0xf8, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x70, 0x72,
	0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x12, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x55, 0x74,
	0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x75, 0x74,
	0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x12, 0x52, 0x0b, 0x6f, 0x70,
	0x65, 0x6e, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x12, 0x52, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2d, 0x0a, 0x13, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x75, 0x74,
	0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x12, 0x52, 0x10, 0x70, 0x6f,
	0x73, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x02,
	0x28, 0x12, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xc9, 0x01, 0x0a, 0x1a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x26, 0x0a, 0x0f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x11, 0x52, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61,
	0x79, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x55,
	0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x6f, 0x5f, 0x75, 0x74, 0x63,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x12, 0x52, 0x09, 0x74, 0x6f, 0x55,
	0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x98, 0x01, 0x0a,
	0x19, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x5d, 0x0a, 0x17, 0x74, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e,
	0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x14, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x75,
	0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x74, 0x72,
	0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x22, 0x98, 0x03, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x12, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3f,
	0x0a, 0x1d, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x70, 0x72,
	0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x12, 0x52, 0x18, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61,
	0x79, 0x50, 0x72, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x38, 0x0a, 0x19, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x6f,
	0x70, 0x65, 0x6e, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x15, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x4f, 0x70,
	0x65, 0x6e, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x1a, 0x74, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x75,
	0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x12, 0x52, 0x16, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x55, 0x74,
	0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x1f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x64, 0x61, 0x79, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f,
	0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x12, 0x52, 0x1a,
	0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x12, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x6e, 0x50,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a,
	0x16, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x75,
	0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x12, 0x52, 0x13, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x55, 0x74, 0x63, 0x54, 0x69,
	0x6d, 0x65, 0x2a, 0xbb, 0x01, 0x0a, 0x09, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b,
	0x12, 0x16, 0x0a, 0x12, 0x44, 0x41, 0x59, 0x5f, 0x4f, 0x46, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x5f,
	0x53, 0x55, 0x4e, 0x44, 0x41, 0x59, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x41, 0x59, 0x5f,
	0x4f, 0x46, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x5f, 0x4d, 0x4f, 0x4e, 0x44, 0x41, 0x59, 0x10, 0x01,
	0x12, 0x17, 0x0a, 0x13, 0x44, 0x41, 0x59, 0x5f, 0x4f, 0x46, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x5f,
	0x54, 0x55, 0x45, 0x53, 0x44, 0x41, 0x59, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x41, 0x59,
	0x5f, 0x4f, 0x46, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x5f, 0x57, 0x45, 0x44, 0x4e, 0x45, 0x53, 0x44,
	0x41, 0x59, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x41, 0x59, 0x5f, 0x4f, 0x46, 0x5f, 0x57,
	0x45, 0x45, 0x4b, 0x5f, 0x54, 0x48, 0x55, 0x52, 0x53, 0x44, 0x41, 0x59, 0x10, 0x04, 0x12, 0x16,
	0x0a, 0x12, 0x44, 0x41, 0x59, 0x5f, 0x4f, 0x46, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x5f, 0x46, 0x52,
	0x49, 0x44, 0x41, 0x59, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x41, 0x59, 0x5f, 0x4f, 0x46,
	0x5f, 0x57, 0x45, 0x45, 0x4b, 0x5f, 0x53, 0x41, 0x54, 0x55, 0x52, 0x44, 0x41, 0x59, 0x10, 0x06,
	0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62,
	0x41, 0x50, 0x49,
}

var (
	file_protos_WebAPI_trading_session_2_proto_rawDescOnce sync.Once
	file_protos_WebAPI_trading_session_2_proto_rawDescData = file_protos_WebAPI_trading_session_2_proto_rawDesc
)

func file_protos_WebAPI_trading_session_2_proto_rawDescGZIP() []byte {
	file_protos_WebAPI_trading_session_2_proto_rawDescOnce.Do(func() {
		file_protos_WebAPI_trading_session_2_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_WebAPI_trading_session_2_proto_rawDescData)
	})
	return file_protos_WebAPI_trading_session_2_proto_rawDescData
}

var file_protos_WebAPI_trading_session_2_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_protos_WebAPI_trading_session_2_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_protos_WebAPI_trading_session_2_proto_goTypes = []any{
	(DayOfWeek)(0),                     // 0: trading_session_2.DayOfWeek
	(*SessionInformationRequest)(nil),  // 1: trading_session_2.SessionInformationRequest
	(*SessionInformationReport)(nil),   // 2: trading_session_2.SessionInformationReport
	(*SessionSegment)(nil),             // 3: trading_session_2.SessionSegment
	(*SessionSchedule)(nil),            // 4: trading_session_2.SessionSchedule
	(*TradingDay)(nil),                 // 5: trading_session_2.TradingDay
	(*SessionDay)(nil),                 // 6: trading_session_2.SessionDay
	(*SessionHoliday)(nil),             // 7: trading_session_2.SessionHoliday
	(*SessionTimeRangeRequest)(nil),    // 8: trading_session_2.SessionTimeRangeRequest
	(*SessionTimeRangeReport)(nil),     // 9: trading_session_2.SessionTimeRangeReport
	(*SessionTimeRange)(nil),           // 10: trading_session_2.SessionTimeRange
	(*TradingDayTimeRangeRequest)(nil), // 11: trading_session_2.TradingDayTimeRangeRequest
	(*TradingDayTimeRangeReport)(nil),  // 12: trading_session_2.TradingDayTimeRangeReport
	(*TradingDayTimeRange)(nil),        // 13: trading_session_2.TradingDayTimeRange
}
var file_protos_WebAPI_trading_session_2_proto_depIdxs = []int32{
	3,  // 0: trading_session_2.SessionInformationReport.session_segments:type_name -> trading_session_2.SessionSegment
	4,  // 1: trading_session_2.SessionSegment.session_schedules:type_name -> trading_session_2.SessionSchedule
	5,  // 2: trading_session_2.SessionSegment.trading_days:type_name -> trading_session_2.TradingDay
	7,  // 3: trading_session_2.SessionSegment.daily_holidays:type_name -> trading_session_2.SessionHoliday
	6,  // 4: trading_session_2.SessionSchedule.session_days:type_name -> trading_session_2.SessionDay
	7,  // 5: trading_session_2.SessionSchedule.session_holidays:type_name -> trading_session_2.SessionHoliday
	0,  // 6: trading_session_2.TradingDay.days_of_week:type_name -> trading_session_2.DayOfWeek
	0,  // 7: trading_session_2.SessionDay.days_of_week:type_name -> trading_session_2.DayOfWeek
	0,  // 8: trading_session_2.SessionDay.original_day_of_week:type_name -> trading_session_2.DayOfWeek
	10, // 9: trading_session_2.SessionTimeRangeReport.session_time_ranges:type_name -> trading_session_2.SessionTimeRange
	13, // 10: trading_session_2.TradingDayTimeRangeReport.trading_day_time_ranges:type_name -> trading_session_2.TradingDayTimeRange
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_protos_WebAPI_trading_session_2_proto_init() }
func file_protos_WebAPI_trading_session_2_proto_init() {
	if File_protos_WebAPI_trading_session_2_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_WebAPI_trading_session_2_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_WebAPI_trading_session_2_proto_goTypes,
		DependencyIndexes: file_protos_WebAPI_trading_session_2_proto_depIdxs,
		EnumInfos:         file_protos_WebAPI_trading_session_2_proto_enumTypes,
		MessageInfos:      file_protos_WebAPI_trading_session_2_proto_msgTypes,
	}.Build()
	File_protos_WebAPI_trading_session_2_proto = out.File
	file_protos_WebAPI_trading_session_2_proto_rawDesc = nil
	file_protos_WebAPI_trading_session_2_proto_goTypes = nil
	file_protos_WebAPI_trading_session_2_proto_depIdxs = nil
}
