// Trading account related messages

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: protos/WebAPI/trading_account_2.proto

package WebAPI

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Brokerage type.
type Brokerage_BrokerageType int32

const (
	// Regular.
	Brokerage_BROKERAGE_TYPE_REGULAR Brokerage_BrokerageType = 1
	// Simulation.
	Brokerage_BROKERAGE_TYPE_SIM Brokerage_BrokerageType = 2
	// Demo.
	Brokerage_BROKERAGE_TYPE_DEMO Brokerage_BrokerageType = 3
)

// Enum value maps for Brokerage_BrokerageType.
var (
	Brokerage_BrokerageType_name = map[int32]string{
		1: "BROKERAGE_TYPE_REGULAR",
		2: "BROKERAGE_TYPE_SIM",
		3: "BROKERAGE_TYPE_DEMO",
	}
	Brokerage_BrokerageType_value = map[string]int32{
		"BROKERAGE_TYPE_REGULAR": 1,
		"BROKERAGE_TYPE_SIM":     2,
		"BROKERAGE_TYPE_DEMO":    3,
	}
)

func (x Brokerage_BrokerageType) Enum() *Brokerage_BrokerageType {
	p := new(Brokerage_BrokerageType)
	*p = x
	return p
}

func (x Brokerage_BrokerageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Brokerage_BrokerageType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_trading_account_2_proto_enumTypes[0].Descriptor()
}

func (Brokerage_BrokerageType) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_trading_account_2_proto_enumTypes[0]
}

func (x Brokerage_BrokerageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Brokerage_BrokerageType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Brokerage_BrokerageType(num)
	return nil
}

// Deprecated: Use Brokerage_BrokerageType.Descriptor instead.
func (Brokerage_BrokerageType) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_trading_account_2_proto_rawDescGZIP(), []int{2, 0}
}

// Account connection status list.
// It is used for accounts that require additional authorization.
type Account_AccountConnectionStatus int32

const (
	// Route is offline, connection is impossible.
	Account_ACCOUNT_CONNECTION_STATUS_OFFLINE Account_AccountConnectionStatus = 1
	// Connection is not established but can be initiated by a logon message.
	Account_ACCOUNT_CONNECTION_STATUS_DISCONNECTED Account_AccountConnectionStatus = 2
	// Connection is initiated but is not fully established.
	Account_ACCOUNT_CONNECTION_STATUS_CONNECTING Account_AccountConnectionStatus = 3
	// Connection is established, trading is possible.
	Account_ACCOUNT_CONNECTION_STATUS_CONNECTED Account_AccountConnectionStatus = 4
)

// Enum value maps for Account_AccountConnectionStatus.
var (
	Account_AccountConnectionStatus_name = map[int32]string{
		1: "ACCOUNT_CONNECTION_STATUS_OFFLINE",
		2: "ACCOUNT_CONNECTION_STATUS_DISCONNECTED",
		3: "ACCOUNT_CONNECTION_STATUS_CONNECTING",
		4: "ACCOUNT_CONNECTION_STATUS_CONNECTED",
	}
	Account_AccountConnectionStatus_value = map[string]int32{
		"ACCOUNT_CONNECTION_STATUS_OFFLINE":      1,
		"ACCOUNT_CONNECTION_STATUS_DISCONNECTED": 2,
		"ACCOUNT_CONNECTION_STATUS_CONNECTING":   3,
		"ACCOUNT_CONNECTION_STATUS_CONNECTED":    4,
	}
)

func (x Account_AccountConnectionStatus) Enum() *Account_AccountConnectionStatus {
	p := new(Account_AccountConnectionStatus)
	*p = x
	return p
}

func (x Account_AccountConnectionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Account_AccountConnectionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_trading_account_2_proto_enumTypes[1].Descriptor()
}

func (Account_AccountConnectionStatus) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_trading_account_2_proto_enumTypes[1]
}

func (x Account_AccountConnectionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Account_AccountConnectionStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Account_AccountConnectionStatus(num)
	return nil
}

// Deprecated: Use Account_AccountConnectionStatus.Descriptor instead.
func (Account_AccountConnectionStatus) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_trading_account_2_proto_rawDescGZIP(), []int{4, 0}
}

// Request for a list of accounts this user is authorized to use and/ or monitor, empty message.
type AccountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, add cryptographic signature to the responses.
	SignResponses *bool `protobuf:"varint,1,opt,name=sign_responses,json=signResponses" json:"sign_responses,omitempty"`
}

func (x *AccountsRequest) Reset() {
	*x = AccountsRequest{}
	mi := &file_protos_WebAPI_trading_account_2_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountsRequest) ProtoMessage() {}

func (x *AccountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trading_account_2_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountsRequest.ProtoReflect.Descriptor instead.
func (*AccountsRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trading_account_2_proto_rawDescGZIP(), []int{0}
}

func (x *AccountsRequest) GetSignResponses() bool {
	if x != nil && x.SignResponses != nil {
		return *x.SignResponses
	}
	return false
}

// Response with a list of authorized accounts grouped by brokerage firms and internal sales series (account groups),
// the same account can not belong to more than one account group.
type AccountsReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List or brokerages with accounts the user works with.
	Brokerages []*Brokerage `protobuf:"bytes,1,rep,name=brokerages" json:"brokerages,omitempty"`
	// Cryptographic signature.
	Signature []byte `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
}

func (x *AccountsReport) Reset() {
	*x = AccountsReport{}
	mi := &file_protos_WebAPI_trading_account_2_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountsReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountsReport) ProtoMessage() {}

func (x *AccountsReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trading_account_2_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountsReport.ProtoReflect.Descriptor instead.
func (*AccountsReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trading_account_2_proto_rawDescGZIP(), []int{1}
}

func (x *AccountsReport) GetBrokerages() []*Brokerage {
	if x != nil {
		return x.Brokerages
	}
	return nil
}

func (x *AccountsReport) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// List of brokerage accounts.
type Brokerage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Brokerage firm ID in CQG trade routing system.
	Id *uint32 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	// Brokerage firm name.
	Name *string `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	// This field is associated with BrokerageType enum type.
	Type *uint32 `protobuf:"varint,4,opt,name=type" json:"type,omitempty"`
	// List of sales series.
	SalesSeries []*SalesSeries `protobuf:"bytes,3,rep,name=sales_series,json=salesSeries" json:"sales_series,omitempty"`
}

func (x *Brokerage) Reset() {
	*x = Brokerage{}
	mi := &file_protos_WebAPI_trading_account_2_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Brokerage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Brokerage) ProtoMessage() {}

func (x *Brokerage) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trading_account_2_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Brokerage.ProtoReflect.Descriptor instead.
func (*Brokerage) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trading_account_2_proto_rawDescGZIP(), []int{2}
}

func (x *Brokerage) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Brokerage) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Brokerage) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *Brokerage) GetSalesSeries() []*SalesSeries {
	if x != nil {
		return x.SalesSeries
	}
	return nil
}

// List of accounts in a sales series group.
type SalesSeries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sales series number in CQG trade routing system.
	Number *string `protobuf:"bytes,1,req,name=number" json:"number,omitempty"`
	// Sales series name.
	Name *string `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	// List of accounts.
	Accounts []*Account `protobuf:"bytes,3,rep,name=accounts" json:"accounts,omitempty"`
}

func (x *SalesSeries) Reset() {
	*x = SalesSeries{}
	mi := &file_protos_WebAPI_trading_account_2_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SalesSeries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesSeries) ProtoMessage() {}

func (x *SalesSeries) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trading_account_2_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesSeries.ProtoReflect.Descriptor instead.
func (*SalesSeries) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trading_account_2_proto_rawDescGZIP(), []int{3}
}

func (x *SalesSeries) GetNumber() string {
	if x != nil && x.Number != nil {
		return *x.Number
	}
	return ""
}

func (x *SalesSeries) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SalesSeries) GetAccounts() []*Account {
	if x != nil {
		return x.Accounts
	}
	return nil
}

// Trade routing account data.
type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Account ID in CQG trade routing system.
	AccountId *int32 `protobuf:"zigzag32,1,req,name=account_id,json=accountId" json:"account_id,omitempty"`
	// Account number in Brokerage Firm.
	BrokerageAccountNumber *string `protobuf:"bytes,2,req,name=brokerage_account_number,json=brokerageAccountNumber" json:"brokerage_account_number,omitempty"`
	// Account name in CQG trade routing system.
	Name *string `protobuf:"bytes,3,req,name=name" json:"name,omitempty"`
	// Last statement date for this account
	// (brokerage local date in time format, use date part only).
	LastStatementDate *int64 `protobuf:"zigzag64,4,req,name=last_statement_date,json=lastStatementDate" json:"last_statement_date,omitempty"`
	// True if user can only monitor this account without trading.
	IsViewOnly *bool `protobuf:"varint,5,opt,name=is_view_only,json=isViewOnly" json:"is_view_only,omitempty"`
	// True if user was unauthorized and is not able to use/ see this account anymore.
	IsUnauthorized *bool `protobuf:"varint,6,opt,name=is_unauthorized,json=isUnauthorized" json:"is_unauthorized,omitempty"`
	// Current account connection status.
	// It is set for only accounts that require authorization.
	AccountConnectionStatus *uint32 `protobuf:"varint,8,opt,name=account_connection_status,json=accountConnectionStatus" json:"account_connection_status,omitempty"`
	// Account status last update time.
	// It is set for only accounts that require authorization.
	AccountConnectionStatusUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=account_connection_status_utc_timestamp,json=accountConnectionStatusUtcTimestamp" json:"account_connection_status_utc_timestamp,omitempty"`
	// Optional list of authorized OTC contributors.
	ContributorIds []string `protobuf:"bytes,10,rep,name=contributor_ids,json=contributorIds" json:"contributor_ids,omitempty"`
	// This flag shows if pre trade mid market mark should be calculated by client
	// and provided via order extra attribute "PreTradeMidMarketMark" during order placement or modification.
	PreTradeMidMarketMarkRequired *bool `protobuf:"varint,11,opt,name=pre_trade_mid_market_mark_required,json=preTradeMidMarketMarkRequired" json:"pre_trade_mid_market_mark_required,omitempty"`
	// This flag shows if current account can be used to place orders into external accounts.
	// See order_2.Order.external_account_number.
	AllowExternalAccounts *bool `protobuf:"varint,12,opt,name=allow_external_accounts,json=allowExternalAccounts" json:"allow_external_accounts,omitempty"`
	// True if it is omnibus account.
	IsOmnibus *bool `protobuf:"varint,13,opt,name=is_omnibus,json=isOmnibus" json:"is_omnibus,omitempty"`
	// True if it is a group account member.
	IsGroupMember *bool `protobuf:"varint,14,opt,name=is_group_member,json=isGroupMember" json:"is_group_member,omitempty"`
	// If true, all orders for the account will be placed as care orders.
	ForceCareOrders *bool `protobuf:"varint,15,opt,name=force_care_orders,json=forceCareOrders" json:"force_care_orders,omitempty"`
	// True if the account was cleared with Back Office statements (whether received from brokerage or generated by CQG).
	// For accounts that were never cleared, the flag is set to true if the account is configured to be cleared with
	// Back Office statements.
	ClearedByStatements *bool `protobuf:"varint,16,opt,name=cleared_by_statements,json=clearedByStatements" json:"cleared_by_statements,omitempty"`
	// True if this account supports subscriptions on exchange balances.
	// (see trade_routing_2.TradeSubscription.SUBSCRIPTION_SCOPE_EXCHANGE_BALANCES)
	SupportsExchangeBalancesSubscription *bool `protobuf:"varint,17,opt,name=supports_exchange_balances_subscription,json=supportsExchangeBalancesSubscription" json:"supports_exchange_balances_subscription,omitempty"`
	// True if this account supports subscriptions on exchange positions.
	// (see trade_routing_2.TradeSubscription.SUBSCRIPTION_SCOPE_EXCHANGE_POSITIONS)
	SupportsExchangePositionsSubscription *bool `protobuf:"varint,18,opt,name=supports_exchange_positions_subscription,json=supportsExchangePositionsSubscription" json:"supports_exchange_positions_subscription,omitempty"`
}

func (x *Account) Reset() {
	*x = Account{}
	mi := &file_protos_WebAPI_trading_account_2_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trading_account_2_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trading_account_2_proto_rawDescGZIP(), []int{4}
}

func (x *Account) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *Account) GetBrokerageAccountNumber() string {
	if x != nil && x.BrokerageAccountNumber != nil {
		return *x.BrokerageAccountNumber
	}
	return ""
}

func (x *Account) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Account) GetLastStatementDate() int64 {
	if x != nil && x.LastStatementDate != nil {
		return *x.LastStatementDate
	}
	return 0
}

func (x *Account) GetIsViewOnly() bool {
	if x != nil && x.IsViewOnly != nil {
		return *x.IsViewOnly
	}
	return false
}

func (x *Account) GetIsUnauthorized() bool {
	if x != nil && x.IsUnauthorized != nil {
		return *x.IsUnauthorized
	}
	return false
}

func (x *Account) GetAccountConnectionStatus() uint32 {
	if x != nil && x.AccountConnectionStatus != nil {
		return *x.AccountConnectionStatus
	}
	return 0
}

func (x *Account) GetAccountConnectionStatusUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.AccountConnectionStatusUtcTimestamp
	}
	return nil
}

func (x *Account) GetContributorIds() []string {
	if x != nil {
		return x.ContributorIds
	}
	return nil
}

func (x *Account) GetPreTradeMidMarketMarkRequired() bool {
	if x != nil && x.PreTradeMidMarketMarkRequired != nil {
		return *x.PreTradeMidMarketMarkRequired
	}
	return false
}

func (x *Account) GetAllowExternalAccounts() bool {
	if x != nil && x.AllowExternalAccounts != nil {
		return *x.AllowExternalAccounts
	}
	return false
}

func (x *Account) GetIsOmnibus() bool {
	if x != nil && x.IsOmnibus != nil {
		return *x.IsOmnibus
	}
	return false
}

func (x *Account) GetIsGroupMember() bool {
	if x != nil && x.IsGroupMember != nil {
		return *x.IsGroupMember
	}
	return false
}

func (x *Account) GetForceCareOrders() bool {
	if x != nil && x.ForceCareOrders != nil {
		return *x.ForceCareOrders
	}
	return false
}

func (x *Account) GetClearedByStatements() bool {
	if x != nil && x.ClearedByStatements != nil {
		return *x.ClearedByStatements
	}
	return false
}

func (x *Account) GetSupportsExchangeBalancesSubscription() bool {
	if x != nil && x.SupportsExchangeBalancesSubscription != nil {
		return *x.SupportsExchangeBalancesSubscription
	}
	return false
}

func (x *Account) GetSupportsExchangePositionsSubscription() bool {
	if x != nil && x.SupportsExchangePositionsSubscription != nil {
		return *x.SupportsExchangePositionsSubscription
	}
	return false
}

// Request for balances from the last statement for all authorized accounts.
type LastStatementBalancesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LastStatementBalancesRequest) Reset() {
	*x = LastStatementBalancesRequest{}
	mi := &file_protos_WebAPI_trading_account_2_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LastStatementBalancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastStatementBalancesRequest) ProtoMessage() {}

func (x *LastStatementBalancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trading_account_2_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastStatementBalancesRequest.ProtoReflect.Descriptor instead.
func (*LastStatementBalancesRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trading_account_2_proto_rawDescGZIP(), []int{5}
}

// Report with balances from the last statement for all authorized accounts
// with Account.cleared_by_statements=True flag set.
// Will be sent as a response to a corresponding request
// and after each statement processing (if subscribed).
// Each initial report contains a full snapshot of all balances on all accounts.
// Each report for an active subscription contains updates only.
type LastStatementBalancesReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balances []*Balance `protobuf:"bytes,1,rep,name=balances" json:"balances,omitempty"`
}

func (x *LastStatementBalancesReport) Reset() {
	*x = LastStatementBalancesReport{}
	mi := &file_protos_WebAPI_trading_account_2_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LastStatementBalancesReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastStatementBalancesReport) ProtoMessage() {}

func (x *LastStatementBalancesReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trading_account_2_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastStatementBalancesReport.ProtoReflect.Descriptor instead.
func (*LastStatementBalancesReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trading_account_2_proto_rawDescGZIP(), []int{6}
}

func (x *LastStatementBalancesReport) GetBalances() []*Balance {
	if x != nil {
		return x.Balances
	}
	return nil
}

// Balance record for one of the accounts and one of the currencies (id is used as a key for updates).
// Values like OTE, UPL and MVO are from statements and won't be updated in real time but after each next statement.
// Money related values are in the specified currency.
// NOTE: Not all values for a balance record are provided by all statements,
//
//	it is up to Brokerage to include such values and only
//	currency and ending cash balance are required to be valid.
type Balance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Surrogate id as a key for updates.
	Id *int32 `protobuf:"zigzag32,1,req,name=id" json:"id,omitempty"`
	// Account of this balance record.
	AccountId *int32 `protobuf:"zigzag32,2,req,name=account_id,json=accountId" json:"account_id,omitempty"`
	// Statement date this positions is related.
	StatementDate *int64 `protobuf:"zigzag64,3,req,name=statement_date,json=statementDate" json:"statement_date,omitempty"`
	// Currency code.
	Currency *string `protobuf:"bytes,4,req,name=currency" json:"currency,omitempty"`
	// Ending Cash Balance.
	Balance *float64 `protobuf:"fixed64,5,req,name=balance" json:"balance,omitempty"`
	// Total Account Value.
	TotalValue *float64 `protobuf:"fixed64,6,req,name=total_value,json=totalValue" json:"total_value,omitempty"`
	// Open Trade Equity for Futures and futures-style Options.
	Ote *float64 `protobuf:"fixed64,7,req,name=ote" json:"ote,omitempty"`
	// Unrealized Profit and Loss for premium-style Options and Fixed Income.
	Upl *float64 `protobuf:"fixed64,8,req,name=upl" json:"upl,omitempty"`
	// Market Value of premium-style Options and Fixed Income.
	Mvo *float64 `protobuf:"fixed64,9,req,name=mvo" json:"mvo,omitempty"`
	// Cash Excess.
	CashExcess *float64 `protobuf:"fixed64,10,req,name=cash_excess,json=cashExcess" json:"cash_excess,omitempty"`
	// Collateral on Deposit.
	Collateral *float64 `protobuf:"fixed64,11,req,name=collateral" json:"collateral,omitempty"`
	// Initial Margin Requirements.
	InitialMargin *float64 `protobuf:"fixed64,12,req,name=initial_margin,json=initialMargin" json:"initial_margin,omitempty"`
	// If true the balance should be removed from the balances snapshot.
	Deleted *bool `protobuf:"varint,13,opt,name=deleted" json:"deleted,omitempty"`
}

func (x *Balance) Reset() {
	*x = Balance{}
	mi := &file_protos_WebAPI_trading_account_2_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Balance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Balance) ProtoMessage() {}

func (x *Balance) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trading_account_2_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Balance.ProtoReflect.Descriptor instead.
func (*Balance) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trading_account_2_proto_rawDescGZIP(), []int{7}
}

func (x *Balance) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Balance) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *Balance) GetStatementDate() int64 {
	if x != nil && x.StatementDate != nil {
		return *x.StatementDate
	}
	return 0
}

func (x *Balance) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *Balance) GetBalance() float64 {
	if x != nil && x.Balance != nil {
		return *x.Balance
	}
	return 0
}

func (x *Balance) GetTotalValue() float64 {
	if x != nil && x.TotalValue != nil {
		return *x.TotalValue
	}
	return 0
}

func (x *Balance) GetOte() float64 {
	if x != nil && x.Ote != nil {
		return *x.Ote
	}
	return 0
}

func (x *Balance) GetUpl() float64 {
	if x != nil && x.Upl != nil {
		return *x.Upl
	}
	return 0
}

func (x *Balance) GetMvo() float64 {
	if x != nil && x.Mvo != nil {
		return *x.Mvo
	}
	return 0
}

func (x *Balance) GetCashExcess() float64 {
	if x != nil && x.CashExcess != nil {
		return *x.CashExcess
	}
	return 0
}

func (x *Balance) GetCollateral() float64 {
	if x != nil && x.Collateral != nil {
		return *x.Collateral
	}
	return 0
}

func (x *Balance) GetInitialMargin() float64 {
	if x != nil && x.InitialMargin != nil {
		return *x.InitialMargin
	}
	return 0
}

func (x *Balance) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

// Request for currency rates for all brokerages user's accounts belong to.
type CurrencyRatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CurrencyRatesRequest) Reset() {
	*x = CurrencyRatesRequest{}
	mi := &file_protos_WebAPI_trading_account_2_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CurrencyRatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyRatesRequest) ProtoMessage() {}

func (x *CurrencyRatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trading_account_2_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyRatesRequest.ProtoReflect.Descriptor instead.
func (*CurrencyRatesRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trading_account_2_proto_rawDescGZIP(), []int{8}
}

// Report with currency rates per brokerage.
// It will be sent as a response to a corresponding request
// and after each statement processing (if subscribed).
type CurrencyRatesReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of rates per brokerage the user is authorized to.
	BrokerageCurrencyRates []*BrokerageCurrencyRates `protobuf:"bytes,1,rep,name=brokerage_currency_rates,json=brokerageCurrencyRates" json:"brokerage_currency_rates,omitempty"`
}

func (x *CurrencyRatesReport) Reset() {
	*x = CurrencyRatesReport{}
	mi := &file_protos_WebAPI_trading_account_2_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CurrencyRatesReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyRatesReport) ProtoMessage() {}

func (x *CurrencyRatesReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trading_account_2_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyRatesReport.ProtoReflect.Descriptor instead.
func (*CurrencyRatesReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trading_account_2_proto_rawDescGZIP(), []int{9}
}

func (x *CurrencyRatesReport) GetBrokerageCurrencyRates() []*BrokerageCurrencyRates {
	if x != nil {
		return x.BrokerageCurrencyRates
	}
	return nil
}

// Currency rates of one brokerage.
type BrokerageCurrencyRates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Brokerage ID.
	BrokerageId *uint32 `protobuf:"varint,1,req,name=brokerage_id,json=brokerageId" json:"brokerage_id,omitempty"`
	// Master currency code to which rates are provided.
	MasterCurrency *string `protobuf:"bytes,2,req,name=master_currency,json=masterCurrency" json:"master_currency,omitempty"`
	// Statement date.
	StatementDate *int64 `protobuf:"zigzag64,3,req,name=statement_date,json=statementDate" json:"statement_date,omitempty"`
	// List of brokerage rates.
	CurrencyRates []*CurrencyRate `protobuf:"bytes,4,rep,name=currency_rates,json=currencyRates" json:"currency_rates,omitempty"`
}

func (x *BrokerageCurrencyRates) Reset() {
	*x = BrokerageCurrencyRates{}
	mi := &file_protos_WebAPI_trading_account_2_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BrokerageCurrencyRates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrokerageCurrencyRates) ProtoMessage() {}

func (x *BrokerageCurrencyRates) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trading_account_2_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrokerageCurrencyRates.ProtoReflect.Descriptor instead.
func (*BrokerageCurrencyRates) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trading_account_2_proto_rawDescGZIP(), []int{10}
}

func (x *BrokerageCurrencyRates) GetBrokerageId() uint32 {
	if x != nil && x.BrokerageId != nil {
		return *x.BrokerageId
	}
	return 0
}

func (x *BrokerageCurrencyRates) GetMasterCurrency() string {
	if x != nil && x.MasterCurrency != nil {
		return *x.MasterCurrency
	}
	return ""
}

func (x *BrokerageCurrencyRates) GetStatementDate() int64 {
	if x != nil && x.StatementDate != nil {
		return *x.StatementDate
	}
	return 0
}

func (x *BrokerageCurrencyRates) GetCurrencyRates() []*CurrencyRate {
	if x != nil {
		return x.CurrencyRates
	}
	return nil
}

// Rate of one currency to a master currency for the brokerage.
type CurrencyRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Currency code.
	Currency *string `protobuf:"bytes,2,req,name=currency" json:"currency,omitempty"`
	// Exchange rate.
	Rate *float64 `protobuf:"fixed64,3,req,name=rate" json:"rate,omitempty"`
	// Number of decimals in 'rate' field.
	DecimalPlaces *uint32 `protobuf:"varint,4,opt,name=decimal_places,json=decimalPlaces" json:"decimal_places,omitempty"`
}

func (x *CurrencyRate) Reset() {
	*x = CurrencyRate{}
	mi := &file_protos_WebAPI_trading_account_2_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CurrencyRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyRate) ProtoMessage() {}

func (x *CurrencyRate) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trading_account_2_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyRate.ProtoReflect.Descriptor instead.
func (*CurrencyRate) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trading_account_2_proto_rawDescGZIP(), []int{11}
}

func (x *CurrencyRate) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *CurrencyRate) GetRate() float64 {
	if x != nil && x.Rate != nil {
		return *x.Rate
	}
	return 0
}

func (x *CurrencyRate) GetDecimalPlaces() uint32 {
	if x != nil && x.DecimalPlaces != nil {
		return *x.DecimalPlaces
	}
	return 0
}

// Request for currency rate source contracts for all brokerages user's accounts belong to.
type CurrencyRateSourcesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CurrencyRateSourcesRequest) Reset() {
	*x = CurrencyRateSourcesRequest{}
	mi := &file_protos_WebAPI_trading_account_2_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CurrencyRateSourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyRateSourcesRequest) ProtoMessage() {}

func (x *CurrencyRateSourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trading_account_2_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyRateSourcesRequest.ProtoReflect.Descriptor instead.
func (*CurrencyRateSourcesRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trading_account_2_proto_rawDescGZIP(), []int{12}
}

// Report with currency rate sources per brokerage.
// Note: in case of an update, report may not include sources for all brokerages.
type CurrencyRateSourcesReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of rate sources per brokerage the user is authorized to.
	BrokerageRateSources []*BrokerageCurrencyRateSources `protobuf:"bytes,1,rep,name=brokerage_rate_sources,json=brokerageRateSources" json:"brokerage_rate_sources,omitempty"`
}

func (x *CurrencyRateSourcesReport) Reset() {
	*x = CurrencyRateSourcesReport{}
	mi := &file_protos_WebAPI_trading_account_2_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CurrencyRateSourcesReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyRateSourcesReport) ProtoMessage() {}

func (x *CurrencyRateSourcesReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trading_account_2_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyRateSourcesReport.ProtoReflect.Descriptor instead.
func (*CurrencyRateSourcesReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trading_account_2_proto_rawDescGZIP(), []int{13}
}

func (x *CurrencyRateSourcesReport) GetBrokerageRateSources() []*BrokerageCurrencyRateSources {
	if x != nil {
		return x.BrokerageRateSources
	}
	return nil
}

// Currency rate sources of one brokerage.
type BrokerageCurrencyRateSources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Brokerage ID.
	// See AccountsRequest and Brokerage messages.
	// It is a required field.
	BrokerageId *uint32 `protobuf:"varint,1,opt,name=brokerage_id,json=brokerageId" json:"brokerage_id,omitempty"`
	// List of brokerage rate sources.
	// In case of an update contains full list of sources.
	CurrencyRateSources []*CurrencyRateSource `protobuf:"bytes,2,rep,name=currency_rate_sources,json=currencyRateSources" json:"currency_rate_sources,omitempty"`
}

func (x *BrokerageCurrencyRateSources) Reset() {
	*x = BrokerageCurrencyRateSources{}
	mi := &file_protos_WebAPI_trading_account_2_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BrokerageCurrencyRateSources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrokerageCurrencyRateSources) ProtoMessage() {}

func (x *BrokerageCurrencyRateSources) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trading_account_2_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrokerageCurrencyRateSources.ProtoReflect.Descriptor instead.
func (*BrokerageCurrencyRateSources) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trading_account_2_proto_rawDescGZIP(), []int{14}
}

func (x *BrokerageCurrencyRateSources) GetBrokerageId() uint32 {
	if x != nil && x.BrokerageId != nil {
		return *x.BrokerageId
	}
	return 0
}

func (x *BrokerageCurrencyRateSources) GetCurrencyRateSources() []*CurrencyRateSource {
	if x != nil {
		return x.CurrencyRateSources
	}
	return nil
}

type CurrencyRateSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Base currency code (ISO-4217-based).
	// Note that cryptocurrencies use codes that are ISO-4217-style, though usually not actual
	// ISO codes (e.g. can be longer than 3 characters).
	// It is a required field.
	BaseCurrency *string `protobuf:"bytes,1,opt,name=base_currency,json=baseCurrency" json:"base_currency,omitempty"`
	// Quote currency code (ISO-4217-based).
	// Note that cryptocurrencies use codes that are ISO-4217-style, though usually not actual
	// ISO codes (e.g. can be longer than 3 characters).
	// It is a required field.
	QuoteCurrency *string `protobuf:"bytes,2,opt,name=quote_currency,json=quoteCurrency" json:"quote_currency,omitempty"`
	// Realtime rate source contract for these base and quote currencies.
	// E.g. for "X.US.USDJPY", "USD" is the base currency and "JPY" is the quote currency.
	// Might be omitted if const_currency_rate has a value.
	RateSourceContractId *uint32 `protobuf:"varint,3,opt,name=rate_source_contract_id,json=rateSourceContractId" json:"rate_source_contract_id,omitempty"`
	// Constant currency rate. If the field is not empty use it instead of subscribing
	// to rate_source_contract_id.
	ConstCurrencyRate *float64 `protobuf:"fixed64,4,opt,name=const_currency_rate,json=constCurrencyRate" json:"const_currency_rate,omitempty"`
}

func (x *CurrencyRateSource) Reset() {
	*x = CurrencyRateSource{}
	mi := &file_protos_WebAPI_trading_account_2_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CurrencyRateSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyRateSource) ProtoMessage() {}

func (x *CurrencyRateSource) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trading_account_2_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyRateSource.ProtoReflect.Descriptor instead.
func (*CurrencyRateSource) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trading_account_2_proto_rawDescGZIP(), []int{15}
}

func (x *CurrencyRateSource) GetBaseCurrency() string {
	if x != nil && x.BaseCurrency != nil {
		return *x.BaseCurrency
	}
	return ""
}

func (x *CurrencyRateSource) GetQuoteCurrency() string {
	if x != nil && x.QuoteCurrency != nil {
		return *x.QuoteCurrency
	}
	return ""
}

func (x *CurrencyRateSource) GetRateSourceContractId() uint32 {
	if x != nil && x.RateSourceContractId != nil {
		return *x.RateSourceContractId
	}
	return 0
}

func (x *CurrencyRateSource) GetConstCurrencyRate() float64 {
	if x != nil && x.ConstCurrencyRate != nil {
		return *x.ConstCurrencyRate
	}
	return 0
}

var File_protos_WebAPI_trading_account_2_proto protoreflect.FileDescriptor

var file_protos_WebAPI_trading_account_2_proto_rawDesc = []byte{
	0x0a, 0x25, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49, 0x2f,
	0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x32, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x38, 0x0a, 0x0f, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x6c, 0x0a, 0x0e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x62, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x32, 0x2e,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x62, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x22, 0xe4, 0x01, 0x0a, 0x09, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x73, 0x61, 0x6c,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x32, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52,
	0x0b, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0x5c, 0x0a, 0x0d,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x16, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x52, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x52, 0x4f,
	0x4b, 0x45, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x49, 0x4d, 0x10,
	0x02, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x4d, 0x4f, 0x10, 0x03, 0x22, 0x71, 0x0a, 0x0b, 0x53, 0x61,
	0x6c, 0x65, 0x73, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0xea, 0x08,
	0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x11, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x62, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x16, 0x62, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x02, 0x28, 0x12, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73,
	0x56, 0x69, 0x65, 0x77, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x75,
	0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x69, 0x73, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x12, 0x3a, 0x0a, 0x19, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x70, 0x0a,
	0x27, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x23, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x73, 0x12, 0x49, 0x0a, 0x22, 0x70, 0x72, 0x65, 0x5f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6d, 0x69, 0x64, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x70, 0x72, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4d, 0x69,
	0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x6f, 0x6d, 0x6e, 0x69, 0x62, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x4f, 0x6d, 0x6e, 0x69, 0x62, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x65,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x43, 0x61, 0x72, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x32,
	0x0a, 0x15, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x63,
	0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x55, 0x0a, 0x27, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x24, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x28, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x25, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xbf, 0x01, 0x0a, 0x17, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25,
	0x0a, 0x21, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x46, 0x46, 0x4c,
	0x49, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0x1e, 0x0a, 0x1c, 0x4c, 0x61,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x55, 0x0a, 0x1b, 0x4c, 0x61,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x32, 0x2e,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x22, 0xee, 0x02, 0x0a, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x11, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x11, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x12, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x01,
	0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x01, 0x52, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x01, 0x52, 0x03, 0x6f, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x70, 0x6c, 0x18, 0x08, 0x20, 0x02, 0x28, 0x01, 0x52, 0x03, 0x75, 0x70, 0x6c, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x76, 0x6f, 0x18, 0x09, 0x20, 0x02, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x76, 0x6f,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x0a, 0x20, 0x02, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x61, 0x73, 0x68, 0x45, 0x78, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18,
	0x0b, 0x20, 0x02, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x01, 0x52, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x61,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x7a, 0x0a, 0x13, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x63, 0x0a, 0x18, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x32, 0x2e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x16,
	0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x52, 0x61, 0x74, 0x65, 0x73, 0x22, 0xd3, 0x01, 0x0a, 0x16, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x12, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x32,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x61, 0x74, 0x65, 0x73, 0x22, 0x65, 0x0a, 0x0c,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x01, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x73, 0x22, 0x1c, 0x0a, 0x1a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52,
	0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x82, 0x01, 0x0a, 0x19, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x61,
	0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x65, 0x0a, 0x16, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x32, 0x2e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x52, 0x14, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x1c, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x61, 0x74, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x59, 0x0a, 0x15, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x32, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0xc7, 0x01, 0x0a, 0x12, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x25, 0x0a, 0x0e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x35, 0x0a, 0x17, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x72, 0x61, 0x74, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x61, 0x74, 0x65, 0x42,
	0x11, 0x5a, 0x0f, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41,
	0x50, 0x49,
}

var (
	file_protos_WebAPI_trading_account_2_proto_rawDescOnce sync.Once
	file_protos_WebAPI_trading_account_2_proto_rawDescData = file_protos_WebAPI_trading_account_2_proto_rawDesc
)

func file_protos_WebAPI_trading_account_2_proto_rawDescGZIP() []byte {
	file_protos_WebAPI_trading_account_2_proto_rawDescOnce.Do(func() {
		file_protos_WebAPI_trading_account_2_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_WebAPI_trading_account_2_proto_rawDescData)
	})
	return file_protos_WebAPI_trading_account_2_proto_rawDescData
}

var file_protos_WebAPI_trading_account_2_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_protos_WebAPI_trading_account_2_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_protos_WebAPI_trading_account_2_proto_goTypes = []any{
	(Brokerage_BrokerageType)(0),         // 0: trading_account_2.Brokerage.BrokerageType
	(Account_AccountConnectionStatus)(0), // 1: trading_account_2.Account.AccountConnectionStatus
	(*AccountsRequest)(nil),              // 2: trading_account_2.AccountsRequest
	(*AccountsReport)(nil),               // 3: trading_account_2.AccountsReport
	(*Brokerage)(nil),                    // 4: trading_account_2.Brokerage
	(*SalesSeries)(nil),                  // 5: trading_account_2.SalesSeries
	(*Account)(nil),                      // 6: trading_account_2.Account
	(*LastStatementBalancesRequest)(nil), // 7: trading_account_2.LastStatementBalancesRequest
	(*LastStatementBalancesReport)(nil),  // 8: trading_account_2.LastStatementBalancesReport
	(*Balance)(nil),                      // 9: trading_account_2.Balance
	(*CurrencyRatesRequest)(nil),         // 10: trading_account_2.CurrencyRatesRequest
	(*CurrencyRatesReport)(nil),          // 11: trading_account_2.CurrencyRatesReport
	(*BrokerageCurrencyRates)(nil),       // 12: trading_account_2.BrokerageCurrencyRates
	(*CurrencyRate)(nil),                 // 13: trading_account_2.CurrencyRate
	(*CurrencyRateSourcesRequest)(nil),   // 14: trading_account_2.CurrencyRateSourcesRequest
	(*CurrencyRateSourcesReport)(nil),    // 15: trading_account_2.CurrencyRateSourcesReport
	(*BrokerageCurrencyRateSources)(nil), // 16: trading_account_2.BrokerageCurrencyRateSources
	(*CurrencyRateSource)(nil),           // 17: trading_account_2.CurrencyRateSource
	(*timestamppb.Timestamp)(nil),        // 18: google.protobuf.Timestamp
}
var file_protos_WebAPI_trading_account_2_proto_depIdxs = []int32{
	4,  // 0: trading_account_2.AccountsReport.brokerages:type_name -> trading_account_2.Brokerage
	5,  // 1: trading_account_2.Brokerage.sales_series:type_name -> trading_account_2.SalesSeries
	6,  // 2: trading_account_2.SalesSeries.accounts:type_name -> trading_account_2.Account
	18, // 3: trading_account_2.Account.account_connection_status_utc_timestamp:type_name -> google.protobuf.Timestamp
	9,  // 4: trading_account_2.LastStatementBalancesReport.balances:type_name -> trading_account_2.Balance
	12, // 5: trading_account_2.CurrencyRatesReport.brokerage_currency_rates:type_name -> trading_account_2.BrokerageCurrencyRates
	13, // 6: trading_account_2.BrokerageCurrencyRates.currency_rates:type_name -> trading_account_2.CurrencyRate
	16, // 7: trading_account_2.CurrencyRateSourcesReport.brokerage_rate_sources:type_name -> trading_account_2.BrokerageCurrencyRateSources
	17, // 8: trading_account_2.BrokerageCurrencyRateSources.currency_rate_sources:type_name -> trading_account_2.CurrencyRateSource
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_protos_WebAPI_trading_account_2_proto_init() }
func file_protos_WebAPI_trading_account_2_proto_init() {
	if File_protos_WebAPI_trading_account_2_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_WebAPI_trading_account_2_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_WebAPI_trading_account_2_proto_goTypes,
		DependencyIndexes: file_protos_WebAPI_trading_account_2_proto_depIdxs,
		EnumInfos:         file_protos_WebAPI_trading_account_2_proto_enumTypes,
		MessageInfos:      file_protos_WebAPI_trading_account_2_proto_msgTypes,
	}.Build()
	File_protos_WebAPI_trading_account_2_proto = out.File
	file_protos_WebAPI_trading_account_2_proto_rawDesc = nil
	file_protos_WebAPI_trading_account_2_proto_goTypes = nil
	file_protos_WebAPI_trading_account_2_proto_depIdxs = nil
}
