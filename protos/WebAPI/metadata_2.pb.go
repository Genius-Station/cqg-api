// Public metadata related messages.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: protos/WebAPI/metadata_2.proto

package WebAPI

import (
	common "cqg-api/protos/WebAPI/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Way how to track the trader's open positions on a given contract.
type PositionTrackingType int32

const (
	// Difference between long and short open positions is tracked.
	PositionTrackingType_POSITION_TRACKING_TYPE_NET_POSITION PositionTrackingType = 1
	// Long and short open positions are tracked separately.
	PositionTrackingType_POSITION_TRACKING_TYPE_LONG_SHORT_WITH_IMPLIED_CLOSE PositionTrackingType = 2
	// Long and short as well as today and yesterday open positions are tracked separately.
	// The explicit order instruction to close either today or yesterday is taken into account.
	PositionTrackingType_POSITION_TRACKING_TYPE_LONG_SHORT_WITH_EXPLICIT_CLOSE PositionTrackingType = 3
)

// Enum value maps for PositionTrackingType.
var (
	PositionTrackingType_name = map[int32]string{
		1: "POSITION_TRACKING_TYPE_NET_POSITION",
		2: "POSITION_TRACKING_TYPE_LONG_SHORT_WITH_IMPLIED_CLOSE",
		3: "POSITION_TRACKING_TYPE_LONG_SHORT_WITH_EXPLICIT_CLOSE",
	}
	PositionTrackingType_value = map[string]int32{
		"POSITION_TRACKING_TYPE_NET_POSITION":                   1,
		"POSITION_TRACKING_TYPE_LONG_SHORT_WITH_IMPLIED_CLOSE":  2,
		"POSITION_TRACKING_TYPE_LONG_SHORT_WITH_EXPLICIT_CLOSE": 3,
	}
)

func (x PositionTrackingType) Enum() *PositionTrackingType {
	p := new(PositionTrackingType)
	*p = x
	return p
}

func (x PositionTrackingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PositionTrackingType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_metadata_2_proto_enumTypes[0].Descriptor()
}

func (PositionTrackingType) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_metadata_2_proto_enumTypes[0]
}

func (x PositionTrackingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PositionTrackingType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PositionTrackingType(num)
	return nil
}

// Deprecated: Use PositionTrackingType.Descriptor instead.
func (PositionTrackingType) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_metadata_2_proto_rawDescGZIP(), []int{0}
}

// Recommended display mode for prices.
// The rules are applied according to the display scale of a contract.
// For combined scales like Eighths of Thirty Seconds the mode is applied only to the minor fractions (Eighths) while
// the major fractions (Thirty Seconds) always shown in PRICE_DISPLAY_MODE_NUMERATOR mode.
// Sample: TRUNCATED mode for 108 22/32 with extra 7/8 of 1/32 (108 + 22/32 + 7/256)
// is shown as 108'228 where 8 is calculated as 7/8 -> truncate (0.875) -> 8 (see TRUNCATED sample below).
type PriceDisplayMode int32

const (
	// The numerator of the fractional part is shown directly.
	// Samples: for 3/8 the fractional part is shown as '3', for 7/16 - '07', for 15/100 - '15' etc.
	PriceDisplayMode_PRICE_DISPLAY_MODE_NUMERATOR PriceDisplayMode = 0
	// Rounded decimal. In this mode the fractional part is converted to the decimal fraction
	// and then rounded to the minimum digits which are necessary to recognize the price.
	// Samples: 3/8 -> round(0.375) -> '4', 7/8 Â¨C round(0.875) -> '9', 11/16 -> round(0.6875) -> '69'.
	// It means the same as PRICE_DISPLAY_MODE_NUMERATOR for decimal scales.
	PriceDisplayMode_PRICE_DISPLAY_MODE_ROUNDED PriceDisplayMode = 1
	// Truncated decimal. In this mode the fractional part is converted to the decimal fraction
	// and then truncated to the minimum digits which are necessary to recognize the price.
	// Samples: 3/8 -> truncate(0.375) -> '3', 7/8 -> truncate (0.875) -> '8', 11/16 -> truncate (0.6875) -> '68'.
	// It means the same as PRICE_DISPLAY_MODE_NUMERATOR for decimal scales.
	PriceDisplayMode_PRICE_DISPLAY_MODE_TRUNCATED PriceDisplayMode = 2
)

// Enum value maps for PriceDisplayMode.
var (
	PriceDisplayMode_name = map[int32]string{
		0: "PRICE_DISPLAY_MODE_NUMERATOR",
		1: "PRICE_DISPLAY_MODE_ROUNDED",
		2: "PRICE_DISPLAY_MODE_TRUNCATED",
	}
	PriceDisplayMode_value = map[string]int32{
		"PRICE_DISPLAY_MODE_NUMERATOR": 0,
		"PRICE_DISPLAY_MODE_ROUNDED":   1,
		"PRICE_DISPLAY_MODE_TRUNCATED": 2,
	}
)

func (x PriceDisplayMode) Enum() *PriceDisplayMode {
	p := new(PriceDisplayMode)
	*p = x
	return p
}

func (x PriceDisplayMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PriceDisplayMode) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_metadata_2_proto_enumTypes[1].Descriptor()
}

func (PriceDisplayMode) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_metadata_2_proto_enumTypes[1]
}

func (x PriceDisplayMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PriceDisplayMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PriceDisplayMode(num)
	return nil
}

// Deprecated: Use PriceDisplayMode.Descriptor instead.
func (PriceDisplayMode) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_metadata_2_proto_rawDescGZIP(), []int{1}
}

// Describes period value type.
// See example in ContractMetadata.listing_period_type and ContractMetadata.listing_period_value.
type PeriodType int32

const (
	PeriodType_PERIOD_TYPE_MONTH         PeriodType = 0
	PeriodType_PERIOD_TYPE_QUARTER       PeriodType = 1
	PeriodType_PERIOD_TYPE_SEMI_ANNUAL   PeriodType = 2
	PeriodType_PERIOD_TYPE_YEAR          PeriodType = 3
	PeriodType_PERIOD_TYPE_DAY_OF_WEEK   PeriodType = 4
	PeriodType_PERIOD_TYPE_DAY_OF_MONTH  PeriodType = 5
	PeriodType_PERIOD_TYPE_DAY_OF_YEAR   PeriodType = 6
	PeriodType_PERIOD_TYPE_WEEK_OF_MONTH PeriodType = 7
	PeriodType_PERIOD_TYPE_WEEK_OF_YEAR  PeriodType = 8
	PeriodType_PERIOD_TYPE_SECOND        PeriodType = 9
	PeriodType_PERIOD_TYPE_MINUTE        PeriodType = 10
	PeriodType_PERIOD_TYPE_HOUR          PeriodType = 11
	PeriodType_PERIOD_TYPE_DATE          PeriodType = 12
)

// Enum value maps for PeriodType.
var (
	PeriodType_name = map[int32]string{
		0:  "PERIOD_TYPE_MONTH",
		1:  "PERIOD_TYPE_QUARTER",
		2:  "PERIOD_TYPE_SEMI_ANNUAL",
		3:  "PERIOD_TYPE_YEAR",
		4:  "PERIOD_TYPE_DAY_OF_WEEK",
		5:  "PERIOD_TYPE_DAY_OF_MONTH",
		6:  "PERIOD_TYPE_DAY_OF_YEAR",
		7:  "PERIOD_TYPE_WEEK_OF_MONTH",
		8:  "PERIOD_TYPE_WEEK_OF_YEAR",
		9:  "PERIOD_TYPE_SECOND",
		10: "PERIOD_TYPE_MINUTE",
		11: "PERIOD_TYPE_HOUR",
		12: "PERIOD_TYPE_DATE",
	}
	PeriodType_value = map[string]int32{
		"PERIOD_TYPE_MONTH":         0,
		"PERIOD_TYPE_QUARTER":       1,
		"PERIOD_TYPE_SEMI_ANNUAL":   2,
		"PERIOD_TYPE_YEAR":          3,
		"PERIOD_TYPE_DAY_OF_WEEK":   4,
		"PERIOD_TYPE_DAY_OF_MONTH":  5,
		"PERIOD_TYPE_DAY_OF_YEAR":   6,
		"PERIOD_TYPE_WEEK_OF_MONTH": 7,
		"PERIOD_TYPE_WEEK_OF_YEAR":  8,
		"PERIOD_TYPE_SECOND":        9,
		"PERIOD_TYPE_MINUTE":        10,
		"PERIOD_TYPE_HOUR":          11,
		"PERIOD_TYPE_DATE":          12,
	}
)

func (x PeriodType) Enum() *PeriodType {
	p := new(PeriodType)
	*p = x
	return p
}

func (x PeriodType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PeriodType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_metadata_2_proto_enumTypes[2].Descriptor()
}

func (PeriodType) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_metadata_2_proto_enumTypes[2]
}

func (x PeriodType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PeriodType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PeriodType(num)
	return nil
}

// Deprecated: Use PeriodType.Descriptor instead.
func (PeriodType) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_metadata_2_proto_rawDescGZIP(), []int{2}
}

// CQG base instrument types eligible for user defined instrument requests.
type CQGInstrumentType int32

const (
	// Future or other instruments defined as a future in CQG, e.g. for some
	// exchanges, this includes forwards.
	CQGInstrumentType_CQG_INSTRUMENT_TYPE_FUTURE CQGInstrumentType = 1
	// Call option.
	CQGInstrumentType_CQG_INSTRUMENT_TYPE_CALL_OPTION CQGInstrumentType = 2
	// Put option.
	CQGInstrumentType_CQG_INSTRUMENT_TYPE_PUT_OPTION CQGInstrumentType = 3
)

// Enum value maps for CQGInstrumentType.
var (
	CQGInstrumentType_name = map[int32]string{
		1: "CQG_INSTRUMENT_TYPE_FUTURE",
		2: "CQG_INSTRUMENT_TYPE_CALL_OPTION",
		3: "CQG_INSTRUMENT_TYPE_PUT_OPTION",
	}
	CQGInstrumentType_value = map[string]int32{
		"CQG_INSTRUMENT_TYPE_FUTURE":      1,
		"CQG_INSTRUMENT_TYPE_CALL_OPTION": 2,
		"CQG_INSTRUMENT_TYPE_PUT_OPTION":  3,
	}
)

func (x CQGInstrumentType) Enum() *CQGInstrumentType {
	p := new(CQGInstrumentType)
	*p = x
	return p
}

func (x CQGInstrumentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CQGInstrumentType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_metadata_2_proto_enumTypes[3].Descriptor()
}

func (CQGInstrumentType) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_metadata_2_proto_enumTypes[3]
}

func (x CQGInstrumentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CQGInstrumentType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CQGInstrumentType(num)
	return nil
}

// Deprecated: Use CQGInstrumentType.Descriptor instead.
func (CQGInstrumentType) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_metadata_2_proto_rawDescGZIP(), []int{3}
}

// Settlement method.
type SettlementMethod int32

const (
	// Cash settled.
	SettlementMethod_SETTLEMENT_METHOD_CASH SettlementMethod = 1
	// Physically delivered.
	SettlementMethod_SETTLEMENT_METHOD_PHYSICAL SettlementMethod = 2
)

// Enum value maps for SettlementMethod.
var (
	SettlementMethod_name = map[int32]string{
		1: "SETTLEMENT_METHOD_CASH",
		2: "SETTLEMENT_METHOD_PHYSICAL",
	}
	SettlementMethod_value = map[string]int32{
		"SETTLEMENT_METHOD_CASH":     1,
		"SETTLEMENT_METHOD_PHYSICAL": 2,
	}
)

func (x SettlementMethod) Enum() *SettlementMethod {
	p := new(SettlementMethod)
	*p = x
	return p
}

func (x SettlementMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SettlementMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_metadata_2_proto_enumTypes[4].Descriptor()
}

func (SettlementMethod) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_metadata_2_proto_enumTypes[4]
}

func (x SettlementMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SettlementMethod) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SettlementMethod(num)
	return nil
}

// Deprecated: Use SettlementMethod.Descriptor instead.
func (SettlementMethod) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_metadata_2_proto_rawDescGZIP(), []int{4}
}

// Exercise style.
type ExerciseStyle int32

const (
	// European exercise style.
	ExerciseStyle_EXERCISE_STYLE_EUROPEAN ExerciseStyle = 1
	// American exercise style.
	ExerciseStyle_EXERCISE_STYLE_AMERICAN ExerciseStyle = 2
)

// Enum value maps for ExerciseStyle.
var (
	ExerciseStyle_name = map[int32]string{
		1: "EXERCISE_STYLE_EUROPEAN",
		2: "EXERCISE_STYLE_AMERICAN",
	}
	ExerciseStyle_value = map[string]int32{
		"EXERCISE_STYLE_EUROPEAN": 1,
		"EXERCISE_STYLE_AMERICAN": 2,
	}
)

func (x ExerciseStyle) Enum() *ExerciseStyle {
	p := new(ExerciseStyle)
	*p = x
	return p
}

func (x ExerciseStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExerciseStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_metadata_2_proto_enumTypes[5].Descriptor()
}

func (ExerciseStyle) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_metadata_2_proto_enumTypes[5]
}

func (x ExerciseStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ExerciseStyle) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ExerciseStyle(num)
	return nil
}

// Deprecated: Use ExerciseStyle.Descriptor instead.
func (ExerciseStyle) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_metadata_2_proto_rawDescGZIP(), []int{5}
}

// Pricing convention aka return type.
type PricingConvention int32

const (
	// Price return.
	PricingConvention_PRICING_CONVENTION_PRICE PricingConvention = 1
	// Gross return.
	PricingConvention_PRICING_CONVENTION_GROSS PricingConvention = 2
	// Net return.
	PricingConvention_PRICING_CONVENTION_NET PricingConvention = 3
)

// Enum value maps for PricingConvention.
var (
	PricingConvention_name = map[int32]string{
		1: "PRICING_CONVENTION_PRICE",
		2: "PRICING_CONVENTION_GROSS",
		3: "PRICING_CONVENTION_NET",
	}
	PricingConvention_value = map[string]int32{
		"PRICING_CONVENTION_PRICE": 1,
		"PRICING_CONVENTION_GROSS": 2,
		"PRICING_CONVENTION_NET":   3,
	}
)

func (x PricingConvention) Enum() *PricingConvention {
	p := new(PricingConvention)
	*p = x
	return p
}

func (x PricingConvention) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PricingConvention) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_metadata_2_proto_enumTypes[6].Descriptor()
}

func (PricingConvention) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_metadata_2_proto_enumTypes[6]
}

func (x PricingConvention) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PricingConvention) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PricingConvention(num)
	return nil
}

// Deprecated: Use PricingConvention.Descriptor instead.
func (PricingConvention) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_metadata_2_proto_rawDescGZIP(), []int{6}
}

// Source of closing price.
type CloseSource int32

const (
	// Last quote except settlement.
	CloseSource_CLOSE_SOURCE_LAST_QUOTE CloseSource = 1
	// Settlement.
	CloseSource_CLOSE_SOURCE_SETTLEMENT CloseSource = 2
	// Exchange close.
	CloseSource_CLOSE_SOURCE_EXCHANGE_CLOSE CloseSource = 3
)

// Enum value maps for CloseSource.
var (
	CloseSource_name = map[int32]string{
		1: "CLOSE_SOURCE_LAST_QUOTE",
		2: "CLOSE_SOURCE_SETTLEMENT",
		3: "CLOSE_SOURCE_EXCHANGE_CLOSE",
	}
	CloseSource_value = map[string]int32{
		"CLOSE_SOURCE_LAST_QUOTE":     1,
		"CLOSE_SOURCE_SETTLEMENT":     2,
		"CLOSE_SOURCE_EXCHANGE_CLOSE": 3,
	}
)

func (x CloseSource) Enum() *CloseSource {
	p := new(CloseSource)
	*p = x
	return p
}

func (x CloseSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CloseSource) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_metadata_2_proto_enumTypes[7].Descriptor()
}

func (CloseSource) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_metadata_2_proto_enumTypes[7]
}

func (x CloseSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CloseSource) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CloseSource(num)
	return nil
}

// Deprecated: Use CloseSource.Descriptor instead.
func (CloseSource) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_metadata_2_proto_rawDescGZIP(), []int{7}
}

// Type of Order.open_close_instruction support for the contract.
type OpenCloseType int32

const (
	// Open/close instruction is not used.
	OpenCloseType_OPEN_CLOSE_TYPE_NOT_USED OpenCloseType = 0
	// Open/close instruction is not required but it may be used if provided.
	OpenCloseType_OPEN_CLOSE_TYPE_OPTIONAL OpenCloseType = 1
	// Open/close instruction is required.
	OpenCloseType_OPEN_CLOSE_TYPE_REQUIRED OpenCloseType = 2
)

// Enum value maps for OpenCloseType.
var (
	OpenCloseType_name = map[int32]string{
		0: "OPEN_CLOSE_TYPE_NOT_USED",
		1: "OPEN_CLOSE_TYPE_OPTIONAL",
		2: "OPEN_CLOSE_TYPE_REQUIRED",
	}
	OpenCloseType_value = map[string]int32{
		"OPEN_CLOSE_TYPE_NOT_USED": 0,
		"OPEN_CLOSE_TYPE_OPTIONAL": 1,
		"OPEN_CLOSE_TYPE_REQUIRED": 2,
	}
)

func (x OpenCloseType) Enum() *OpenCloseType {
	p := new(OpenCloseType)
	*p = x
	return p
}

func (x OpenCloseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenCloseType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_metadata_2_proto_enumTypes[8].Descriptor()
}

func (OpenCloseType) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_metadata_2_proto_enumTypes[8]
}

func (x OpenCloseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OpenCloseType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OpenCloseType(num)
	return nil
}

// Deprecated: Use OpenCloseType.Descriptor instead.
func (OpenCloseType) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_metadata_2_proto_rawDescGZIP(), []int{8}
}

// Supported instrument group types.
type InstrumentGroupType int32

const (
	// Exchange strategies (a.k.a. User-defined strategies).
	InstrumentGroupType_INSTRUMENT_GROUP_TYPE_EXCHANGE_STRATEGY InstrumentGroupType = 1
)

// Enum value maps for InstrumentGroupType.
var (
	InstrumentGroupType_name = map[int32]string{
		1: "INSTRUMENT_GROUP_TYPE_EXCHANGE_STRATEGY",
	}
	InstrumentGroupType_value = map[string]int32{
		"INSTRUMENT_GROUP_TYPE_EXCHANGE_STRATEGY": 1,
	}
)

func (x InstrumentGroupType) Enum() *InstrumentGroupType {
	p := new(InstrumentGroupType)
	*p = x
	return p
}

func (x InstrumentGroupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstrumentGroupType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_metadata_2_proto_enumTypes[9].Descriptor()
}

func (InstrumentGroupType) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_metadata_2_proto_enumTypes[9]
}

func (x InstrumentGroupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *InstrumentGroupType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = InstrumentGroupType(num)
	return nil
}

// Deprecated: Use InstrumentGroupType.Descriptor instead.
func (InstrumentGroupType) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_metadata_2_proto_rawDescGZIP(), []int{9}
}

// Margin style (for options).
type ContractMetadata_MarginStyle int32

const (
	// The premium is paid on exercise/ expiry (position is included to OTE calculation).
	ContractMetadata_MARGIN_STYLE_FUTURE ContractMetadata_MarginStyle = 1
	// Premium is subtracted from account balance when order is filled (position is included to MVO/UPL calculation).
	ContractMetadata_MARGIN_STYLE_PREMIUM ContractMetadata_MarginStyle = 2
)

// Enum value maps for ContractMetadata_MarginStyle.
var (
	ContractMetadata_MarginStyle_name = map[int32]string{
		1: "MARGIN_STYLE_FUTURE",
		2: "MARGIN_STYLE_PREMIUM",
	}
	ContractMetadata_MarginStyle_value = map[string]int32{
		"MARGIN_STYLE_FUTURE":  1,
		"MARGIN_STYLE_PREMIUM": 2,
	}
)

func (x ContractMetadata_MarginStyle) Enum() *ContractMetadata_MarginStyle {
	p := new(ContractMetadata_MarginStyle)
	*p = x
	return p
}

func (x ContractMetadata_MarginStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContractMetadata_MarginStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_metadata_2_proto_enumTypes[10].Descriptor()
}

func (ContractMetadata_MarginStyle) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_metadata_2_proto_enumTypes[10]
}

func (x ContractMetadata_MarginStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ContractMetadata_MarginStyle) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ContractMetadata_MarginStyle(num)
	return nil
}

// Deprecated: Use ContractMetadata_MarginStyle.Descriptor instead.
func (ContractMetadata_MarginStyle) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_metadata_2_proto_rawDescGZIP(), []int{6, 0}
}

// Contributor type.
type ExchangeMetadata_ContributorType int32

const (
	ExchangeMetadata_CONTRIBUTOR_TYPE_UNDEFINED ExchangeMetadata_ContributorType = 0
	// Contributor is a quote source.
	ExchangeMetadata_CONTRIBUTOR_TYPE_US_EQUITY_STYLE ExchangeMetadata_ContributorType = 1
	// Contributor is a buyer.
	ExchangeMetadata_CONTRIBUTOR_TYPE_OTC_STYLE ExchangeMetadata_ContributorType = 2
	// Contributor is a seller.
	ExchangeMetadata_CONTRIBUTOR_TYPE_CLUSTER_STYLE ExchangeMetadata_ContributorType = 3
)

// Enum value maps for ExchangeMetadata_ContributorType.
var (
	ExchangeMetadata_ContributorType_name = map[int32]string{
		0: "CONTRIBUTOR_TYPE_UNDEFINED",
		1: "CONTRIBUTOR_TYPE_US_EQUITY_STYLE",
		2: "CONTRIBUTOR_TYPE_OTC_STYLE",
		3: "CONTRIBUTOR_TYPE_CLUSTER_STYLE",
	}
	ExchangeMetadata_ContributorType_value = map[string]int32{
		"CONTRIBUTOR_TYPE_UNDEFINED":       0,
		"CONTRIBUTOR_TYPE_US_EQUITY_STYLE": 1,
		"CONTRIBUTOR_TYPE_OTC_STYLE":       2,
		"CONTRIBUTOR_TYPE_CLUSTER_STYLE":   3,
	}
)

func (x ExchangeMetadata_ContributorType) Enum() *ExchangeMetadata_ContributorType {
	p := new(ExchangeMetadata_ContributorType)
	*p = x
	return p
}

func (x ExchangeMetadata_ContributorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExchangeMetadata_ContributorType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_metadata_2_proto_enumTypes[11].Descriptor()
}

func (ExchangeMetadata_ContributorType) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_metadata_2_proto_enumTypes[11]
}

func (x ExchangeMetadata_ContributorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ExchangeMetadata_ContributorType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ExchangeMetadata_ContributorType(num)
	return nil
}

// Deprecated: Use ExchangeMetadata_ContributorType.Descriptor instead.
func (ExchangeMetadata_ContributorType) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_metadata_2_proto_rawDescGZIP(), []int{22, 0}
}

// Request to resolve a symbol pattern or specific symbol identifier
// to a specific contract with optional subscription for meta-data updates.
// Symbol resolution rules:
//
//	a) If the requested symbol points to a symbol prefix rather than a specific contract
//	   then it is resolved into the most active contract for this symbol prefix (e.g. 'EP' is resolved to 'EPU3').
//	   The update is sent when an active contract is changed (e.g. the update might contain the following 'EPZ3').
//	b) If the requested symbol points to an expired contract SymbolResolutionReport is returned with 'deleted' field
//	   set to True.
//	c) If the requested symbol points to a specific contract that is tradable right now then it is resolved to itself.
//	   Update is sent only when meta-data for such contract is changed or expired.
//	   In case of expiration SymbolResolutionReport is returned with 'deleted' field set to True.
//	d) If requested symbol points to an option instrument without specific month and strike
//	   it is resolved to the lead (first non-spot) month of the underlying future or its own front month
//	   if the underlying contract is not a future (e.g. 'C.EP' is resolved to 'C.EPU131600').
//	   Update is sent only when the resolved option contract is expired
//	   (strike is not updated to follow underlying contract market price).
//	e) If requested symbol is a symbol prefix that follows '?N' or '??N' (where N is number, e.g. EP?2)
//	   then it is resolved to Nth nearest contract.
//	   N = 1 means 'front' contract, N = 2 means the nearest contract that follows the front, etc.
//	   '?' and '??' are different for futures only
//	   and '?' means Nth nearest regular future and '??' means Nth nearest spot or regular future.
//	   Update is sent when the front contract expired
//	   and replaced with the following contract (relative position change).
//	   N = 0 is a special case that means 'most active' contract which works the same way as (a).
//	   If requested symbol is a symbol prefix that follows '?(-N)' or '??(-N)' then it is resolved to Nth previous
//	   contract.
//	f) If the requested short symbol is resolved to multiple instruments, the returned instrument will be chosen
//	   based on supplied lists of preferred instrument types and preferred countries:
//	   * If both lists are supplied, the type preference will be applied before the country preference;
//	   * If only the type list is supplied, it will be applied before the default country preference;
//	   * If only the country list is supplied, the default type preference will be applied before
//	     the supplied country preference;
//	   * If neither list is supplied, the default type and country preferences are applied.
//	   For example, 'AMP' can be resolved to 'S.US.AMP' or 'S.AU.AMP' depending on preferred countries
//	   having preferred instrument types 'S'.
//
// NOTE: Available and active contract lists are updated within 24 hours
//
//	of an expiring contract's final trading session.
//	Meta-data updates for affected contracts, when a subscription is present, are sent when the list updates occur.
//	Initial resolution requests use the same lists, so the best way to avoid inconsistency
//	and unnecessary server load is to subscribe and process updates when notified.
type SymbolResolutionRequest struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Symbol pattern to resolve.
	// It is a required field.
	Symbol *string `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	// Comma-separated list of preferred instrument types.
	// Type is encoded as a single character:
	//
	//	F - Future
	//	C - Call Option
	//	P - Put Option
	//	S - Equity
	//	T - Bond
	//	U - Strategy
	//	X - Cash and others
	//
	// Example: 'F,C,P,X'
	PreferredTypes *string `protobuf:"bytes,2,opt,name=preferred_types,json=preferredTypes" json:"preferred_types,omitempty"`
	// Comma-separated list of preferred countries.
	// Two-letter ISO 3166-1 country codes or some CQG-specific exchange codes.
	// Example: 'US,AU'
	PreferredCountries *string `protobuf:"bytes,3,opt,name=preferred_countries,json=preferredCountries" json:"preferred_countries,omitempty"`
}

func (x *SymbolResolutionRequest) Reset() {
	*x = SymbolResolutionRequest{}
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SymbolResolutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolResolutionRequest) ProtoMessage() {}

func (x *SymbolResolutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolResolutionRequest.ProtoReflect.Descriptor instead.
func (*SymbolResolutionRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_metadata_2_proto_rawDescGZIP(), []int{0}
}

func (x *SymbolResolutionRequest) GetSymbol() string {
	if x != nil && x.Symbol != nil {
		return *x.Symbol
	}
	return ""
}

func (x *SymbolResolutionRequest) GetPreferredTypes() string {
	if x != nil && x.PreferredTypes != nil {
		return *x.PreferredTypes
	}
	return ""
}

func (x *SymbolResolutionRequest) GetPreferredCountries() string {
	if x != nil && x.PreferredCountries != nil {
		return *x.PreferredCountries
	}
	return ""
}

// Symbol resolution result or update.
type SymbolResolutionReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resolved contract meta-data.
	ContractMetadata *ContractMetadata `protobuf:"bytes,1,req,name=contract_metadata,json=contractMetadata" json:"contract_metadata,omitempty"`
	// Contract is expired (used for updates).
	Deleted *bool `protobuf:"varint,2,opt,name=deleted" json:"deleted,omitempty"`
}

func (x *SymbolResolutionReport) Reset() {
	*x = SymbolResolutionReport{}
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SymbolResolutionReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolResolutionReport) ProtoMessage() {}

func (x *SymbolResolutionReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolResolutionReport.ProtoReflect.Descriptor instead.
func (*SymbolResolutionReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_metadata_2_proto_rawDescGZIP(), []int{1}
}

func (x *SymbolResolutionReport) GetContractMetadata() *ContractMetadata {
	if x != nil {
		return x.ContractMetadata
	}
	return nil
}

func (x *SymbolResolutionReport) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

// Request contract metadata by contract ID.
type ContractMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contract ID (ContractMetadata.contract_id) to request the metadata.
	ContractId *uint32 `protobuf:"varint,1,req,name=contract_id,json=contractId" json:"contract_id,omitempty"`
}

func (x *ContractMetadataRequest) Reset() {
	*x = ContractMetadataRequest{}
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractMetadataRequest) ProtoMessage() {}

func (x *ContractMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractMetadataRequest.ProtoReflect.Descriptor instead.
func (*ContractMetadataRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_metadata_2_proto_rawDescGZIP(), []int{2}
}

func (x *ContractMetadataRequest) GetContractId() uint32 {
	if x != nil && x.ContractId != nil {
		return *x.ContractId
	}
	return 0
}

// Report with the requested contract metadata.
type ContractMetadataReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requested metadata if successfully found.
	ContractMetadata *ContractMetadata `protobuf:"bytes,1,opt,name=contract_metadata,json=contractMetadata" json:"contract_metadata,omitempty"`
}

func (x *ContractMetadataReport) Reset() {
	*x = ContractMetadataReport{}
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractMetadataReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractMetadataReport) ProtoMessage() {}

func (x *ContractMetadataReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractMetadataReport.ProtoReflect.Descriptor instead.
func (*ContractMetadataReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_metadata_2_proto_rawDescGZIP(), []int{3}
}

func (x *ContractMetadataReport) GetContractMetadata() *ContractMetadata {
	if x != nil {
		return x.ContractMetadata
	}
	return nil
}

// Describes tick size and value, and the range of prices they apply in.
type TickSizeByPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Size or a single market tick in correct price format.
	TickSize *float64 `protobuf:"fixed64,1,req,name=tick_size,json=tickSize" json:"tick_size,omitempty"`
	// Contract tick money value in the contract's currency.
	// Zero if not applicable (e.g. for indexes).
	TickValue *float64 `protobuf:"fixed64,2,req,name=tick_value,json=tickValue" json:"tick_value,omitempty"`
	// Boundary of a half-open price range.
	// Minimum for positive values but maximum for negative values.
	// - Negative value defines (prev-price <- boundary_price] range
	// - Positive value defines [boundary_price -> next-price) range
	// - Zero value defines (highest-negative-price <- 0] and [0 -> lowest-positive-price)
	// The price is in correct price format.
	BoundaryPrice *float64 `protobuf:"fixed64,3,req,name=boundary_price,json=boundaryPrice" json:"boundary_price,omitempty"`
}

func (x *TickSizeByPrice) Reset() {
	*x = TickSizeByPrice{}
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TickSizeByPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TickSizeByPrice) ProtoMessage() {}

func (x *TickSizeByPrice) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TickSizeByPrice.ProtoReflect.Descriptor instead.
func (*TickSizeByPrice) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_metadata_2_proto_rawDescGZIP(), []int{4}
}

func (x *TickSizeByPrice) GetTickSize() float64 {
	if x != nil && x.TickSize != nil {
		return *x.TickSize
	}
	return 0
}

func (x *TickSizeByPrice) GetTickValue() float64 {
	if x != nil && x.TickValue != nil {
		return *x.TickValue
	}
	return 0
}

func (x *TickSizeByPrice) GetBoundaryPrice() float64 {
	if x != nil && x.BoundaryPrice != nil {
		return *x.BoundaryPrice
	}
	return 0
}

// Metadata used for real-time and trading data conversion.
type ConversionMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the currency contract (ContractMetadata.contract_id)
	// used for price conversion.
	CurrencyRateContractId *uint32 `protobuf:"varint,1,opt,name=currency_rate_contract_id,json=currencyRateContractId" json:"currency_rate_contract_id,omitempty"`
	// Identifier of the currency contract (ContractMetadata.contract_id)
	// used for hedging conversion.
	CurrencyHedgeContractId *uint32 `protobuf:"varint,2,opt,name=currency_hedge_contract_id,json=currencyHedgeContractId" json:"currency_hedge_contract_id,omitempty"`
}

func (x *ConversionMetadata) Reset() {
	*x = ConversionMetadata{}
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConversionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversionMetadata) ProtoMessage() {}

func (x *ConversionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversionMetadata.ProtoReflect.Descriptor instead.
func (*ConversionMetadata) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_metadata_2_proto_rawDescGZIP(), []int{5}
}

func (x *ConversionMetadata) GetCurrencyRateContractId() uint32 {
	if x != nil && x.CurrencyRateContractId != nil {
		return *x.CurrencyRateContractId
	}
	return 0
}

func (x *ConversionMetadata) GetCurrencyHedgeContractId() uint32 {
	if x != nil && x.CurrencyHedgeContractId != nil {
		return *x.CurrencyHedgeContractId
	}
	return 0
}

// Contract metadata.
// Client must have a subscription on ContractMetadata updates in case its fields are used (e.g. its correct_price_scale
// field when processing RealTimeMarketData). It can be done e.g. via ContractMetadataRequest.
type ContractMetadata struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Server assigned ID for a contract, it is not the same across sessions.
	ContractId *uint32 `protobuf:"varint,1,req,name=contract_id,json=contractId" json:"contract_id,omitempty"`
	// Full contract symbol.
	ContractSymbol *string `protobuf:"bytes,2,req,name=contract_symbol,json=contractSymbol" json:"contract_symbol,omitempty"`
	// Full contract symbol in CQG dialect.
	CqgContractSymbol *string `protobuf:"bytes,70,opt,name=cqg_contract_symbol,json=cqgContractSymbol" json:"cqg_contract_symbol,omitempty"`
	// Scale to convert prices from this protocol to correct prices
	// (correctPrice = price * correctPriceScale).
	CorrectPriceScale *float64 `protobuf:"fixed64,3,req,name=correct_price_scale,json=correctPriceScale" json:"correct_price_scale,omitempty"`
	// Display Price Scale is a number that defines conversion of float correct price to
	// a 'native' integer display format and back.
	// Below is the table of possible scale values.
	// -------------------------------------------------------
	// | Scale |       Name            |    Description      |
	// -------------------------------------------------------
	// | 0     |One                     |Don't scale         |
	// | 1     |TenMinusOne             |Divide by 10        |
	// | 2     |TenMinusTwo             |Divide by 100       |
	// | 3     |TenMinusThree           |Divide by 1000      |
	// | 4     |TenMinusFour            |Divide by 10000     |
	// | 5     |TenMinusFive            |Divide by 100000    |
	// | 6     |TenMinusSix             |Divide by 1000000   |
	// | 7     |TenMinusSeven           |Divide by 10000000  |
	// | 8     |TenMinusEight           |Divide by 100000000 |
	// | 9     |TenMinusNine            |Divide by 1000000000|
	// | 10    |TenMinusTen             |Divide by 10^10     |
	// | 11    |TenMinusEleven          |Divide by 10^11     |
	// | 12    |TenMinusTwelve          |Divide by 10^12     |
	// | 13    |TenMinusThirteen        |Divide by 10^13     |
	// | 14    |TenMinusFourteen        |Divide by 10^14     |
	// | 15    |TenMinusFifteen         |Divide by 10^15     |
	// | 101   |Halves                  |Divide by 2         |
	// | 102   |Fourths                 |Divide by 4         |
	// | 103   |Eighths                 |Divide by 8         |
	// | 104   |Sixteenths              |Divide by 16        |
	// | 105   |ThirtySeconds           |Divide by 32        |
	// | 106   |SixtyFourths            |Divide by 64        |
	// | 107   |OneHundredTwentyEighths |Divide by 128       |
	// | 108   |TwoHundredFiftySixths   |Divide by 256       |
	// | 109   |FiveHundredTwelths      |Divide by 512       |
	// | 110   |OneThousandTwentyFourths|Divide by 1024      |
	// | 201   |HalfThirtySeconds       |Similar to 64ths    |
	// | 202   |QuarterThirtySeconds    |Similar to 128ths   |
	// | 203   |EighthThirtySeconds     |Similar to 256ths   |
	// | 204   |HalfSixtyFourths        |Similar to 128ths   |
	// | 205   |QuarterSixtyFourths     |Similar to 256ths   |
	// | 206   |SixteenthThirtySeconds  |Similar to 512ths   |
	// -------------------------------------------------------
	DisplayPriceScale *uint32 `protobuf:"varint,4,req,name=display_price_scale,json=displayPriceScale" json:"display_price_scale,omitempty"`
	// Contract description.
	Description *string `protobuf:"bytes,5,req,name=description" json:"description,omitempty"`
	// Use description instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/metadata_2.proto.
	ExtendedDescription *string `protobuf:"bytes,43,opt,name=extended_description,json=extendedDescription" json:"extended_description,omitempty"`
	// Contract display name.
	Title *string `protobuf:"bytes,6,req,name=title" json:"title,omitempty"`
	// Size or a single market tick in correct price format.
	TickSize *float64 `protobuf:"fixed64,7,req,name=tick_size,json=tickSize" json:"tick_size,omitempty"`
	// Contract currency code.
	// Empty string if not applicable (e.g. for indexes).
	Currency *string `protobuf:"bytes,8,req,name=currency" json:"currency,omitempty"`
	// Contract tick money value in the contract's currency.
	// Zero if not applicable (e.g. for indexes).
	TickValue *float64 `protobuf:"fixed64,9,req,name=tick_value,json=tickValue" json:"tick_value,omitempty"`
	// CFI code (Classification of Financial Instruments, ISO 10962).
	CfiCode *string `protobuf:"bytes,10,req,name=cfi_code,json=cfiCode" json:"cfi_code,omitempty"`
	// True if this contract is the most active one for derivatives.
	IsMostActive *bool `protobuf:"varint,11,opt,name=is_most_active,json=isMostActive" json:"is_most_active,omitempty"`
	// Contract trading date for derivatives
	// (local exchange date in time format, use date part only).
	LastTradingDate *int64 `protobuf:"zigzag64,12,opt,name=last_trading_date,json=lastTradingDate" json:"last_trading_date,omitempty"`
	// Contract first notice date
	// (local exchange date in time format, use date part only).
	FirstNoticeDate *int64 `protobuf:"zigzag64,13,opt,name=first_notice_date,json=firstNoticeDate" json:"first_notice_date,omitempty"`
	// Underlying contract symbol (e.g. for options and equities).
	UnderlyingContractSymbol *string `protobuf:"bytes,14,opt,name=underlying_contract_symbol,json=underlyingContractSymbol" json:"underlying_contract_symbol,omitempty"`
	// This field is associated with MarginStyle enum type.
	MarginStyle *uint32 `protobuf:"varint,15,opt,name=margin_style,json=marginStyle" json:"margin_style,omitempty"`
	// Name of a group of contracts that share the same properties (e.g. commodity name for futures and options).
	InstrumentGroupName *string `protobuf:"bytes,16,req,name=instrument_group_name,json=instrumentGroupName" json:"instrument_group_name,omitempty"`
	// ID of a session information this contract is related to.
	// The field is set to -1 if session information is not available.
	SessionInfoId *int32 `protobuf:"zigzag32,17,req,name=session_info_id,json=sessionInfoId" json:"session_info_id,omitempty"`
	// Market segment MIC (ISO 10383) of the contract (if available), e.g. 'GLBX'.
	Mic *string `protobuf:"bytes,18,opt,name=mic" json:"mic,omitempty"`
	// Market segment MIC description (ISO 10383) of the contract (if available), e.g. 'CME GLOBEX'.
	MicDescription *string `protobuf:"bytes,44,opt,name=mic_description,json=micDescription" json:"mic_description,omitempty"`
	// If a user has access to delayed data of the contract
	// then this parameter is set to the delay value in milliseconds.
	MarketDataDelay *int64 `protobuf:"zigzag64,20,opt,name=market_data_delay,json=marketDataDelay" json:"market_data_delay,omitempty"`
	// If user is not allowed to receive quotes then End of Day (EOD) data for this contract can be allowed.
	// In case of real-time market data subscriptions only level MARKET_VALUES is supported.
	// In case of time bar requests only Daily (or larger) bars are supported.
	// Note: Data for current and previous trading days are available only if corresponding trading day
	// was closed |end_of_day_delay| milliseconds ago.
	EndOfDayDelay *int64 `protobuf:"zigzag64,59,opt,name=end_of_day_delay,json=endOfDayDelay" json:"end_of_day_delay,omitempty"`
	// Instrument group name without the prefix.
	ShortInstrumentGroupName *string `protobuf:"bytes,21,req,name=short_instrument_group_name,json=shortInstrumentGroupName" json:"short_instrument_group_name,omitempty"`
	// Description of the instrument group.
	InstrumentGroupDescription *string `protobuf:"bytes,22,req,name=instrument_group_description,json=instrumentGroupDescription" json:"instrument_group_description,omitempty"`
	// Variable tick size by contract price (if available for the contract).
	// If variable tick sizes by contract price are available, tick_size and tick_value specify the minimal tick size
	// and value among these.
	TickSizesByPrice []*TickSizeByPrice `protobuf:"bytes,23,rep,name=tick_sizes_by_price,json=tickSizesByPrice" json:"tick_sizes_by_price,omitempty"`
	// Option strike display value.
	Strike *int32 `protobuf:"zigzag32,26,opt,name=strike" json:"strike,omitempty"`
	// Option strike price value (directly in correct format).
	StrikePrice *float64 `protobuf:"fixed64,27,opt,name=strike_price,json=strikePrice" json:"strike_price,omitempty"`
	// Dialect of the contract symbol.
	// 0 - CQG dialect.
	DialectId *string `protobuf:"bytes,28,opt,name=dialect_id,json=dialectId" json:"dialect_id,omitempty"`
	// Two-letter exchange country code (ISO 3166-1 alpha 2).
	CountryCode *string `protobuf:"bytes,29,req,name=country_code,json=countryCode" json:"country_code,omitempty"`
	// Strategy definition if the contract is of a synthetic or a user defined strategy.
	StrategyDefinition *StrategyDefinition `protobuf:"bytes,30,opt,name=strategy_definition,json=strategyDefinition" json:"strategy_definition,omitempty"`
	// The deliverable quantity of commodities or financial instruments underlying contract.
	// E.g. "1,000 U.S. Barrels (42,000) Gallons", "125,000 Euro"
	ContractSize *string `protobuf:"bytes,31,opt,name=contract_size,json=contractSize" json:"contract_size,omitempty"`
	// Setting which regulates how to calculate contract open positions.
	// This field is associated with PositionTrackingType enum type.
	// POSITION_TRACKING_TYPE_NET_POSITION, if not set.
	PositionTracking *uint32 `protobuf:"varint,32,opt,name=position_tracking,json=positionTracking" json:"position_tracking,omitempty"`
	// Setting which requires whether every contract order has to specify SpeculationType instruction or not.
	SpeculationTypeRequired *bool `protobuf:"varint,33,opt,name=speculation_type_required,json=speculationTypeRequired,def=0" json:"speculation_type_required,omitempty"`
	// Month letter and 2-digit year identifying the maturity month of the contract (if applicable).
	// Doesn't depend on dialect.
	// Month and corresponding letter:
	// January   F
	// February  G
	// March     H
	// April     J
	// May       K
	// June      M
	// July      N
	// August    Q
	// September U
	// October   V
	// November  X
	// December  Z
	MaturityMonthYear *string `protobuf:"bytes,34,opt,name=maturity_month_year,json=maturityMonthYear" json:"maturity_month_year,omitempty"`
	// Contract's maturity date (e.g. for daily futures, when maturity_month_year is not enough).
	// (local exchange date in time format, use date part only).
	MaturityDate *int64 `protobuf:"zigzag64,53,opt,name=maturity_date,json=maturityDate" json:"maturity_date,omitempty"`
	// Recommended display mode for prices. See the PriceDisplayMode description.
	PriceDisplayMode *PriceDisplayMode `protobuf:"varint,35,opt,name=price_display_mode,json=priceDisplayMode,enum=metadata_2.PriceDisplayMode" json:"price_display_mode,omitempty"`
	// Currency code. For forex contracts only. Specifies the currency bought or sold.
	ForeignCurrency *string `protobuf:"bytes,39,opt,name=foreign_currency,json=foreignCurrency" json:"foreign_currency,omitempty"`
	// Specifies a volume unit of a contract, similar to correct_price_scale.
	// If a message contains a volume as uint64 (like Quote or TimeBar), its correct volume is calculated as:
	//
	//	correct_volume = Quote.volume * volume_scale.
	//
	// If a message contains a volume as cqg.Decimal, it is the correct volume.
	// If a contract has no fixed scale, this value is 1, and only cqg.Decimal volumes must be used.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/metadata_2.proto.
	VolumeScale *common.Decimal `protobuf:"bytes,40,opt,name=volume_scale,json=volumeScale" json:"volume_scale,omitempty"`
	// Specifies the recommended representation of volumes to users:
	//   - negative numbers - -N - mean that N decimal digits should be shown.
	//   - positive numbers - N - mean that N digits can be hidden behind a unit prefix (or unit symbol),
	//     e.g. if N = 3, volumes can be shown as "12k".
	VolumeDisplayExponent *int32 `protobuf:"zigzag32,41,opt,name=volume_display_exponent,json=volumeDisplayExponent,def=0" json:"volume_display_exponent,omitempty"`
	// Trade volume is required to be a multiple of trade_size_increment.
	TradeSizeIncrement *common.Decimal `protobuf:"bytes,42,opt,name=trade_size_increment,json=tradeSizeIncrement" json:"trade_size_increment,omitempty"`
	// True if DOM views should be inverted: low numbers are at the top, high numbers are at the bottom.
	// This field is usually set for fixed income contracts with "prices are yields" model.
	HasInvertedPriceLadder *bool `protobuf:"varint,60,opt,name=has_inverted_price_ladder,json=hasInvertedPriceLadder" json:"has_inverted_price_ladder,omitempty"`
	// The denominator (numerator is 1) of the DOM ladder compression ratio
	// to compress the ladder to eliminate all the extra/non-quoting values.
	DomLadderCompressionRatio *uint32 `protobuf:"varint,45,opt,name=dom_ladder_compression_ratio,json=domLadderCompressionRatio" json:"dom_ladder_compression_ratio,omitempty"`
	// Whether to expect that prices may appear not on the nominal tick prices
	// (not products of any tick_size: ordinal, variable, etc.) to changes DOM UI behavior.
	// Format such prices according to display_price_scale rule.
	ExpectOffTickPrices *bool `protobuf:"varint,46,opt,name=expect_off_tick_prices,json=expectOffTickPrices,def=0" json:"expect_off_tick_prices,omitempty"`
	// Specifies whether exchange provides volume data or not.
	HasExchangeVolume *bool `protobuf:"varint,47,opt,name=has_exchange_volume,json=hasExchangeVolume,def=1" json:"has_exchange_volume,omitempty"`
	// True if the contract supports yields and you can request them with MarketDataSubscription.include_yields.
	// Note: In case the contract has "prices are yields" model this field is false and yields are provided
	// through the price field.
	HasYields *bool `protobuf:"varint,61,opt,name=has_yields,json=hasYields" json:"has_yields,omitempty"`
	// The ISIN code acts an identifier for the securities.
	// And as such is the only common denominator securities identification number that is universally recognized.
	Isin *string `protobuf:"bytes,48,opt,name=isin" json:"isin,omitempty"`
	// Reference value for initial margin, expressed as money value in the contract's currency.
	// Note the value is informational only, not updated real-time, and does not
	// consider the account's portfolio or risk settings/parameters.
	InitialMargin *float64 `protobuf:"fixed64,82,opt,name=initial_margin,json=initialMargin" json:"initial_margin,omitempty"`
	// Reference value for maintenance margin (required to maintain 1 lot position
	// in this contract), expressed as money value in the contract's currency.
	// Note the value is informational only, not updated real-time, and does not
	// consider the account's portfolio or risk settings/parameters.
	MaintenanceMargin *float64 `protobuf:"fixed64,49,opt,name=maintenance_margin,json=maintenanceMargin" json:"maintenance_margin,omitempty"`
	// Contract size in the number of units (where defined). Unit is defined by contract_size_unit filed.
	ContractSizeInUnits *common.Decimal `protobuf:"bytes,50,opt,name=contract_size_in_units,json=contractSizeInUnits" json:"contract_size_in_units,omitempty"`
	// Unit label for the contract size.
	ContractSizeUnit *common.Text `protobuf:"bytes,51,opt,name=contract_size_unit,json=contractSizeUnit" json:"contract_size_unit,omitempty"`
	// Contract last delivery date
	// (local exchange date in time format, use date part only).
	LastDeliveryDate *int64 `protobuf:"zigzag64,52,opt,name=last_delivery_date,json=lastDeliveryDate" json:"last_delivery_date,omitempty"`
	// Optional custom contract parameters per associated OTC contributor (if any).
	ContributorParameters []*ContributorParameters `protobuf:"bytes,54,rep,name=contributor_parameters,json=contributorParameters" json:"contributor_parameters,omitempty"`
	// Type of listing period. This field is associated with PeriodType enum type.
	ListingPeriodType *uint32 `protobuf:"varint,55,opt,name=listing_period_type,json=listingPeriodType" json:"listing_period_type,omitempty"`
	// Value of listing period in listing_period_type units.
	ListingPeriodValue *uint32 `protobuf:"varint,56,opt,name=listing_period_value,json=listingPeriodValue" json:"listing_period_value,omitempty"`
	// ID of the symbol the contract represents (Symbol.id attribute).
	SymbolId *string `protobuf:"bytes,57,opt,name=symbol_id,json=symbolId" json:"symbol_id,omitempty"`
	// If contract metadata is "deleted", corresponding contract id can't be referred to in requests anymore
	// (this happens e.g. when published contract gets unpublished).
	Deleted *bool `protobuf:"varint,58,opt,name=deleted,def=0" json:"deleted,omitempty"`
	// ID used for ContributorMetadataRequest.
	ContributorGroupId *int32 `protobuf:"zigzag32,62,opt,name=contributor_group_id,json=contributorGroupId" json:"contributor_group_id,omitempty"`
	// If this instrument is double-quoted the field contains a contract id
	// to request corresponding source contract metadata
	// (see ContractMetadataRequest and ContractMetadata.contract_id).
	SourceContractId *uint32 `protobuf:"varint,63,opt,name=source_contract_id,json=sourceContractId" json:"source_contract_id,omitempty"`
	// Equity issuer.
	Issuer *string `protobuf:"bytes,66,opt,name=issuer" json:"issuer,omitempty"`
	// Option contract's maturity ID.
	OptionMaturityId *string `protobuf:"bytes,67,opt,name=option_maturity_id,json=optionMaturityId" json:"option_maturity_id,omitempty"`
	// Metadata used for real-time and trading data conversion.
	ConversionMetadata *ConversionMetadata `protobuf:"bytes,68,opt,name=conversion_metadata,json=conversionMetadata" json:"conversion_metadata,omitempty"`
	// ID used for MarketStateMetadataRequest.
	MarketStateGroupId *int32 `protobuf:"zigzag32,69,opt,name=market_state_group_id,json=marketStateGroupId" json:"market_state_group_id,omitempty"`
	// Settlement method.
	// This field is associated with SettlementMethod enum type.
	SettlementMethod *uint32 `protobuf:"varint,71,opt,name=settlement_method,json=settlementMethod" json:"settlement_method,omitempty"`
	// Exercise style, for options only.
	// This field is associated with ExerciseStyle enum type.
	ExerciseStyle *uint32 `protobuf:"varint,72,opt,name=exercise_style,json=exerciseStyle" json:"exercise_style,omitempty"`
	// Pricing convention.
	// This field is associated with PricingConvention enum type.
	PricingConvention *uint32 `protobuf:"varint,73,opt,name=pricing_convention,json=pricingConvention" json:"pricing_convention,omitempty"`
	// True if contract represents user-defined instrument.
	IsUserDefinedInstrument *bool `protobuf:"varint,74,opt,name=is_user_defined_instrument,json=isUserDefinedInstrument" json:"is_user_defined_instrument,omitempty"`
	// List of tick types used in bar building.
	// This field is associated with BarBuildingTickType enum type.
	// Note: BAR_BUILDING_TICK_TYPE_SETTLEMENT is used only in build time bars.
	BarBuildingTickTypes []uint32 `protobuf:"varint,75,rep,name=bar_building_tick_types,json=barBuildingTickTypes" json:"bar_building_tick_types,omitempty"`
	// Describes what the contract is quoted in. E.g. "USD per Barrel", "Cents per Bushel"
	QuotedIn *string `protobuf:"bytes,76,opt,name=quoted_in,json=quotedIn" json:"quoted_in,omitempty"`
	// Symbol ID (Symbol.id) of corresponding product if it was assigned to the contract.
	ProductSymbolId *string `protobuf:"bytes,77,opt,name=product_symbol_id,json=productSymbolId" json:"product_symbol_id,omitempty"`
	// Identifier of the contract (ContractMetadata.contract_id)
	// used for hedging, if applicable.
	// If not set, it is assumed to be the same as source contract.
	HedgeWithContractId *uint32 `protobuf:"varint,78,opt,name=hedge_with_contract_id,json=hedgeWithContractId" json:"hedge_with_contract_id,omitempty"`
	// If a contract is a synthetic version of real one,
	// this field contains a ContractMetadata.contract_id of real contract.
	ActualFutureContractId *uint32 `protobuf:"varint,79,opt,name=actual_future_contract_id,json=actualFutureContractId" json:"actual_future_contract_id,omitempty"`
	// Exchange ID this instrument belongs to.
	ExchangeId *int32 `protobuf:"zigzag32,80,opt,name=exchange_id,json=exchangeId" json:"exchange_id,omitempty"`
	// True if the contract supports continuation bars.
	SupportsContinuation *bool `protobuf:"varint,81,opt,name=supports_continuation,json=supportsContinuation" json:"supports_continuation,omitempty"`
	// Instrument business type identifier.
	// Note: this identifier is not guaranteed to be stable, so corresponding instrument
	// business type information should be obtained from results of SymbolCategoryListRequest
	// (see SymbolCategory.instrument_business_type_id field), instead of saving/using this id
	// between sessions to WebAPI.
	InstrumentBusinessTypeId *uint32 `protobuf:"varint,83,opt,name=instrument_business_type_id,json=instrumentBusinessTypeId" json:"instrument_business_type_id,omitempty"`
	// Sources of closing price.
	// Closing price can be found in message MarketValues and historical bars (message TimeBar and other).
	// Corresponding field name in related messages is scaled_close_price.
	// Order of sources defines what is used as closing price if several sources are available (from highest to
	// lowest priority).
	// This field is associated with CloseSource enum type.
	CloseSources []uint32 `protobuf:"varint,84,rep,name=close_sources,json=closeSources" json:"close_sources,omitempty"`
	// Open/close type.
	// This field is associated with OpenCloseType enum type.
	// OPEN_CLOSE_TYPE_NOT_USED if not set.
	OpenCloseType *uint32 `protobuf:"varint,85,opt,name=open_close_type,json=openCloseType" json:"open_close_type,omitempty"`
}

// Default values for ContractMetadata fields.
const (
	Default_ContractMetadata_SpeculationTypeRequired = bool(false)
	Default_ContractMetadata_VolumeDisplayExponent   = int32(0)
	Default_ContractMetadata_ExpectOffTickPrices     = bool(false)
	Default_ContractMetadata_HasExchangeVolume       = bool(true)
	Default_ContractMetadata_Deleted                 = bool(false)
)

func (x *ContractMetadata) Reset() {
	*x = ContractMetadata{}
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractMetadata) ProtoMessage() {}

func (x *ContractMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractMetadata.ProtoReflect.Descriptor instead.
func (*ContractMetadata) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_metadata_2_proto_rawDescGZIP(), []int{6}
}

func (x *ContractMetadata) GetContractId() uint32 {
	if x != nil && x.ContractId != nil {
		return *x.ContractId
	}
	return 0
}

func (x *ContractMetadata) GetContractSymbol() string {
	if x != nil && x.ContractSymbol != nil {
		return *x.ContractSymbol
	}
	return ""
}

func (x *ContractMetadata) GetCqgContractSymbol() string {
	if x != nil && x.CqgContractSymbol != nil {
		return *x.CqgContractSymbol
	}
	return ""
}

func (x *ContractMetadata) GetCorrectPriceScale() float64 {
	if x != nil && x.CorrectPriceScale != nil {
		return *x.CorrectPriceScale
	}
	return 0
}

func (x *ContractMetadata) GetDisplayPriceScale() uint32 {
	if x != nil && x.DisplayPriceScale != nil {
		return *x.DisplayPriceScale
	}
	return 0
}

func (x *ContractMetadata) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

// Deprecated: Marked as deprecated in protos/WebAPI/metadata_2.proto.
func (x *ContractMetadata) GetExtendedDescription() string {
	if x != nil && x.ExtendedDescription != nil {
		return *x.ExtendedDescription
	}
	return ""
}

func (x *ContractMetadata) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *ContractMetadata) GetTickSize() float64 {
	if x != nil && x.TickSize != nil {
		return *x.TickSize
	}
	return 0
}

func (x *ContractMetadata) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *ContractMetadata) GetTickValue() float64 {
	if x != nil && x.TickValue != nil {
		return *x.TickValue
	}
	return 0
}

func (x *ContractMetadata) GetCfiCode() string {
	if x != nil && x.CfiCode != nil {
		return *x.CfiCode
	}
	return ""
}

func (x *ContractMetadata) GetIsMostActive() bool {
	if x != nil && x.IsMostActive != nil {
		return *x.IsMostActive
	}
	return false
}

func (x *ContractMetadata) GetLastTradingDate() int64 {
	if x != nil && x.LastTradingDate != nil {
		return *x.LastTradingDate
	}
	return 0
}

func (x *ContractMetadata) GetFirstNoticeDate() int64 {
	if x != nil && x.FirstNoticeDate != nil {
		return *x.FirstNoticeDate
	}
	return 0
}

func (x *ContractMetadata) GetUnderlyingContractSymbol() string {
	if x != nil && x.UnderlyingContractSymbol != nil {
		return *x.UnderlyingContractSymbol
	}
	return ""
}

func (x *ContractMetadata) GetMarginStyle() uint32 {
	if x != nil && x.MarginStyle != nil {
		return *x.MarginStyle
	}
	return 0
}

func (x *ContractMetadata) GetInstrumentGroupName() string {
	if x != nil && x.InstrumentGroupName != nil {
		return *x.InstrumentGroupName
	}
	return ""
}

func (x *ContractMetadata) GetSessionInfoId() int32 {
	if x != nil && x.SessionInfoId != nil {
		return *x.SessionInfoId
	}
	return 0
}

func (x *ContractMetadata) GetMic() string {
	if x != nil && x.Mic != nil {
		return *x.Mic
	}
	return ""
}

func (x *ContractMetadata) GetMicDescription() string {
	if x != nil && x.MicDescription != nil {
		return *x.MicDescription
	}
	return ""
}

func (x *ContractMetadata) GetMarketDataDelay() int64 {
	if x != nil && x.MarketDataDelay != nil {
		return *x.MarketDataDelay
	}
	return 0
}

func (x *ContractMetadata) GetEndOfDayDelay() int64 {
	if x != nil && x.EndOfDayDelay != nil {
		return *x.EndOfDayDelay
	}
	return 0
}

func (x *ContractMetadata) GetShortInstrumentGroupName() string {
	if x != nil && x.ShortInstrumentGroupName != nil {
		return *x.ShortInstrumentGroupName
	}
	return ""
}

func (x *ContractMetadata) GetInstrumentGroupDescription() string {
	if x != nil && x.InstrumentGroupDescription != nil {
		return *x.InstrumentGroupDescription
	}
	return ""
}

func (x *ContractMetadata) GetTickSizesByPrice() []*TickSizeByPrice {
	if x != nil {
		return x.TickSizesByPrice
	}
	return nil
}

func (x *ContractMetadata) GetStrike() int32 {
	if x != nil && x.Strike != nil {
		return *x.Strike
	}
	return 0
}

func (x *ContractMetadata) GetStrikePrice() float64 {
	if x != nil && x.StrikePrice != nil {
		return *x.StrikePrice
	}
	return 0
}

func (x *ContractMetadata) GetDialectId() string {
	if x != nil && x.DialectId != nil {
		return *x.DialectId
	}
	return ""
}

func (x *ContractMetadata) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

func (x *ContractMetadata) GetStrategyDefinition() *StrategyDefinition {
	if x != nil {
		return x.StrategyDefinition
	}
	return nil
}

func (x *ContractMetadata) GetContractSize() string {
	if x != nil && x.ContractSize != nil {
		return *x.ContractSize
	}
	return ""
}

func (x *ContractMetadata) GetPositionTracking() uint32 {
	if x != nil && x.PositionTracking != nil {
		return *x.PositionTracking
	}
	return 0
}

func (x *ContractMetadata) GetSpeculationTypeRequired() bool {
	if x != nil && x.SpeculationTypeRequired != nil {
		return *x.SpeculationTypeRequired
	}
	return Default_ContractMetadata_SpeculationTypeRequired
}

func (x *ContractMetadata) GetMaturityMonthYear() string {
	if x != nil && x.MaturityMonthYear != nil {
		return *x.MaturityMonthYear
	}
	return ""
}

func (x *ContractMetadata) GetMaturityDate() int64 {
	if x != nil && x.MaturityDate != nil {
		return *x.MaturityDate
	}
	return 0
}

func (x *ContractMetadata) GetPriceDisplayMode() PriceDisplayMode {
	if x != nil && x.PriceDisplayMode != nil {
		return *x.PriceDisplayMode
	}
	return PriceDisplayMode_PRICE_DISPLAY_MODE_NUMERATOR
}

func (x *ContractMetadata) GetForeignCurrency() string {
	if x != nil && x.ForeignCurrency != nil {
		return *x.ForeignCurrency
	}
	return ""
}

// Deprecated: Marked as deprecated in protos/WebAPI/metadata_2.proto.
func (x *ContractMetadata) GetVolumeScale() *common.Decimal {
	if x != nil {
		return x.VolumeScale
	}
	return nil
}

func (x *ContractMetadata) GetVolumeDisplayExponent() int32 {
	if x != nil && x.VolumeDisplayExponent != nil {
		return *x.VolumeDisplayExponent
	}
	return Default_ContractMetadata_VolumeDisplayExponent
}

func (x *ContractMetadata) GetTradeSizeIncrement() *common.Decimal {
	if x != nil {
		return x.TradeSizeIncrement
	}
	return nil
}

func (x *ContractMetadata) GetHasInvertedPriceLadder() bool {
	if x != nil && x.HasInvertedPriceLadder != nil {
		return *x.HasInvertedPriceLadder
	}
	return false
}

func (x *ContractMetadata) GetDomLadderCompressionRatio() uint32 {
	if x != nil && x.DomLadderCompressionRatio != nil {
		return *x.DomLadderCompressionRatio
	}
	return 0
}

func (x *ContractMetadata) GetExpectOffTickPrices() bool {
	if x != nil && x.ExpectOffTickPrices != nil {
		return *x.ExpectOffTickPrices
	}
	return Default_ContractMetadata_ExpectOffTickPrices
}

func (x *ContractMetadata) GetHasExchangeVolume() bool {
	if x != nil && x.HasExchangeVolume != nil {
		return *x.HasExchangeVolume
	}
	return Default_ContractMetadata_HasExchangeVolume
}

func (x *ContractMetadata) GetHasYields() bool {
	if x != nil && x.HasYields != nil {
		return *x.HasYields
	}
	return false
}

func (x *ContractMetadata) GetIsin() string {
	if x != nil && x.Isin != nil {
		return *x.Isin
	}
	return ""
}

func (x *ContractMetadata) GetInitialMargin() float64 {
	if x != nil && x.InitialMargin != nil {
		return *x.InitialMargin
	}
	return 0
}

func (x *ContractMetadata) GetMaintenanceMargin() float64 {
	if x != nil && x.MaintenanceMargin != nil {
		return *x.MaintenanceMargin
	}
	return 0
}

func (x *ContractMetadata) GetContractSizeInUnits() *common.Decimal {
	if x != nil {
		return x.ContractSizeInUnits
	}
	return nil
}

func (x *ContractMetadata) GetContractSizeUnit() *common.Text {
	if x != nil {
		return x.ContractSizeUnit
	}
	return nil
}

func (x *ContractMetadata) GetLastDeliveryDate() int64 {
	if x != nil && x.LastDeliveryDate != nil {
		return *x.LastDeliveryDate
	}
	return 0
}

func (x *ContractMetadata) GetContributorParameters() []*ContributorParameters {
	if x != nil {
		return x.ContributorParameters
	}
	return nil
}

func (x *ContractMetadata) GetListingPeriodType() uint32 {
	if x != nil && x.ListingPeriodType != nil {
		return *x.ListingPeriodType
	}
	return 0
}

func (x *ContractMetadata) GetListingPeriodValue() uint32 {
	if x != nil && x.ListingPeriodValue != nil {
		return *x.ListingPeriodValue
	}
	return 0
}

func (x *ContractMetadata) GetSymbolId() string {
	if x != nil && x.SymbolId != nil {
		return *x.SymbolId
	}
	return ""
}

func (x *ContractMetadata) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return Default_ContractMetadata_Deleted
}

func (x *ContractMetadata) GetContributorGroupId() int32 {
	if x != nil && x.ContributorGroupId != nil {
		return *x.ContributorGroupId
	}
	return 0
}

func (x *ContractMetadata) GetSourceContractId() uint32 {
	if x != nil && x.SourceContractId != nil {
		return *x.SourceContractId
	}
	return 0
}

func (x *ContractMetadata) GetIssuer() string {
	if x != nil && x.Issuer != nil {
		return *x.Issuer
	}
	return ""
}

func (x *ContractMetadata) GetOptionMaturityId() string {
	if x != nil && x.OptionMaturityId != nil {
		return *x.OptionMaturityId
	}
	return ""
}

func (x *ContractMetadata) GetConversionMetadata() *ConversionMetadata {
	if x != nil {
		return x.ConversionMetadata
	}
	return nil
}

func (x *ContractMetadata) GetMarketStateGroupId() int32 {
	if x != nil && x.MarketStateGroupId != nil {
		return *x.MarketStateGroupId
	}
	return 0
}

func (x *ContractMetadata) GetSettlementMethod() uint32 {
	if x != nil && x.SettlementMethod != nil {
		return *x.SettlementMethod
	}
	return 0
}

func (x *ContractMetadata) GetExerciseStyle() uint32 {
	if x != nil && x.ExerciseStyle != nil {
		return *x.ExerciseStyle
	}
	return 0
}

func (x *ContractMetadata) GetPricingConvention() uint32 {
	if x != nil && x.PricingConvention != nil {
		return *x.PricingConvention
	}
	return 0
}

func (x *ContractMetadata) GetIsUserDefinedInstrument() bool {
	if x != nil && x.IsUserDefinedInstrument != nil {
		return *x.IsUserDefinedInstrument
	}
	return false
}

func (x *ContractMetadata) GetBarBuildingTickTypes() []uint32 {
	if x != nil {
		return x.BarBuildingTickTypes
	}
	return nil
}

func (x *ContractMetadata) GetQuotedIn() string {
	if x != nil && x.QuotedIn != nil {
		return *x.QuotedIn
	}
	return ""
}

func (x *ContractMetadata) GetProductSymbolId() string {
	if x != nil && x.ProductSymbolId != nil {
		return *x.ProductSymbolId
	}
	return ""
}

func (x *ContractMetadata) GetHedgeWithContractId() uint32 {
	if x != nil && x.HedgeWithContractId != nil {
		return *x.HedgeWithContractId
	}
	return 0
}

func (x *ContractMetadata) GetActualFutureContractId() uint32 {
	if x != nil && x.ActualFutureContractId != nil {
		return *x.ActualFutureContractId
	}
	return 0
}

func (x *ContractMetadata) GetExchangeId() int32 {
	if x != nil && x.ExchangeId != nil {
		return *x.ExchangeId
	}
	return 0
}

func (x *ContractMetadata) GetSupportsContinuation() bool {
	if x != nil && x.SupportsContinuation != nil {
		return *x.SupportsContinuation
	}
	return false
}

func (x *ContractMetadata) GetInstrumentBusinessTypeId() uint32 {
	if x != nil && x.InstrumentBusinessTypeId != nil {
		return *x.InstrumentBusinessTypeId
	}
	return 0
}

func (x *ContractMetadata) GetCloseSources() []uint32 {
	if x != nil {
		return x.CloseSources
	}
	return nil
}

func (x *ContractMetadata) GetOpenCloseType() uint32 {
	if x != nil && x.OpenCloseType != nil {
		return *x.OpenCloseType
	}
	return 0
}

// Request for contributor metadata.
type ContributorMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contributor group ID from ContractMetadata.
	ContributorGroupId *int32 `protobuf:"zigzag32,1,opt,name=contributor_group_id,json=contributorGroupId" json:"contributor_group_id,omitempty"`
}

func (x *ContributorMetadataRequest) Reset() {
	*x = ContributorMetadataRequest{}
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContributorMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContributorMetadataRequest) ProtoMessage() {}

func (x *ContributorMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContributorMetadataRequest.ProtoReflect.Descriptor instead.
func (*ContributorMetadataRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_metadata_2_proto_rawDescGZIP(), []int{7}
}

func (x *ContributorMetadataRequest) GetContributorGroupId() int32 {
	if x != nil && x.ContributorGroupId != nil {
		return *x.ContributorGroupId
	}
	return 0
}

// Report with contributor metadata.
type ContributorMetadataReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of contributor metadata.
	// Note: ContributorMetadata list may be empty even for valid contributor_group_id.
	ContributorMetadata []*ContributorMetadata `protobuf:"bytes,1,rep,name=contributor_metadata,json=contributorMetadata" json:"contributor_metadata,omitempty"`
}

func (x *ContributorMetadataReport) Reset() {
	*x = ContributorMetadataReport{}
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContributorMetadataReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContributorMetadataReport) ProtoMessage() {}

func (x *ContributorMetadataReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContributorMetadataReport.ProtoReflect.Descriptor instead.
func (*ContributorMetadataReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_metadata_2_proto_rawDescGZIP(), []int{8}
}

func (x *ContributorMetadataReport) GetContributorMetadata() []*ContributorMetadata {
	if x != nil {
		return x.ContributorMetadata
	}
	return nil
}

// Contributor metadata.
type ContributorMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID used in TradeAttributes as buyer and seller, DetailedDOMOrder as contributor_id.
	// Unique for its Contributor Group ID.
	ContributorId *int32 `protobuf:"zigzag32,1,opt,name=contributor_id,json=contributorId" json:"contributor_id,omitempty"`
	// Contributor name.
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Contributor description.
	Description *string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// Contributor is deleted (used for updates).
	Deleted *bool `protobuf:"varint,4,opt,name=deleted" json:"deleted,omitempty"`
}

func (x *ContributorMetadata) Reset() {
	*x = ContributorMetadata{}
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContributorMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContributorMetadata) ProtoMessage() {}

func (x *ContributorMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContributorMetadata.ProtoReflect.Descriptor instead.
func (*ContributorMetadata) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_metadata_2_proto_rawDescGZIP(), []int{9}
}

func (x *ContributorMetadata) GetContributorId() int32 {
	if x != nil && x.ContributorId != nil {
		return *x.ContributorId
	}
	return 0
}

func (x *ContributorMetadata) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ContributorMetadata) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ContributorMetadata) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

// Request a list of option maturities by an underlying contract
type OptionMaturityListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnderlyingContractId *uint32 `protobuf:"varint,1,req,name=underlying_contract_id,json=underlyingContractId" json:"underlying_contract_id,omitempty"`
}

func (x *OptionMaturityListRequest) Reset() {
	*x = OptionMaturityListRequest{}
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OptionMaturityListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionMaturityListRequest) ProtoMessage() {}

func (x *OptionMaturityListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionMaturityListRequest.ProtoReflect.Descriptor instead.
func (*OptionMaturityListRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_metadata_2_proto_rawDescGZIP(), []int{10}
}

func (x *OptionMaturityListRequest) GetUnderlyingContractId() uint32 {
	if x != nil && x.UnderlyingContractId != nil {
		return *x.UnderlyingContractId
	}
	return 0
}

// Report with a list of option maturities.
// When the list is updated by a subscription
// (e.g. some option maturity is expired or a new one appears)
// the list includes only new or deleted items.
type OptionMaturityListReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of option maturities.
	OptionMaturities []*OptionMaturityMetadata `protobuf:"bytes,1,rep,name=option_maturities,json=optionMaturities" json:"option_maturities,omitempty"`
}

func (x *OptionMaturityListReport) Reset() {
	*x = OptionMaturityListReport{}
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OptionMaturityListReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionMaturityListReport) ProtoMessage() {}

func (x *OptionMaturityListReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionMaturityListReport.ProtoReflect.Descriptor instead.
func (*OptionMaturityListReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_metadata_2_proto_rawDescGZIP(), []int{11}
}

func (x *OptionMaturityListReport) GetOptionMaturities() []*OptionMaturityMetadata {
	if x != nil {
		return x.OptionMaturities
	}
	return nil
}

// Option maturity metadata.
// It represents a list of option strikes (puts and calls) with the same underlying instrument and expiration date.
type OptionMaturityMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Option maturity identifier.
	Id *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	// Option maturity name.
	Name *string `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	// Option maturity description.
	Description *string `protobuf:"bytes,3,req,name=description" json:"description,omitempty"`
	// CFI code (Classification of Financial Instruments, ISO 10962) if appropriate.
	CfiCode *string `protobuf:"bytes,4,opt,name=cfi_code,json=cfiCode" json:"cfi_code,omitempty"`
	// Deleted flag is used in updates when the option maturity is removed (e.g. expired).
	Deleted *bool `protobuf:"varint,7,opt,name=deleted" json:"deleted,omitempty"`
	// Last trading date (local exchange date in time format, use date part only).
	LastTradingDate *int64 `protobuf:"zigzag64,8,opt,name=last_trading_date,json=lastTradingDate" json:"last_trading_date,omitempty"`
	// Last trading date and time.
	LastTradingDateTimeUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=last_trading_date_time_utc_timestamp,json=lastTradingDateTimeUtcTimestamp" json:"last_trading_date_time_utc_timestamp,omitempty"`
	// Month letter and 2-digit year identifying the maturity month.
	// Note: look at comment for maturity_month_year from ContractMetadata for further info.
	MaturityMonthYear *string `protobuf:"bytes,9,opt,name=maturity_month_year,json=maturityMonthYear" json:"maturity_month_year,omitempty"`
	// Name of a group of instruments that share the same properties (e.g. commodity name).
	InstrumentGroupName *string `protobuf:"bytes,10,opt,name=instrument_group_name,json=instrumentGroupName" json:"instrument_group_name,omitempty"`
	// Whether the option maturity instrument group has option strikes.
	// It relates to InstrumentGroupRequest request.
	// Some option strikes can be related to option maturity, but they can be absent in the group.
	// E.g., option strikes range is changed and strikes out of the range don't appear in the group.
	InstrumentGroupEmpty *bool `protobuf:"varint,17,opt,name=instrument_group_empty,json=instrumentGroupEmpty" json:"instrument_group_empty,omitempty"`
	// Listing period type. This field is associated with PeriodType enum type.
	ListingPeriodType *uint32 `protobuf:"varint,18,opt,name=listing_period_type,json=listingPeriodType" json:"listing_period_type,omitempty"`
	// Listing period value in listing_period_type units.
	ListingPeriodValue *uint32 `protobuf:"varint,19,opt,name=listing_period_value,json=listingPeriodValue" json:"listing_period_value,omitempty"`
	Reserved1          *bool   `protobuf:"varint,5,opt,name=reserved1" json:"reserved1,omitempty"`
}

func (x *OptionMaturityMetadata) Reset() {
	*x = OptionMaturityMetadata{}
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OptionMaturityMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionMaturityMetadata) ProtoMessage() {}

func (x *OptionMaturityMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionMaturityMetadata.ProtoReflect.Descriptor instead.
func (*OptionMaturityMetadata) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_metadata_2_proto_rawDescGZIP(), []int{12}
}

func (x *OptionMaturityMetadata) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *OptionMaturityMetadata) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *OptionMaturityMetadata) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *OptionMaturityMetadata) GetCfiCode() string {
	if x != nil && x.CfiCode != nil {
		return *x.CfiCode
	}
	return ""
}

func (x *OptionMaturityMetadata) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

func (x *OptionMaturityMetadata) GetLastTradingDate() int64 {
	if x != nil && x.LastTradingDate != nil {
		return *x.LastTradingDate
	}
	return 0
}

func (x *OptionMaturityMetadata) GetLastTradingDateTimeUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LastTradingDateTimeUtcTimestamp
	}
	return nil
}

func (x *OptionMaturityMetadata) GetMaturityMonthYear() string {
	if x != nil && x.MaturityMonthYear != nil {
		return *x.MaturityMonthYear
	}
	return ""
}

func (x *OptionMaturityMetadata) GetInstrumentGroupName() string {
	if x != nil && x.InstrumentGroupName != nil {
		return *x.InstrumentGroupName
	}
	return ""
}

func (x *OptionMaturityMetadata) GetInstrumentGroupEmpty() bool {
	if x != nil && x.InstrumentGroupEmpty != nil {
		return *x.InstrumentGroupEmpty
	}
	return false
}

func (x *OptionMaturityMetadata) GetListingPeriodType() uint32 {
	if x != nil && x.ListingPeriodType != nil {
		return *x.ListingPeriodType
	}
	return 0
}

func (x *OptionMaturityMetadata) GetListingPeriodValue() uint32 {
	if x != nil && x.ListingPeriodValue != nil {
		return *x.ListingPeriodValue
	}
	return 0
}

func (x *OptionMaturityMetadata) GetReserved1() bool {
	if x != nil && x.Reserved1 != nil {
		return *x.Reserved1
	}
	return false
}

// Request a group of instruments by an instrument group identifier.
type InstrumentGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of instrument group. It can be one of:
	//   - Option maturity id to get a group of option strikes (see OptionMaturityMetadata.id)
	//   - Instrument group's name to get a group of futures (e.g. 'F.US.EP', see
	//     ContractMetadata.instrument_group_name or SecurityMetadata.source_instrument_group_name)
	InstrumentGroupId *string `protobuf:"bytes,1,req,name=instrument_group_id,json=instrumentGroupId" json:"instrument_group_id,omitempty"`
}

func (x *InstrumentGroupRequest) Reset() {
	*x = InstrumentGroupRequest{}
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstrumentGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentGroupRequest) ProtoMessage() {}

func (x *InstrumentGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentGroupRequest.ProtoReflect.Descriptor instead.
func (*InstrumentGroupRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_metadata_2_proto_rawDescGZIP(), []int{13}
}

func (x *InstrumentGroupRequest) GetInstrumentGroupId() string {
	if x != nil && x.InstrumentGroupId != nil {
		return *x.InstrumentGroupId
	}
	return ""
}

// Report with a group of instruments.
type InstrumentGroupReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Instruments.
	Instruments []*InstrumentGroupItem `protobuf:"bytes,1,rep,name=instruments" json:"instruments,omitempty"`
}

func (x *InstrumentGroupReport) Reset() {
	*x = InstrumentGroupReport{}
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstrumentGroupReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentGroupReport) ProtoMessage() {}

func (x *InstrumentGroupReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentGroupReport.ProtoReflect.Descriptor instead.
func (*InstrumentGroupReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_metadata_2_proto_rawDescGZIP(), []int{14}
}

func (x *InstrumentGroupReport) GetInstruments() []*InstrumentGroupItem {
	if x != nil {
		return x.Instruments
	}
	return nil
}

// Instrument group item.
type InstrumentGroupItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Instrument group item identifier.
	Id *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	// Instrument name. The value matches ContractMetadata.contract_symbol.
	Name *string `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	// Instrument description.
	Description *string `protobuf:"bytes,3,req,name=description" json:"description,omitempty"`
	// CFI code (Classification of Financial Instruments, ISO 10962) if appropriate.
	CfiCode *string `protobuf:"bytes,4,opt,name=cfi_code,json=cfiCode" json:"cfi_code,omitempty"`
	// Contract meta-data.
	ContractMetadata *ContractMetadata `protobuf:"bytes,6,opt,name=contract_metadata,json=contractMetadata" json:"contract_metadata,omitempty"`
	// Deleted flag is used in updates when the instrument is removed from the group (e.g. expired).
	Deleted *bool `protobuf:"varint,7,opt,name=deleted" json:"deleted,omitempty"`
	// Last trading date for derivatives if applicable.
	// (local exchange date in time format, use date part only).
	LastTradingDate *int64 `protobuf:"zigzag64,8,opt,name=last_trading_date,json=lastTradingDate" json:"last_trading_date,omitempty"`
	// Month letter and 2-digit year identifying the maturity month of the instrument.
	// Note: look at comment for maturity_month_year from ContractMetadata for further info.
	MaturityMonthYear *string `protobuf:"bytes,9,opt,name=maturity_month_year,json=maturityMonthYear" json:"maturity_month_year,omitempty"`
	// Name of a group of instruments that share the same properties (e.g. commodity name for futures and options).
	InstrumentGroupName *string `protobuf:"bytes,10,opt,name=instrument_group_name,json=instrumentGroupName" json:"instrument_group_name,omitempty"`
	Reserved1           *bool   `protobuf:"varint,5,opt,name=reserved1" json:"reserved1,omitempty"`
	Reserved2           *string `protobuf:"bytes,11,opt,name=reserved2" json:"reserved2,omitempty"`
}

func (x *InstrumentGroupItem) Reset() {
	*x = InstrumentGroupItem{}
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstrumentGroupItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentGroupItem) ProtoMessage() {}

func (x *InstrumentGroupItem) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentGroupItem.ProtoReflect.Descriptor instead.
func (*InstrumentGroupItem) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_metadata_2_proto_rawDescGZIP(), []int{15}
}

func (x *InstrumentGroupItem) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *InstrumentGroupItem) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *InstrumentGroupItem) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *InstrumentGroupItem) GetCfiCode() string {
	if x != nil && x.CfiCode != nil {
		return *x.CfiCode
	}
	return ""
}

func (x *InstrumentGroupItem) GetContractMetadata() *ContractMetadata {
	if x != nil {
		return x.ContractMetadata
	}
	return nil
}

func (x *InstrumentGroupItem) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

func (x *InstrumentGroupItem) GetLastTradingDate() int64 {
	if x != nil && x.LastTradingDate != nil {
		return *x.LastTradingDate
	}
	return 0
}

func (x *InstrumentGroupItem) GetMaturityMonthYear() string {
	if x != nil && x.MaturityMonthYear != nil {
		return *x.MaturityMonthYear
	}
	return ""
}

func (x *InstrumentGroupItem) GetInstrumentGroupName() string {
	if x != nil && x.InstrumentGroupName != nil {
		return *x.InstrumentGroupName
	}
	return ""
}

func (x *InstrumentGroupItem) GetReserved1() bool {
	if x != nil && x.Reserved1 != nil {
		return *x.Reserved1
	}
	return false
}

func (x *InstrumentGroupItem) GetReserved2() string {
	if x != nil && x.Reserved2 != nil {
		return *x.Reserved2
	}
	return ""
}

// Request for Market State metadata.
type MarketStateMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Market State Group ID from ContractMetadata.
	MarketStateGroupId *int32 `protobuf:"zigzag32,1,req,name=market_state_group_id,json=marketStateGroupId" json:"market_state_group_id,omitempty"`
}

func (x *MarketStateMetadataRequest) Reset() {
	*x = MarketStateMetadataRequest{}
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarketStateMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketStateMetadataRequest) ProtoMessage() {}

func (x *MarketStateMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketStateMetadataRequest.ProtoReflect.Descriptor instead.
func (*MarketStateMetadataRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_metadata_2_proto_rawDescGZIP(), []int{16}
}

func (x *MarketStateMetadataRequest) GetMarketStateGroupId() int32 {
	if x != nil && x.MarketStateGroupId != nil {
		return *x.MarketStateGroupId
	}
	return 0
}

// Market State metadata.
// The first complete report contains initial snapshot, which may be saved as local state.
// All subsequent messages contain updates that may be applied to the local state.
// Subscribed requests in case of server-side communication issues will receive
// an InformationReport with status_code "StatusCode.STATUS_CODE_DISCONNECTED".
// After issues resolution subscribed requests will receive an InformationReport
// with status_code "StatusCode.STATUS_CODE_SUBSCRIBED" and with a list of metadata updates, if there are any.
type MarketStateMetadataReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketStateAttributeMetadata []*MarketStateAttributeMetadata `protobuf:"bytes,1,rep,name=market_state_attribute_metadata,json=marketStateAttributeMetadata" json:"market_state_attribute_metadata,omitempty"`
}

func (x *MarketStateMetadataReport) Reset() {
	*x = MarketStateMetadataReport{}
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarketStateMetadataReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketStateMetadataReport) ProtoMessage() {}

func (x *MarketStateMetadataReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketStateMetadataReport.ProtoReflect.Descriptor instead.
func (*MarketStateMetadataReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_metadata_2_proto_rawDescGZIP(), []int{17}
}

func (x *MarketStateMetadataReport) GetMarketStateAttributeMetadata() []*MarketStateAttributeMetadata {
	if x != nil {
		return x.MarketStateAttributeMetadata
	}
	return nil
}

// Market State attribute metadata
// Note: To apply a metadata update one must follow rules:
//  1. If an update contains a MarketStateAttributeMetadata with a combination of "name" and
//     "level" fields values, which does not exist in the local state, then it must be added to it.
//  2. If an update contains a MarketStateAttributeMetadata with a combination of "name" and
//     "level fields values, which already exists in the local state, then:
//     i. If the field "deleted" is present and set to true - this Attribute should be deleted from the local state.
//     ii. Otherwise updates for value_metadata should be applied (see MarketStateValueMetadata comments).
type MarketStateAttributeMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Attribute name
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Attribute level in attributes hierarchy
	Level *uint32 `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`
	// Attribute possible values metadata
	ValueMetadata []*MarketStateValueMetadata `protobuf:"bytes,3,rep,name=value_metadata,json=valueMetadata" json:"value_metadata,omitempty"`
	// If present and true - attribute should be deleted from metadata
	Deleted *bool `protobuf:"varint,4,opt,name=deleted" json:"deleted,omitempty"`
}

func (x *MarketStateAttributeMetadata) Reset() {
	*x = MarketStateAttributeMetadata{}
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarketStateAttributeMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketStateAttributeMetadata) ProtoMessage() {}

func (x *MarketStateAttributeMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketStateAttributeMetadata.ProtoReflect.Descriptor instead.
func (*MarketStateAttributeMetadata) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_metadata_2_proto_rawDescGZIP(), []int{18}
}

func (x *MarketStateAttributeMetadata) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *MarketStateAttributeMetadata) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *MarketStateAttributeMetadata) GetValueMetadata() []*MarketStateValueMetadata {
	if x != nil {
		return x.ValueMetadata
	}
	return nil
}

func (x *MarketStateAttributeMetadata) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

// Market State attribute value metadata.
// Note: To apply a value metadata update one must follow rules:
//  1. If a received update has MarketStateValueMetadata with the "value" field value, which does not exist
//     in the local state, then this metadata must be added to it.
//  2. If a received update has MarketStateValueMetadata with the "value" field value, which exists
//     in the local state, then:
//     i. If the field "deleted" present and set to true - this MarketStateValueMetadata should be deleted
//     from the local state.
//     ii. If the field "description" value is different from the value stored in the local state - it should be set
//     to the new value.
type MarketStateValueMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Attribute value
	Value *string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	// Attribute value description
	Description *string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	// If present and true - attribute value metadata should be deleted
	Deleted *bool `protobuf:"varint,3,opt,name=deleted" json:"deleted,omitempty"`
}

func (x *MarketStateValueMetadata) Reset() {
	*x = MarketStateValueMetadata{}
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarketStateValueMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketStateValueMetadata) ProtoMessage() {}

func (x *MarketStateValueMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketStateValueMetadata.ProtoReflect.Descriptor instead.
func (*MarketStateValueMetadata) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_metadata_2_proto_rawDescGZIP(), []int{19}
}

func (x *MarketStateValueMetadata) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *MarketStateValueMetadata) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *MarketStateValueMetadata) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

// Request for exchange metadata.
type ExchangeMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExchangeMetadataRequest) Reset() {
	*x = ExchangeMetadataRequest{}
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExchangeMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeMetadataRequest) ProtoMessage() {}

func (x *ExchangeMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeMetadataRequest.ProtoReflect.Descriptor instead.
func (*ExchangeMetadataRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_metadata_2_proto_rawDescGZIP(), []int{20}
}

// Report with exchange metadata.
type ExchangeMetadataReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requested exchange metadata.
	ExchangeMetadata []*ExchangeMetadata `protobuf:"bytes,1,rep,name=exchange_metadata,json=exchangeMetadata" json:"exchange_metadata,omitempty"`
}

func (x *ExchangeMetadataReport) Reset() {
	*x = ExchangeMetadataReport{}
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExchangeMetadataReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeMetadataReport) ProtoMessage() {}

func (x *ExchangeMetadataReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeMetadataReport.ProtoReflect.Descriptor instead.
func (*ExchangeMetadataReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_metadata_2_proto_rawDescGZIP(), []int{21}
}

func (x *ExchangeMetadataReport) GetExchangeMetadata() []*ExchangeMetadata {
	if x != nil {
		return x.ExchangeMetadata
	}
	return nil
}

// Exchange metadata.
type ExchangeMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Exchange ID.
	// It is a required field.
	ExchangeId *int32 `protobuf:"zigzag32,1,opt,name=exchange_id,json=exchangeId" json:"exchange_id,omitempty"`
	// This field is associated with ContributorType enum type.
	ContributorType *uint32 `protobuf:"varint,2,opt,name=contributor_type,json=contributorType" json:"contributor_type,omitempty"`
	// Exchange abbreviation.
	Abbreviation *string `protobuf:"bytes,3,opt,name=abbreviation" json:"abbreviation,omitempty"`
	// Exchange name.
	Name *string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	// Description.
	Description *string `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	// If present and true - exchange metadata should be deleted.
	Deleted *bool `protobuf:"varint,6,opt,name=deleted" json:"deleted,omitempty"`
}

func (x *ExchangeMetadata) Reset() {
	*x = ExchangeMetadata{}
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExchangeMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeMetadata) ProtoMessage() {}

func (x *ExchangeMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeMetadata.ProtoReflect.Descriptor instead.
func (*ExchangeMetadata) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_metadata_2_proto_rawDescGZIP(), []int{22}
}

func (x *ExchangeMetadata) GetExchangeId() int32 {
	if x != nil && x.ExchangeId != nil {
		return *x.ExchangeId
	}
	return 0
}

func (x *ExchangeMetadata) GetContributorType() uint32 {
	if x != nil && x.ContributorType != nil {
		return *x.ContributorType
	}
	return 0
}

func (x *ExchangeMetadata) GetAbbreviation() string {
	if x != nil && x.Abbreviation != nil {
		return *x.Abbreviation
	}
	return ""
}

func (x *ExchangeMetadata) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ExchangeMetadata) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ExchangeMetadata) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

// Request for group of instruments based on given list of securities.
type InstrumentGroupBySecuritiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IDs of the securities, can be from different exchanges.
	// Can be queried with ExchangeSecuritiesRequest.
	SecurityIds []string `protobuf:"bytes,1,rep,name=security_ids,json=securityIds" json:"security_ids,omitempty"`
}

func (x *InstrumentGroupBySecuritiesRequest) Reset() {
	*x = InstrumentGroupBySecuritiesRequest{}
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstrumentGroupBySecuritiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentGroupBySecuritiesRequest) ProtoMessage() {}

func (x *InstrumentGroupBySecuritiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentGroupBySecuritiesRequest.ProtoReflect.Descriptor instead.
func (*InstrumentGroupBySecuritiesRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_metadata_2_proto_rawDescGZIP(), []int{23}
}

func (x *InstrumentGroupBySecuritiesRequest) GetSecurityIds() []string {
	if x != nil {
		return x.SecurityIds
	}
	return nil
}

// Report with a group of instruments.
type InstrumentGroupBySecuritiesReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of instruments.
	Instruments []*InstrumentGroupItem `protobuf:"bytes,1,rep,name=instruments" json:"instruments,omitempty"`
}

func (x *InstrumentGroupBySecuritiesReport) Reset() {
	*x = InstrumentGroupBySecuritiesReport{}
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstrumentGroupBySecuritiesReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentGroupBySecuritiesReport) ProtoMessage() {}

func (x *InstrumentGroupBySecuritiesReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentGroupBySecuritiesReport.ProtoReflect.Descriptor instead.
func (*InstrumentGroupBySecuritiesReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_metadata_2_proto_rawDescGZIP(), []int{24}
}

func (x *InstrumentGroupBySecuritiesReport) GetInstruments() []*InstrumentGroupItem {
	if x != nil {
		return x.Instruments
	}
	return nil
}

// Request for group of instruments based on given exchange ID and type of instruments.
type InstrumentGroupByExchangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Exchange ID.
	// It is a required field.
	ExchangeId *int32 `protobuf:"zigzag32,1,opt,name=exchange_id,json=exchangeId" json:"exchange_id,omitempty"`
	// This field is associated with InstrumentGroupType enum type.
	// It is a required field.
	InstrumentGroupType *uint32 `protobuf:"varint,2,opt,name=instrument_group_type,json=instrumentGroupType" json:"instrument_group_type,omitempty"`
}

func (x *InstrumentGroupByExchangeRequest) Reset() {
	*x = InstrumentGroupByExchangeRequest{}
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstrumentGroupByExchangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentGroupByExchangeRequest) ProtoMessage() {}

func (x *InstrumentGroupByExchangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentGroupByExchangeRequest.ProtoReflect.Descriptor instead.
func (*InstrumentGroupByExchangeRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_metadata_2_proto_rawDescGZIP(), []int{25}
}

func (x *InstrumentGroupByExchangeRequest) GetExchangeId() int32 {
	if x != nil && x.ExchangeId != nil {
		return *x.ExchangeId
	}
	return 0
}

func (x *InstrumentGroupByExchangeRequest) GetInstrumentGroupType() uint32 {
	if x != nil && x.InstrumentGroupType != nil {
		return *x.InstrumentGroupType
	}
	return 0
}

// Report with a group of instruments.
type InstrumentGroupByExchangeReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of instruments.
	Instruments []*InstrumentGroupItem `protobuf:"bytes,1,rep,name=instruments" json:"instruments,omitempty"`
}

func (x *InstrumentGroupByExchangeReport) Reset() {
	*x = InstrumentGroupByExchangeReport{}
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstrumentGroupByExchangeReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentGroupByExchangeReport) ProtoMessage() {}

func (x *InstrumentGroupByExchangeReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentGroupByExchangeReport.ProtoReflect.Descriptor instead.
func (*InstrumentGroupByExchangeReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_metadata_2_proto_rawDescGZIP(), []int{26}
}

func (x *InstrumentGroupByExchangeReport) GetInstruments() []*InstrumentGroupItem {
	if x != nil {
		return x.Instruments
	}
	return nil
}

// Request for list of securities for a particular exchange and type of instruments.
type ExchangeSecuritiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Exchange ID.
	// It is a required field.
	ExchangeId *int32 `protobuf:"zigzag32,1,opt,name=exchange_id,json=exchangeId" json:"exchange_id,omitempty"`
	// This field is associated with InstrumentGroupType enum type.
	// It is a required field.
	InstrumentGroupType *uint32 `protobuf:"varint,2,opt,name=instrument_group_type,json=instrumentGroupType" json:"instrument_group_type,omitempty"`
}

func (x *ExchangeSecuritiesRequest) Reset() {
	*x = ExchangeSecuritiesRequest{}
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExchangeSecuritiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeSecuritiesRequest) ProtoMessage() {}

func (x *ExchangeSecuritiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeSecuritiesRequest.ProtoReflect.Descriptor instead.
func (*ExchangeSecuritiesRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_metadata_2_proto_rawDescGZIP(), []int{27}
}

func (x *ExchangeSecuritiesRequest) GetExchangeId() int32 {
	if x != nil && x.ExchangeId != nil {
		return *x.ExchangeId
	}
	return 0
}

func (x *ExchangeSecuritiesRequest) GetInstrumentGroupType() uint32 {
	if x != nil && x.InstrumentGroupType != nil {
		return *x.InstrumentGroupType
	}
	return 0
}

// Exchange securities report.
type ExchangeSecuritiesReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of securities.
	ExchangeSecurities []*SecurityMetadata `protobuf:"bytes,1,rep,name=exchange_securities,json=exchangeSecurities" json:"exchange_securities,omitempty"`
}

func (x *ExchangeSecuritiesReport) Reset() {
	*x = ExchangeSecuritiesReport{}
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExchangeSecuritiesReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeSecuritiesReport) ProtoMessage() {}

func (x *ExchangeSecuritiesReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeSecuritiesReport.ProtoReflect.Descriptor instead.
func (*ExchangeSecuritiesReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_metadata_2_proto_rawDescGZIP(), []int{28}
}

func (x *ExchangeSecuritiesReport) GetExchangeSecurities() []*SecurityMetadata {
	if x != nil {
		return x.ExchangeSecurities
	}
	return nil
}

// Metadata used for real-time and trading data processing for a group of contracts.
// Note that for some contracts tick_size, tick_value or contract_size_in_units values on
// ContractMetadata level might differ from corresponding values in ProcessingMetadata
// (e.g., tick_size and tick_value for VTS contracts or contract_size_in_units for some option contracts).
// In these cases ContractMetadata values should be used.
type ProcessingMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Currency code.
	Currency *string `protobuf:"bytes,1,opt,name=currency" json:"currency,omitempty"`
	// Size or a single market tick in correct price format.
	TickSize *float64 `protobuf:"fixed64,2,opt,name=tick_size,json=tickSize" json:"tick_size,omitempty"`
	// Tick money value in corresponding currency. See ProcessingMetadata.currency.
	TickValue *float64 `protobuf:"fixed64,3,opt,name=tick_value,json=tickValue" json:"tick_value,omitempty"`
	// Contract size in the number of units (where defined). Unit is defined by contract_size_unit field.
	ContractSizeInUnits *common.Decimal `protobuf:"bytes,4,opt,name=contract_size_in_units,json=contractSizeInUnits" json:"contract_size_in_units,omitempty"`
	// Unit label for the contract size.
	ContractSizeUnit *common.Text `protobuf:"bytes,5,opt,name=contract_size_unit,json=contractSizeUnit" json:"contract_size_unit,omitempty"`
	// Security whose contracts should be used to fill PublishContract.currency_rate_contract_id.
	// Use InstrumentGroupRequest to query contracts by group name.
	CurrencyRateInstrumentGroupName *string `protobuf:"bytes,6,opt,name=currency_rate_instrument_group_name,json=currencyRateInstrumentGroupName" json:"currency_rate_instrument_group_name,omitempty"`
	// Security whose contracts should be used to fill PublishContract.currency_hedge_contractd_id.
	// Use InstrumentGroupRequest to query contracts by group name.
	CurrencyHedgeInstrumentGroupName *string `protobuf:"bytes,7,opt,name=currency_hedge_instrument_group_name,json=currencyHedgeInstrumentGroupName" json:"currency_hedge_instrument_group_name,omitempty"`
}

func (x *ProcessingMetadata) Reset() {
	*x = ProcessingMetadata{}
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessingMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessingMetadata) ProtoMessage() {}

func (x *ProcessingMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessingMetadata.ProtoReflect.Descriptor instead.
func (*ProcessingMetadata) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_metadata_2_proto_rawDescGZIP(), []int{29}
}

func (x *ProcessingMetadata) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *ProcessingMetadata) GetTickSize() float64 {
	if x != nil && x.TickSize != nil {
		return *x.TickSize
	}
	return 0
}

func (x *ProcessingMetadata) GetTickValue() float64 {
	if x != nil && x.TickValue != nil {
		return *x.TickValue
	}
	return 0
}

func (x *ProcessingMetadata) GetContractSizeInUnits() *common.Decimal {
	if x != nil {
		return x.ContractSizeInUnits
	}
	return nil
}

func (x *ProcessingMetadata) GetContractSizeUnit() *common.Text {
	if x != nil {
		return x.ContractSizeUnit
	}
	return nil
}

func (x *ProcessingMetadata) GetCurrencyRateInstrumentGroupName() string {
	if x != nil && x.CurrencyRateInstrumentGroupName != nil {
		return *x.CurrencyRateInstrumentGroupName
	}
	return ""
}

func (x *ProcessingMetadata) GetCurrencyHedgeInstrumentGroupName() string {
	if x != nil && x.CurrencyHedgeInstrumentGroupName != nil {
		return *x.CurrencyHedgeInstrumentGroupName
	}
	return ""
}

// Security metadata.
type SecurityMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Security ID.
	// It is a required field.
	SecurityId *string `protobuf:"bytes,1,opt,name=security_id,json=securityId" json:"security_id,omitempty"`
	// Security name.
	// It is a required field.
	Name *string `protobuf:"bytes,14,opt,name=name" json:"name,omitempty"`
	// Security description.
	Description *string `protobuf:"bytes,15,opt,name=description" json:"description,omitempty"`
	// CFI code (Classification of Financial Instruments, ISO 10962).
	CfiCode *string `protobuf:"bytes,2,opt,name=cfi_code,json=cfiCode" json:"cfi_code,omitempty"`
	// Deprecated and should not be used. Use ProcessingMetadata.currency instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/metadata_2.proto.
	Currency *string `protobuf:"bytes,3,opt,name=currency" json:"currency,omitempty"`
	// Deprecated and should not be used. Use ProcessingMetadata.tick_size instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/metadata_2.proto.
	TickSize *float64 `protobuf:"fixed64,4,opt,name=tick_size,json=tickSize" json:"tick_size,omitempty"`
	// Deprecated and should not be used. Use ProcessingMetadata.tick_value instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/metadata_2.proto.
	TickValue *float64 `protobuf:"fixed64,5,opt,name=tick_value,json=tickValue" json:"tick_value,omitempty"`
	// Deprecated and should not be used.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/metadata_2.proto.
	PeriodType *uint32 `protobuf:"varint,6,opt,name=period_type,json=periodType" json:"period_type,omitempty"`
	// Deprecated and should not be used.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/metadata_2.proto.
	PeriodValue *uint32 `protobuf:"varint,7,opt,name=period_value,json=periodValue" json:"period_value,omitempty"`
	// Deprecated and should not be used. Use ProcessingMetadata.contract_size_in_units instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/metadata_2.proto.
	ContractSizeInUnits *common.Decimal `protobuf:"bytes,8,opt,name=contract_size_in_units,json=contractSizeInUnits" json:"contract_size_in_units,omitempty"`
	// Deprecated and should not be used. Use ProcessingMetadata.contract_size_unit instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/metadata_2.proto.
	ContractSizeUnit *common.Text `protobuf:"bytes,9,opt,name=contract_size_unit,json=contractSizeUnit" json:"contract_size_unit,omitempty"`
	// Optional custom security parameters per associated OTC contributor (if any).
	ContributorParameters []*ContributorParameters `protobuf:"bytes,10,rep,name=contributor_parameters,json=contributorParameters" json:"contributor_parameters,omitempty"`
	// ID of the symbol the security represents (Symbol.id attribute).
	SymbolId *string `protobuf:"bytes,11,opt,name=symbol_id,json=symbolId" json:"symbol_id,omitempty"`
	// If this security represents a list of double-quoted contracts, the field contains identifier
	// to request list of corresponding source instruments (see InstrumentGroupRequest).
	SourceInstrumentGroupName *string `protobuf:"bytes,12,opt,name=source_instrument_group_name,json=sourceInstrumentGroupName" json:"source_instrument_group_name,omitempty"`
	// Metadata used for real-time and trading data processing.
	// There might be different metadata properties for different contracts within the security.
	// Note: This collection is empty when message received as a part of ExchangeSecuritiesReport.
	ProcessingMetadata []*ProcessingMetadata `protobuf:"bytes,13,rep,name=processing_metadata,json=processingMetadata" json:"processing_metadata,omitempty"`
	// Security is deleted (used for updates).
	Deleted *bool `protobuf:"varint,16,opt,name=deleted" json:"deleted,omitempty"`
}

func (x *SecurityMetadata) Reset() {
	*x = SecurityMetadata{}
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecurityMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityMetadata) ProtoMessage() {}

func (x *SecurityMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityMetadata.ProtoReflect.Descriptor instead.
func (*SecurityMetadata) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_metadata_2_proto_rawDescGZIP(), []int{30}
}

func (x *SecurityMetadata) GetSecurityId() string {
	if x != nil && x.SecurityId != nil {
		return *x.SecurityId
	}
	return ""
}

func (x *SecurityMetadata) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SecurityMetadata) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *SecurityMetadata) GetCfiCode() string {
	if x != nil && x.CfiCode != nil {
		return *x.CfiCode
	}
	return ""
}

// Deprecated: Marked as deprecated in protos/WebAPI/metadata_2.proto.
func (x *SecurityMetadata) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

// Deprecated: Marked as deprecated in protos/WebAPI/metadata_2.proto.
func (x *SecurityMetadata) GetTickSize() float64 {
	if x != nil && x.TickSize != nil {
		return *x.TickSize
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/metadata_2.proto.
func (x *SecurityMetadata) GetTickValue() float64 {
	if x != nil && x.TickValue != nil {
		return *x.TickValue
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/metadata_2.proto.
func (x *SecurityMetadata) GetPeriodType() uint32 {
	if x != nil && x.PeriodType != nil {
		return *x.PeriodType
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/metadata_2.proto.
func (x *SecurityMetadata) GetPeriodValue() uint32 {
	if x != nil && x.PeriodValue != nil {
		return *x.PeriodValue
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/metadata_2.proto.
func (x *SecurityMetadata) GetContractSizeInUnits() *common.Decimal {
	if x != nil {
		return x.ContractSizeInUnits
	}
	return nil
}

// Deprecated: Marked as deprecated in protos/WebAPI/metadata_2.proto.
func (x *SecurityMetadata) GetContractSizeUnit() *common.Text {
	if x != nil {
		return x.ContractSizeUnit
	}
	return nil
}

func (x *SecurityMetadata) GetContributorParameters() []*ContributorParameters {
	if x != nil {
		return x.ContributorParameters
	}
	return nil
}

func (x *SecurityMetadata) GetSymbolId() string {
	if x != nil && x.SymbolId != nil {
		return *x.SymbolId
	}
	return ""
}

func (x *SecurityMetadata) GetSourceInstrumentGroupName() string {
	if x != nil && x.SourceInstrumentGroupName != nil {
		return *x.SourceInstrumentGroupName
	}
	return ""
}

func (x *SecurityMetadata) GetProcessingMetadata() []*ProcessingMetadata {
	if x != nil {
		return x.ProcessingMetadata
	}
	return nil
}

func (x *SecurityMetadata) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

// Country metadata.
type CountryMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Country ID.
	// This is a required field.
	CountryId *int32 `protobuf:"zigzag32,1,opt,name=country_id,json=countryId" json:"country_id,omitempty"`
	// Country name.
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Description of the country.
	Description *string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// Abbreviation.
	Abbreviation *string `protobuf:"bytes,4,opt,name=abbreviation" json:"abbreviation,omitempty"`
	// Two-letter country code (ISO 3166-1 alpha 2).
	CountryCode *string `protobuf:"bytes,6,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	// Country is deleted (used for updates).
	Deleted *bool `protobuf:"varint,5,opt,name=deleted" json:"deleted,omitempty"`
}

func (x *CountryMetadata) Reset() {
	*x = CountryMetadata{}
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CountryMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountryMetadata) ProtoMessage() {}

func (x *CountryMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountryMetadata.ProtoReflect.Descriptor instead.
func (*CountryMetadata) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_metadata_2_proto_rawDescGZIP(), []int{31}
}

func (x *CountryMetadata) GetCountryId() int32 {
	if x != nil && x.CountryId != nil {
		return *x.CountryId
	}
	return 0
}

func (x *CountryMetadata) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CountryMetadata) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CountryMetadata) GetAbbreviation() string {
	if x != nil && x.Abbreviation != nil {
		return *x.Abbreviation
	}
	return ""
}

func (x *CountryMetadata) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

func (x *CountryMetadata) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

// Request list of countries with metadata for them.
type CountryListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CountryListRequest) Reset() {
	*x = CountryListRequest{}
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CountryListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountryListRequest) ProtoMessage() {}

func (x *CountryListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountryListRequest.ProtoReflect.Descriptor instead.
func (*CountryListRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_metadata_2_proto_rawDescGZIP(), []int{32}
}

// Report with a list of countries with metadata for them.
type CountryListReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of countries with metadata for them
	Countries []*CountryMetadata `protobuf:"bytes,1,rep,name=countries" json:"countries,omitempty"`
}

func (x *CountryListReport) Reset() {
	*x = CountryListReport{}
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CountryListReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountryListReport) ProtoMessage() {}

func (x *CountryListReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_metadata_2_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountryListReport.ProtoReflect.Descriptor instead.
func (*CountryListReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_metadata_2_proto_rawDescGZIP(), []int{33}
}

func (x *CountryListReport) GetCountries() []*CountryMetadata {
	if x != nil {
		return x.Countries
	}
	return nil
}

var File_protos_WebAPI_metadata_2_proto protoreflect.FileDescriptor

var file_protos_WebAPI_metadata_2_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49, 0x2f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0a, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x1a, 0x24, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49, 0x2f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41, 0x50,
	0x49, 0x2f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x23, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x31,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x92, 0x01, 0x0a, 0x17, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x2a, 0x05, 0x08, 0x64, 0x10, 0xc8, 0x01, 0x22, 0x7d, 0x0a, 0x16,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x49, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x3a, 0x0a, 0x17, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x49, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x74, 0x0a, 0x0f,
	0x54, 0x69, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x01, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x69, 0x63, 0x6b, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x01,
	0x52, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x01, 0x52, 0x0d, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x19, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x68, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x48, 0x65, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49,
	0x64, 0x22, 0x8e, 0x1d, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x12, 0x2e, 0x0a, 0x13, 0x63, 0x71, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63,
	0x71, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x01, 0x52, 0x11, 0x63,
	0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x11, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x14, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x13, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x02,
	0x28, 0x01, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x63, 0x6b,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x02, 0x28, 0x01, 0x52, 0x09, 0x74, 0x69,
	0x63, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x66, 0x69, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x63, 0x66, 0x69, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x6d, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x4d, 0x6f,
	0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x12, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x6f,
	0x74, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x12, 0x52,
	0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x3c, 0x0a, 0x1a, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x13, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x02, 0x28, 0x11, 0x52, 0x0d,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x69, 0x63, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x69, 0x63, 0x12,
	0x27, 0x0a, 0x0f, 0x6d, 0x69, 0x63, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x12, 0x52, 0x0f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x44,
	0x65, 0x6c, 0x61, 0x79, 0x12, 0x27, 0x0a, 0x10, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x64,
	0x61, 0x79, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0d,
	0x65, 0x6e, 0x64, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x3d, 0x0a,
	0x1b, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x18, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x1c,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x1a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a,
	0x0a, 0x13, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x5f, 0x62, 0x79, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x53, 0x69, 0x7a,
	0x65, 0x42, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x10, 0x74, 0x69, 0x63, 0x6b, 0x53, 0x69,
	0x7a, 0x65, 0x73, 0x42, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x72, 0x69, 0x6b, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x11, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69,
	0x6b, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x61, 0x6c, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x1d, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x5a, 0x0a, 0x13, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x12, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x19, 0x73, 0x70, 0x65, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x17, 0x73, 0x70, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x74, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x59, 0x65, 0x61, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x12, 0x52,
	0x0c, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a,
	0x12, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x10, 0x70, 0x72, 0x69, 0x63, 0x65, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x6f, 0x72,
	0x65, 0x69, 0x67, 0x6e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x33, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x17, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x11, 0x3a, 0x01, 0x30, 0x52, 0x15, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x45, 0x78, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x52, 0x12, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x68, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x65,
	0x72, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x64, 0x64, 0x65,
	0x72, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x68, 0x61, 0x73, 0x49, 0x6e, 0x76, 0x65,
	0x72, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x12,
	0x3f, 0x0a, 0x1c, 0x64, 0x6f, 0x6d, 0x5f, 0x6c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18,
	0x2d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x64, 0x6f, 0x6d, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x12, 0x3a, 0x0a, 0x16, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x5f, 0x74,
	0x69, 0x63, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x13, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x4f,
	0x66, 0x66, 0x54, 0x69, 0x63, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x13,
	0x68, 0x61, 0x73, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52,
	0x11, 0x68, 0x61, 0x73, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x5f, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x3d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x61, 0x73, 0x59, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x69, 0x6e, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x69, 0x73, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x52, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x2d, 0x0a, 0x12,
	0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x18, 0x31, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x41, 0x0a, 0x16, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x6e, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71,
	0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x3c,
	0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x5f, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x12,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x12, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x5e, 0x0a, 0x16, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x36, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x32, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x07, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x11, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x18, 0x42, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x74,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x43, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x4f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x12, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x45, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x12, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x5f, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x72, 0x63,
	0x69, 0x73, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x63,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x49,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x1a, 0x69, 0x73, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x73, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x62, 0x61, 0x72, 0x5f, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x4b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x14, 0x62, 0x61, 0x72, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x4d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x68, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x4e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x68, 0x65, 0x64, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x61, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x61, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x50, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x51,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x1b, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x53, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x18, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x54, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x55, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x40, 0x0a, 0x0b, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f,
	0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x18,
	0x0a, 0x14, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x50,
	0x52, 0x45, 0x4d, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x2a, 0x06, 0x08, 0xac, 0x02, 0x10, 0xad, 0x02,
	0x4a, 0x04, 0x08, 0x18, 0x10, 0x19, 0x4a, 0x04, 0x08, 0x19, 0x10, 0x1a, 0x4a, 0x04, 0x08, 0x24,
	0x10, 0x27, 0x22, 0x4e, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f,
	0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x12,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x22, 0x6f, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f,
	0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x52, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x13,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x8c, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x22, 0x51, 0x0a, 0x19, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x34, 0x0a, 0x16, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x14, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x49, 0x64, 0x22, 0x6b, 0x0a, 0x18, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x4f, 0x0a, 0x11, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x75,
	0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x10, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x22, 0xd0, 0x04, 0x0a, 0x16, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x66, 0x69, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x66, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x12, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x69, 0x0a, 0x24, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75,
	0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1f,
	0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x61,
	0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x59, 0x65, 0x61, 0x72, 0x12,
	0x32, 0x0a, 0x15, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x31, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x4a,
	0x04, 0x08, 0x0b, 0x10, 0x11, 0x22, 0x48, 0x0a, 0x16, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22,
	0x5a, 0x0a, 0x15, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x41, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xad, 0x03, 0x0a, 0x13,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x66, 0x69,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x66, 0x69,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x10, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x12, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x59, 0x65, 0x61, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x31, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x32, 0x4a, 0x04, 0x08, 0x0c, 0x10, 0x11, 0x22, 0x4f, 0x0a, 0x1a, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x11, 0x52, 0x12, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x8c, 0x01, 0x0a,
	0x19, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x6f, 0x0a, 0x1f, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x1c, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xaf, 0x01, 0x0a, 0x1c,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x4b, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x6c, 0x0a,
	0x18, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x63, 0x0a, 0x16, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x49, 0x0a, 0x11, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x10, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf0, 0x02, 0x0a, 0x10,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x22, 0x9b, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x49, 0x42, 0x55,
	0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x49, 0x42, 0x55,
	0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x5f, 0x45, 0x51, 0x55, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f,
	0x4e, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f,
	0x54, 0x43, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f,
	0x4e, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x10, 0x03, 0x22, 0x47,
	0x0a, 0x22, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x79, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x73, 0x22, 0x66, 0x0a, 0x21, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x41, 0x0a, 0x0b,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0x77, 0x0a, 0x20, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x22, 0x64, 0x0a, 0x1f, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x41, 0x0a, 0x0b, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x70,
	0x0a, 0x19, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x69, 0x0a, 0x18, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x4d, 0x0a, 0x13,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x12, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x8b, 0x03, 0x0a, 0x12,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x69, 0x63, 0x6b, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x74, 0x69, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x41, 0x0a, 0x16, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x3c, 0x0a,
	0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x5f, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x4c, 0x0a, 0x23, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x52, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x24, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x68, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x48, 0x65, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe6, 0x05, 0x0a, 0x10, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x66, 0x69, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x66, 0x69, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1e, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x1f, 0x0a, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x21, 0x0a, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0c, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x45, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x69, 0x7a, 0x65,
	0x49, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x31, 0x2e, 0x54,
	0x65, 0x78, 0x74, 0x42, 0x02, 0x18, 0x01, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x53, 0x69, 0x7a, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x5e, 0x0a, 0x16, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x32, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x32, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x22, 0xc7, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x61,
	0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x14, 0x0a, 0x12,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x4e, 0x0a, 0x11, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x2a, 0xb4, 0x01, 0x0a, 0x14, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x23, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x49, 0x4e, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x01, 0x12, 0x38, 0x0a, 0x34, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c,
	0x4f, 0x4e, 0x47, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x49,
	0x4d, 0x50, 0x4c, 0x49, 0x45, 0x44, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x02, 0x12, 0x39,
	0x0a, 0x35, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b,
	0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x5f, 0x53, 0x48,
	0x4f, 0x52, 0x54, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49,
	0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x03, 0x2a, 0x76, 0x0a, 0x10, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a,
	0x1c, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x00, 0x12,
	0x1e, 0x0a, 0x1a, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x20, 0x0a, 0x1c, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x52, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x02, 0x2a, 0xe0, 0x02, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x15, 0x0a, 0x11, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x45, 0x52, 0x49, 0x4f,
	0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x54, 0x45, 0x52, 0x10, 0x01,
	0x12, 0x1b, 0x0a, 0x17, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x45, 0x4d, 0x49, 0x5f, 0x41, 0x4e, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x14, 0x0a,
	0x10, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x59, 0x45, 0x41,
	0x52, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x41, 0x59, 0x5f, 0x4f, 0x46, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x10, 0x04,
	0x12, 0x1c, 0x0a, 0x18, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x41, 0x59, 0x5f, 0x4f, 0x46, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x05, 0x12, 0x1b,
	0x0a, 0x17, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41,
	0x59, 0x5f, 0x4f, 0x46, 0x5f, 0x59, 0x45, 0x41, 0x52, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x50,
	0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x5f,
	0x4f, 0x46, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x45,
	0x52, 0x49, 0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x5f, 0x4f,
	0x46, 0x5f, 0x59, 0x45, 0x41, 0x52, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x45, 0x52, 0x49,
	0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x09,
	0x12, 0x16, 0x0a, 0x12, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x45, 0x52, 0x49,
	0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x10, 0x0b, 0x12, 0x14,
	0x0a, 0x10, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41,
	0x54, 0x45, 0x10, 0x0c, 0x2a, 0x7c, 0x0a, 0x11, 0x43, 0x51, 0x47, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x51, 0x47,
	0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x51, 0x47,
	0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x22,
	0x0a, 0x1e, 0x43, 0x51, 0x47, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x55, 0x54, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x03, 0x2a, 0x4e, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x43, 0x41, 0x53, 0x48,
	0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41, 0x4c,
	0x10, 0x02, 0x2a, 0x49, 0x0a, 0x0d, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x58, 0x45, 0x52, 0x43, 0x49, 0x53, 0x45, 0x5f,
	0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x45, 0x55, 0x52, 0x4f, 0x50, 0x45, 0x41, 0x4e, 0x10, 0x01,
	0x12, 0x1b, 0x0a, 0x17, 0x45, 0x58, 0x45, 0x52, 0x43, 0x49, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x59,
	0x4c, 0x45, 0x5f, 0x41, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x41, 0x4e, 0x10, 0x02, 0x2a, 0x6b, 0x0a,
	0x11, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x49, 0x43, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f,
	0x4e, 0x56, 0x45, 0x4e, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x01,
	0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x49, 0x43, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x56,
	0x45, 0x4e, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x53, 0x53, 0x10, 0x02, 0x12, 0x1a,
	0x0a, 0x16, 0x50, 0x52, 0x49, 0x43, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x4e,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x45, 0x54, 0x10, 0x03, 0x2a, 0x68, 0x0a, 0x0b, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4c, 0x4f,
	0x53, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x51,
	0x55, 0x4f, 0x54, 0x45, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43, 0x4c, 0x4f,
	0x53, 0x45, 0x10, 0x03, 0x2a, 0x69, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x43, 0x4c,
	0x4f, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x53, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x43, 0x4c, 0x4f, 0x53,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x02, 0x2a,
	0x42, 0x0a, 0x13, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x27, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47,
	0x59, 0x10, 0x01, 0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f,
	0x57, 0x65, 0x62, 0x41, 0x50, 0x49,
}

var (
	file_protos_WebAPI_metadata_2_proto_rawDescOnce sync.Once
	file_protos_WebAPI_metadata_2_proto_rawDescData = file_protos_WebAPI_metadata_2_proto_rawDesc
)

func file_protos_WebAPI_metadata_2_proto_rawDescGZIP() []byte {
	file_protos_WebAPI_metadata_2_proto_rawDescOnce.Do(func() {
		file_protos_WebAPI_metadata_2_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_WebAPI_metadata_2_proto_rawDescData)
	})
	return file_protos_WebAPI_metadata_2_proto_rawDescData
}

var file_protos_WebAPI_metadata_2_proto_enumTypes = make([]protoimpl.EnumInfo, 12)
var file_protos_WebAPI_metadata_2_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_protos_WebAPI_metadata_2_proto_goTypes = []any{
	(PositionTrackingType)(0),                  // 0: metadata_2.PositionTrackingType
	(PriceDisplayMode)(0),                      // 1: metadata_2.PriceDisplayMode
	(PeriodType)(0),                            // 2: metadata_2.PeriodType
	(CQGInstrumentType)(0),                     // 3: metadata_2.CQGInstrumentType
	(SettlementMethod)(0),                      // 4: metadata_2.SettlementMethod
	(ExerciseStyle)(0),                         // 5: metadata_2.ExerciseStyle
	(PricingConvention)(0),                     // 6: metadata_2.PricingConvention
	(CloseSource)(0),                           // 7: metadata_2.CloseSource
	(OpenCloseType)(0),                         // 8: metadata_2.OpenCloseType
	(InstrumentGroupType)(0),                   // 9: metadata_2.InstrumentGroupType
	(ContractMetadata_MarginStyle)(0),          // 10: metadata_2.ContractMetadata.MarginStyle
	(ExchangeMetadata_ContributorType)(0),      // 11: metadata_2.ExchangeMetadata.ContributorType
	(*SymbolResolutionRequest)(nil),            // 12: metadata_2.SymbolResolutionRequest
	(*SymbolResolutionReport)(nil),             // 13: metadata_2.SymbolResolutionReport
	(*ContractMetadataRequest)(nil),            // 14: metadata_2.ContractMetadataRequest
	(*ContractMetadataReport)(nil),             // 15: metadata_2.ContractMetadataReport
	(*TickSizeByPrice)(nil),                    // 16: metadata_2.TickSizeByPrice
	(*ConversionMetadata)(nil),                 // 17: metadata_2.ConversionMetadata
	(*ContractMetadata)(nil),                   // 18: metadata_2.ContractMetadata
	(*ContributorMetadataRequest)(nil),         // 19: metadata_2.ContributorMetadataRequest
	(*ContributorMetadataReport)(nil),          // 20: metadata_2.ContributorMetadataReport
	(*ContributorMetadata)(nil),                // 21: metadata_2.ContributorMetadata
	(*OptionMaturityListRequest)(nil),          // 22: metadata_2.OptionMaturityListRequest
	(*OptionMaturityListReport)(nil),           // 23: metadata_2.OptionMaturityListReport
	(*OptionMaturityMetadata)(nil),             // 24: metadata_2.OptionMaturityMetadata
	(*InstrumentGroupRequest)(nil),             // 25: metadata_2.InstrumentGroupRequest
	(*InstrumentGroupReport)(nil),              // 26: metadata_2.InstrumentGroupReport
	(*InstrumentGroupItem)(nil),                // 27: metadata_2.InstrumentGroupItem
	(*MarketStateMetadataRequest)(nil),         // 28: metadata_2.MarketStateMetadataRequest
	(*MarketStateMetadataReport)(nil),          // 29: metadata_2.MarketStateMetadataReport
	(*MarketStateAttributeMetadata)(nil),       // 30: metadata_2.MarketStateAttributeMetadata
	(*MarketStateValueMetadata)(nil),           // 31: metadata_2.MarketStateValueMetadata
	(*ExchangeMetadataRequest)(nil),            // 32: metadata_2.ExchangeMetadataRequest
	(*ExchangeMetadataReport)(nil),             // 33: metadata_2.ExchangeMetadataReport
	(*ExchangeMetadata)(nil),                   // 34: metadata_2.ExchangeMetadata
	(*InstrumentGroupBySecuritiesRequest)(nil), // 35: metadata_2.InstrumentGroupBySecuritiesRequest
	(*InstrumentGroupBySecuritiesReport)(nil),  // 36: metadata_2.InstrumentGroupBySecuritiesReport
	(*InstrumentGroupByExchangeRequest)(nil),   // 37: metadata_2.InstrumentGroupByExchangeRequest
	(*InstrumentGroupByExchangeReport)(nil),    // 38: metadata_2.InstrumentGroupByExchangeReport
	(*ExchangeSecuritiesRequest)(nil),          // 39: metadata_2.ExchangeSecuritiesRequest
	(*ExchangeSecuritiesReport)(nil),           // 40: metadata_2.ExchangeSecuritiesReport
	(*ProcessingMetadata)(nil),                 // 41: metadata_2.ProcessingMetadata
	(*SecurityMetadata)(nil),                   // 42: metadata_2.SecurityMetadata
	(*CountryMetadata)(nil),                    // 43: metadata_2.CountryMetadata
	(*CountryListRequest)(nil),                 // 44: metadata_2.CountryListRequest
	(*CountryListReport)(nil),                  // 45: metadata_2.CountryListReport
	(*StrategyDefinition)(nil),                 // 46: strategy_definition_2.StrategyDefinition
	(*common.Decimal)(nil),                     // 47: cqg.Decimal
	(*common.Text)(nil),                        // 48: shared_1.Text
	(*ContributorParameters)(nil),              // 49: metadata_admin_2.ContributorParameters
	(*timestamppb.Timestamp)(nil),              // 50: google.protobuf.Timestamp
}
var file_protos_WebAPI_metadata_2_proto_depIdxs = []int32{
	18, // 0: metadata_2.SymbolResolutionReport.contract_metadata:type_name -> metadata_2.ContractMetadata
	18, // 1: metadata_2.ContractMetadataReport.contract_metadata:type_name -> metadata_2.ContractMetadata
	16, // 2: metadata_2.ContractMetadata.tick_sizes_by_price:type_name -> metadata_2.TickSizeByPrice
	46, // 3: metadata_2.ContractMetadata.strategy_definition:type_name -> strategy_definition_2.StrategyDefinition
	1,  // 4: metadata_2.ContractMetadata.price_display_mode:type_name -> metadata_2.PriceDisplayMode
	47, // 5: metadata_2.ContractMetadata.volume_scale:type_name -> cqg.Decimal
	47, // 6: metadata_2.ContractMetadata.trade_size_increment:type_name -> cqg.Decimal
	47, // 7: metadata_2.ContractMetadata.contract_size_in_units:type_name -> cqg.Decimal
	48, // 8: metadata_2.ContractMetadata.contract_size_unit:type_name -> shared_1.Text
	49, // 9: metadata_2.ContractMetadata.contributor_parameters:type_name -> metadata_admin_2.ContributorParameters
	17, // 10: metadata_2.ContractMetadata.conversion_metadata:type_name -> metadata_2.ConversionMetadata
	21, // 11: metadata_2.ContributorMetadataReport.contributor_metadata:type_name -> metadata_2.ContributorMetadata
	24, // 12: metadata_2.OptionMaturityListReport.option_maturities:type_name -> metadata_2.OptionMaturityMetadata
	50, // 13: metadata_2.OptionMaturityMetadata.last_trading_date_time_utc_timestamp:type_name -> google.protobuf.Timestamp
	27, // 14: metadata_2.InstrumentGroupReport.instruments:type_name -> metadata_2.InstrumentGroupItem
	18, // 15: metadata_2.InstrumentGroupItem.contract_metadata:type_name -> metadata_2.ContractMetadata
	30, // 16: metadata_2.MarketStateMetadataReport.market_state_attribute_metadata:type_name -> metadata_2.MarketStateAttributeMetadata
	31, // 17: metadata_2.MarketStateAttributeMetadata.value_metadata:type_name -> metadata_2.MarketStateValueMetadata
	34, // 18: metadata_2.ExchangeMetadataReport.exchange_metadata:type_name -> metadata_2.ExchangeMetadata
	27, // 19: metadata_2.InstrumentGroupBySecuritiesReport.instruments:type_name -> metadata_2.InstrumentGroupItem
	27, // 20: metadata_2.InstrumentGroupByExchangeReport.instruments:type_name -> metadata_2.InstrumentGroupItem
	42, // 21: metadata_2.ExchangeSecuritiesReport.exchange_securities:type_name -> metadata_2.SecurityMetadata
	47, // 22: metadata_2.ProcessingMetadata.contract_size_in_units:type_name -> cqg.Decimal
	48, // 23: metadata_2.ProcessingMetadata.contract_size_unit:type_name -> shared_1.Text
	47, // 24: metadata_2.SecurityMetadata.contract_size_in_units:type_name -> cqg.Decimal
	48, // 25: metadata_2.SecurityMetadata.contract_size_unit:type_name -> shared_1.Text
	49, // 26: metadata_2.SecurityMetadata.contributor_parameters:type_name -> metadata_admin_2.ContributorParameters
	41, // 27: metadata_2.SecurityMetadata.processing_metadata:type_name -> metadata_2.ProcessingMetadata
	43, // 28: metadata_2.CountryListReport.countries:type_name -> metadata_2.CountryMetadata
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_protos_WebAPI_metadata_2_proto_init() }
func file_protos_WebAPI_metadata_2_proto_init() {
	if File_protos_WebAPI_metadata_2_proto != nil {
		return
	}
	file_protos_WebAPI_metadata_admin_2_proto_init()
	file_protos_WebAPI_strategy_definition_2_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_WebAPI_metadata_2_proto_rawDesc,
			NumEnums:      12,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_WebAPI_metadata_2_proto_goTypes,
		DependencyIndexes: file_protos_WebAPI_metadata_2_proto_depIdxs,
		EnumInfos:         file_protos_WebAPI_metadata_2_proto_enumTypes,
		MessageInfos:      file_protos_WebAPI_metadata_2_proto_msgTypes,
	}.Build()
	File_protos_WebAPI_metadata_2_proto = out.File
	file_protos_WebAPI_metadata_2_proto_rawDesc = nil
	file_protos_WebAPI_metadata_2_proto_goTypes = nil
	file_protos_WebAPI_metadata_2_proto_depIdxs = nil
}
