// Strategy definition messages
// Strategy definition requests/reports left in strategy_2.proto to break cyclic imports

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: protos/WebAPI/strategy_definition_2.proto

package WebAPI

import (
	common "cqg-api/protos/WebAPI/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Using a fractional trade ratio may result in fractional lots. If so, the number of lots has to be rounded.
// Rounding applies only to complex strategies with fractional quantity ratios.
type StrategyDefinition_RoundLegMode int32

const (
	// always round down, e.g. 1.1 -> 1 and -2.1 -> -2
	StrategyDefinition_ROUND_LEG_MODE_DOWN StrategyDefinition_RoundLegMode = 1
	// always round up, e.g. 1.1 -> 2 and -2.1 -> -3
	StrategyDefinition_ROUND_LEG_MODE_UP StrategyDefinition_RoundLegMode = 2
	// round up when fractional part is 5 or greater;
	// round down when fractional part is less than 5, e.g. 1.1 -> 1 and 1.6 -> 2
	StrategyDefinition_ROUND_LEG_MODE_MATH StrategyDefinition_RoundLegMode = 3
)

// Enum value maps for StrategyDefinition_RoundLegMode.
var (
	StrategyDefinition_RoundLegMode_name = map[int32]string{
		1: "ROUND_LEG_MODE_DOWN",
		2: "ROUND_LEG_MODE_UP",
		3: "ROUND_LEG_MODE_MATH",
	}
	StrategyDefinition_RoundLegMode_value = map[string]int32{
		"ROUND_LEG_MODE_DOWN": 1,
		"ROUND_LEG_MODE_UP":   2,
		"ROUND_LEG_MODE_MATH": 3,
	}
)

func (x StrategyDefinition_RoundLegMode) Enum() *StrategyDefinition_RoundLegMode {
	p := new(StrategyDefinition_RoundLegMode)
	*p = x
	return p
}

func (x StrategyDefinition_RoundLegMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StrategyDefinition_RoundLegMode) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_strategy_definition_2_proto_enumTypes[0].Descriptor()
}

func (StrategyDefinition_RoundLegMode) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_strategy_definition_2_proto_enumTypes[0]
}

func (x StrategyDefinition_RoundLegMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *StrategyDefinition_RoundLegMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = StrategyDefinition_RoundLegMode(num)
	return nil
}

// Deprecated: Use StrategyDefinition_RoundLegMode.Descriptor instead.
func (StrategyDefinition_RoundLegMode) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_strategy_definition_2_proto_rawDescGZIP(), []int{0, 0}
}

// Operation on a node of the synthetic strategy.
// Associating an operation with a node allows using different operations, e.g. multiplication and subtraction,
// without introducing intermediate StrategyDefinition entities.
// MUL and DIV cannot be mixed with SUM within the same StrategyDefinition.node_definition array.
// i.e. node1 / node2 * node3 is allowed, but node1 / node2 + node3 is not.
type StrategyNodeDefinition_NodeOperation int32

const (
	// Add the quantity and the price.
	StrategyNodeDefinition_NODE_OPERATION_SUM StrategyNodeDefinition_NodeOperation = 1
	// Add the quantity but multiply the price.
	StrategyNodeDefinition_NODE_OPERATION_MUL StrategyNodeDefinition_NodeOperation = 2
	// Subtract the quantity but divide the price.
	StrategyNodeDefinition_NODE_OPERATION_DIV StrategyNodeDefinition_NodeOperation = 3
)

// Enum value maps for StrategyNodeDefinition_NodeOperation.
var (
	StrategyNodeDefinition_NodeOperation_name = map[int32]string{
		1: "NODE_OPERATION_SUM",
		2: "NODE_OPERATION_MUL",
		3: "NODE_OPERATION_DIV",
	}
	StrategyNodeDefinition_NodeOperation_value = map[string]int32{
		"NODE_OPERATION_SUM": 1,
		"NODE_OPERATION_MUL": 2,
		"NODE_OPERATION_DIV": 3,
	}
)

func (x StrategyNodeDefinition_NodeOperation) Enum() *StrategyNodeDefinition_NodeOperation {
	p := new(StrategyNodeDefinition_NodeOperation)
	*p = x
	return p
}

func (x StrategyNodeDefinition_NodeOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StrategyNodeDefinition_NodeOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_strategy_definition_2_proto_enumTypes[1].Descriptor()
}

func (StrategyNodeDefinition_NodeOperation) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_strategy_definition_2_proto_enumTypes[1]
}

func (x StrategyNodeDefinition_NodeOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *StrategyNodeDefinition_NodeOperation) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = StrategyNodeDefinition_NodeOperation(num)
	return nil
}

// Deprecated: Use StrategyNodeDefinition_NodeOperation.Descriptor instead.
func (StrategyNodeDefinition_NodeOperation) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_strategy_definition_2_proto_rawDescGZIP(), []int{4, 0}
}

// Message describing a synthetic, a user defined strategy or a native spread.
// It is a tree where terminal nodes (legs) are outright contracts, non-terminal ones are nested strategies.
// Nodes are defined from the BUY perspective.
// Maximum strategy nesting level:
// - Synthetic strategies: 2 (i.e. strategy of strategies of legs);
// - Exchange strategies: depends only on exchange.
// Maximum number of legs in the whole strategy:
// - Synthetic strategies: 40;
// - Exchange strategies: depends only on exchange.
// Strategy trading operates with the node path
// in the tree of the strategy from the root to a leg or nested strategy node.
// The path is a string consisting of either StrategyDefinition.node_number or LegDefinition.node_number
// at every level of the tree preceeded and separated by slash.
// E.g.
// "/" means the root strategy;
// "/1" means the leg or nested strategy with node_number 1 of the root strategy;
// "/1/2" means the leg or nested strategy with node_number 2 of a strategy S1,
//
//	S1 is the strategy with node_number 1 of the root strategy,
//
// "/1/2/2" means the leg with node_number 2 of a strategy S1,
//
//	S1 is the strategy with node_number 2 of another strategy S2,
//	S2 is the strategy with node_number 1 of the root strategy.
type StrategyDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The strategy is of the aggregation type.
	Aggregation *bool `protobuf:"varint,1,opt,name=aggregation" json:"aggregation,omitempty"`
	// If specified - defines exchange strategy, otherwise - synthetic strategy.
	ExchangeStrategy *ExchangeStrategy `protobuf:"bytes,2,opt,name=exchange_strategy,json=exchangeStrategy" json:"exchange_strategy,omitempty"`
	// The strategy is a native spread.
	// Note: this field can only be set by server and cannot be used in StrategyDefinitionRequest.
	NativeSpread *bool `protobuf:"varint,9,opt,name=native_spread,json=nativeSpread" json:"native_spread,omitempty"`
	// Strategy tick size (correct price format). The tick size of the 1st leg is default.
	TickSize *float64 `protobuf:"fixed64,3,opt,name=tick_size,json=tickSize" json:"tick_size,omitempty"`
	// Additive offset for computation of strategy price.
	// 0 is default.
	PriceOffset *float64 `protobuf:"fixed64,4,opt,name=price_offset,json=priceOffset" json:"price_offset,omitempty"`
	// Controls how to handle fractional quantities when calculating leg quantities for an order on this strategy,
	// One of RoundLegMode enums, ROUND_LEG_MODE_DOWN is default. Ignored for aggregations and exchange strategies.
	RoundLegMode *uint32 `protobuf:"varint,5,opt,name=round_leg_mode,json=roundLegMode" json:"round_leg_mode,omitempty"`
	// Note: use node_number instead.
	// A client value is ignored, a unique server one is populated.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/strategy_definition_2.proto.
	NodeIndex *uint32 `protobuf:"varint,6,opt,name=node_index,json=nodeIndex" json:"node_index,omitempty"`
	// Node number populated by server, unique between legs and nested strategies of the parent strategy,
	// part of node_path field in order actions.
	// Not set for the root strategy.
	NodeNumber *int32 `protobuf:"zigzag32,10,opt,name=node_number,json=nodeNumber" json:"node_number,omitempty"`
	// Legs or nested strategies.
	NodeDefinitions []*StrategyNodeDefinition `protobuf:"bytes,7,rep,name=node_definitions,json=nodeDefinitions" json:"node_definitions,omitempty"`
	// User text associated with the strategy. Allowed to be specified only for non-exchange strategies.
	UserDescription *string `protobuf:"bytes,8,opt,name=user_description,json=userDescription" json:"user_description,omitempty"`
}

func (x *StrategyDefinition) Reset() {
	*x = StrategyDefinition{}
	mi := &file_protos_WebAPI_strategy_definition_2_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StrategyDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrategyDefinition) ProtoMessage() {}

func (x *StrategyDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_strategy_definition_2_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrategyDefinition.ProtoReflect.Descriptor instead.
func (*StrategyDefinition) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_strategy_definition_2_proto_rawDescGZIP(), []int{0}
}

func (x *StrategyDefinition) GetAggregation() bool {
	if x != nil && x.Aggregation != nil {
		return *x.Aggregation
	}
	return false
}

func (x *StrategyDefinition) GetExchangeStrategy() *ExchangeStrategy {
	if x != nil {
		return x.ExchangeStrategy
	}
	return nil
}

func (x *StrategyDefinition) GetNativeSpread() bool {
	if x != nil && x.NativeSpread != nil {
		return *x.NativeSpread
	}
	return false
}

func (x *StrategyDefinition) GetTickSize() float64 {
	if x != nil && x.TickSize != nil {
		return *x.TickSize
	}
	return 0
}

func (x *StrategyDefinition) GetPriceOffset() float64 {
	if x != nil && x.PriceOffset != nil {
		return *x.PriceOffset
	}
	return 0
}

func (x *StrategyDefinition) GetRoundLegMode() uint32 {
	if x != nil && x.RoundLegMode != nil {
		return *x.RoundLegMode
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/strategy_definition_2.proto.
func (x *StrategyDefinition) GetNodeIndex() uint32 {
	if x != nil && x.NodeIndex != nil {
		return *x.NodeIndex
	}
	return 0
}

func (x *StrategyDefinition) GetNodeNumber() int32 {
	if x != nil && x.NodeNumber != nil {
		return *x.NodeNumber
	}
	return 0
}

func (x *StrategyDefinition) GetNodeDefinitions() []*StrategyNodeDefinition {
	if x != nil {
		return x.NodeDefinitions
	}
	return nil
}

func (x *StrategyDefinition) GetUserDescription() string {
	if x != nil && x.UserDescription != nil {
		return *x.UserDescription
	}
	return ""
}

// Defines a strategy created by an individual and registered by an exchange for general open market trading.
type ExchangeStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value of this field might be chosen from the predefined list to specify requested CQG exchange strategy type.
	// List of supported types can be found in document ExchangeStrategyRequestedCQGTypes.adoc.
	// "custom" if omitted.
	// This field is never provided in response.
	// Strategy can be created on exchange even if requested type is different than actual type recognized by exchange.
	RequestedCqgType *string `protobuf:"bytes,1,opt,name=requested_cqg_type,json=requestedCqgType" json:"requested_cqg_type,omitempty"`
}

func (x *ExchangeStrategy) Reset() {
	*x = ExchangeStrategy{}
	mi := &file_protos_WebAPI_strategy_definition_2_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExchangeStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeStrategy) ProtoMessage() {}

func (x *ExchangeStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_strategy_definition_2_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeStrategy.ProtoReflect.Descriptor instead.
func (*ExchangeStrategy) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_strategy_definition_2_proto_rawDescGZIP(), []int{1}
}

func (x *ExchangeStrategy) GetRequestedCqgType() string {
	if x != nil && x.RequestedCqgType != nil {
		return *x.RequestedCqgType
	}
	return ""
}

// Defines a leg (resolved contract) of a strategy.
type LegDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the leg contract.
	// Note: in case of receiving unknown id the contract metadata can be obtained via ContractMetadataRequest.
	ContractId *uint32 `protobuf:"varint,1,req,name=contract_id,json=contractId" json:"contract_id,omitempty"`
	// Note: use node_number instead.
	// A client value is ignored, a unique server one is populated.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/strategy_definition_2.proto.
	NodeIndex *uint32 `protobuf:"varint,2,opt,name=node_index,json=nodeIndex" json:"node_index,omitempty"`
	// Node number populated by server, unique between legs and nested strategies of the parent strategy,
	// part of node_path field in order actions.
	NodeNumber *int32 `protobuf:"zigzag32,9,opt,name=node_number,json=nodeNumber" json:"node_number,omitempty"`
	// Note: use qty_ratio field instead.
	// This field has precision 1e-12 and can have maximum value of 9223372.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/strategy_definition_2.proto.
	DoubleQtyRatio *float64 `protobuf:"fixed64,3,opt,name=double_qty_ratio,json=doubleQtyRatio" json:"double_qty_ratio,omitempty"`
	// Leg quantity ratio, signed decimal, number of leg contracts to buy(positive) or sell(negative).
	// Must be integer for an aggregation.
	// Default is 1.
	QtyRatio *common.Decimal `protobuf:"bytes,8,opt,name=qty_ratio,json=qtyRatio" json:"qty_ratio,omitempty"`
	// Leg price calculation ratio, signed decimal, coefficient in strategy price formula before the leg contract.
	// Same as qty_ratio if omitted.
	// This field has precision 1e-12 and can have maximum value of 9223372.
	// Applicable for legs of an aggregation or a multiplicative strategy.
	PriceRatio *float64 `protobuf:"fixed64,4,opt,name=price_ratio,json=priceRatio" json:"price_ratio,omitempty"`
	// Price offset for this leg (correct price format), only specified for legs of an aggregation or
	// a multiplicative strategy.
	// 0 is default.
	PriceOffset *float64 `protobuf:"fixed64,5,opt,name=price_offset,json=priceOffset" json:"price_offset,omitempty"`
	// Price of covering future or equity contract. For exchange strategy only.
	CoveringPrice *float64 `protobuf:"fixed64,6,opt,name=covering_price,json=coveringPrice" json:"covering_price,omitempty"`
	// Used to calculate the quantity of equities or futures covering the option or options strategy.
	// For exchange strategy only.
	// Note: only qty_ratio sign means side of the leg (buy if positive or sell if negative).
	OptionDelta *common.Decimal `protobuf:"bytes,7,opt,name=option_delta,json=optionDelta" json:"option_delta,omitempty"`
}

func (x *LegDefinition) Reset() {
	*x = LegDefinition{}
	mi := &file_protos_WebAPI_strategy_definition_2_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LegDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegDefinition) ProtoMessage() {}

func (x *LegDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_strategy_definition_2_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegDefinition.ProtoReflect.Descriptor instead.
func (*LegDefinition) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_strategy_definition_2_proto_rawDescGZIP(), []int{2}
}

func (x *LegDefinition) GetContractId() uint32 {
	if x != nil && x.ContractId != nil {
		return *x.ContractId
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/strategy_definition_2.proto.
func (x *LegDefinition) GetNodeIndex() uint32 {
	if x != nil && x.NodeIndex != nil {
		return *x.NodeIndex
	}
	return 0
}

func (x *LegDefinition) GetNodeNumber() int32 {
	if x != nil && x.NodeNumber != nil {
		return *x.NodeNumber
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/strategy_definition_2.proto.
func (x *LegDefinition) GetDoubleQtyRatio() float64 {
	if x != nil && x.DoubleQtyRatio != nil {
		return *x.DoubleQtyRatio
	}
	return 0
}

func (x *LegDefinition) GetQtyRatio() *common.Decimal {
	if x != nil {
		return x.QtyRatio
	}
	return nil
}

func (x *LegDefinition) GetPriceRatio() float64 {
	if x != nil && x.PriceRatio != nil {
		return *x.PriceRatio
	}
	return 0
}

func (x *LegDefinition) GetPriceOffset() float64 {
	if x != nil && x.PriceOffset != nil {
		return *x.PriceOffset
	}
	return 0
}

func (x *LegDefinition) GetCoveringPrice() float64 {
	if x != nil && x.CoveringPrice != nil {
		return *x.CoveringPrice
	}
	return 0
}

func (x *LegDefinition) GetOptionDelta() *common.Decimal {
	if x != nil {
		return x.OptionDelta
	}
	return nil
}

// Defines a strategy nested inside a parent strategy.
type NestedStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Nested strategy definition.
	Definition *StrategyDefinition `protobuf:"bytes,1,req,name=definition" json:"definition,omitempty"`
	// Id of the nested strategy, if it already exists on exchange.
	// Note: can be provided by server in case of receiving contract metadata for multi-level strategy.
	// Note: in case of receiving unknown id the contract metadata can be obtained via ContractMetadataRequest.
	ContractId *uint32 `protobuf:"varint,4,opt,name=contract_id,json=contractId" json:"contract_id,omitempty"`
	// Note: use qty_ratio field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/strategy_definition_2.proto.
	DoubleQtyRatio *float64 `protobuf:"fixed64,2,opt,name=double_qty_ratio,json=doubleQtyRatio" json:"double_qty_ratio,omitempty"`
	// Quantity ratio, signed decimal, number of leg contracts to buy(positive) or sell(negative).
	// Default is 1.
	QtyRatio *common.Decimal `protobuf:"bytes,5,opt,name=qty_ratio,json=qtyRatio" json:"qty_ratio,omitempty"`
	// Leg price calculation ratio, signed decimal, coefficient in strategy price formula.
	// Same as qty_ratio if omitted.
	// Applicable for legs of an aggregation or a multiplicative strategy.
	PriceRatio *float64 `protobuf:"fixed64,3,opt,name=price_ratio,json=priceRatio" json:"price_ratio,omitempty"`
}

func (x *NestedStrategy) Reset() {
	*x = NestedStrategy{}
	mi := &file_protos_WebAPI_strategy_definition_2_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NestedStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedStrategy) ProtoMessage() {}

func (x *NestedStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_strategy_definition_2_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedStrategy.ProtoReflect.Descriptor instead.
func (*NestedStrategy) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_strategy_definition_2_proto_rawDescGZIP(), []int{3}
}

func (x *NestedStrategy) GetDefinition() *StrategyDefinition {
	if x != nil {
		return x.Definition
	}
	return nil
}

func (x *NestedStrategy) GetContractId() uint32 {
	if x != nil && x.ContractId != nil {
		return *x.ContractId
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/strategy_definition_2.proto.
func (x *NestedStrategy) GetDoubleQtyRatio() float64 {
	if x != nil && x.DoubleQtyRatio != nil {
		return *x.DoubleQtyRatio
	}
	return 0
}

func (x *NestedStrategy) GetQtyRatio() *common.Decimal {
	if x != nil {
		return x.QtyRatio
	}
	return nil
}

func (x *NestedStrategy) GetPriceRatio() float64 {
	if x != nil && x.PriceRatio != nil {
		return *x.PriceRatio
	}
	return 0
}

// Child node definition within the parent strategy tree. Can be either a resolved contract (leg) or a nested strategy.
type StrategyNodeDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specified node operation, one of NodeOperation enums, the default is SUM.
	NodeOperation *uint32 `protobuf:"varint,2,opt,name=node_operation,json=nodeOperation" json:"node_operation,omitempty"`
	// Leg definition, if the node is a resolved contract.
	Leg *LegDefinition `protobuf:"bytes,3,opt,name=leg" json:"leg,omitempty"`
	// Nested strategy, mutually exclusive with 'leg' attribute.
	NestedStrategy *NestedStrategy `protobuf:"bytes,4,opt,name=nested_strategy,json=nestedStrategy" json:"nested_strategy,omitempty"`
}

func (x *StrategyNodeDefinition) Reset() {
	*x = StrategyNodeDefinition{}
	mi := &file_protos_WebAPI_strategy_definition_2_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StrategyNodeDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrategyNodeDefinition) ProtoMessage() {}

func (x *StrategyNodeDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_strategy_definition_2_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrategyNodeDefinition.ProtoReflect.Descriptor instead.
func (*StrategyNodeDefinition) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_strategy_definition_2_proto_rawDescGZIP(), []int{4}
}

func (x *StrategyNodeDefinition) GetNodeOperation() uint32 {
	if x != nil && x.NodeOperation != nil {
		return *x.NodeOperation
	}
	return 0
}

func (x *StrategyNodeDefinition) GetLeg() *LegDefinition {
	if x != nil {
		return x.Leg
	}
	return nil
}

func (x *StrategyNodeDefinition) GetNestedStrategy() *NestedStrategy {
	if x != nil {
		return x.NestedStrategy
	}
	return nil
}

// Algo strategy definition.
type AlgoStrategyDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Algo strategy abbreviation.
	Abbreviation *string `protobuf:"bytes,1,opt,name=abbreviation" json:"abbreviation,omitempty"`
	// Algo strategy definition.
	// Contains FIXatdl document that describes the list of parameters, their types and some UI specifics.
	// Non-standard extensions to FIXatdl may be used.
	// Ignore algo strategy if definition cannot be completely parsed by client.
	Definition *string `protobuf:"bytes,2,opt,name=definition" json:"definition,omitempty"`
}

func (x *AlgoStrategyDefinition) Reset() {
	*x = AlgoStrategyDefinition{}
	mi := &file_protos_WebAPI_strategy_definition_2_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlgoStrategyDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlgoStrategyDefinition) ProtoMessage() {}

func (x *AlgoStrategyDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_strategy_definition_2_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlgoStrategyDefinition.ProtoReflect.Descriptor instead.
func (*AlgoStrategyDefinition) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_strategy_definition_2_proto_rawDescGZIP(), []int{5}
}

func (x *AlgoStrategyDefinition) GetAbbreviation() string {
	if x != nil && x.Abbreviation != nil {
		return *x.Abbreviation
	}
	return ""
}

func (x *AlgoStrategyDefinition) GetDefinition() string {
	if x != nil && x.Definition != nil {
		return *x.Definition
	}
	return ""
}

var File_protos_WebAPI_strategy_definition_2_proto protoreflect.FileDescriptor

var file_protos_WebAPI_strategy_definition_2_proto_rawDesc = []byte{
	0x0a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49, 0x2f,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x32, 0x1a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41, 0x50,
	0x49, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb9, 0x04, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x54, 0x0a, 0x11, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x32, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x52, 0x10, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69,
	0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74,
	0x69, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x6c, 0x65, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x65, 0x67, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x21, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x10, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x4e,
	0x6f, 0x64, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6e,
	0x6f, 0x64, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x57, 0x0a, 0x0c, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x4c, 0x65, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x4f, 0x55,
	0x4e, 0x44, 0x5f, 0x4c, 0x45, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e,
	0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4c, 0x45, 0x47, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x50, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x4f, 0x55,
	0x4e, 0x44, 0x5f, 0x4c, 0x45, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x48,
	0x10, 0x03, 0x22, 0x40, 0x0a, 0x10, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x5f, 0x63, 0x71, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x71, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x22, 0xe9, 0x02, 0x0a, 0x0d, 0x4c, 0x65, 0x67, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x09, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x10, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x71, 0x74, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x51, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x29, 0x0a, 0x09, 0x71, 0x74, 0x79,
	0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63,
	0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x08, 0x71, 0x74, 0x79, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x2f, 0x0a, 0x0c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x52, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x74, 0x61,
	0x22, 0xf6, 0x01, 0x0a, 0x0e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x12, 0x49, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x10, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x71, 0x74, 0x79, 0x5f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x51, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x29, 0x0a,
	0x09, 0x71, 0x74, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x08,
	0x71, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x22, 0xa0, 0x02, 0x0a, 0x16, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x6f,
	0x64, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x03, 0x6c,
	0x65, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x32,
	0x2e, 0x4c, 0x65, 0x67, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03,
	0x6c, 0x65, 0x67, 0x12, 0x4e, 0x0a, 0x0f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x52, 0x0e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x22, 0x57, 0x0a, 0x0d, 0x4e, 0x6f, 0x64, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x4d, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12,
	0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d,
	0x55, 0x4c, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x56, 0x10, 0x03, 0x22, 0x5c, 0x0a, 0x16,
	0x41, 0x6c, 0x67, 0x6f, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x62, 0x62, 0x72, 0x65, 0x76,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x62,
	0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49,
}

var (
	file_protos_WebAPI_strategy_definition_2_proto_rawDescOnce sync.Once
	file_protos_WebAPI_strategy_definition_2_proto_rawDescData = file_protos_WebAPI_strategy_definition_2_proto_rawDesc
)

func file_protos_WebAPI_strategy_definition_2_proto_rawDescGZIP() []byte {
	file_protos_WebAPI_strategy_definition_2_proto_rawDescOnce.Do(func() {
		file_protos_WebAPI_strategy_definition_2_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_WebAPI_strategy_definition_2_proto_rawDescData)
	})
	return file_protos_WebAPI_strategy_definition_2_proto_rawDescData
}

var file_protos_WebAPI_strategy_definition_2_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_protos_WebAPI_strategy_definition_2_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_protos_WebAPI_strategy_definition_2_proto_goTypes = []any{
	(StrategyDefinition_RoundLegMode)(0),      // 0: strategy_definition_2.StrategyDefinition.RoundLegMode
	(StrategyNodeDefinition_NodeOperation)(0), // 1: strategy_definition_2.StrategyNodeDefinition.NodeOperation
	(*StrategyDefinition)(nil),                // 2: strategy_definition_2.StrategyDefinition
	(*ExchangeStrategy)(nil),                  // 3: strategy_definition_2.ExchangeStrategy
	(*LegDefinition)(nil),                     // 4: strategy_definition_2.LegDefinition
	(*NestedStrategy)(nil),                    // 5: strategy_definition_2.NestedStrategy
	(*StrategyNodeDefinition)(nil),            // 6: strategy_definition_2.StrategyNodeDefinition
	(*AlgoStrategyDefinition)(nil),            // 7: strategy_definition_2.AlgoStrategyDefinition
	(*common.Decimal)(nil),                    // 8: cqg.Decimal
}
var file_protos_WebAPI_strategy_definition_2_proto_depIdxs = []int32{
	3, // 0: strategy_definition_2.StrategyDefinition.exchange_strategy:type_name -> strategy_definition_2.ExchangeStrategy
	6, // 1: strategy_definition_2.StrategyDefinition.node_definitions:type_name -> strategy_definition_2.StrategyNodeDefinition
	8, // 2: strategy_definition_2.LegDefinition.qty_ratio:type_name -> cqg.Decimal
	8, // 3: strategy_definition_2.LegDefinition.option_delta:type_name -> cqg.Decimal
	2, // 4: strategy_definition_2.NestedStrategy.definition:type_name -> strategy_definition_2.StrategyDefinition
	8, // 5: strategy_definition_2.NestedStrategy.qty_ratio:type_name -> cqg.Decimal
	4, // 6: strategy_definition_2.StrategyNodeDefinition.leg:type_name -> strategy_definition_2.LegDefinition
	5, // 7: strategy_definition_2.StrategyNodeDefinition.nested_strategy:type_name -> strategy_definition_2.NestedStrategy
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_protos_WebAPI_strategy_definition_2_proto_init() }
func file_protos_WebAPI_strategy_definition_2_proto_init() {
	if File_protos_WebAPI_strategy_definition_2_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_WebAPI_strategy_definition_2_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_WebAPI_strategy_definition_2_proto_goTypes,
		DependencyIndexes: file_protos_WebAPI_strategy_definition_2_proto_depIdxs,
		EnumInfos:         file_protos_WebAPI_strategy_definition_2_proto_enumTypes,
		MessageInfos:      file_protos_WebAPI_strategy_definition_2_proto_msgTypes,
	}.Build()
	File_protos_WebAPI_strategy_definition_2_proto = out.File
	file_protos_WebAPI_strategy_definition_2_proto_rawDesc = nil
	file_protos_WebAPI_strategy_definition_2_proto_goTypes = nil
	file_protos_WebAPI_strategy_definition_2_proto_depIdxs = nil
}
