// Trade Routing messaging

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: protos/WebAPI/trade_routing_2.proto

package WebAPI

import (
	common "cqg-api/protos/WebAPI/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Trading feature entitlements.
type TradingFeatureEntitlement int32

const (
	// Disallow skipping non-fast click confirmations.
	TradingFeatureEntitlement_TRADING_FEATURE_ENTITLEMENT_DISALLOW_SKIP_NON_FAST_CLICK_CONFIRMATIONS TradingFeatureEntitlement = 3
	// Disallow skipping Responsive DOMTrader fast click confirmations.
	TradingFeatureEntitlement_TRADING_FEATURE_ENTITLEMENT_DISALLOW_SKIP_NON_DDT_FAST_CLICK_CONFIRMATIONS TradingFeatureEntitlement = 4
	// Disallow Heads Up.
	TradingFeatureEntitlement_TRADING_FEATURE_ENTITLEMENT_DISALLOW_HEADS_UP TradingFeatureEntitlement = 5
	// Disallow Order View.
	TradingFeatureEntitlement_TRADING_FEATURE_ENTITLEMENT_DISALLOW_ORDER_VIEW TradingFeatureEntitlement = 6
	// Disallow Responsive DOMTrader.
	TradingFeatureEntitlement_TRADING_FEATURE_ENTITLEMENT_DISALLOW_RESPONSIVE_DOM_TRADER TradingFeatureEntitlement = 8
	// Disallow Dynamic DOMTrader.
	TradingFeatureEntitlement_TRADING_FEATURE_ENTITLEMENT_DISALLOW_DYNAMIC_DOM_TRADER TradingFeatureEntitlement = 9
	// Disallow buy/sell fast click.
	TradingFeatureEntitlement_TRADING_FEATURE_ENTITLEMENT_DISALLOW_BUY_SELL_FAST_CLICK TradingFeatureEntitlement = 11
	// Disallow skipping Dynamic DOMTrader fast click confirmations.
	TradingFeatureEntitlement_TRADING_FEATURE_ENTITLEMENT_DISALLOW_SKIP_DDT_FAST_CLICK_CONFIRMATIONS TradingFeatureEntitlement = 12
	// Disallow skipping force order confirmation.
	TradingFeatureEntitlement_TRADING_FEATURE_ENTITLEMENT_DISALLOW_SKIP_FORCE_ORDER_CONFIRMATION TradingFeatureEntitlement = 13
)

// Enum value maps for TradingFeatureEntitlement.
var (
	TradingFeatureEntitlement_name = map[int32]string{
		3:  "TRADING_FEATURE_ENTITLEMENT_DISALLOW_SKIP_NON_FAST_CLICK_CONFIRMATIONS",
		4:  "TRADING_FEATURE_ENTITLEMENT_DISALLOW_SKIP_NON_DDT_FAST_CLICK_CONFIRMATIONS",
		5:  "TRADING_FEATURE_ENTITLEMENT_DISALLOW_HEADS_UP",
		6:  "TRADING_FEATURE_ENTITLEMENT_DISALLOW_ORDER_VIEW",
		8:  "TRADING_FEATURE_ENTITLEMENT_DISALLOW_RESPONSIVE_DOM_TRADER",
		9:  "TRADING_FEATURE_ENTITLEMENT_DISALLOW_DYNAMIC_DOM_TRADER",
		11: "TRADING_FEATURE_ENTITLEMENT_DISALLOW_BUY_SELL_FAST_CLICK",
		12: "TRADING_FEATURE_ENTITLEMENT_DISALLOW_SKIP_DDT_FAST_CLICK_CONFIRMATIONS",
		13: "TRADING_FEATURE_ENTITLEMENT_DISALLOW_SKIP_FORCE_ORDER_CONFIRMATION",
	}
	TradingFeatureEntitlement_value = map[string]int32{
		"TRADING_FEATURE_ENTITLEMENT_DISALLOW_SKIP_NON_FAST_CLICK_CONFIRMATIONS":     3,
		"TRADING_FEATURE_ENTITLEMENT_DISALLOW_SKIP_NON_DDT_FAST_CLICK_CONFIRMATIONS": 4,
		"TRADING_FEATURE_ENTITLEMENT_DISALLOW_HEADS_UP":                              5,
		"TRADING_FEATURE_ENTITLEMENT_DISALLOW_ORDER_VIEW":                            6,
		"TRADING_FEATURE_ENTITLEMENT_DISALLOW_RESPONSIVE_DOM_TRADER":                 8,
		"TRADING_FEATURE_ENTITLEMENT_DISALLOW_DYNAMIC_DOM_TRADER":                    9,
		"TRADING_FEATURE_ENTITLEMENT_DISALLOW_BUY_SELL_FAST_CLICK":                   11,
		"TRADING_FEATURE_ENTITLEMENT_DISALLOW_SKIP_DDT_FAST_CLICK_CONFIRMATIONS":     12,
		"TRADING_FEATURE_ENTITLEMENT_DISALLOW_SKIP_FORCE_ORDER_CONFIRMATION":         13,
	}
)

func (x TradingFeatureEntitlement) Enum() *TradingFeatureEntitlement {
	p := new(TradingFeatureEntitlement)
	*p = x
	return p
}

func (x TradingFeatureEntitlement) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradingFeatureEntitlement) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_trade_routing_2_proto_enumTypes[0].Descriptor()
}

func (TradingFeatureEntitlement) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_trade_routing_2_proto_enumTypes[0]
}

func (x TradingFeatureEntitlement) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TradingFeatureEntitlement) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TradingFeatureEntitlement(num)
	return nil
}

// Deprecated: Use TradingFeatureEntitlement.Descriptor instead.
func (TradingFeatureEntitlement) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_trade_routing_2_proto_rawDescGZIP(), []int{0}
}

// Scope of the subscription (provide a list).
type TradeSubscription_SubscriptionScope int32

const (
	// Subscribe to order updates.
	TradeSubscription_SUBSCRIPTION_SCOPE_ORDERS TradeSubscription_SubscriptionScope = 1
	// Subscribe to open positions and matched trades updates.
	// Note that PositionStatus messages are reported only for accounts
	// with trading_account_2.Account.cleared_by_statements=True flag.
	// Accounts without this flag will not receive PositionStatus messages,
	// but the subscription will succeed.
	TradeSubscription_SUBSCRIPTION_SCOPE_POSITIONS TradeSubscription_SubscriptionScope = 2
	// Deprecated. Use SUBSCRIPTION_SCOPE_ACCOUNT_SUMMARY instead.
	TradeSubscription_SUBSCRIPTION_SCOPE_COLLATERAL TradeSubscription_SubscriptionScope = 3
	// Subscribe to account summary updates (current margin, purchasing power,
	// total filled quantity etc).
	// Note that AccountSummaryStatus messages are reported only for accounts
	// with trading_account_2.Account.cleared_by_statements=True flag.
	// Accounts without this flag will not receive AccountSummaryStatus messages,
	// but the subscription will succeed.
	TradeSubscription_SUBSCRIPTION_SCOPE_ACCOUNT_SUMMARY TradeSubscription_SubscriptionScope = 4
	// Subscribe to positions updates from exchange.
	// Note that ExchangePositionStatus messages are reported only for accounts
	// with trading_account_2.Account.supports_exchange_positions_subscription=True flag.
	// Accounts without this flag will not receive ExchangePositionStatus messages,
	// but the subscription will succeed.
	TradeSubscription_SUBSCRIPTION_SCOPE_EXCHANGE_POSITIONS TradeSubscription_SubscriptionScope = 5
	// Subscribe to balances updates from exchange on a per-currency basis.
	// Note that ExchangeBalanceStatus messages are reported only for accounts
	// with trading_account_2.Account.supports_exchange_balances_subscription=True flag.
	// Accounts without this flag will not receive ExchangeBalanceStatus messages,
	// but the subscription will succeed.
	TradeSubscription_SUBSCRIPTION_SCOPE_EXCHANGE_BALANCES TradeSubscription_SubscriptionScope = 6
)

// Enum value maps for TradeSubscription_SubscriptionScope.
var (
	TradeSubscription_SubscriptionScope_name = map[int32]string{
		1: "SUBSCRIPTION_SCOPE_ORDERS",
		2: "SUBSCRIPTION_SCOPE_POSITIONS",
		3: "SUBSCRIPTION_SCOPE_COLLATERAL",
		4: "SUBSCRIPTION_SCOPE_ACCOUNT_SUMMARY",
		5: "SUBSCRIPTION_SCOPE_EXCHANGE_POSITIONS",
		6: "SUBSCRIPTION_SCOPE_EXCHANGE_BALANCES",
	}
	TradeSubscription_SubscriptionScope_value = map[string]int32{
		"SUBSCRIPTION_SCOPE_ORDERS":             1,
		"SUBSCRIPTION_SCOPE_POSITIONS":          2,
		"SUBSCRIPTION_SCOPE_COLLATERAL":         3,
		"SUBSCRIPTION_SCOPE_ACCOUNT_SUMMARY":    4,
		"SUBSCRIPTION_SCOPE_EXCHANGE_POSITIONS": 5,
		"SUBSCRIPTION_SCOPE_EXCHANGE_BALANCES":  6,
	}
)

func (x TradeSubscription_SubscriptionScope) Enum() *TradeSubscription_SubscriptionScope {
	p := new(TradeSubscription_SubscriptionScope)
	*p = x
	return p
}

func (x TradeSubscription_SubscriptionScope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradeSubscription_SubscriptionScope) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_trade_routing_2_proto_enumTypes[1].Descriptor()
}

func (TradeSubscription_SubscriptionScope) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_trade_routing_2_proto_enumTypes[1]
}

func (x TradeSubscription_SubscriptionScope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TradeSubscription_SubscriptionScope) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TradeSubscription_SubscriptionScope(num)
	return nil
}

// Deprecated: Use TradeSubscription_SubscriptionScope.Descriptor instead.
func (TradeSubscription_SubscriptionScope) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_trade_routing_2_proto_rawDescGZIP(), []int{0, 0}
}

// Type of the publication to subscribe.
type TradeSubscription_PublicationType int32

const (
	// Subscribe to a single account or list of accounts.
	TradeSubscription_PUBLICATION_TYPE_ACCOUNTS TradeSubscription_PublicationType = 1
	// Subscribe to all accounts of a specific sales series.
	TradeSubscription_PUBLICATION_TYPE_SALES_SERIES TradeSubscription_PublicationType = 2
	// Subscribe to all accounts of a specific brokerage.
	TradeSubscription_PUBLICATION_TYPE_BROKERAGE TradeSubscription_PublicationType = 3
	// Subscribe to all accounts this user is authorized for (default).
	TradeSubscription_PUBLICATION_TYPE_ALL_AUTHORIZED TradeSubscription_PublicationType = 4
)

// Enum value maps for TradeSubscription_PublicationType.
var (
	TradeSubscription_PublicationType_name = map[int32]string{
		1: "PUBLICATION_TYPE_ACCOUNTS",
		2: "PUBLICATION_TYPE_SALES_SERIES",
		3: "PUBLICATION_TYPE_BROKERAGE",
		4: "PUBLICATION_TYPE_ALL_AUTHORIZED",
	}
	TradeSubscription_PublicationType_value = map[string]int32{
		"PUBLICATION_TYPE_ACCOUNTS":       1,
		"PUBLICATION_TYPE_SALES_SERIES":   2,
		"PUBLICATION_TYPE_BROKERAGE":      3,
		"PUBLICATION_TYPE_ALL_AUTHORIZED": 4,
	}
)

func (x TradeSubscription_PublicationType) Enum() *TradeSubscription_PublicationType {
	p := new(TradeSubscription_PublicationType)
	*p = x
	return p
}

func (x TradeSubscription_PublicationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradeSubscription_PublicationType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_trade_routing_2_proto_enumTypes[2].Descriptor()
}

func (TradeSubscription_PublicationType) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_trade_routing_2_proto_enumTypes[2]
}

func (x TradeSubscription_PublicationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TradeSubscription_PublicationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TradeSubscription_PublicationType(num)
	return nil
}

// Deprecated: Use TradeSubscription_PublicationType.Descriptor instead.
func (TradeSubscription_PublicationType) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_trade_routing_2_proto_rawDescGZIP(), []int{0, 1}
}

// Positions matching algorithm (for position subscription).
type TradeSubscription_MatchingAlgorithm int32

const (
	// First In, First Out.
	// The first order filled is the first order offset when an order on the opposite side of the market is executed.
	TradeSubscription_MATCHING_ALGORITHM_FIFO TradeSubscription_MatchingAlgorithm = 1
	// High Buy, High Sell. The highest buy is matched with the highest sell.
	TradeSubscription_MATCHING_ALGORITHM_HBHS TradeSubscription_MatchingAlgorithm = 2
	// Last In, First Out.
	// The last order filled is the first order offset when an order on the opposite side of the market is executed.
	TradeSubscription_MATCHING_ALGORITHM_LIFO TradeSubscription_MatchingAlgorithm = 3
)

// Enum value maps for TradeSubscription_MatchingAlgorithm.
var (
	TradeSubscription_MatchingAlgorithm_name = map[int32]string{
		1: "MATCHING_ALGORITHM_FIFO",
		2: "MATCHING_ALGORITHM_HBHS",
		3: "MATCHING_ALGORITHM_LIFO",
	}
	TradeSubscription_MatchingAlgorithm_value = map[string]int32{
		"MATCHING_ALGORITHM_FIFO": 1,
		"MATCHING_ALGORITHM_HBHS": 2,
		"MATCHING_ALGORITHM_LIFO": 3,
	}
)

func (x TradeSubscription_MatchingAlgorithm) Enum() *TradeSubscription_MatchingAlgorithm {
	p := new(TradeSubscription_MatchingAlgorithm)
	*p = x
	return p
}

func (x TradeSubscription_MatchingAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradeSubscription_MatchingAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_trade_routing_2_proto_enumTypes[3].Descriptor()
}

func (TradeSubscription_MatchingAlgorithm) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_trade_routing_2_proto_enumTypes[3]
}

func (x TradeSubscription_MatchingAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TradeSubscription_MatchingAlgorithm) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TradeSubscription_MatchingAlgorithm(num)
	return nil
}

// Deprecated: Use TradeSubscription_MatchingAlgorithm.Descriptor instead.
func (TradeSubscription_MatchingAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_trade_routing_2_proto_rawDescGZIP(), []int{0, 2}
}

// Possible result codes.
type TradeSubscriptionStatus_StatusCode int32

const (
	// success codes (0 - 99)
	TradeSubscriptionStatus_STATUS_CODE_SUCCESS TradeSubscriptionStatus_StatusCode = 0
	// Currently subscription is [partially] disconnect because of communication issues.
	// NOTE: Clients should not resubscribe in this case, the server will restore subscription with
	// sending SUCCESS status once communication issues are resolved following with all necessary data updates.
	TradeSubscriptionStatus_STATUS_CODE_DISCONNECTED TradeSubscriptionStatus_StatusCode = 1
	// failure codes (100+)
	TradeSubscriptionStatus_STATUS_CODE_FAILURE TradeSubscriptionStatus_StatusCode = 101
	// The limit of the subscriptions has been violated.
	TradeSubscriptionStatus_STATUS_CODE_SUBSCRIPTION_LIMIT_VIOLATION TradeSubscriptionStatus_StatusCode = 102
	// Unknown or ambiguous account, sales series number, or brokerage id in the subscription.
	TradeSubscriptionStatus_STATUS_CODE_INVALID_PUBLICATION_ID TradeSubscriptionStatus_StatusCode = 103
	// The limit of subscribed accounts has been violated.
	TradeSubscriptionStatus_STATUS_CODE_SUBSCRIBED_ACCOUNTS_LIMIT_VIOLATION TradeSubscriptionStatus_StatusCode = 104
)

// Enum value maps for TradeSubscriptionStatus_StatusCode.
var (
	TradeSubscriptionStatus_StatusCode_name = map[int32]string{
		0:   "STATUS_CODE_SUCCESS",
		1:   "STATUS_CODE_DISCONNECTED",
		101: "STATUS_CODE_FAILURE",
		102: "STATUS_CODE_SUBSCRIPTION_LIMIT_VIOLATION",
		103: "STATUS_CODE_INVALID_PUBLICATION_ID",
		104: "STATUS_CODE_SUBSCRIBED_ACCOUNTS_LIMIT_VIOLATION",
	}
	TradeSubscriptionStatus_StatusCode_value = map[string]int32{
		"STATUS_CODE_SUCCESS":                             0,
		"STATUS_CODE_DISCONNECTED":                        1,
		"STATUS_CODE_FAILURE":                             101,
		"STATUS_CODE_SUBSCRIPTION_LIMIT_VIOLATION":        102,
		"STATUS_CODE_INVALID_PUBLICATION_ID":              103,
		"STATUS_CODE_SUBSCRIBED_ACCOUNTS_LIMIT_VIOLATION": 104,
	}
)

func (x TradeSubscriptionStatus_StatusCode) Enum() *TradeSubscriptionStatus_StatusCode {
	p := new(TradeSubscriptionStatus_StatusCode)
	*p = x
	return p
}

func (x TradeSubscriptionStatus_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradeSubscriptionStatus_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_trade_routing_2_proto_enumTypes[4].Descriptor()
}

func (TradeSubscriptionStatus_StatusCode) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_trade_routing_2_proto_enumTypes[4]
}

func (x TradeSubscriptionStatus_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TradeSubscriptionStatus_StatusCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TradeSubscriptionStatus_StatusCode(num)
	return nil
}

// Deprecated: Use TradeSubscriptionStatus_StatusCode.Descriptor instead.
func (TradeSubscriptionStatus_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_trade_routing_2_proto_rawDescGZIP(), []int{1, 0}
}

// Subscription to trade routing data and notifications about trading information updates.
// Client can be subscribed to several publications.
// If some account is subscribed by several publications then client will receive a separate snapshot per subscription
// but one real time update with a list of subscriptions.
type TradeSubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of a subscription that should be unique enough to match responses and updates with corresponding requests.
	Id *uint32 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	// This field is associated with SubscriptionScope enum type.
	// Request is rejected if subscription_scopes contains duplicates.
	SubscriptionScopes []uint32 `protobuf:"varint,2,rep,name=subscription_scopes,json=subscriptionScopes" json:"subscription_scopes,omitempty"`
	// This field is associated with PublicationType enum type.
	PublicationType *uint32 `protobuf:"varint,3,opt,name=publication_type,json=publicationType" json:"publication_type,omitempty"`
	// Account IDs when publicationType = PUBLICATION_TYPE_ACCOUNTS.
	AccountIds []uint32 `protobuf:"varint,4,rep,packed,name=account_ids,json=accountIds" json:"account_ids,omitempty"`
	// Sales series number when publicationType = PUBLICATION_TYPE_SALES_SERIES.
	SalesSeriesNumber *string `protobuf:"bytes,5,opt,name=sales_series_number,json=salesSeriesNumber" json:"sales_series_number,omitempty"`
	// Brokerage ID when publicationType = PUBLICATION_TYPE_BROKERAGE or PUBLICATION_TYPE_SALES_SERIES.
	BrokerageId *uint32 `protobuf:"varint,6,opt,name=brokerage_id,json=brokerageId" json:"brokerage_id,omitempty"`
	// True to subscribe, false to unsubscribe (only id value is used to unsubscribe).
	Subscribe *bool `protobuf:"varint,7,req,name=subscribe" json:"subscribe,omitempty"`
	// Note: use last_order_update_utc_timestamp field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/trade_routing_2.proto.
	LastOrderUpdateUtcTime *int64 `protobuf:"zigzag64,8,opt,name=last_order_update_utc_time,json=lastOrderUpdateUtcTime" json:"last_order_update_utc_time,omitempty"`
	// Optionally limit request to receive information about orders
	// that were updated/added after specified server related time (inclusive).
	// It is used to reduce amount of information necessary to send after re-connection.
	// Client should be ready for duplicates that have to be detected by corresponding IDs.
	// If specified it's used instead of last_order_update_utc_time field.
	LastOrderUpdateUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=last_order_update_utc_timestamp,json=lastOrderUpdateUtcTimestamp" json:"last_order_update_utc_timestamp,omitempty"`
	// True means sending only real time data and skip sending an initial orders snapshot,
	// send initial snapshot otherwise.
	// NOTE: do not set this attribute after restoring session since some events might be missed to be delivered,
	// use last_order_update_utc_time instead.
	// NOTE: when set to True, WebAPI server does not send order snapshots for accounts authorized during
	// the subscription.
	SkipOrdersSnapshot *bool `protobuf:"varint,9,opt,name=skip_orders_snapshot,json=skipOrdersSnapshot" json:"skip_orders_snapshot,omitempty"`
	// True means sending only FCM confirmed positions and their updates (if subscribed)
	// without matching with current day fills, send matched net positions otherwise.
	ConfirmedPositionsOnly *bool `protobuf:"varint,10,opt,name=confirmed_positions_only,json=confirmedPositionsOnly" json:"confirmed_positions_only,omitempty"`
	// This field is associated with MatchingAlgorithm enum type.
	// MATCHING_ALGORITHM_FIFO is used if omitted.
	// Applicable only for contracts with ContractMetadata.position_tracking = POSITION_TRACKING_TYPE_NET_POSITION.
	// For other contract types it is always MATCHING_ALGORITHM_FIFO.
	MatchingAlgorithm *uint32 `protobuf:"varint,11,opt,name=matching_algorithm,json=matchingAlgorithm" json:"matching_algorithm,omitempty"`
	// If true or omitted then intraday trades are matched first
	// and then intraday leftover is matched against previous close positions.
	// If false then previous day open positions and intraday fills are matched in a single pass.
	// Applicable only for contracts with ContractMetadata.position_tracking = POSITION_TRACKING_TYPE_NET_POSITION.
	// For other contract types it is always false.
	MatchIntradayFirst *bool `protobuf:"varint,12,opt,name=match_intraday_first,json=matchIntradayFirst" json:"match_intraday_first,omitempty"`
	// This field is associated with MatchingAlgorithm enum type.
	// Historical positions Matching algorithm. The same as matching_algorithm if omitted.
	// It is ignored if match_intraday_first is false.
	// Applicable only for contracts with ContractMetadata.position_tracking = POSITION_TRACKING_TYPE_NET_POSITION.
	HistoricalMatchingAlgorithm *uint32 `protobuf:"varint,13,opt,name=historical_matching_algorithm,json=historicalMatchingAlgorithm" json:"historical_matching_algorithm,omitempty"`
	// If this field set to true, statuses on orders with ORDER_TYPE_CROSS type will be
	// included into responses. See CrossOrderParameters message.
	// Note that order statuses with cross order type are excluded from snapshot only if
	// include_cross_orders set to false (or empty) and ORDER_TYPE_CROSS type is not included
	// into order_snapshot_filter.order_types.
	IncludeCrossOrders *bool `protobuf:"varint,15,opt,name=include_cross_orders,json=includeCrossOrders" json:"include_cross_orders,omitempty"`
	// If this field set to true, child orders of algo strategies will be included
	// into responses. Algo strategy order is order that has Order.algo_strategy field set.
	// It can cause placement of other orders. Some of these subordinate orders will reference initial order
	// (see SyntheticStrategyProperties.root_order_id), such orders are algo strategy "child" orders. Unlike synthetic
	// strategy case, algo strategy child orders are not included in subscription's snapshot or updates by default.
	// Note that unlike synthetic strategy case, fill transactions of child orders are duplicated
	// in algo strategy parent order, but shall be counted only once in calculations of position, collaterals, etc.
	// Note that algo strategy child order doesn't correspond to any "leg" or "node" in "synthetic strategy" sense, so for
	// algo strategy child order SyntheticStrategyProperties.node_number is not set.
	IncludeAlgoStrategyChildOrders *bool `protobuf:"varint,18,opt,name=include_algo_strategy_child_orders,json=includeAlgoStrategyChildOrders" json:"include_algo_strategy_child_orders,omitempty"`
	// Only order statuses that match the filter are included in a snapshot.
	// By default no filtration is done by the filter.
	// Affects result for scope SUBSCRIPTION_SCOPE_ORDERS.
	// Note that snapshot might still include additional data in responses (e.g. when multiple trade
	// subscriptions with different snapshot filters are requested).
	OrderSnapshotFilter *OrderSnapshotFilter `protobuf:"bytes,16,opt,name=order_snapshot_filter,json=orderSnapshotFilter" json:"order_snapshot_filter,omitempty"`
	// Parameters for account summary trade subscription.
	// It is requred field for subscriptions with SUBSCRIPTION_SCOPE_ACCOUNT_SUMMARY scope.
	AccountSummaryParameters *AccountSummaryParameters `protobuf:"bytes,17,opt,name=account_summary_parameters,json=accountSummaryParameters" json:"account_summary_parameters,omitempty"`
}

func (x *TradeSubscription) Reset() {
	*x = TradeSubscription{}
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradeSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeSubscription) ProtoMessage() {}

func (x *TradeSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeSubscription.ProtoReflect.Descriptor instead.
func (*TradeSubscription) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trade_routing_2_proto_rawDescGZIP(), []int{0}
}

func (x *TradeSubscription) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *TradeSubscription) GetSubscriptionScopes() []uint32 {
	if x != nil {
		return x.SubscriptionScopes
	}
	return nil
}

func (x *TradeSubscription) GetPublicationType() uint32 {
	if x != nil && x.PublicationType != nil {
		return *x.PublicationType
	}
	return 0
}

func (x *TradeSubscription) GetAccountIds() []uint32 {
	if x != nil {
		return x.AccountIds
	}
	return nil
}

func (x *TradeSubscription) GetSalesSeriesNumber() string {
	if x != nil && x.SalesSeriesNumber != nil {
		return *x.SalesSeriesNumber
	}
	return ""
}

func (x *TradeSubscription) GetBrokerageId() uint32 {
	if x != nil && x.BrokerageId != nil {
		return *x.BrokerageId
	}
	return 0
}

func (x *TradeSubscription) GetSubscribe() bool {
	if x != nil && x.Subscribe != nil {
		return *x.Subscribe
	}
	return false
}

// Deprecated: Marked as deprecated in protos/WebAPI/trade_routing_2.proto.
func (x *TradeSubscription) GetLastOrderUpdateUtcTime() int64 {
	if x != nil && x.LastOrderUpdateUtcTime != nil {
		return *x.LastOrderUpdateUtcTime
	}
	return 0
}

func (x *TradeSubscription) GetLastOrderUpdateUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LastOrderUpdateUtcTimestamp
	}
	return nil
}

func (x *TradeSubscription) GetSkipOrdersSnapshot() bool {
	if x != nil && x.SkipOrdersSnapshot != nil {
		return *x.SkipOrdersSnapshot
	}
	return false
}

func (x *TradeSubscription) GetConfirmedPositionsOnly() bool {
	if x != nil && x.ConfirmedPositionsOnly != nil {
		return *x.ConfirmedPositionsOnly
	}
	return false
}

func (x *TradeSubscription) GetMatchingAlgorithm() uint32 {
	if x != nil && x.MatchingAlgorithm != nil {
		return *x.MatchingAlgorithm
	}
	return 0
}

func (x *TradeSubscription) GetMatchIntradayFirst() bool {
	if x != nil && x.MatchIntradayFirst != nil {
		return *x.MatchIntradayFirst
	}
	return false
}

func (x *TradeSubscription) GetHistoricalMatchingAlgorithm() uint32 {
	if x != nil && x.HistoricalMatchingAlgorithm != nil {
		return *x.HistoricalMatchingAlgorithm
	}
	return 0
}

func (x *TradeSubscription) GetIncludeCrossOrders() bool {
	if x != nil && x.IncludeCrossOrders != nil {
		return *x.IncludeCrossOrders
	}
	return false
}

func (x *TradeSubscription) GetIncludeAlgoStrategyChildOrders() bool {
	if x != nil && x.IncludeAlgoStrategyChildOrders != nil {
		return *x.IncludeAlgoStrategyChildOrders
	}
	return false
}

func (x *TradeSubscription) GetOrderSnapshotFilter() *OrderSnapshotFilter {
	if x != nil {
		return x.OrderSnapshotFilter
	}
	return nil
}

func (x *TradeSubscription) GetAccountSummaryParameters() *AccountSummaryParameters {
	if x != nil {
		return x.AccountSummaryParameters
	}
	return nil
}

// Server status for a trade subscription.
// It is sent before or along with a snapshot of initial status information.
type TradeSubscriptionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Subscription Id this result is sent for.
	Id *uint32 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	// Subscription result.
	// This field is associated with StatusCode enum type.
	StatusCode *uint32 `protobuf:"varint,2,req,name=status_code,json=statusCode" json:"status_code,omitempty"`
	// Note: use 'details' instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/trade_routing_2.proto.
	TextMessage *string `protobuf:"bytes,3,opt,name=text_message,json=textMessage" json:"text_message,omitempty"`
	// Optional details.
	Details *common.Text `protobuf:"bytes,4,opt,name=details" json:"details,omitempty"`
}

func (x *TradeSubscriptionStatus) Reset() {
	*x = TradeSubscriptionStatus{}
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradeSubscriptionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeSubscriptionStatus) ProtoMessage() {}

func (x *TradeSubscriptionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeSubscriptionStatus.ProtoReflect.Descriptor instead.
func (*TradeSubscriptionStatus) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trade_routing_2_proto_rawDescGZIP(), []int{1}
}

func (x *TradeSubscriptionStatus) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *TradeSubscriptionStatus) GetStatusCode() uint32 {
	if x != nil && x.StatusCode != nil {
		return *x.StatusCode
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/trade_routing_2.proto.
func (x *TradeSubscriptionStatus) GetTextMessage() string {
	if x != nil && x.TextMessage != nil {
		return *x.TextMessage
	}
	return ""
}

func (x *TradeSubscriptionStatus) GetDetails() *common.Text {
	if x != nil {
		return x.Details
	}
	return nil
}

// Indicator that a snapshot of requested information is delivered and corresponding data is complete.
// Note: One ServerMsg can contain several messages, so to be sure that you have complete state
// for the subscription, first process all statuses (e.g. PositionStatus) from the ServerMsg
// which also contains TradeSnapshotCompletion.
type TradeSnapshotCompletion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of a corresponding trade subscription.
	SubscriptionId *uint32 `protobuf:"varint,1,req,name=subscription_id,json=subscriptionId" json:"subscription_id,omitempty"`
	// List of subscription scopes whose snapshots are completed.
	// Completion message for one scope is sent only once but they can be combined
	// (e.g. one completion message might come for ORDERS and another one later for POSITIONS and COLLATERAL).
	// This field is associated with TradeSubscription.SubscriptionScope enum type.
	SubscriptionScopes []uint32 `protobuf:"varint,2,rep,name=subscription_scopes,json=subscriptionScopes" json:"subscription_scopes,omitempty"`
}

func (x *TradeSnapshotCompletion) Reset() {
	*x = TradeSnapshotCompletion{}
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradeSnapshotCompletion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeSnapshotCompletion) ProtoMessage() {}

func (x *TradeSnapshotCompletion) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeSnapshotCompletion.ProtoReflect.Descriptor instead.
func (*TradeSnapshotCompletion) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trade_routing_2_proto_rawDescGZIP(), []int{2}
}

func (x *TradeSnapshotCompletion) GetSubscriptionId() uint32 {
	if x != nil && x.SubscriptionId != nil {
		return *x.SubscriptionId
	}
	return 0
}

func (x *TradeSnapshotCompletion) GetSubscriptionScopes() []uint32 {
	if x != nil {
		return x.SubscriptionScopes
	}
	return nil
}

// Parameters for account summary trade subscription.
type AccountSummaryParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifiers of AccountSummaryStatus fields to be included into response messages.
	// E.g. to get total_margin in AccountSummaryStatus server messages, include value 6 into this collection.
	// Service fields "is_snapshot", "account_id" and "cleared_fields" are always included.
	// At least one field needs to be specified.
	// Server might include more fields in responses than requested (e.g. in case when two trade subscriptions with
	// different list of fields are requested).
	RequestedFields []uint32 `protobuf:"varint,1,rep,name=requested_fields,json=requestedFields" json:"requested_fields,omitempty"`
	// Account filter. Affects trade subscriptions with publication_type = PUBLICATION_TYPE_ALL_AUTHORIZED.
	// Only accounts that match the filter are included in response messages.
	AccountFilter *AccountFilter `protobuf:"bytes,2,opt,name=account_filter,json=accountFilter" json:"account_filter,omitempty"`
}

func (x *AccountSummaryParameters) Reset() {
	*x = AccountSummaryParameters{}
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountSummaryParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountSummaryParameters) ProtoMessage() {}

func (x *AccountSummaryParameters) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountSummaryParameters.ProtoReflect.Descriptor instead.
func (*AccountSummaryParameters) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trade_routing_2_proto_rawDescGZIP(), []int{3}
}

func (x *AccountSummaryParameters) GetRequestedFields() []uint32 {
	if x != nil {
		return x.RequestedFields
	}
	return nil
}

func (x *AccountSummaryParameters) GetAccountFilter() *AccountFilter {
	if x != nil {
		return x.AccountFilter
	}
	return nil
}

// These rules are only applied for the snapshot.
// See order_2.OrderStatus.is_snapshot.
type OrderSnapshotFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Order statuses with these values of OrderStatus.status field are included in a snapshot.
	// This field is associated with shared_1.OrderStatus.Status enum type.
	// If empty, there is no filtration by the field.
	OrderStatuses []uint32 `protobuf:"varint,1,rep,name=order_statuses,json=orderStatuses" json:"order_statuses,omitempty"`
	// Order statuses include transactions that match the filter.
	// If empty, no filtration is done by the filter.
	TransactionStatusFilter *TransactionStatusFilter `protobuf:"bytes,2,opt,name=transaction_status_filter,json=transactionStatusFilter" json:"transaction_status_filter,omitempty"`
	// Order statuses with these values of Order.order_type field are included in a snapshot.
	// This field is associated with OrderType enum type.
	// If empty, there is no filtration by the field.
	OrderTypes []uint32 `protobuf:"varint,3,rep,name=order_types,json=orderTypes" json:"order_types,omitempty"`
}

func (x *OrderSnapshotFilter) Reset() {
	*x = OrderSnapshotFilter{}
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderSnapshotFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderSnapshotFilter) ProtoMessage() {}

func (x *OrderSnapshotFilter) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderSnapshotFilter.ProtoReflect.Descriptor instead.
func (*OrderSnapshotFilter) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trade_routing_2_proto_rawDescGZIP(), []int{4}
}

func (x *OrderSnapshotFilter) GetOrderStatuses() []uint32 {
	if x != nil {
		return x.OrderStatuses
	}
	return nil
}

func (x *OrderSnapshotFilter) GetTransactionStatusFilter() *TransactionStatusFilter {
	if x != nil {
		return x.TransactionStatusFilter
	}
	return nil
}

func (x *OrderSnapshotFilter) GetOrderTypes() []uint32 {
	if x != nil {
		return x.OrderTypes
	}
	return nil
}

type TransactionStatusFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// No transactions are sent.
	// Request is rejected if skip_transactions is true and transaction_statuses field is not empty.
	SkipTransactions *bool `protobuf:"varint,1,opt,name=skip_transactions,json=skipTransactions" json:"skip_transactions,omitempty"`
	// Transaction statuses with these values of TransactionStatus.status are sent.
	// If empty, there is no filtration by the field.
	// This field is associated with shared_1.TransactionStatus.Status enum type.
	// Request is rejected if skip_transactions is true and transaction_statuses field is not empty.
	TransactionStatuses []uint32 `protobuf:"varint,2,rep,name=transaction_statuses,json=transactionStatuses" json:"transaction_statuses,omitempty"`
}

func (x *TransactionStatusFilter) Reset() {
	*x = TransactionStatusFilter{}
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionStatusFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionStatusFilter) ProtoMessage() {}

func (x *TransactionStatusFilter) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionStatusFilter.ProtoReflect.Descriptor instead.
func (*TransactionStatusFilter) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trade_routing_2_proto_rawDescGZIP(), []int{5}
}

func (x *TransactionStatusFilter) GetSkipTransactions() bool {
	if x != nil && x.SkipTransactions != nil {
		return *x.SkipTransactions
	}
	return false
}

func (x *TransactionStatusFilter) GetTransactionStatuses() []uint32 {
	if x != nil {
		return x.TransactionStatuses
	}
	return nil
}

// Account filter.
type AccountFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if omnibus accounts shall be excluded.
	ExcludeOmnibus *bool `protobuf:"varint,1,opt,name=exclude_omnibus,json=excludeOmnibus" json:"exclude_omnibus,omitempty"`
	// True if a group accounts member shall be excluded.
	ExcludeGroupMember *bool `protobuf:"varint,2,opt,name=exclude_group_member,json=excludeGroupMember" json:"exclude_group_member,omitempty"`
	// True if accounts related to non-derivative brokerages shall be excluded.
	ExcludeNonDerivative *bool `protobuf:"varint,3,opt,name=exclude_non_derivative,json=excludeNonDerivative" json:"exclude_non_derivative,omitempty"`
	// If true, exclude accounts that had "Zero positions at the end of the day" option during last account's clearing.
	ExcludeClearedWithZeroedPositions *bool `protobuf:"varint,4,opt,name=exclude_cleared_with_zeroed_positions,json=excludeClearedWithZeroedPositions" json:"exclude_cleared_with_zeroed_positions,omitempty"`
	// If true, exclude accounts that had "Zero balances at the end of the day" option during last account's clearing.
	ExcludeClearedWithZeroedBalances *bool `protobuf:"varint,5,opt,name=exclude_cleared_with_zeroed_balances,json=excludeClearedWithZeroedBalances" json:"exclude_cleared_with_zeroed_balances,omitempty"`
}

func (x *AccountFilter) Reset() {
	*x = AccountFilter{}
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountFilter) ProtoMessage() {}

func (x *AccountFilter) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountFilter.ProtoReflect.Descriptor instead.
func (*AccountFilter) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trade_routing_2_proto_rawDescGZIP(), []int{6}
}

func (x *AccountFilter) GetExcludeOmnibus() bool {
	if x != nil && x.ExcludeOmnibus != nil {
		return *x.ExcludeOmnibus
	}
	return false
}

func (x *AccountFilter) GetExcludeGroupMember() bool {
	if x != nil && x.ExcludeGroupMember != nil {
		return *x.ExcludeGroupMember
	}
	return false
}

func (x *AccountFilter) GetExcludeNonDerivative() bool {
	if x != nil && x.ExcludeNonDerivative != nil {
		return *x.ExcludeNonDerivative
	}
	return false
}

func (x *AccountFilter) GetExcludeClearedWithZeroedPositions() bool {
	if x != nil && x.ExcludeClearedWithZeroedPositions != nil {
		return *x.ExcludeClearedWithZeroedPositions
	}
	return false
}

func (x *AccountFilter) GetExcludeClearedWithZeroedBalances() bool {
	if x != nil && x.ExcludeClearedWithZeroedBalances != nil {
		return *x.ExcludeClearedWithZeroedBalances
	}
	return false
}

// Status of a contract open positions and purchase and sales for a specific account for the current day
// (contractId and accountId are used as a key for updates).
// Contract position is deleted when all open positions and purchase and sales groups are deleted.
type PositionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of trade subscription IDs this status is related to.
	SubscriptionIds []uint32 `protobuf:"varint,1,rep,name=subscription_ids,json=subscriptionIds" json:"subscription_ids,omitempty"`
	// True if this is a snapshot related message.
	// Since snapshot might be sent in several messages (including none),
	// client should use TradeSnapshotCompletion message as an indicator of complete snapshot delivery.
	IsSnapshot *bool `protobuf:"varint,2,opt,name=is_snapshot,json=isSnapshot" json:"is_snapshot,omitempty"`
	// Account this position belongs to.
	AccountId *int32 `protobuf:"zigzag32,3,req,name=account_id,json=accountId" json:"account_id,omitempty"`
	// Contract ID assigned by server.
	ContractId *uint32 `protobuf:"varint,4,req,name=contract_id,json=contractId" json:"contract_id,omitempty"`
	// True if open positions are short (result of sell operations), long otherwise.
	// In case of separated long and short positions the value is true if the cumulative position is short or flat,
	// the value is false if the cumulative position is long.
	// The attribute is deprecated, refer to OpenPosition.is_short instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/trade_routing_2.proto.
	IsShortOpenPosition *bool `protobuf:"varint,5,req,name=is_short_open_position,json=isShortOpenPosition" json:"is_short_open_position,omitempty"`
	// List of new/ updated or deleted open positions.
	// NOTE: full list is sent only in a snapshot, updates include only added, changed and deleted records.
	OpenPositions []*OpenPosition `protobuf:"bytes,6,rep,name=open_positions,json=openPositions" json:"open_positions,omitempty"`
	// List of purchase and sales groups. This group represent offset trades (usually one sell and one buy).
	// NOTE: full list is sent only in a snapshot, updates include only added, changed and deleted records.
	PurchaseAndSalesGroups []*PurchaseAndSalesGroup `protobuf:"bytes,7,rep,name=purchase_and_sales_groups,json=purchaseAndSalesGroups" json:"purchase_and_sales_groups,omitempty"`
	// Multiple OrderStatus and PositionStatus messages in a single ServerMsg can reference the same contract.
	// If the contract is unknown to the client before this ServerMsg,
	// contract meta-data will be added in at least one of them.
	// If in your code you process orders first and positions second then during processing orders you may
	// encounter order with yet unknown contract_id.
	// In this case you should look for matching contract metadata in positions.
	// The opposite is also true: contract metadata for positions can be in order status messages.
	ContractMetadata *ContractMetadata `protobuf:"bytes,8,opt,name=contract_metadata,json=contractMetadata" json:"contract_metadata,omitempty"`
	// Sum of today fill commissions per currency for the contract.
	// Aggregated value from TransactionStatus.fill_commission for current day orders.
	TodayFillCommissions []*Commission `protobuf:"bytes,9,rep,name=today_fill_commissions,json=todayFillCommissions" json:"today_fill_commissions,omitempty"`
}

func (x *PositionStatus) Reset() {
	*x = PositionStatus{}
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PositionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionStatus) ProtoMessage() {}

func (x *PositionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionStatus.ProtoReflect.Descriptor instead.
func (*PositionStatus) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trade_routing_2_proto_rawDescGZIP(), []int{7}
}

func (x *PositionStatus) GetSubscriptionIds() []uint32 {
	if x != nil {
		return x.SubscriptionIds
	}
	return nil
}

func (x *PositionStatus) GetIsSnapshot() bool {
	if x != nil && x.IsSnapshot != nil {
		return *x.IsSnapshot
	}
	return false
}

func (x *PositionStatus) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *PositionStatus) GetContractId() uint32 {
	if x != nil && x.ContractId != nil {
		return *x.ContractId
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/trade_routing_2.proto.
func (x *PositionStatus) GetIsShortOpenPosition() bool {
	if x != nil && x.IsShortOpenPosition != nil {
		return *x.IsShortOpenPosition
	}
	return false
}

func (x *PositionStatus) GetOpenPositions() []*OpenPosition {
	if x != nil {
		return x.OpenPositions
	}
	return nil
}

func (x *PositionStatus) GetPurchaseAndSalesGroups() []*PurchaseAndSalesGroup {
	if x != nil {
		return x.PurchaseAndSalesGroups
	}
	return nil
}

func (x *PositionStatus) GetContractMetadata() *ContractMetadata {
	if x != nil {
		return x.ContractMetadata
	}
	return nil
}

func (x *PositionStatus) GetTodayFillCommissions() []*Commission {
	if x != nil {
		return x.TodayFillCommissions
	}
	return nil
}

// Account and contract open position.
// There could be more than one position per account and contract.
// (id is used as a key for updates).
type OpenPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Surrogate id as a key for updates.
	Id *int32 `protobuf:"zigzag32,1,req,name=id" json:"id,omitempty"`
	// Note: use qty field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/trade_routing_2.proto.
	Uint32Qty *uint32 `protobuf:"varint,2,opt,name=uint32_qty,json=uint32Qty" json:"uint32_qty,omitempty"`
	// Position size, zero means that this position is deleted.
	// Note: quantity can be safely compared to zero, because this is an integral number of
	// ContractMetadata.volume_scale units.
	Qty *common.Decimal `protobuf:"bytes,12,opt,name=qty" json:"qty,omitempty"`
	// Position average price.
	// NOTE: Since it could be an aggregated position price is sent in correct format directly.
	PriceCorrect *float64 `protobuf:"fixed64,3,req,name=price_correct,json=priceCorrect" json:"price_correct,omitempty"`
	// Exchange specific trade date when the position was open or last changed (date only value).
	TradeDate *int64 `protobuf:"zigzag64,4,req,name=trade_date,json=tradeDate" json:"trade_date,omitempty"`
	// Statement date (date value only).
	StatementDate *int64 `protobuf:"zigzag64,5,req,name=statement_date,json=statementDate" json:"statement_date,omitempty"`
	// UTC trade time (including date) if available, it might not be available e.g. for the previous day positions.
	// Note: use trade_utc_timestamp field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/trade_routing_2.proto.
	TradeUtcTime *int64 `protobuf:"zigzag64,6,opt,name=trade_utc_time,json=tradeUtcTime" json:"trade_utc_time,omitempty"`
	// UTC trade time (including date) if available, it might not be available e.g. for the previous day positions.
	TradeUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=trade_utc_timestamp,json=tradeUtcTimestamp" json:"trade_utc_timestamp,omitempty"`
	// True if the price is an aggregated position price.
	IsAggregated *bool `protobuf:"varint,7,req,name=is_aggregated,json=isAggregated" json:"is_aggregated,omitempty"`
	// True if the open position is short (result of a sell operation), long otherwise.
	// Undefined for deleted position (qty is 0).
	IsShort *bool `protobuf:"varint,9,req,name=is_short,json=isShort" json:"is_short,omitempty"`
	// Whether it is a yesterday or a today position.
	// NOTE: where available, this attribute is from the exchange trade date perspective. It is used for
	// position tracking and open/close instructions. It is not the same as previous day (associated
	// with brokerage statement) vs. intraday. It is also not static. For example, an intraday fill
	// with open_close_effect=OPEN will appear, when it is received during the trading session, in an open
	// position or matched trade with is_yesterday=false. After the exchange trade date rolls over for
	// that contract, and before the brokerage statement arrives reflecting it as a previous day position,
	// the same open position or matched trade will contain is_yesterday=true.
	IsYesterday *bool `protobuf:"varint,10,opt,name=is_yesterday,json=isYesterday,def=0" json:"is_yesterday,omitempty"`
	// Speculation type of the position. One of SpeculationType enum.
	SpeculationType *uint32 `protobuf:"varint,11,opt,name=speculation_type,json=speculationType" json:"speculation_type,omitempty"`
}

// Default values for OpenPosition fields.
const (
	Default_OpenPosition_IsYesterday = bool(false)
)

func (x *OpenPosition) Reset() {
	*x = OpenPosition{}
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpenPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenPosition) ProtoMessage() {}

func (x *OpenPosition) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenPosition.ProtoReflect.Descriptor instead.
func (*OpenPosition) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trade_routing_2_proto_rawDescGZIP(), []int{8}
}

func (x *OpenPosition) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/trade_routing_2.proto.
func (x *OpenPosition) GetUint32Qty() uint32 {
	if x != nil && x.Uint32Qty != nil {
		return *x.Uint32Qty
	}
	return 0
}

func (x *OpenPosition) GetQty() *common.Decimal {
	if x != nil {
		return x.Qty
	}
	return nil
}

func (x *OpenPosition) GetPriceCorrect() float64 {
	if x != nil && x.PriceCorrect != nil {
		return *x.PriceCorrect
	}
	return 0
}

func (x *OpenPosition) GetTradeDate() int64 {
	if x != nil && x.TradeDate != nil {
		return *x.TradeDate
	}
	return 0
}

func (x *OpenPosition) GetStatementDate() int64 {
	if x != nil && x.StatementDate != nil {
		return *x.StatementDate
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/trade_routing_2.proto.
func (x *OpenPosition) GetTradeUtcTime() int64 {
	if x != nil && x.TradeUtcTime != nil {
		return *x.TradeUtcTime
	}
	return 0
}

func (x *OpenPosition) GetTradeUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.TradeUtcTimestamp
	}
	return nil
}

func (x *OpenPosition) GetIsAggregated() bool {
	if x != nil && x.IsAggregated != nil {
		return *x.IsAggregated
	}
	return false
}

func (x *OpenPosition) GetIsShort() bool {
	if x != nil && x.IsShort != nil {
		return *x.IsShort
	}
	return false
}

func (x *OpenPosition) GetIsYesterday() bool {
	if x != nil && x.IsYesterday != nil {
		return *x.IsYesterday
	}
	return Default_OpenPosition_IsYesterday
}

func (x *OpenPosition) GetSpeculationType() uint32 {
	if x != nil && x.SpeculationType != nil {
		return *x.SpeculationType
	}
	return 0
}

// Purchase and sales group that represents offset trades (usually one sell and one buy trade).
type PurchaseAndSalesGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Surrogate id as a key for updates.
	Id *int32 `protobuf:"zigzag32,1,req,name=id" json:"id,omitempty"`
	// Profit/ loss (in contract currency) of the group.
	RealizedProfitLoss *float64 `protobuf:"fixed64,2,req,name=realized_profit_loss,json=realizedProfitLoss" json:"realized_profit_loss,omitempty"`
	// List of matched trades in a group.
	// In case of group updates the whole list is sent.
	MatchedTrades []*MatchedTrade `protobuf:"bytes,3,rep,name=matched_trades,json=matchedTrades" json:"matched_trades,omitempty"`
}

func (x *PurchaseAndSalesGroup) Reset() {
	*x = PurchaseAndSalesGroup{}
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PurchaseAndSalesGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurchaseAndSalesGroup) ProtoMessage() {}

func (x *PurchaseAndSalesGroup) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurchaseAndSalesGroup.ProtoReflect.Descriptor instead.
func (*PurchaseAndSalesGroup) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trade_routing_2_proto_rawDescGZIP(), []int{9}
}

func (x *PurchaseAndSalesGroup) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *PurchaseAndSalesGroup) GetRealizedProfitLoss() float64 {
	if x != nil && x.RealizedProfitLoss != nil {
		return *x.RealizedProfitLoss
	}
	return 0
}

func (x *PurchaseAndSalesGroup) GetMatchedTrades() []*MatchedTrade {
	if x != nil {
		return x.MatchedTrades
	}
	return nil
}

// Specific trade or position that is a part of a purchase and sales group.
// (id is used as a key for updates).
type MatchedTrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Note: use qty field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/trade_routing_2.proto.
	Uint32Qty *uint32 `protobuf:"varint,1,opt,name=uint32_qty,json=uint32Qty" json:"uint32_qty,omitempty"`
	// Matched size.
	// Zero means matched trade is deleted.
	// Note: quantity can be safely compared to zero, because this is an integral number of
	// ContractMetadata.volume_scale units.
	Qty *common.Decimal `protobuf:"bytes,12,opt,name=qty" json:"qty,omitempty"`
	// True if this is a short trade (e.g. result of sell operation), long otherwise.
	IsShort *bool `protobuf:"varint,2,opt,name=is_short,json=isShort" json:"is_short,omitempty"`
	// Trade or position average price.
	// NOTE: Since it could be an aggregated position price is sent in correct format directly.
	Price *float64 `protobuf:"fixed64,3,req,name=price" json:"price,omitempty"`
	// Trade date (date value only).
	TradeDate *int64 `protobuf:"zigzag64,4,req,name=trade_date,json=tradeDate" json:"trade_date,omitempty"`
	// Statement date (date value only).
	StatementDate *int64 `protobuf:"zigzag64,5,req,name=statement_date,json=statementDate" json:"statement_date,omitempty"`
	// UTC trade time (including date) if available, it might not be available e.g. for the previous day positions.
	// Note: use trade_utc_timestamp field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/trade_routing_2.proto.
	TradeUtcTime *int64 `protobuf:"zigzag64,6,opt,name=trade_utc_time,json=tradeUtcTime" json:"trade_utc_time,omitempty"`
	// UTC trade time (including date) if available, it might not be available e.g. for the previous day positions.
	TradeUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=trade_utc_timestamp,json=tradeUtcTimestamp" json:"trade_utc_timestamp,omitempty"`
	// True if the price is an aggregated position price.
	IsAggregated *bool `protobuf:"varint,7,req,name=is_aggregated,json=isAggregated" json:"is_aggregated,omitempty"`
	// Whether the trade is of a yesterday or a today position.
	// NOTE: where available, this attribute is from the exchange trade date perspective. It is used for
	// position tracking and open/close instructions. It is not the same as previous day (associated
	// with brokerage statement) vs. intraday. It is also not static. For example, an intraday fill
	// with open_close_effect=OPEN will appear, when it is received during the trading session, in an open
	// position or matched trade with is_yesterday=false. After the exchange trade date rolls over for
	// that contract, and before the brokerage statement arrives reflecting it as a previous day position,
	// the same open position or matched trade will contain is_yesterday=true.
	IsYesterday *bool `protobuf:"varint,9,opt,name=is_yesterday,json=isYesterday,def=0" json:"is_yesterday,omitempty"`
	// Whether the trade closed a new position or opened a new one.
	// Applicable only if ContractMetadata.position_tracking is not POSITION_TRACKING_TYPE_NET_POSITION.
	IsClose *bool `protobuf:"varint,10,opt,name=is_close,json=isClose" json:"is_close,omitempty"`
	// Speculation type of the trade. One of SpeculationType enum.
	SpeculationType *uint32 `protobuf:"varint,11,opt,name=speculation_type,json=speculationType" json:"speculation_type,omitempty"`
}

// Default values for MatchedTrade fields.
const (
	Default_MatchedTrade_IsYesterday = bool(false)
)

func (x *MatchedTrade) Reset() {
	*x = MatchedTrade{}
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchedTrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchedTrade) ProtoMessage() {}

func (x *MatchedTrade) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchedTrade.ProtoReflect.Descriptor instead.
func (*MatchedTrade) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trade_routing_2_proto_rawDescGZIP(), []int{10}
}

// Deprecated: Marked as deprecated in protos/WebAPI/trade_routing_2.proto.
func (x *MatchedTrade) GetUint32Qty() uint32 {
	if x != nil && x.Uint32Qty != nil {
		return *x.Uint32Qty
	}
	return 0
}

func (x *MatchedTrade) GetQty() *common.Decimal {
	if x != nil {
		return x.Qty
	}
	return nil
}

func (x *MatchedTrade) GetIsShort() bool {
	if x != nil && x.IsShort != nil {
		return *x.IsShort
	}
	return false
}

func (x *MatchedTrade) GetPrice() float64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *MatchedTrade) GetTradeDate() int64 {
	if x != nil && x.TradeDate != nil {
		return *x.TradeDate
	}
	return 0
}

func (x *MatchedTrade) GetStatementDate() int64 {
	if x != nil && x.StatementDate != nil {
		return *x.StatementDate
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/trade_routing_2.proto.
func (x *MatchedTrade) GetTradeUtcTime() int64 {
	if x != nil && x.TradeUtcTime != nil {
		return *x.TradeUtcTime
	}
	return 0
}

func (x *MatchedTrade) GetTradeUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.TradeUtcTimestamp
	}
	return nil
}

func (x *MatchedTrade) GetIsAggregated() bool {
	if x != nil && x.IsAggregated != nil {
		return *x.IsAggregated
	}
	return false
}

func (x *MatchedTrade) GetIsYesterday() bool {
	if x != nil && x.IsYesterday != nil {
		return *x.IsYesterday
	}
	return Default_MatchedTrade_IsYesterday
}

func (x *MatchedTrade) GetIsClose() bool {
	if x != nil && x.IsClose != nil {
		return *x.IsClose
	}
	return false
}

func (x *MatchedTrade) GetSpeculationType() uint32 {
	if x != nil && x.SpeculationType != nil {
		return *x.SpeculationType
	}
	return 0
}

// Deprecated.
// Use SubscriptionScope.SUBSCRIPTION_SCOPE_ACCOUNT_SUMMARY in TradeSubscription.
type CollateralStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of trade subscription IDs this status is related to.
	SubscriptionIds []uint32 `protobuf:"varint,1,rep,name=subscription_ids,json=subscriptionIds" json:"subscription_ids,omitempty"`
	// True if this is a snapshot related message.
	// Since snapshot might be sent in several messages (including none),
	// client should use TradeSnapshotCompletion message as
	// an indicator of complete snapshot delivery for a particular subscription.
	IsSnapshot *bool `protobuf:"varint,2,opt,name=is_snapshot,json=isSnapshot" json:"is_snapshot,omitempty"`
	// Account id of this status.
	AccountId *int32 `protobuf:"zigzag32,3,req,name=account_id,json=accountId" json:"account_id,omitempty"`
	// Currency code of margin and PP values.
	Currency *string `protobuf:"bytes,4,req,name=currency" json:"currency,omitempty"`
	// Margin requirement calculated for worst-case based on open positions and working orders.
	TotalMargin *float64 `protobuf:"fixed64,5,req,name=total_margin,json=totalMargin" json:"total_margin,omitempty"`
	// Margin requirement based on current positions only.
	PositionMargin *float64 `protobuf:"fixed64,11,opt,name=position_margin,json=positionMargin" json:"position_margin,omitempty"`
	// Available account funds including balance, realized profit (or loss), collateral and credits.
	// OTE and MVO are included regarding the account risk parameters.
	// For a group account, purchasing power is a recent snapshot calculated by the server.
	// It uses data from all accounts in the group, so it will not be synchronized with values
	// reported for only this account. Also, for group accounts, OTE and MVO components of
	// purchasing power will not be synchronized with market data updates.
	// See trading_account_2.Account.is_group_member.
	PurchasingPower *float64 `protobuf:"fixed64,6,req,name=purchasing_power,json=purchasingPower" json:"purchasing_power,omitempty"`
	// Open trade equity, or potential profit (or loss) from futures and future-style options positions
	// based on opening price of the position and the current future trade/best bid/best ask
	// (regarding to the risk account settings) or first available from: settlement price,
	// yesterday settlement price, yesterday close price, day before yesterday settlement price,
	// day before yesterday close price if trade is not available.
	// Included if applicable.
	Ote *float64 `protobuf:"fixed64,7,opt,name=ote" json:"ote,omitempty"`
	// Market value of options calculated as the current market trade/best bid/best ask of the option
	// (regarding to the risk account settings) times the number of options
	// (positive for long options and negative for short options) in the portfolio.
	// If trade/best bid/best ask must be used for calculations but is not available,
	// then used first available from: settlement price, yesterday settlement price,
	// yesterday close price, day before yesterday settlement price, day before yesterday close price.
	// Included if applicable.
	Mvo *float64 `protobuf:"fixed64,8,opt,name=mvo" json:"mvo,omitempty"`
	// Market value of futures calculated as the current market trade/best bid/best ask
	// (regarding to the risk account settings) times the number of futures
	// (positive for long and negative for short) in the portfolio.
	// If trade/best bid/best ask must be used for calculations but is not available,
	// then used first available from: settlement price, yesterday settlement price,
	// yesterday close price, day before yesterday settlement price, day before yesterday close price.
	// Included if applicable.
	Mvf *float64 `protobuf:"fixed64,10,opt,name=mvf" json:"mvf,omitempty"`
	// Allowable margin credit of the account.
	MarginCredit *float64 `protobuf:"fixed64,9,opt,name=margin_credit,json=marginCredit" json:"margin_credit,omitempty"`
	// UTC server time (including date) when the status was formed.
	StatusUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=status_utc_timestamp,json=statusUtcTimestamp" json:"status_utc_timestamp,omitempty"`
}

func (x *CollateralStatus) Reset() {
	*x = CollateralStatus{}
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CollateralStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollateralStatus) ProtoMessage() {}

func (x *CollateralStatus) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollateralStatus.ProtoReflect.Descriptor instead.
func (*CollateralStatus) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trade_routing_2_proto_rawDescGZIP(), []int{11}
}

func (x *CollateralStatus) GetSubscriptionIds() []uint32 {
	if x != nil {
		return x.SubscriptionIds
	}
	return nil
}

func (x *CollateralStatus) GetIsSnapshot() bool {
	if x != nil && x.IsSnapshot != nil {
		return *x.IsSnapshot
	}
	return false
}

func (x *CollateralStatus) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CollateralStatus) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *CollateralStatus) GetTotalMargin() float64 {
	if x != nil && x.TotalMargin != nil {
		return *x.TotalMargin
	}
	return 0
}

func (x *CollateralStatus) GetPositionMargin() float64 {
	if x != nil && x.PositionMargin != nil {
		return *x.PositionMargin
	}
	return 0
}

func (x *CollateralStatus) GetPurchasingPower() float64 {
	if x != nil && x.PurchasingPower != nil {
		return *x.PurchasingPower
	}
	return 0
}

func (x *CollateralStatus) GetOte() float64 {
	if x != nil && x.Ote != nil {
		return *x.Ote
	}
	return 0
}

func (x *CollateralStatus) GetMvo() float64 {
	if x != nil && x.Mvo != nil {
		return *x.Mvo
	}
	return 0
}

func (x *CollateralStatus) GetMvf() float64 {
	if x != nil && x.Mvf != nil {
		return *x.Mvf
	}
	return 0
}

func (x *CollateralStatus) GetMarginCredit() float64 {
	if x != nil && x.MarginCredit != nil {
		return *x.MarginCredit
	}
	return 0
}

func (x *CollateralStatus) GetStatusUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.StatusUtcTimestamp
	}
	return nil
}

// Account summary status.
// An update is sent once it is changed. Updates might be consolidated in case of frequent changes.
// Only changed account summary values are included into updates.
// When a calculation error occurs for a field, it is sent in 'failed_fields'
// and also in 'cleared_fields' for backward compatibility.
// Some fields may be valid but empty and not contained in snapshot message including 'failed_fields', 'cleared_fields'.
// For example, 'min_days_till_position_contract_expiration' if there are no open positions on the account.
type AccountSummaryStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of trade subscription IDs this status is related to.
	SubscriptionIds []uint32 `protobuf:"varint,1,rep,name=subscription_ids,json=subscriptionIds" json:"subscription_ids,omitempty"`
	// True if this is a snapshot related message.
	// Since snapshot might be sent in several messages (including none), client should use
	// TradeSnapshotCompletion message as an indicator of complete snapshot delivery
	// for all accounts of particular subscription.
	// To speed up processing, the client can use the 'is_snapshot' field to determine when each account's
	// AccountSummaryStatus snapshot is complete and the data on the corresponding account is usable.
	// This field isn't sent after account authorization, in that case the first message contains
	// as many fields as available.
	IsSnapshot *bool `protobuf:"varint,2,opt,name=is_snapshot,json=isSnapshot" json:"is_snapshot,omitempty"`
	// Account id of this status.
	// It is required field.
	AccountId *int32 `protobuf:"zigzag32,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// Currency code of account values.
	// It is required field in snapshot and included into updates only if changed.
	Currency *string `protobuf:"bytes,4,opt,name=currency" json:"currency,omitempty"`
	// Identifiers of fields being cleared.
	// E.g. to clear 'total_margin' server will include value 6 into the collection.
	// 'cleared_fields' contains identifiers of both failed fields and previously failed fields
	// that are valid but empty for now (see AccountSummaryStatus description).
	ClearedFields []uint32 `protobuf:"varint,5,rep,name=cleared_fields,json=clearedFields" json:"cleared_fields,omitempty"`
	// Identifiers of fields failed to calculate.
	// E.g. if 'net_change_pc' calculation failed server will include value 26 into the collection.
	// If the field is failed and it was in 'failed_fields' in the previous status too, it won't be sent again.
	FailedFields []uint32 `protobuf:"varint,32,rep,name=failed_fields,json=failedFields" json:"failed_fields,omitempty"`
	// Flag used for updates and indicating that the account summary has been deleted for
	// the account and the subscriptions (see subscription_ids).
	// It can be set when the trader is no longer authorized for the account or the
	// account does no longer meet filtering criteria of the subscriptions
	// (see AccountSummaryParameters.account_filter).
	// Note that client can later receive an AccountSummaryStatus for the account and
	// the subscriptions again with this field reset once the trader is authorized on
	// the account or a filtering criteria is met again.
	Deleted *bool `protobuf:"varint,31,opt,name=deleted" json:"deleted,omitempty"`
	// Margin requirement calculated for worst-case based on open positions and working orders.
	TotalMargin *float64 `protobuf:"fixed64,6,opt,name=total_margin,json=totalMargin" json:"total_margin,omitempty"`
	// Margin requirement based on current positions only.
	PositionMargin *float64 `protobuf:"fixed64,7,opt,name=position_margin,json=positionMargin" json:"position_margin,omitempty"`
	// Available account funds including balance, realized profit (or loss), collateral and credits.
	// OTE and MVO are included regarding the account risk parameters.
	// For a group account, purchasing power is a recent snapshot calculated by the server.
	// It uses data from all accounts in the group, so it will not be synchronized with values
	// reported for only this account. Also, for group accounts, OTE and MVO components of
	// purchasing power will not be synchronized with market data updates.
	// See trading_account_2.Account.is_group_member.
	PurchasingPower *float64 `protobuf:"fixed64,8,opt,name=purchasing_power,json=purchasingPower" json:"purchasing_power,omitempty"`
	// Open trade equity, or potential profit (or loss) from futures and future-style options positions
	// based on opening price of the position and the current future trade/best bid/best ask
	// (regarding to the risk account settings) or first available from: settlement price,
	// yesterday settlement price, yesterday close price, day before yesterday settlement price,
	// day before yesterday close price if trade is not available.
	Ote *float64 `protobuf:"fixed64,9,opt,name=ote" json:"ote,omitempty"`
	// Market value of options calculated as the current market trade/best bid/best ask of the option
	// (regarding to the risk account settings) times the number of options
	// (positive for long options and negative for short options) in the portfolio.
	// If trade/best bid/best ask must be used for calculations but is not available,
	// then used first available from: settlement price, yesterday settlement price,
	// yesterday close price, day before yesterday settlement price, day before yesterday close price.
	Mvo *float64 `protobuf:"fixed64,10,opt,name=mvo" json:"mvo,omitempty"`
	// Market value of futures calculated as the current market trade/best bid/best ask
	// (regarding to the risk account settings) times the number of futures
	// (positive for long and negative for short) in the portfolio.
	// If trade/best bid/best ask must be used for calculations but is not available,
	// then used first available from: settlement price, yesterday settlement price,
	// yesterday close price, day before yesterday settlement price, day before yesterday close price.
	Mvf *float64 `protobuf:"fixed64,11,opt,name=mvf" json:"mvf,omitempty"`
	// Allowable margin credit of the account.
	MarginCredit *float64 `protobuf:"fixed64,12,opt,name=margin_credit,json=marginCredit" json:"margin_credit,omitempty"`
	// Cash Excess.
	CashExcess *float64 `protobuf:"fixed64,13,opt,name=cash_excess,json=cashExcess" json:"cash_excess,omitempty"`
	// Current account's balance. In particular includes: yesterday balance, profit/loss, option premium,
	// commission and Forex instrument positions.
	CurrentBalance *float64 `protobuf:"fixed64,15,opt,name=current_balance,json=currentBalance" json:"current_balance,omitempty"`
	// Realized profit/loss.
	ProfitLoss *float64 `protobuf:"fixed64,16,opt,name=profit_loss,json=profitLoss" json:"profit_loss,omitempty"`
	// Unrealized profit/loss for options.
	UnrealizedProfitLoss *float64 `protobuf:"fixed64,17,opt,name=unrealized_profit_loss,json=unrealizedProfitLoss" json:"unrealized_profit_loss,omitempty"`
	// Cash balance from the last statement.
	YesterdayBalance *float64 `protobuf:"fixed64,18,opt,name=yesterday_balance,json=yesterdayBalance" json:"yesterday_balance,omitempty"`
	// Open trade equity for futures and futures-style options from the last statement.
	YesterdayOte *float64 `protobuf:"fixed64,24,opt,name=yesterday_ote,json=yesterdayOte" json:"yesterday_ote,omitempty"`
	// Market value of premium-style options and fixed income from the last statement.
	YesterdayMvo *float64 `protobuf:"fixed64,25,opt,name=yesterday_mvo,json=yesterdayMvo" json:"yesterday_mvo,omitempty"`
	// Collateral on deposit.
	YesterdayCollateral *float64 `protobuf:"fixed64,14,opt,name=yesterday_collateral,json=yesterdayCollateral" json:"yesterday_collateral,omitempty"`
	// (profit_loss / abs(yesterday_balance)) in percentage.
	NetChangePc *float64 `protobuf:"fixed64,26,opt,name=net_change_pc,json=netChangePc" json:"net_change_pc,omitempty"`
	// Sum of all fill sizes for the current day.
	TotalFilledQty *common.Decimal `protobuf:"bytes,19,opt,name=total_filled_qty,json=totalFilledQty" json:"total_filled_qty,omitempty"`
	// Count of filled orders for the current day.
	TotalFilledOrders *uint32 `protobuf:"varint,20,opt,name=total_filled_orders,json=totalFilledOrders" json:"total_filled_orders,omitempty"`
	// Count of parked orders on the account.
	// Note: strategy orders and their child orders are counted,
	//
	//	except for child orders of algo strategies.
	TotalParkedOrders *uint32 `protobuf:"varint,28,opt,name=total_parked_orders,json=totalParkedOrders" json:"total_parked_orders,omitempty"`
	// Count of working orders on the account.
	// Note: strategy orders and their child orders are counted,
	//
	//	except for child orders of algo strategies.
	TotalWorkingOrders *uint32 `protobuf:"varint,29,opt,name=total_working_orders,json=totalWorkingOrders" json:"total_working_orders,omitempty"`
	// Sum of position quantities among all long open positions on the account.
	LongOpenPositionsQty *common.Decimal `protobuf:"bytes,21,opt,name=long_open_positions_qty,json=longOpenPositionsQty" json:"long_open_positions_qty,omitempty"`
	// Sum of position quantities among all short open positions on the account.
	ShortOpenPositionsQty *common.Decimal `protobuf:"bytes,22,opt,name=short_open_positions_qty,json=shortOpenPositionsQty" json:"short_open_positions_qty,omitempty"`
	// Minimal value of days till contract expiration (in calendar days, not trading) among
	// all open positions on contracts with expiration date on the account.
	// Not set if there are no open positions on the account.
	MinDaysTillPositionContractExpiration *uint32 `protobuf:"varint,23,opt,name=min_days_till_position_contract_expiration,json=minDaysTillPositionContractExpiration" json:"min_days_till_position_contract_expiration,omitempty"`
	// Limit of the maximum value of purchasing power for the account.
	// Can be empty e.g. when the account is a group account member.
	// See trading_account_2.Account.is_group_member.
	PurchasingPowerLimit *float64 `protobuf:"fixed64,27,opt,name=purchasing_power_limit,json=purchasingPowerLimit" json:"purchasing_power_limit,omitempty"`
	// Option premium.
	OptionPremium *float64 `protobuf:"fixed64,30,opt,name=option_premium,json=optionPremium" json:"option_premium,omitempty"`
}

func (x *AccountSummaryStatus) Reset() {
	*x = AccountSummaryStatus{}
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountSummaryStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountSummaryStatus) ProtoMessage() {}

func (x *AccountSummaryStatus) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountSummaryStatus.ProtoReflect.Descriptor instead.
func (*AccountSummaryStatus) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trade_routing_2_proto_rawDescGZIP(), []int{12}
}

func (x *AccountSummaryStatus) GetSubscriptionIds() []uint32 {
	if x != nil {
		return x.SubscriptionIds
	}
	return nil
}

func (x *AccountSummaryStatus) GetIsSnapshot() bool {
	if x != nil && x.IsSnapshot != nil {
		return *x.IsSnapshot
	}
	return false
}

func (x *AccountSummaryStatus) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *AccountSummaryStatus) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *AccountSummaryStatus) GetClearedFields() []uint32 {
	if x != nil {
		return x.ClearedFields
	}
	return nil
}

func (x *AccountSummaryStatus) GetFailedFields() []uint32 {
	if x != nil {
		return x.FailedFields
	}
	return nil
}

func (x *AccountSummaryStatus) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

func (x *AccountSummaryStatus) GetTotalMargin() float64 {
	if x != nil && x.TotalMargin != nil {
		return *x.TotalMargin
	}
	return 0
}

func (x *AccountSummaryStatus) GetPositionMargin() float64 {
	if x != nil && x.PositionMargin != nil {
		return *x.PositionMargin
	}
	return 0
}

func (x *AccountSummaryStatus) GetPurchasingPower() float64 {
	if x != nil && x.PurchasingPower != nil {
		return *x.PurchasingPower
	}
	return 0
}

func (x *AccountSummaryStatus) GetOte() float64 {
	if x != nil && x.Ote != nil {
		return *x.Ote
	}
	return 0
}

func (x *AccountSummaryStatus) GetMvo() float64 {
	if x != nil && x.Mvo != nil {
		return *x.Mvo
	}
	return 0
}

func (x *AccountSummaryStatus) GetMvf() float64 {
	if x != nil && x.Mvf != nil {
		return *x.Mvf
	}
	return 0
}

func (x *AccountSummaryStatus) GetMarginCredit() float64 {
	if x != nil && x.MarginCredit != nil {
		return *x.MarginCredit
	}
	return 0
}

func (x *AccountSummaryStatus) GetCashExcess() float64 {
	if x != nil && x.CashExcess != nil {
		return *x.CashExcess
	}
	return 0
}

func (x *AccountSummaryStatus) GetCurrentBalance() float64 {
	if x != nil && x.CurrentBalance != nil {
		return *x.CurrentBalance
	}
	return 0
}

func (x *AccountSummaryStatus) GetProfitLoss() float64 {
	if x != nil && x.ProfitLoss != nil {
		return *x.ProfitLoss
	}
	return 0
}

func (x *AccountSummaryStatus) GetUnrealizedProfitLoss() float64 {
	if x != nil && x.UnrealizedProfitLoss != nil {
		return *x.UnrealizedProfitLoss
	}
	return 0
}

func (x *AccountSummaryStatus) GetYesterdayBalance() float64 {
	if x != nil && x.YesterdayBalance != nil {
		return *x.YesterdayBalance
	}
	return 0
}

func (x *AccountSummaryStatus) GetYesterdayOte() float64 {
	if x != nil && x.YesterdayOte != nil {
		return *x.YesterdayOte
	}
	return 0
}

func (x *AccountSummaryStatus) GetYesterdayMvo() float64 {
	if x != nil && x.YesterdayMvo != nil {
		return *x.YesterdayMvo
	}
	return 0
}

func (x *AccountSummaryStatus) GetYesterdayCollateral() float64 {
	if x != nil && x.YesterdayCollateral != nil {
		return *x.YesterdayCollateral
	}
	return 0
}

func (x *AccountSummaryStatus) GetNetChangePc() float64 {
	if x != nil && x.NetChangePc != nil {
		return *x.NetChangePc
	}
	return 0
}

func (x *AccountSummaryStatus) GetTotalFilledQty() *common.Decimal {
	if x != nil {
		return x.TotalFilledQty
	}
	return nil
}

func (x *AccountSummaryStatus) GetTotalFilledOrders() uint32 {
	if x != nil && x.TotalFilledOrders != nil {
		return *x.TotalFilledOrders
	}
	return 0
}

func (x *AccountSummaryStatus) GetTotalParkedOrders() uint32 {
	if x != nil && x.TotalParkedOrders != nil {
		return *x.TotalParkedOrders
	}
	return 0
}

func (x *AccountSummaryStatus) GetTotalWorkingOrders() uint32 {
	if x != nil && x.TotalWorkingOrders != nil {
		return *x.TotalWorkingOrders
	}
	return 0
}

func (x *AccountSummaryStatus) GetLongOpenPositionsQty() *common.Decimal {
	if x != nil {
		return x.LongOpenPositionsQty
	}
	return nil
}

func (x *AccountSummaryStatus) GetShortOpenPositionsQty() *common.Decimal {
	if x != nil {
		return x.ShortOpenPositionsQty
	}
	return nil
}

func (x *AccountSummaryStatus) GetMinDaysTillPositionContractExpiration() uint32 {
	if x != nil && x.MinDaysTillPositionContractExpiration != nil {
		return *x.MinDaysTillPositionContractExpiration
	}
	return 0
}

func (x *AccountSummaryStatus) GetPurchasingPowerLimit() float64 {
	if x != nil && x.PurchasingPowerLimit != nil {
		return *x.PurchasingPowerLimit
	}
	return 0
}

func (x *AccountSummaryStatus) GetOptionPremium() float64 {
	if x != nil && x.OptionPremium != nil {
		return *x.OptionPremium
	}
	return 0
}

// Exchange position status.
// It contains positions received from exchange for an account on a per-contract basis,
// both open positions and realized P&L for closed positions (if available from exchange).
// There could be multiple position records for a given account. It is also
// possible for an account to have zero position records.
type ExchangePositionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of trade subscription IDs this status is related to.
	SubscriptionIds []uint32 `protobuf:"varint,1,rep,name=subscription_ids,json=subscriptionIds" json:"subscription_ids,omitempty"`
	// True means a snapshot of all positions for the account has been sent
	// (possibly in multiple ExchangePositionStatus messages, see is_complete field),
	// so client should replace any local cache with this data.
	// False or empty means this status contains only positions with changes.
	// Note: snapshots (is_snapshot=true) are possible even when ExchangePositionStatus
	// is sent as an update. This will occur when server cannot update individual
	// positions due to exchange limitations.
	IsSnapshot *bool `protobuf:"varint,2,opt,name=is_snapshot,json=isSnapshot" json:"is_snapshot,omitempty"`
	// True means that requested data is complete at the moment for the account,
	// false means more report messages are expected for completeness.
	IsComplete *bool `protobuf:"varint,3,opt,name=is_complete,json=isComplete,def=1" json:"is_complete,omitempty"`
	// Account ID for which positions are supplied.
	// It is a required field.
	AccountId *int32 `protobuf:"zigzag32,4,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// Positions for this account.
	Positions []*ExchangePosition `protobuf:"bytes,5,rep,name=positions" json:"positions,omitempty"`
}

// Default values for ExchangePositionStatus fields.
const (
	Default_ExchangePositionStatus_IsComplete = bool(true)
)

func (x *ExchangePositionStatus) Reset() {
	*x = ExchangePositionStatus{}
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExchangePositionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangePositionStatus) ProtoMessage() {}

func (x *ExchangePositionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangePositionStatus.ProtoReflect.Descriptor instead.
func (*ExchangePositionStatus) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trade_routing_2_proto_rawDescGZIP(), []int{13}
}

func (x *ExchangePositionStatus) GetSubscriptionIds() []uint32 {
	if x != nil {
		return x.SubscriptionIds
	}
	return nil
}

func (x *ExchangePositionStatus) GetIsSnapshot() bool {
	if x != nil && x.IsSnapshot != nil {
		return *x.IsSnapshot
	}
	return false
}

func (x *ExchangePositionStatus) GetIsComplete() bool {
	if x != nil && x.IsComplete != nil {
		return *x.IsComplete
	}
	return Default_ExchangePositionStatus_IsComplete
}

func (x *ExchangePositionStatus) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *ExchangePositionStatus) GetPositions() []*ExchangePosition {
	if x != nil {
		return x.Positions
	}
	return nil
}

// Contains the position for a single contract received from exchange.
// Notes:
// 1) If exchange reports a single open position with total qty and
// weighted average price, there will be one message in open_positions field.
// 2) If exchange reports individual qty and price for each component of
// an overall open position, there will be many messages in open_positions field.
// 3) If exchange supports simultaneous long and short positions, there
// could be ExchangeOpenPosition messages on both sides in open_positions field.
// 4) If the account has no open positions but a realized_pl to report, there
// will be an empty open_positions field.
type ExchangePosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True means a snapshot of all positions for this contract for the account
	// has been sent (possibly in multiple ExchangePositionStatus messages,
	// see ExchangePositionStatus.is_complete field),
	// so client should replace any local cache with data in this message.
	// False or empty means this status contains realized_profit_loss and
	// extra_attributes, plus only changed open positions in open_positions field.
	// Note: snapshots (is_snapshot=true) are possible even when ExchangePosition is sent as an
	// update. This will occur when server cannot update individual account positions
	// due to exchange limitations.
	IsSnapshot *bool `protobuf:"varint,1,opt,name=is_snapshot,json=isSnapshot" json:"is_snapshot,omitempty"`
	// Position contract.
	// It is a required field.
	ContractId *uint32 `protobuf:"varint,2,opt,name=contract_id,json=contractId" json:"contract_id,omitempty"`
	// Profit/ loss (in contract currency) for this position, if available from exchange.
	RealizedProfitLoss *float64 `protobuf:"fixed64,3,opt,name=realized_profit_loss,json=realizedProfitLoss" json:"realized_profit_loss,omitempty"`
	// Details for open position.
	OpenPositions []*ExchangeOpenPosition `protobuf:"bytes,4,rep,name=open_positions,json=openPositions" json:"open_positions,omitempty"`
	// Extra attributes.
	// They are present (the full set) if exchange provides additional attributes that clients can display.
	ExtraAttributes []*AccountExtraAttribute `protobuf:"bytes,5,rep,name=extra_attributes,json=extraAttributes" json:"extra_attributes,omitempty"`
}

func (x *ExchangePosition) Reset() {
	*x = ExchangePosition{}
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExchangePosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangePosition) ProtoMessage() {}

func (x *ExchangePosition) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangePosition.ProtoReflect.Descriptor instead.
func (*ExchangePosition) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trade_routing_2_proto_rawDescGZIP(), []int{14}
}

func (x *ExchangePosition) GetIsSnapshot() bool {
	if x != nil && x.IsSnapshot != nil {
		return *x.IsSnapshot
	}
	return false
}

func (x *ExchangePosition) GetContractId() uint32 {
	if x != nil && x.ContractId != nil {
		return *x.ContractId
	}
	return 0
}

func (x *ExchangePosition) GetRealizedProfitLoss() float64 {
	if x != nil && x.RealizedProfitLoss != nil {
		return *x.RealizedProfitLoss
	}
	return 0
}

func (x *ExchangePosition) GetOpenPositions() []*ExchangeOpenPosition {
	if x != nil {
		return x.OpenPositions
	}
	return nil
}

func (x *ExchangePosition) GetExtraAttributes() []*AccountExtraAttribute {
	if x != nil {
		return x.ExtraAttributes
	}
	return nil
}

// Open position details.
type ExchangeOpenPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier for this record.
	// In case of non-snapshot update, client should use this ID to update corresponding
	// entry in its local cache.
	// It is a required field.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// True if the open position is short (result of a sell operation), long otherwise.
	IsShort *bool `protobuf:"varint,2,opt,name=is_short,json=isShort" json:"is_short,omitempty"`
	// Open position quantity.
	// It is a required field.
	Qty *common.Decimal `protobuf:"bytes,3,opt,name=qty" json:"qty,omitempty"`
	// Position price (in correct price format).
	// It is a required field.
	Price *float64 `protobuf:"fixed64,4,opt,name=price" json:"price,omitempty"`
	// Extra attributes.
	// They are present if exchange provides additional attributes for this open position record
	// that clients can display.
	ExtraAttributes []*AccountExtraAttribute `protobuf:"bytes,5,rep,name=extra_attributes,json=extraAttributes" json:"extra_attributes,omitempty"`
}

func (x *ExchangeOpenPosition) Reset() {
	*x = ExchangeOpenPosition{}
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExchangeOpenPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeOpenPosition) ProtoMessage() {}

func (x *ExchangeOpenPosition) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeOpenPosition.ProtoReflect.Descriptor instead.
func (*ExchangeOpenPosition) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trade_routing_2_proto_rawDescGZIP(), []int{15}
}

func (x *ExchangeOpenPosition) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ExchangeOpenPosition) GetIsShort() bool {
	if x != nil && x.IsShort != nil {
		return *x.IsShort
	}
	return false
}

func (x *ExchangeOpenPosition) GetQty() *common.Decimal {
	if x != nil {
		return x.Qty
	}
	return nil
}

func (x *ExchangeOpenPosition) GetPrice() float64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *ExchangeOpenPosition) GetExtraAttributes() []*AccountExtraAttribute {
	if x != nil {
		return x.ExtraAttributes
	}
	return nil
}

// Exchange balance status.
// It contains current balances received from exchange for an account on a per-currency basis.
// Note: we support at most one balance record for a given currency. It is also
// possible for an account to have zero balance records.
type ExchangeBalanceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of trade subscription IDs this status is related to.
	SubscriptionIds []uint32 `protobuf:"varint,1,rep,name=subscription_ids,json=subscriptionIds" json:"subscription_ids,omitempty"`
	// True means this status contains a complete snapshot of all balances
	// for the account, so client should replace any local cache with this data.
	// False or empty means this status contains only balances with changes.
	// Note that each ExchangeBalanceStatus message is considered as complete,
	// so we do not need 'is_complete' field here.
	IsSnapshot *bool `protobuf:"varint,2,opt,name=is_snapshot,json=isSnapshot" json:"is_snapshot,omitempty"`
	// Account ID for which balances are supplied
	// It is a required field.
	AccountId *int32 `protobuf:"zigzag32,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// Balances for this account.
	Balances []*ExchangeCurrencyBalance `protobuf:"bytes,4,rep,name=balances" json:"balances,omitempty"`
}

func (x *ExchangeBalanceStatus) Reset() {
	*x = ExchangeBalanceStatus{}
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExchangeBalanceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeBalanceStatus) ProtoMessage() {}

func (x *ExchangeBalanceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeBalanceStatus.ProtoReflect.Descriptor instead.
func (*ExchangeBalanceStatus) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trade_routing_2_proto_rawDescGZIP(), []int{16}
}

func (x *ExchangeBalanceStatus) GetSubscriptionIds() []uint32 {
	if x != nil {
		return x.SubscriptionIds
	}
	return nil
}

func (x *ExchangeBalanceStatus) GetIsSnapshot() bool {
	if x != nil && x.IsSnapshot != nil {
		return *x.IsSnapshot
	}
	return false
}

func (x *ExchangeBalanceStatus) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *ExchangeBalanceStatus) GetBalances() []*ExchangeCurrencyBalance {
	if x != nil {
		return x.Balances
	}
	return nil
}

// Contains a balance record for a single currency.
type ExchangeCurrencyBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ISO-4217-based currency code.
	// Note that cryptocurrencies use codes that are ISO-4217-style, though usually not actual ISO codes.
	// It is a required field.
	Currency *string `protobuf:"bytes,1,opt,name=currency" json:"currency,omitempty"`
	// Current cash balance in this currency.
	// It is a required field.
	CashBalance *float64 `protobuf:"fixed64,2,opt,name=cash_balance,json=cashBalance" json:"cash_balance,omitempty"`
	// Extra attributes.
	// They are present if exchange provides additional attributes that clients can display.
	ExtraAttributes []*AccountExtraAttribute `protobuf:"bytes,3,rep,name=extra_attributes,json=extraAttributes" json:"extra_attributes,omitempty"`
}

func (x *ExchangeCurrencyBalance) Reset() {
	*x = ExchangeCurrencyBalance{}
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExchangeCurrencyBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeCurrencyBalance) ProtoMessage() {}

func (x *ExchangeCurrencyBalance) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeCurrencyBalance.ProtoReflect.Descriptor instead.
func (*ExchangeCurrencyBalance) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trade_routing_2_proto_rawDescGZIP(), []int{17}
}

func (x *ExchangeCurrencyBalance) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *ExchangeCurrencyBalance) GetCashBalance() float64 {
	if x != nil && x.CashBalance != nil {
		return *x.CashBalance
	}
	return 0
}

func (x *ExchangeCurrencyBalance) GetExtraAttributes() []*AccountExtraAttribute {
	if x != nil {
		return x.ExtraAttributes
	}
	return nil
}

// Account-related extra element as key-value pair.
type AccountExtraAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Attribute name.
	// It is a required field.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// If provided, this is a name for the attribute suitable for client
	// display purposes. If not provided, clients can fall back to displaying name field.
	DisplayName *string `protobuf:"bytes,2,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	// Attribute value.
	Value *string `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (x *AccountExtraAttribute) Reset() {
	*x = AccountExtraAttribute{}
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountExtraAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountExtraAttribute) ProtoMessage() {}

func (x *AccountExtraAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountExtraAttribute.ProtoReflect.Descriptor instead.
func (*AccountExtraAttribute) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trade_routing_2_proto_rawDescGZIP(), []int{18}
}

func (x *AccountExtraAttribute) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *AccountExtraAttribute) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *AccountExtraAttribute) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// Historical orders request.
type HistoricalOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Only orders from specified business date (inclusively) are to be returned
	// (date only value in time format).
	// Working and parked orders of the current day are returned despite the
	// from_date, to_date values.
	// If order was not cleared for several days, it will be present in
	// a report if one of those days hits the requested range. E.g., order was
	// filled on Friday, statement happened on Monday, if request is done for
	// a Saturday, order will be present in the report.
	// Note: Starting date must not be more than 30 days back from now.
	FromDate *int64 `protobuf:"zigzag64,1,req,name=from_date,json=fromDate" json:"from_date,omitempty"`
	// Only orders till specified business date (inclusively) is to be returned (date only value in time format).
	// Current business day if the field is omitted.
	ToDate *int64 `protobuf:"zigzag64,2,opt,name=to_date,json=toDate" json:"to_date,omitempty"`
	// Filter orders by account. It is required to leave account_ids list empty to select all accounts of the user.
	AccountIds []int32 `protobuf:"zigzag32,3,rep,name=account_ids,json=accountIds" json:"account_ids,omitempty"`
	// If this field set to true, statuses on orders with ORDER_TYPE_CROSS type will be
	// included into responses. See CrossOrderParameters message.
	// Note that order statuses with cross order type are excluded only if
	// include_cross_orders set to false (or empty) and ORDER_TYPE_CROSS type is not included
	// into order_snapshot_filter.order_types.
	IncludeCrossOrders *bool `protobuf:"varint,4,opt,name=include_cross_orders,json=includeCrossOrders" json:"include_cross_orders,omitempty"`
	// Only order statuses, transaction statuses that match the filter are included in a report.
	// By default no filtration is done by the filter.
	OrderSnapshotFilter *OrderSnapshotFilter `protobuf:"bytes,5,opt,name=order_snapshot_filter,json=orderSnapshotFilter" json:"order_snapshot_filter,omitempty"`
	// No more than specified number of order statuses will be returned.
	// Zero or omitted means no limit.
	// If there are more order statuses than specified, HistoricalOrdersReport.order_status_limit_reached is set in true
	// in last report for the request.
	MaxOrderStatusCount *uint32 `protobuf:"varint,6,opt,name=max_order_status_count,json=maxOrderStatusCount" json:"max_order_status_count,omitempty"`
	// No more than specified number of transaction statuses within all order statuses will be returned.
	// Zero or omitted means no limit.
	// If there are more transaction statuses than specified, HistoricalOrdersReport.transaction_status_limit_reached
	// is set in true in last report for the request.
	// Note: Limitation is aligned on order status. So, if next order status transaction count leads to limit violation
	// whole order status is not included into the report.
	MaxTransactionStatusCount *uint32 `protobuf:"varint,7,opt,name=max_transaction_status_count,json=maxTransactionStatusCount" json:"max_transaction_status_count,omitempty"`
	// If this field set (to the original order_id, not any modifies), only child orders associated with that parent
	// order will be returned. Results do not include the parent order itself. See OrderStatus.chain_order_id.
	// To get algo strategy child orders, set HistoricalOrdersRequest.include_algo_strategy_child_orders to true.
	ParentChainOrderId *string `protobuf:"bytes,8,opt,name=parent_chain_order_id,json=parentChainOrderId" json:"parent_chain_order_id,omitempty"`
	// If this field set to true, child orders of algo strategies will be included
	// into responses.
	// See TradeSubscription.include_algo_strategy_child_orders.
	IncludeAlgoStrategyChildOrders *bool `protobuf:"varint,9,opt,name=include_algo_strategy_child_orders,json=includeAlgoStrategyChildOrders" json:"include_algo_strategy_child_orders,omitempty"`
}

func (x *HistoricalOrdersRequest) Reset() {
	*x = HistoricalOrdersRequest{}
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HistoricalOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalOrdersRequest) ProtoMessage() {}

func (x *HistoricalOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricalOrdersRequest.ProtoReflect.Descriptor instead.
func (*HistoricalOrdersRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trade_routing_2_proto_rawDescGZIP(), []int{19}
}

func (x *HistoricalOrdersRequest) GetFromDate() int64 {
	if x != nil && x.FromDate != nil {
		return *x.FromDate
	}
	return 0
}

func (x *HistoricalOrdersRequest) GetToDate() int64 {
	if x != nil && x.ToDate != nil {
		return *x.ToDate
	}
	return 0
}

func (x *HistoricalOrdersRequest) GetAccountIds() []int32 {
	if x != nil {
		return x.AccountIds
	}
	return nil
}

func (x *HistoricalOrdersRequest) GetIncludeCrossOrders() bool {
	if x != nil && x.IncludeCrossOrders != nil {
		return *x.IncludeCrossOrders
	}
	return false
}

func (x *HistoricalOrdersRequest) GetOrderSnapshotFilter() *OrderSnapshotFilter {
	if x != nil {
		return x.OrderSnapshotFilter
	}
	return nil
}

func (x *HistoricalOrdersRequest) GetMaxOrderStatusCount() uint32 {
	if x != nil && x.MaxOrderStatusCount != nil {
		return *x.MaxOrderStatusCount
	}
	return 0
}

func (x *HistoricalOrdersRequest) GetMaxTransactionStatusCount() uint32 {
	if x != nil && x.MaxTransactionStatusCount != nil {
		return *x.MaxTransactionStatusCount
	}
	return 0
}

func (x *HistoricalOrdersRequest) GetParentChainOrderId() string {
	if x != nil && x.ParentChainOrderId != nil {
		return *x.ParentChainOrderId
	}
	return ""
}

func (x *HistoricalOrdersRequest) GetIncludeAlgoStrategyChildOrders() bool {
	if x != nil && x.IncludeAlgoStrategyChildOrders != nil {
		return *x.IncludeAlgoStrategyChildOrders
	}
	return false
}

// Response for historical orders request.
type HistoricalOrdersReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of order statuses matching historical order filter.
	OrderStatuses []*OrderStatus `protobuf:"bytes,1,rep,name=order_statuses,json=orderStatuses" json:"order_statuses,omitempty"`
	// Indicator that not all order statuses are returned.
	// Limit by HistoricalOrdersRequest.max_order_status_count is reached.
	OrderStatusLimitReached *bool `protobuf:"varint,2,opt,name=order_status_limit_reached,json=orderStatusLimitReached" json:"order_status_limit_reached,omitempty"`
	// Indicator that not all order statuses are returned.
	// Limit by HistoricalOrdersRequest.max_transaction_status_count is reached.
	TransactionStatusLimitReached *bool `protobuf:"varint,3,opt,name=transaction_status_limit_reached,json=transactionStatusLimitReached" json:"transaction_status_limit_reached,omitempty"`
}

func (x *HistoricalOrdersReport) Reset() {
	*x = HistoricalOrdersReport{}
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HistoricalOrdersReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalOrdersReport) ProtoMessage() {}

func (x *HistoricalOrdersReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricalOrdersReport.ProtoReflect.Descriptor instead.
func (*HistoricalOrdersReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trade_routing_2_proto_rawDescGZIP(), []int{20}
}

func (x *HistoricalOrdersReport) GetOrderStatuses() []*OrderStatus {
	if x != nil {
		return x.OrderStatuses
	}
	return nil
}

func (x *HistoricalOrdersReport) GetOrderStatusLimitReached() bool {
	if x != nil && x.OrderStatusLimitReached != nil {
		return *x.OrderStatusLimitReached
	}
	return false
}

func (x *HistoricalOrdersReport) GetTransactionStatusLimitReached() bool {
	if x != nil && x.TransactionStatusLimitReached != nil {
		return *x.TransactionStatusLimitReached
	}
	return false
}

// Request for trading feature entitlements.
type BrokerageTradingFeatureEntitlementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Account ID in CQG trade routing system.
	// If no account supplied, data is returned for ALL accounts trader is authorized on.
	AccountIds []int32 `protobuf:"zigzag32,1,rep,name=account_ids,json=accountIds" json:"account_ids,omitempty"`
}

func (x *BrokerageTradingFeatureEntitlementRequest) Reset() {
	*x = BrokerageTradingFeatureEntitlementRequest{}
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BrokerageTradingFeatureEntitlementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrokerageTradingFeatureEntitlementRequest) ProtoMessage() {}

func (x *BrokerageTradingFeatureEntitlementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrokerageTradingFeatureEntitlementRequest.ProtoReflect.Descriptor instead.
func (*BrokerageTradingFeatureEntitlementRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trade_routing_2_proto_rawDescGZIP(), []int{21}
}

func (x *BrokerageTradingFeatureEntitlementRequest) GetAccountIds() []int32 {
	if x != nil {
		return x.AccountIds
	}
	return nil
}

// Report with trading feature entitlements.
type BrokerageTradingFeatureEntitlementReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set of trading feature entitlements.
	TradingFeatureEntitlements []*TradingFeatureEntitlementEntry `protobuf:"bytes,1,rep,name=trading_feature_entitlements,json=tradingFeatureEntitlements" json:"trading_feature_entitlements,omitempty"`
}

func (x *BrokerageTradingFeatureEntitlementReport) Reset() {
	*x = BrokerageTradingFeatureEntitlementReport{}
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BrokerageTradingFeatureEntitlementReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrokerageTradingFeatureEntitlementReport) ProtoMessage() {}

func (x *BrokerageTradingFeatureEntitlementReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrokerageTradingFeatureEntitlementReport.ProtoReflect.Descriptor instead.
func (*BrokerageTradingFeatureEntitlementReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trade_routing_2_proto_rawDescGZIP(), []int{22}
}

func (x *BrokerageTradingFeatureEntitlementReport) GetTradingFeatureEntitlements() []*TradingFeatureEntitlementEntry {
	if x != nil {
		return x.TradingFeatureEntitlements
	}
	return nil
}

// Account/brokerage-specific trading feature entitlement.
// For future compatibility unknown entitlements should be ignored.
type TradingFeatureEntitlementEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Account ID in CQG trade routing system that corresponds to trading feature entitlement.
	AccountId *int32 `protobuf:"zigzag32,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// Trading feature entitlement.
	// This field is associated with TradingFeatureEntitlement enum type.
	Entitlement *uint32 `protobuf:"varint,2,opt,name=entitlement" json:"entitlement,omitempty"`
}

func (x *TradingFeatureEntitlementEntry) Reset() {
	*x = TradingFeatureEntitlementEntry{}
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradingFeatureEntitlementEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingFeatureEntitlementEntry) ProtoMessage() {}

func (x *TradingFeatureEntitlementEntry) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingFeatureEntitlementEntry.ProtoReflect.Descriptor instead.
func (*TradingFeatureEntitlementEntry) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trade_routing_2_proto_rawDescGZIP(), []int{23}
}

func (x *TradingFeatureEntitlementEntry) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *TradingFeatureEntitlementEntry) GetEntitlement() uint32 {
	if x != nil && x.Entitlement != nil {
		return *x.Entitlement
	}
	return 0
}

// Provides care auto activation parameters for the user.
type CareAutoActivationParametersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CareAutoActivationParametersRequest) Reset() {
	*x = CareAutoActivationParametersRequest{}
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CareAutoActivationParametersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CareAutoActivationParametersRequest) ProtoMessage() {}

func (x *CareAutoActivationParametersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CareAutoActivationParametersRequest.ProtoReflect.Descriptor instead.
func (*CareAutoActivationParametersRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trade_routing_2_proto_rawDescGZIP(), []int{24}
}

// In case of an update the report contains full list of available parameters.
type CareAutoActivationParametersReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Care auto activation parameters for the user.
	Parameters []*CareAutoActivationParameters `protobuf:"bytes,1,rep,name=parameters" json:"parameters,omitempty"`
}

func (x *CareAutoActivationParametersReport) Reset() {
	*x = CareAutoActivationParametersReport{}
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CareAutoActivationParametersReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CareAutoActivationParametersReport) ProtoMessage() {}

func (x *CareAutoActivationParametersReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CareAutoActivationParametersReport.ProtoReflect.Descriptor instead.
func (*CareAutoActivationParametersReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trade_routing_2_proto_rawDescGZIP(), []int{25}
}

func (x *CareAutoActivationParametersReport) GetParameters() []*CareAutoActivationParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type CareAutoActivationParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if the user is authorized for auto activation care order for the brokerage.
	IsCurrentUserResponsibleForAutoActivation *bool `protobuf:"varint,1,opt,name=is_current_user_responsible_for_auto_activation,json=isCurrentUserResponsibleForAutoActivation" json:"is_current_user_responsible_for_auto_activation,omitempty"`
	// Brokerage ID.
	BrokerageId *uint32 `protobuf:"varint,2,opt,name=brokerage_id,json=brokerageId" json:"brokerage_id,omitempty"`
	// Max order quantity allowed for Care Auto Activation.
	// Uninitialized value means no limit and auto activate orders of any size.
	MaxOrderQty *uint32 `protobuf:"varint,3,opt,name=max_order_qty,json=maxOrderQty" json:"max_order_qty,omitempty"`
}

func (x *CareAutoActivationParameters) Reset() {
	*x = CareAutoActivationParameters{}
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CareAutoActivationParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CareAutoActivationParameters) ProtoMessage() {}

func (x *CareAutoActivationParameters) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CareAutoActivationParameters.ProtoReflect.Descriptor instead.
func (*CareAutoActivationParameters) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trade_routing_2_proto_rawDescGZIP(), []int{26}
}

func (x *CareAutoActivationParameters) GetIsCurrentUserResponsibleForAutoActivation() bool {
	if x != nil && x.IsCurrentUserResponsibleForAutoActivation != nil {
		return *x.IsCurrentUserResponsibleForAutoActivation
	}
	return false
}

func (x *CareAutoActivationParameters) GetBrokerageId() uint32 {
	if x != nil && x.BrokerageId != nil {
		return *x.BrokerageId
	}
	return 0
}

func (x *CareAutoActivationParameters) GetMaxOrderQty() uint32 {
	if x != nil && x.MaxOrderQty != nil {
		return *x.MaxOrderQty
	}
	return 0
}

// Request for account risk parameters for all authorized accounts.
type AccountRiskParametersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AccountRiskParametersRequest) Reset() {
	*x = AccountRiskParametersRequest{}
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountRiskParametersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountRiskParametersRequest) ProtoMessage() {}

func (x *AccountRiskParametersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountRiskParametersRequest.ProtoReflect.Descriptor instead.
func (*AccountRiskParametersRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trade_routing_2_proto_rawDescGZIP(), []int{27}
}

// Report with account risk parameters.
type AccountRiskParametersReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of account risk parameters per account.
	AccountRiskParameters []*AccountRiskParameters `protobuf:"bytes,1,rep,name=account_risk_parameters,json=accountRiskParameters" json:"account_risk_parameters,omitempty"`
}

func (x *AccountRiskParametersReport) Reset() {
	*x = AccountRiskParametersReport{}
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountRiskParametersReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountRiskParametersReport) ProtoMessage() {}

func (x *AccountRiskParametersReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountRiskParametersReport.ProtoReflect.Descriptor instead.
func (*AccountRiskParametersReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trade_routing_2_proto_rawDescGZIP(), []int{28}
}

func (x *AccountRiskParametersReport) GetAccountRiskParameters() []*AccountRiskParameters {
	if x != nil {
		return x.AccountRiskParameters
	}
	return nil
}

// Risk parameters for the account.
type AccountRiskParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Account ID in CQG trade routing system.
	// This is a required field.
	AccountId *int32 `protobuf:"zigzag32,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// True if currency conversions should use real-time rates (real-time rate sources or constant currency rates,
	// see trading_account_2.CurrencyRateSource) for the account, if available. E.g. for calculation of OTE.
	// False or empty if the account prefers to use brokerage daily currency rates only
	// (see trading_account_2.BrokerageCurrencyRates).
	UseRealtimeCurrencyRates *bool `protobuf:"varint,2,opt,name=use_realtime_currency_rates,json=useRealtimeCurrencyRates" json:"use_realtime_currency_rates,omitempty"`
}

func (x *AccountRiskParameters) Reset() {
	*x = AccountRiskParameters{}
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountRiskParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountRiskParameters) ProtoMessage() {}

func (x *AccountRiskParameters) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_trade_routing_2_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountRiskParameters.ProtoReflect.Descriptor instead.
func (*AccountRiskParameters) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_trade_routing_2_proto_rawDescGZIP(), []int{29}
}

func (x *AccountRiskParameters) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *AccountRiskParameters) GetUseRealtimeCurrencyRates() bool {
	if x != nil && x.UseRealtimeCurrencyRates != nil {
		return *x.UseRealtimeCurrencyRates
	}
	return false
}

var File_protos_WebAPI_trade_routing_2_proto protoreflect.FileDescriptor

var file_protos_WebAPI_trade_routing_2_proto_rawDesc = []byte{
	0x0a, 0x23, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49, 0x2f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x32, 0x1a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57,
	0x65, 0x62, 0x41, 0x50, 0x49, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57,
	0x65, 0x62, 0x41, 0x50, 0x49, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41,
	0x50, 0x49, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f,
	0x57, 0x65, 0x62, 0x41, 0x50, 0x49, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x5f, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x87, 0x0c,
	0x0a, 0x11, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x12, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x23, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x12, 0x42, 0x02, 0x18, 0x01, 0x52, 0x16, 0x6c,
	0x61, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x74,
	0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x60, 0x0a, 0x1f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1b, 0x6c, 0x61, 0x73, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x74, 0x63, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x6b, 0x69, 0x70, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x6b, 0x69, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f,
	0x6e, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x72,
	0x61, 0x64, 0x61, 0x79, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x74, 0x72, 0x61, 0x64, 0x61, 0x79, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x1d, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43,
	0x72, 0x6f, 0x73, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x4a, 0x0a, 0x22, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41,
	0x6c, 0x67, 0x6f, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x43, 0x68, 0x69, 0x6c, 0x64,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x58, 0x0a, 0x15, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x32, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x13, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x67, 0x0a, 0x1a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x18, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0xf4, 0x01, 0x0a, 0x11, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x19, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x53, 0x10, 0x01, 0x12, 0x20,
	0x0a, 0x1c, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x43, 0x4f, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x02,
	0x12, 0x21, 0x0a, 0x1d, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x41, 0x54, 0x45, 0x52, 0x41,
	0x4c, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x04, 0x12, 0x29, 0x0a, 0x25, 0x53,
	0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x4f, 0x50,
	0x45, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x53, 0x10, 0x05, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52,
	0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x10, 0x06,
	0x22, 0x98, 0x01, 0x0a, 0x0f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x53, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x41, 0x4c, 0x45, 0x53, 0x5f, 0x53, 0x45,
	0x52, 0x49, 0x45, 0x53, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x52, 0x4f, 0x4b, 0x45,
	0x52, 0x41, 0x47, 0x45, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x41,
	0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x04, 0x22, 0x6a, 0x0a, 0x11, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x4c, 0x47,
	0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x46, 0x49, 0x46, 0x4f, 0x10, 0x01, 0x12, 0x1b, 0x0a,
	0x17, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49,
	0x54, 0x48, 0x4d, 0x5f, 0x48, 0x42, 0x48, 0x53, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d,
	0x5f, 0x4c, 0x49, 0x46, 0x4f, 0x10, 0x03, 0x22, 0x85, 0x03, 0x0a, 0x17, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b,
	0x74, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xe7, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x1c, 0x0a,
	0x18, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x49, 0x53,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x10, 0x65, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x56, 0x49, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x66, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x67, 0x12, 0x33, 0x0a, 0x2f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52,
	0x49, 0x42, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x53, 0x5f, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x5f, 0x56, 0x49, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x68, 0x22,
	0x73, 0x0a, 0x17, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x12, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x18, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x45, 0x0a, 0x0e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x22, 0xc3, 0x01, 0x0a, 0x13, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x65, 0x73, 0x12, 0x64, 0x0a, 0x19, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x17, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x79, 0x0a, 0x17, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x73, 0x6b, 0x69, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x31, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x65, 0x73, 0x22, 0xc2, 0x02, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x6f, 0x6d, 0x6e, 0x69, 0x62, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4f, 0x6d, 0x6e, 0x69, 0x62, 0x75, 0x73, 0x12,
	0x30, 0x0a, 0x14, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x6e,
	0x5f, 0x64, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4e, 0x6f, 0x6e, 0x44, 0x65, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x50, 0x0a, 0x25, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x7a, 0x65, 0x72, 0x6f, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x5a, 0x65, 0x72, 0x6f, 0x65, 0x64,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x24, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x5a, 0x65, 0x72, 0x6f, 0x65,
	0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x94, 0x04, 0x0a, 0x0e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x10,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x11, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x02, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x13, 0x69, 0x73,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x44, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x32, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x61, 0x0a, 0x19, 0x70, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x32, 0x2e, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x16, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x41, 0x6e, 0x64, 0x53,
	0x61, 0x6c, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x49, 0x0a, 0x11, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x49, 0x0a, 0x16, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x5f, 0x66,
	0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x32, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x74, 0x6f, 0x64, 0x61,
	0x79, 0x46, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0xd7, 0x03, 0x0a, 0x0c, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x11, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x21, 0x0a, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x71, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x51, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x03, 0x71, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52,
	0x03, 0x71, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x01, 0x52, 0x0c, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x12, 0x52, 0x09, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x12,
	0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x28, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x12, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x13, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x11, 0x74, 0x72, 0x61, 0x64, 0x65, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73,
	0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x79, 0x65, 0x73, 0x74,
	0x65, 0x72, 0x64, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x0b, 0x69, 0x73, 0x59, 0x65, 0x73, 0x74, 0x65, 0x72, 0x64, 0x61, 0x79, 0x12,
	0x29, 0x0a, 0x10, 0x73, 0x70, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x70, 0x65, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x15, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x11,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x01, 0x52, 0x12, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x44, 0x0a, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x32,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x0d, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x22, 0xd3, 0x03, 0x0a,
	0x0c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x21, 0x0a,
	0x0a, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x51, 0x74, 0x79,
	0x12, 0x1e, 0x0a, 0x03, 0x71, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x03, 0x71, 0x74, 0x79,
	0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x12, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x12, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x12, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x4a, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a,
	0x0d, 0x69, 0x73, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x02, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x28, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x79, 0x65, 0x73, 0x74, 0x65, 0x72, 0x64,
	0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x0b, 0x69, 0x73, 0x59, 0x65, 0x73, 0x74, 0x65, 0x72, 0x64, 0x61, 0x79, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x70, 0x65, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x73, 0x70, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xb9, 0x03, 0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x11, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x05,
	0x20, 0x02, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x02, 0x28, 0x01, 0x52, 0x0f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x6f, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x76, 0x6f, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x76, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x76, 0x66,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x76, 0x66, 0x12, 0x23, 0x0a, 0x0d, 0x6d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x12, 0x4c, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xd2,
	0x0a, 0x0a, 0x14, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x25,
	0x0a, 0x0e, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x12, 0x29, 0x0a, 0x10, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x70, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6f,
	0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6f, 0x74, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x76, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x76, 0x6f, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x76, 0x66, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x76,
	0x66, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x65,
	0x78, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x61, 0x73,
	0x68, 0x45, 0x78, 0x63, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x4c, 0x6f, 0x73,
	0x73, 0x12, 0x34, 0x0a, 0x16, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x14, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x79, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x64, 0x61, 0x79, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x10, 0x79, 0x65, 0x73, 0x74, 0x65, 0x72, 0x64, 0x61, 0x79, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x79, 0x65, 0x73, 0x74, 0x65, 0x72, 0x64, 0x61,
	0x79, 0x5f, 0x6f, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x79, 0x65, 0x73,
	0x74, 0x65, 0x72, 0x64, 0x61, 0x79, 0x4f, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x79, 0x65, 0x73,
	0x74, 0x65, 0x72, 0x64, 0x61, 0x79, 0x5f, 0x6d, 0x76, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x79, 0x65, 0x73, 0x74, 0x65, 0x72, 0x64, 0x61, 0x79, 0x4d, 0x76, 0x6f, 0x12, 0x31,
	0x0a, 0x14, 0x79, 0x65, 0x73, 0x74, 0x65, 0x72, 0x64, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6c,
	0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x79, 0x65,
	0x73, 0x74, 0x65, 0x72, 0x64, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x70, 0x63, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x50, 0x63, 0x12, 0x36, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66,
	0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0e, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x51, 0x74, 0x79, 0x12, 0x2e, 0x0a,
	0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x46, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a,
	0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x50, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a,
	0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x43, 0x0a, 0x17, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x14,
	0x6c, 0x6f, 0x6e, 0x67, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x51, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x18, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x71, 0x74, 0x79,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x52, 0x15, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x51, 0x74, 0x79, 0x12, 0x59, 0x0a, 0x2a, 0x6d,
	0x69, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x74, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x25, 0x6d, 0x69, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x54, 0x69, 0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x6d,
	0x69, 0x75, 0x6d, 0x22, 0xeb, 0x01, 0x0a, 0x16, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x25, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x3f, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0xa7, 0x02, 0x0a, 0x10, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x4c, 0x0a, 0x0e, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x70, 0x65,
	0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x51, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0xca, 0x01, 0x0a, 0x14,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x12,
	0x1e, 0x0a, 0x03, 0x71, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63,
	0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x03, 0x71, 0x74, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0xc8, 0x01, 0x0a, 0x15, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x44, 0x0a,
	0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x32, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x22, 0xab, 0x01, 0x0a, 0x17, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x61, 0x73, 0x68, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x63, 0x61, 0x73, 0x68, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x51,
	0x0a, 0x10, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x0f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x22, 0x64, 0x0a, 0x15, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf1, 0x03, 0x0a, 0x17, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x12, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x12, 0x52, 0x06, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x11, 0x52, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x58, 0x0a, 0x15,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x32, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x13, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x1c, 0x6d,
	0x61, 0x78, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x19, 0x6d, 0x61, 0x78, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x15,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x4a, 0x0a, 0x22, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x5f,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x41, 0x6c, 0x67, 0x6f, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x43, 0x68, 0x69, 0x6c, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22, 0xdb, 0x01, 0x0a, 0x16,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3b, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x32, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x12, 0x47, 0x0a, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x52, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x22, 0x4c, 0x0a, 0x29, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x11, 0x52, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x28, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x71, 0x0a, 0x1c, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x32, 0x2e, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1a, 0x74, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x61, 0x0a, 0x1e, 0x54, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x25, 0x0a, 0x23, 0x43, 0x61,
	0x72, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x73, 0x0a, 0x22, 0x43, 0x61, 0x72, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x4d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x32, 0x2e, 0x43, 0x61,
	0x72, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0xc9, 0x01, 0x0a, 0x1c, 0x43, 0x61, 0x72, 0x65, 0x41,
	0x75, 0x74, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x62, 0x0a, 0x2f, 0x69, 0x73, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x29, 0x69, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x41, 0x75, 0x74,
	0x6f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x71, 0x74, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x51,
	0x74, 0x79, 0x22, 0x1e, 0x0a, 0x1c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x69, 0x73,
	0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x7d, 0x0a, 0x1b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x69, 0x73,
	0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x5e, 0x0a, 0x17, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x69, 0x73,
	0x6b, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x69, 0x73, 0x6b,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x15, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x22, 0x75, 0x0a, 0x15, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x69, 0x73, 0x6b,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x75, 0x73, 0x65,
	0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18,
	0x75, 0x73, 0x65, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x52, 0x61, 0x74, 0x65, 0x73, 0x2a, 0xee, 0x04, 0x0a, 0x19, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x46, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x4c,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x53,
	0x4b, 0x49, 0x50, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x5f, 0x43, 0x4c, 0x49,
	0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53,
	0x10, 0x03, 0x12, 0x4e, 0x0a, 0x4a, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x45,
	0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x5f,
	0x4e, 0x4f, 0x4e, 0x5f, 0x44, 0x44, 0x54, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x5f, 0x43, 0x4c, 0x49,
	0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53,
	0x10, 0x04, 0x12, 0x31, 0x0a, 0x2d, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x45,
	0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x53,
	0x5f, 0x55, 0x50, 0x10, 0x05, 0x12, 0x33, 0x0a, 0x2f, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x4c, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x06, 0x12, 0x3e, 0x0a, 0x3a, 0x54, 0x52,
	0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x45, 0x4e,
	0x54, 0x49, 0x54, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x4c, 0x4c,
	0x4f, 0x57, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x49, 0x56, 0x45, 0x5f, 0x44, 0x4f,
	0x4d, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x10, 0x08, 0x12, 0x3b, 0x0a, 0x37, 0x54, 0x52,
	0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x45, 0x4e,
	0x54, 0x49, 0x54, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x4c, 0x4c,
	0x4f, 0x57, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x5f, 0x44, 0x4f, 0x4d, 0x5f, 0x54,
	0x52, 0x41, 0x44, 0x45, 0x52, 0x10, 0x09, 0x12, 0x3c, 0x0a, 0x38, 0x54, 0x52, 0x41, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54,
	0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f,
	0x42, 0x55, 0x59, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x5f, 0x43, 0x4c,
	0x49, 0x43, 0x4b, 0x10, 0x0b, 0x12, 0x4a, 0x0a, 0x46, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x4c, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x4b,
	0x49, 0x50, 0x5f, 0x44, 0x44, 0x54, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x5f, 0x43, 0x4c, 0x49, 0x43,
	0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10,
	0x0c, 0x12, 0x46, 0x0a, 0x42, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x45, 0x41,
	0x54, 0x55, 0x52, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x44, 0x49, 0x53, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x46,
	0x4f, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49,
}

var (
	file_protos_WebAPI_trade_routing_2_proto_rawDescOnce sync.Once
	file_protos_WebAPI_trade_routing_2_proto_rawDescData = file_protos_WebAPI_trade_routing_2_proto_rawDesc
)

func file_protos_WebAPI_trade_routing_2_proto_rawDescGZIP() []byte {
	file_protos_WebAPI_trade_routing_2_proto_rawDescOnce.Do(func() {
		file_protos_WebAPI_trade_routing_2_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_WebAPI_trade_routing_2_proto_rawDescData)
	})
	return file_protos_WebAPI_trade_routing_2_proto_rawDescData
}

var file_protos_WebAPI_trade_routing_2_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_protos_WebAPI_trade_routing_2_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_protos_WebAPI_trade_routing_2_proto_goTypes = []any{
	(TradingFeatureEntitlement)(0),                    // 0: trade_routing_2.TradingFeatureEntitlement
	(TradeSubscription_SubscriptionScope)(0),          // 1: trade_routing_2.TradeSubscription.SubscriptionScope
	(TradeSubscription_PublicationType)(0),            // 2: trade_routing_2.TradeSubscription.PublicationType
	(TradeSubscription_MatchingAlgorithm)(0),          // 3: trade_routing_2.TradeSubscription.MatchingAlgorithm
	(TradeSubscriptionStatus_StatusCode)(0),           // 4: trade_routing_2.TradeSubscriptionStatus.StatusCode
	(*TradeSubscription)(nil),                         // 5: trade_routing_2.TradeSubscription
	(*TradeSubscriptionStatus)(nil),                   // 6: trade_routing_2.TradeSubscriptionStatus
	(*TradeSnapshotCompletion)(nil),                   // 7: trade_routing_2.TradeSnapshotCompletion
	(*AccountSummaryParameters)(nil),                  // 8: trade_routing_2.AccountSummaryParameters
	(*OrderSnapshotFilter)(nil),                       // 9: trade_routing_2.OrderSnapshotFilter
	(*TransactionStatusFilter)(nil),                   // 10: trade_routing_2.TransactionStatusFilter
	(*AccountFilter)(nil),                             // 11: trade_routing_2.AccountFilter
	(*PositionStatus)(nil),                            // 12: trade_routing_2.PositionStatus
	(*OpenPosition)(nil),                              // 13: trade_routing_2.OpenPosition
	(*PurchaseAndSalesGroup)(nil),                     // 14: trade_routing_2.PurchaseAndSalesGroup
	(*MatchedTrade)(nil),                              // 15: trade_routing_2.MatchedTrade
	(*CollateralStatus)(nil),                          // 16: trade_routing_2.CollateralStatus
	(*AccountSummaryStatus)(nil),                      // 17: trade_routing_2.AccountSummaryStatus
	(*ExchangePositionStatus)(nil),                    // 18: trade_routing_2.ExchangePositionStatus
	(*ExchangePosition)(nil),                          // 19: trade_routing_2.ExchangePosition
	(*ExchangeOpenPosition)(nil),                      // 20: trade_routing_2.ExchangeOpenPosition
	(*ExchangeBalanceStatus)(nil),                     // 21: trade_routing_2.ExchangeBalanceStatus
	(*ExchangeCurrencyBalance)(nil),                   // 22: trade_routing_2.ExchangeCurrencyBalance
	(*AccountExtraAttribute)(nil),                     // 23: trade_routing_2.AccountExtraAttribute
	(*HistoricalOrdersRequest)(nil),                   // 24: trade_routing_2.HistoricalOrdersRequest
	(*HistoricalOrdersReport)(nil),                    // 25: trade_routing_2.HistoricalOrdersReport
	(*BrokerageTradingFeatureEntitlementRequest)(nil), // 26: trade_routing_2.BrokerageTradingFeatureEntitlementRequest
	(*BrokerageTradingFeatureEntitlementReport)(nil),  // 27: trade_routing_2.BrokerageTradingFeatureEntitlementReport
	(*TradingFeatureEntitlementEntry)(nil),            // 28: trade_routing_2.TradingFeatureEntitlementEntry
	(*CareAutoActivationParametersRequest)(nil),       // 29: trade_routing_2.CareAutoActivationParametersRequest
	(*CareAutoActivationParametersReport)(nil),        // 30: trade_routing_2.CareAutoActivationParametersReport
	(*CareAutoActivationParameters)(nil),              // 31: trade_routing_2.CareAutoActivationParameters
	(*AccountRiskParametersRequest)(nil),              // 32: trade_routing_2.AccountRiskParametersRequest
	(*AccountRiskParametersReport)(nil),               // 33: trade_routing_2.AccountRiskParametersReport
	(*AccountRiskParameters)(nil),                     // 34: trade_routing_2.AccountRiskParameters
	(*timestamppb.Timestamp)(nil),                     // 35: google.protobuf.Timestamp
	(*common.Text)(nil),                               // 36: shared_1.Text
	(*ContractMetadata)(nil),                          // 37: metadata_2.ContractMetadata
	(*Commission)(nil),                                // 38: order_2.Commission
	(*common.Decimal)(nil),                            // 39: cqg.Decimal
	(*OrderStatus)(nil),                               // 40: order_2.OrderStatus
}
var file_protos_WebAPI_trade_routing_2_proto_depIdxs = []int32{
	35, // 0: trade_routing_2.TradeSubscription.last_order_update_utc_timestamp:type_name -> google.protobuf.Timestamp
	9,  // 1: trade_routing_2.TradeSubscription.order_snapshot_filter:type_name -> trade_routing_2.OrderSnapshotFilter
	8,  // 2: trade_routing_2.TradeSubscription.account_summary_parameters:type_name -> trade_routing_2.AccountSummaryParameters
	36, // 3: trade_routing_2.TradeSubscriptionStatus.details:type_name -> shared_1.Text
	11, // 4: trade_routing_2.AccountSummaryParameters.account_filter:type_name -> trade_routing_2.AccountFilter
	10, // 5: trade_routing_2.OrderSnapshotFilter.transaction_status_filter:type_name -> trade_routing_2.TransactionStatusFilter
	13, // 6: trade_routing_2.PositionStatus.open_positions:type_name -> trade_routing_2.OpenPosition
	14, // 7: trade_routing_2.PositionStatus.purchase_and_sales_groups:type_name -> trade_routing_2.PurchaseAndSalesGroup
	37, // 8: trade_routing_2.PositionStatus.contract_metadata:type_name -> metadata_2.ContractMetadata
	38, // 9: trade_routing_2.PositionStatus.today_fill_commissions:type_name -> order_2.Commission
	39, // 10: trade_routing_2.OpenPosition.qty:type_name -> cqg.Decimal
	35, // 11: trade_routing_2.OpenPosition.trade_utc_timestamp:type_name -> google.protobuf.Timestamp
	15, // 12: trade_routing_2.PurchaseAndSalesGroup.matched_trades:type_name -> trade_routing_2.MatchedTrade
	39, // 13: trade_routing_2.MatchedTrade.qty:type_name -> cqg.Decimal
	35, // 14: trade_routing_2.MatchedTrade.trade_utc_timestamp:type_name -> google.protobuf.Timestamp
	35, // 15: trade_routing_2.CollateralStatus.status_utc_timestamp:type_name -> google.protobuf.Timestamp
	39, // 16: trade_routing_2.AccountSummaryStatus.total_filled_qty:type_name -> cqg.Decimal
	39, // 17: trade_routing_2.AccountSummaryStatus.long_open_positions_qty:type_name -> cqg.Decimal
	39, // 18: trade_routing_2.AccountSummaryStatus.short_open_positions_qty:type_name -> cqg.Decimal
	19, // 19: trade_routing_2.ExchangePositionStatus.positions:type_name -> trade_routing_2.ExchangePosition
	20, // 20: trade_routing_2.ExchangePosition.open_positions:type_name -> trade_routing_2.ExchangeOpenPosition
	23, // 21: trade_routing_2.ExchangePosition.extra_attributes:type_name -> trade_routing_2.AccountExtraAttribute
	39, // 22: trade_routing_2.ExchangeOpenPosition.qty:type_name -> cqg.Decimal
	23, // 23: trade_routing_2.ExchangeOpenPosition.extra_attributes:type_name -> trade_routing_2.AccountExtraAttribute
	22, // 24: trade_routing_2.ExchangeBalanceStatus.balances:type_name -> trade_routing_2.ExchangeCurrencyBalance
	23, // 25: trade_routing_2.ExchangeCurrencyBalance.extra_attributes:type_name -> trade_routing_2.AccountExtraAttribute
	9,  // 26: trade_routing_2.HistoricalOrdersRequest.order_snapshot_filter:type_name -> trade_routing_2.OrderSnapshotFilter
	40, // 27: trade_routing_2.HistoricalOrdersReport.order_statuses:type_name -> order_2.OrderStatus
	28, // 28: trade_routing_2.BrokerageTradingFeatureEntitlementReport.trading_feature_entitlements:type_name -> trade_routing_2.TradingFeatureEntitlementEntry
	31, // 29: trade_routing_2.CareAutoActivationParametersReport.parameters:type_name -> trade_routing_2.CareAutoActivationParameters
	34, // 30: trade_routing_2.AccountRiskParametersReport.account_risk_parameters:type_name -> trade_routing_2.AccountRiskParameters
	31, // [31:31] is the sub-list for method output_type
	31, // [31:31] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_protos_WebAPI_trade_routing_2_proto_init() }
func file_protos_WebAPI_trade_routing_2_proto_init() {
	if File_protos_WebAPI_trade_routing_2_proto != nil {
		return
	}
	file_protos_WebAPI_metadata_2_proto_init()
	file_protos_WebAPI_order_2_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_WebAPI_trade_routing_2_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_WebAPI_trade_routing_2_proto_goTypes,
		DependencyIndexes: file_protos_WebAPI_trade_routing_2_proto_depIdxs,
		EnumInfos:         file_protos_WebAPI_trade_routing_2_proto_enumTypes,
		MessageInfos:      file_protos_WebAPI_trade_routing_2_proto_msgTypes,
	}.Build()
	File_protos_WebAPI_trade_routing_2_proto = out.File
	file_protos_WebAPI_trade_routing_2_proto_rawDesc = nil
	file_protos_WebAPI_trade_routing_2_proto_goTypes = nil
	file_protos_WebAPI_trade_routing_2_proto_depIdxs = nil
}
