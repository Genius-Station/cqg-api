// OTC messages
// Times are in google.protobuf.Timestamp since Unix Epoch on January 1st, 1970
// Each change in this protocol increases webapi_1.proto version.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: protos/WebAPI/otc_1.proto

package WebAPI

import (
	common "cqg-api/protos/WebAPI/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InstanceState int32

const (
	// Instance is online and processes orders.
	InstanceState_INSTANCE_STATE_ONLINE InstanceState = 0
	// Instance is offline. Used only in status response. OTC may not be put
	// offline by client request.
	InstanceState_INSTANCE_STATE_OFFLINE InstanceState = 1
	// Instance is suspended by ChangeOtcStateRequest.
	InstanceState_INSTANCE_STATE_SUSPENDED InstanceState = 2
)

// Enum value maps for InstanceState.
var (
	InstanceState_name = map[int32]string{
		0: "INSTANCE_STATE_ONLINE",
		1: "INSTANCE_STATE_OFFLINE",
		2: "INSTANCE_STATE_SUSPENDED",
	}
	InstanceState_value = map[string]int32{
		"INSTANCE_STATE_ONLINE":    0,
		"INSTANCE_STATE_OFFLINE":   1,
		"INSTANCE_STATE_SUSPENDED": 2,
	}
)

func (x InstanceState) Enum() *InstanceState {
	p := new(InstanceState)
	*p = x
	return p
}

func (x InstanceState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstanceState) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_otc_1_proto_enumTypes[0].Descriptor()
}

func (InstanceState) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_otc_1_proto_enumTypes[0]
}

func (x InstanceState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *InstanceState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = InstanceState(num)
	return nil
}

// Deprecated: Use InstanceState.Descriptor instead.
func (InstanceState) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_otc_1_proto_rawDescGZIP(), []int{0}
}

type OtcReport_StatusCode int32

const (
	// / success codes (0 - 100)
	OtcReport_STATUS_CODE_SUCCESS OtcReport_StatusCode = 0
	// Request is processed and subscription is established.
	OtcReport_STATUS_CODE_SUBSCRIBED OtcReport_StatusCode = 1
	// Subscription is dropped by a client request.
	OtcReport_STATUS_CODE_DROPPED OtcReport_StatusCode = 2
	// Unsolicited information update because of subscription.
	OtcReport_STATUS_CODE_UPDATE OtcReport_StatusCode = 3
	// Currently subscription is disconnected because of communication issues.
	// NOTE: Clients should not resubscribe in this case, the server will
	// restore subscription with sending STATUS_CODE_SUBSCRIBED status once
	// communication issues are resolved.
	OtcReport_STATUS_CODE_DISCONNECTED OtcReport_StatusCode = 4
	// // failure codes (100+)
	// General failure.
	OtcReport_STATUS_CODE_FAILURE OtcReport_StatusCode = 101
	// Subscription parameters are invalid.
	OtcReport_STATUS_CODE_INVALID_PARAMS OtcReport_StatusCode = 102
	// The user is not allowed to perform the request.
	OtcReport_STATUS_CODE_ACCESS_DENIED OtcReport_StatusCode = 103
	// The subscription count limit has been violated.
	OtcReport_STATUS_CODE_SUBSCRIPTION_LIMIT_VIOLATION OtcReport_StatusCode = 104
	// The subscription rate limit has been violated.
	OtcReport_STATUS_CODE_SUBSCRIPTION_RATE_LIMIT_VIOLATION OtcReport_StatusCode = 105
	// Object not found.
	OtcReport_STATUS_CODE_NOT_FOUND OtcReport_StatusCode = 106
	// Request is timed out.
	OtcReport_STATUS_CODE_TIMEOUT OtcReport_StatusCode = 107
	// Request with same request_id already in use.
	OtcReport_STATUS_CODE_DUPLICATE OtcReport_StatusCode = 108
)

// Enum value maps for OtcReport_StatusCode.
var (
	OtcReport_StatusCode_name = map[int32]string{
		0:   "STATUS_CODE_SUCCESS",
		1:   "STATUS_CODE_SUBSCRIBED",
		2:   "STATUS_CODE_DROPPED",
		3:   "STATUS_CODE_UPDATE",
		4:   "STATUS_CODE_DISCONNECTED",
		101: "STATUS_CODE_FAILURE",
		102: "STATUS_CODE_INVALID_PARAMS",
		103: "STATUS_CODE_ACCESS_DENIED",
		104: "STATUS_CODE_SUBSCRIPTION_LIMIT_VIOLATION",
		105: "STATUS_CODE_SUBSCRIPTION_RATE_LIMIT_VIOLATION",
		106: "STATUS_CODE_NOT_FOUND",
		107: "STATUS_CODE_TIMEOUT",
		108: "STATUS_CODE_DUPLICATE",
	}
	OtcReport_StatusCode_value = map[string]int32{
		"STATUS_CODE_SUCCESS":                           0,
		"STATUS_CODE_SUBSCRIBED":                        1,
		"STATUS_CODE_DROPPED":                           2,
		"STATUS_CODE_UPDATE":                            3,
		"STATUS_CODE_DISCONNECTED":                      4,
		"STATUS_CODE_FAILURE":                           101,
		"STATUS_CODE_INVALID_PARAMS":                    102,
		"STATUS_CODE_ACCESS_DENIED":                     103,
		"STATUS_CODE_SUBSCRIPTION_LIMIT_VIOLATION":      104,
		"STATUS_CODE_SUBSCRIPTION_RATE_LIMIT_VIOLATION": 105,
		"STATUS_CODE_NOT_FOUND":                         106,
		"STATUS_CODE_TIMEOUT":                           107,
		"STATUS_CODE_DUPLICATE":                         108,
	}
)

func (x OtcReport_StatusCode) Enum() *OtcReport_StatusCode {
	p := new(OtcReport_StatusCode)
	*p = x
	return p
}

func (x OtcReport_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OtcReport_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_otc_1_proto_enumTypes[1].Descriptor()
}

func (OtcReport_StatusCode) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_otc_1_proto_enumTypes[1]
}

func (x OtcReport_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OtcReport_StatusCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OtcReport_StatusCode(num)
	return nil
}

// Deprecated: Use OtcReport_StatusCode.Descriptor instead.
func (OtcReport_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_otc_1_proto_rawDescGZIP(), []int{1, 0}
}

type BalanceItemKey_ItemType int32

const (
	BalanceItemKey_CASH_ORDER     BalanceItemKey_ItemType = 1
	BalanceItemKey_HEDGE_ORDER    BalanceItemKey_ItemType = 2
	BalanceItemKey_BALANCE_OFFSET BalanceItemKey_ItemType = 3
)

// Enum value maps for BalanceItemKey_ItemType.
var (
	BalanceItemKey_ItemType_name = map[int32]string{
		1: "CASH_ORDER",
		2: "HEDGE_ORDER",
		3: "BALANCE_OFFSET",
	}
	BalanceItemKey_ItemType_value = map[string]int32{
		"CASH_ORDER":     1,
		"HEDGE_ORDER":    2,
		"BALANCE_OFFSET": 3,
	}
)

func (x BalanceItemKey_ItemType) Enum() *BalanceItemKey_ItemType {
	p := new(BalanceItemKey_ItemType)
	*p = x
	return p
}

func (x BalanceItemKey_ItemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BalanceItemKey_ItemType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_otc_1_proto_enumTypes[2].Descriptor()
}

func (BalanceItemKey_ItemType) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_otc_1_proto_enumTypes[2]
}

func (x BalanceItemKey_ItemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BalanceItemKey_ItemType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BalanceItemKey_ItemType(num)
	return nil
}

// Deprecated: Use BalanceItemKey_ItemType.Descriptor instead.
func (BalanceItemKey_ItemType) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_otc_1_proto_rawDescGZIP(), []int{13, 0}
}

type ChangeOtcStateRequest_Action int32

const (
	// Activate previously suspended OTC instance.
	ChangeOtcStateRequest_ACTION_ACTIVATE ChangeOtcStateRequest_Action = 0
	// Suspend active OTC instance.
	// OTC will reject all client orders and will not send hedge orders to
	// exchange.
	ChangeOtcStateRequest_ACTION_SUSPEND ChangeOtcStateRequest_Action = 1
)

// Enum value maps for ChangeOtcStateRequest_Action.
var (
	ChangeOtcStateRequest_Action_name = map[int32]string{
		0: "ACTION_ACTIVATE",
		1: "ACTION_SUSPEND",
	}
	ChangeOtcStateRequest_Action_value = map[string]int32{
		"ACTION_ACTIVATE": 0,
		"ACTION_SUSPEND":  1,
	}
)

func (x ChangeOtcStateRequest_Action) Enum() *ChangeOtcStateRequest_Action {
	p := new(ChangeOtcStateRequest_Action)
	*p = x
	return p
}

func (x ChangeOtcStateRequest_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChangeOtcStateRequest_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_otc_1_proto_enumTypes[3].Descriptor()
}

func (ChangeOtcStateRequest_Action) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_otc_1_proto_enumTypes[3]
}

func (x ChangeOtcStateRequest_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ChangeOtcStateRequest_Action) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ChangeOtcStateRequest_Action(num)
	return nil
}

// Deprecated: Use ChangeOtcStateRequest_Action.Descriptor instead.
func (ChangeOtcStateRequest_Action) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_otc_1_proto_rawDescGZIP(), []int{18, 0}
}

// Client messages.
type OtcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Request identifier.
	RequestId *string `protobuf:"bytes,1,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	// OTC instances subscription.
	// Number of simultaneous requests with subscription for updates is limited,
	// 1 by default.
	OtcInstancesSubscription *OtcInstancesSubscription `protobuf:"bytes,2,opt,name=otc_instances_subscription,json=otcInstancesSubscription" json:"otc_instances_subscription,omitempty"`
	// Hedge books subscription.
	// Number of simultaneous requests with subscription for updates is limited,
	// 1 per OTC instance by default.
	HedgeBooksSubscription *HedgeBooksSubscription `protobuf:"bytes,3,opt,name=hedge_books_subscription,json=hedgeBooksSubscription" json:"hedge_books_subscription,omitempty"`
	// Hedge book details subscription.
	// Request rate is limited, 1000 requests per 100 seconds by default.
	// Number of simultaneous requests in processing is limited, 100 by default.
	// Number of simultaneous requests with subscription for updates is limited,
	// 1000 by default.
	HedgeBookDetailsSubscription *HedgeBookDetailsSubscription `protobuf:"bytes,4,opt,name=hedge_book_details_subscription,json=hedgeBookDetailsSubscription" json:"hedge_book_details_subscription,omitempty"`
	// Offset hedge balance request.
	// Request rate is limited, 100 requests per 100 seconds by default.
	OffsetHedgeBalanceRequest *OffsetHedgeBalanceRequest `protobuf:"bytes,5,opt,name=offset_hedge_balance_request,json=offsetHedgeBalanceRequest" json:"offset_hedge_balance_request,omitempty"`
	// Change OTC state request.
	// Request rate is limited, 10 requests per 100 seconds by default.
	ChangeOtcStateRequest *ChangeOtcStateRequest `protobuf:"bytes,6,opt,name=change_otc_state_request,json=changeOtcStateRequest" json:"change_otc_state_request,omitempty"`
	// Fill cash order request.
	// Request rate is limited, 1000 requests per 100 seconds by default.
	FillCashOrderRequest *FillCashOrderRequest `protobuf:"bytes,7,opt,name=fill_cash_order_request,json=fillCashOrderRequest" json:"fill_cash_order_request,omitempty"`
	// Archive hedge balance details request.
	ArchiveHedgeBalanceDetailsRequest *ArchiveHedgeBalanceDetailsRequest `protobuf:"bytes,8,opt,name=archive_hedge_balance_details_request,json=archiveHedgeBalanceDetailsRequest" json:"archive_hedge_balance_details_request,omitempty"`
	// Request balance item links for specific item.
	// Request rate is limited, 100 requests per 100 seconds by default.
	BalanceItemsLinksRequest *BalanceItemsLinksRequest `protobuf:"bytes,9,opt,name=balance_items_links_request,json=balanceItemsLinksRequest" json:"balance_items_links_request,omitempty"`
	// TailManagement configuration subscription.
	// Number of simultaneous requests with subscription for updates is limited,
	// 1 by default.
	// Deprecated. Use tail_management_configuration_subscription_2 instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/otc_1.proto.
	TailManagementConfigurationSubscription *TailManagementConfigurationSubscription `protobuf:"bytes,10,opt,name=tail_management_configuration_subscription,json=tailManagementConfigurationSubscription" json:"tail_management_configuration_subscription,omitempty"`
	// Request to update tail management configuration.
	// Request rate is limited, 10 requests per 100 seconds by default.
	UpdateTailManagementConfiguration *UpdateTailManagementConfiguration `protobuf:"bytes,11,opt,name=update_tail_management_configuration,json=updateTailManagementConfiguration" json:"update_tail_management_configuration,omitempty"`
	// Request to get tail management configuration as string in ATDL format.
	// Request rate is limited, 10 requests per 100 seconds by default.
	RequestTailManagementConfigurationMetadata *RequestTailManagementConfigurationMetadata `protobuf:"bytes,12,opt,name=request_tail_management_configuration_metadata,json=requestTailManagementConfigurationMetadata" json:"request_tail_management_configuration_metadata,omitempty"`
	// TailManagement configuration subscription.
	// Number of simultaneous requests with subscription for updates is limited,
	// 1 by default.
	TailManagementConfigurationSubscription_2 *TailManagementConfigurationSubscription2 `protobuf:"bytes,14,opt,name=tail_management_configuration_subscription_2,json=tailManagementConfigurationSubscription2" json:"tail_management_configuration_subscription_2,omitempty"`
}

func (x *OtcRequest) Reset() {
	*x = OtcRequest{}
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OtcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtcRequest) ProtoMessage() {}

func (x *OtcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtcRequest.ProtoReflect.Descriptor instead.
func (*OtcRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_otc_1_proto_rawDescGZIP(), []int{0}
}

func (x *OtcRequest) GetRequestId() string {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return ""
}

func (x *OtcRequest) GetOtcInstancesSubscription() *OtcInstancesSubscription {
	if x != nil {
		return x.OtcInstancesSubscription
	}
	return nil
}

func (x *OtcRequest) GetHedgeBooksSubscription() *HedgeBooksSubscription {
	if x != nil {
		return x.HedgeBooksSubscription
	}
	return nil
}

func (x *OtcRequest) GetHedgeBookDetailsSubscription() *HedgeBookDetailsSubscription {
	if x != nil {
		return x.HedgeBookDetailsSubscription
	}
	return nil
}

func (x *OtcRequest) GetOffsetHedgeBalanceRequest() *OffsetHedgeBalanceRequest {
	if x != nil {
		return x.OffsetHedgeBalanceRequest
	}
	return nil
}

func (x *OtcRequest) GetChangeOtcStateRequest() *ChangeOtcStateRequest {
	if x != nil {
		return x.ChangeOtcStateRequest
	}
	return nil
}

func (x *OtcRequest) GetFillCashOrderRequest() *FillCashOrderRequest {
	if x != nil {
		return x.FillCashOrderRequest
	}
	return nil
}

func (x *OtcRequest) GetArchiveHedgeBalanceDetailsRequest() *ArchiveHedgeBalanceDetailsRequest {
	if x != nil {
		return x.ArchiveHedgeBalanceDetailsRequest
	}
	return nil
}

func (x *OtcRequest) GetBalanceItemsLinksRequest() *BalanceItemsLinksRequest {
	if x != nil {
		return x.BalanceItemsLinksRequest
	}
	return nil
}

// Deprecated: Marked as deprecated in protos/WebAPI/otc_1.proto.
func (x *OtcRequest) GetTailManagementConfigurationSubscription() *TailManagementConfigurationSubscription {
	if x != nil {
		return x.TailManagementConfigurationSubscription
	}
	return nil
}

func (x *OtcRequest) GetUpdateTailManagementConfiguration() *UpdateTailManagementConfiguration {
	if x != nil {
		return x.UpdateTailManagementConfiguration
	}
	return nil
}

func (x *OtcRequest) GetRequestTailManagementConfigurationMetadata() *RequestTailManagementConfigurationMetadata {
	if x != nil {
		return x.RequestTailManagementConfigurationMetadata
	}
	return nil
}

func (x *OtcRequest) GetTailManagementConfigurationSubscription_2() *TailManagementConfigurationSubscription2 {
	if x != nil {
		return x.TailManagementConfigurationSubscription_2
	}
	return nil
}

// OTC/WebAPI responses.
type OtcReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of a corresponding request or subscription.
	RequestId *string `protobuf:"bytes,1,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	// Operation status.
	// This field is associated with StatusCode enum.
	StatusCode *uint32 `protobuf:"varint,2,opt,name=status_code,json=statusCode" json:"status_code,omitempty"`
	// Operation details.
	Details *common.Text `protobuf:"bytes,3,opt,name=details" json:"details,omitempty"`
	// OTC instances report.
	OtcInstancesReport *OtcInstancesReport `protobuf:"bytes,4,opt,name=otc_instances_report,json=otcInstancesReport" json:"otc_instances_report,omitempty"`
	// Hedge books report.
	HedgeBooksReport *HedgeBooksReport `protobuf:"bytes,5,opt,name=hedge_books_report,json=hedgeBooksReport" json:"hedge_books_report,omitempty"`
	// Hedge book details report.
	HedgeBookDetailsReport *HedgeBookDetailsReport `protobuf:"bytes,6,opt,name=hedge_book_details_report,json=hedgeBookDetailsReport" json:"hedge_book_details_report,omitempty"`
	// Offset hedge balance result.
	OffsetHedgeBalanceResult *OffsetHedgeBalanceResult `protobuf:"bytes,7,opt,name=offset_hedge_balance_result,json=offsetHedgeBalanceResult" json:"offset_hedge_balance_result,omitempty"`
	// Change OTC state result.
	ChangeOtcStateResult *ChangeOtcStateResult `protobuf:"bytes,8,opt,name=change_otc_state_result,json=changeOtcStateResult" json:"change_otc_state_result,omitempty"`
	// Fill cash order result.
	FillCashOrderResult *FillCashOrderResult `protobuf:"bytes,9,opt,name=fill_cash_order_result,json=fillCashOrderResult" json:"fill_cash_order_result,omitempty"`
	// Archive hedge balance details result.
	ArchiveHedgeBalanceDetailsResult *ArchiveHedgeBalanceDetailsResult `protobuf:"bytes,10,opt,name=archive_hedge_balance_details_result,json=archiveHedgeBalanceDetailsResult" json:"archive_hedge_balance_details_result,omitempty"`
	// Balance item links for requested item.
	BalanceItemsLinksResult *BalanceItemsLinksResult `protobuf:"bytes,11,opt,name=balance_items_links_result,json=balanceItemsLinksResult" json:"balance_items_links_result,omitempty"`
	// Tail management configuration report.
	// Deprecated. Replaced by tail_management_configuration_report_2.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/otc_1.proto.
	TailManagementConfigurationReport *TailManagementConfigurationReport `protobuf:"bytes,12,opt,name=tail_management_configuration_report,json=tailManagementConfigurationReport" json:"tail_management_configuration_report,omitempty"`
	// Tail management metadata in ATDL format as string.
	TailManagementConfigurationMetadata *TailManagementConfigurationMetadata `protobuf:"bytes,13,opt,name=tail_management_configuration_metadata,json=tailManagementConfigurationMetadata" json:"tail_management_configuration_metadata,omitempty"`
	// Update tail management configuration result.
	UpdateTailManagementConfigurationResult *UpdateTailManagementConfigurationResult `protobuf:"bytes,14,opt,name=update_tail_management_configuration_result,json=updateTailManagementConfigurationResult" json:"update_tail_management_configuration_result,omitempty"`
	// Tail management configuration report.
	TailManagementConfigurationReport_2 *TailManagementConfigurationReport2 `protobuf:"bytes,16,opt,name=tail_management_configuration_report_2,json=tailManagementConfigurationReport2" json:"tail_management_configuration_report_2,omitempty"`
}

func (x *OtcReport) Reset() {
	*x = OtcReport{}
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OtcReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtcReport) ProtoMessage() {}

func (x *OtcReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtcReport.ProtoReflect.Descriptor instead.
func (*OtcReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_otc_1_proto_rawDescGZIP(), []int{1}
}

func (x *OtcReport) GetRequestId() string {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return ""
}

func (x *OtcReport) GetStatusCode() uint32 {
	if x != nil && x.StatusCode != nil {
		return *x.StatusCode
	}
	return 0
}

func (x *OtcReport) GetDetails() *common.Text {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *OtcReport) GetOtcInstancesReport() *OtcInstancesReport {
	if x != nil {
		return x.OtcInstancesReport
	}
	return nil
}

func (x *OtcReport) GetHedgeBooksReport() *HedgeBooksReport {
	if x != nil {
		return x.HedgeBooksReport
	}
	return nil
}

func (x *OtcReport) GetHedgeBookDetailsReport() *HedgeBookDetailsReport {
	if x != nil {
		return x.HedgeBookDetailsReport
	}
	return nil
}

func (x *OtcReport) GetOffsetHedgeBalanceResult() *OffsetHedgeBalanceResult {
	if x != nil {
		return x.OffsetHedgeBalanceResult
	}
	return nil
}

func (x *OtcReport) GetChangeOtcStateResult() *ChangeOtcStateResult {
	if x != nil {
		return x.ChangeOtcStateResult
	}
	return nil
}

func (x *OtcReport) GetFillCashOrderResult() *FillCashOrderResult {
	if x != nil {
		return x.FillCashOrderResult
	}
	return nil
}

func (x *OtcReport) GetArchiveHedgeBalanceDetailsResult() *ArchiveHedgeBalanceDetailsResult {
	if x != nil {
		return x.ArchiveHedgeBalanceDetailsResult
	}
	return nil
}

func (x *OtcReport) GetBalanceItemsLinksResult() *BalanceItemsLinksResult {
	if x != nil {
		return x.BalanceItemsLinksResult
	}
	return nil
}

// Deprecated: Marked as deprecated in protos/WebAPI/otc_1.proto.
func (x *OtcReport) GetTailManagementConfigurationReport() *TailManagementConfigurationReport {
	if x != nil {
		return x.TailManagementConfigurationReport
	}
	return nil
}

func (x *OtcReport) GetTailManagementConfigurationMetadata() *TailManagementConfigurationMetadata {
	if x != nil {
		return x.TailManagementConfigurationMetadata
	}
	return nil
}

func (x *OtcReport) GetUpdateTailManagementConfigurationResult() *UpdateTailManagementConfigurationResult {
	if x != nil {
		return x.UpdateTailManagementConfigurationResult
	}
	return nil
}

func (x *OtcReport) GetTailManagementConfigurationReport_2() *TailManagementConfigurationReport2 {
	if x != nil {
		return x.TailManagementConfigurationReport_2
	}
	return nil
}

// Hedge balance key.
type HedgeBalanceKey struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Hedge Account ID in CQG trade routing system.
	AccountId *int32 `protobuf:"zigzag32,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// Server side contract id.
	ContractId *uint32 `protobuf:"varint,2,opt,name=contract_id,json=contractId" json:"contract_id,omitempty"`
}

func (x *HedgeBalanceKey) Reset() {
	*x = HedgeBalanceKey{}
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HedgeBalanceKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HedgeBalanceKey) ProtoMessage() {}

func (x *HedgeBalanceKey) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HedgeBalanceKey.ProtoReflect.Descriptor instead.
func (*HedgeBalanceKey) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_otc_1_proto_rawDescGZIP(), []int{2}
}

func (x *HedgeBalanceKey) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *HedgeBalanceKey) GetContractId() uint32 {
	if x != nil && x.ContractId != nil {
		return *x.ContractId
	}
	return 0
}

// Contract group key. It's not necessarily same as ContractMetadata.instrument_group_name.
type GroupKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hedge Account ID in CQG trade routing system.
	AccountId *int32 `protobuf:"zigzag32,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// Group name.
	GroupSymbol *string `protobuf:"bytes,2,opt,name=group_symbol,json=groupSymbol" json:"group_symbol,omitempty"`
}

func (x *GroupKey) Reset() {
	*x = GroupKey{}
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupKey) ProtoMessage() {}

func (x *GroupKey) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupKey.ProtoReflect.Descriptor instead.
func (*GroupKey) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_otc_1_proto_rawDescGZIP(), []int{3}
}

func (x *GroupKey) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *GroupKey) GetGroupSymbol() string {
	if x != nil && x.GroupSymbol != nil {
		return *x.GroupSymbol
	}
	return ""
}

// OTC instances subscription.
type OtcInstancesSubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If set to true - subscribe to changes, if false - drop subscription.
	Subscribe *bool `protobuf:"varint,1,opt,name=subscribe,def=1" json:"subscribe,omitempty"`
}

// Default values for OtcInstancesSubscription fields.
const (
	Default_OtcInstancesSubscription_Subscribe = bool(true)
)

func (x *OtcInstancesSubscription) Reset() {
	*x = OtcInstancesSubscription{}
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OtcInstancesSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtcInstancesSubscription) ProtoMessage() {}

func (x *OtcInstancesSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtcInstancesSubscription.ProtoReflect.Descriptor instead.
func (*OtcInstancesSubscription) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_otc_1_proto_rawDescGZIP(), []int{4}
}

func (x *OtcInstancesSubscription) GetSubscribe() bool {
	if x != nil && x.Subscribe != nil {
		return *x.Subscribe
	}
	return Default_OtcInstancesSubscription_Subscribe
}

// OTC instances report.
type OtcInstancesReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OtcInstanceStates []*OtcInstanceState `protobuf:"bytes,1,rep,name=otc_instance_states,json=otcInstanceStates" json:"otc_instance_states,omitempty"`
}

func (x *OtcInstancesReport) Reset() {
	*x = OtcInstancesReport{}
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OtcInstancesReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtcInstancesReport) ProtoMessage() {}

func (x *OtcInstancesReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtcInstancesReport.ProtoReflect.Descriptor instead.
func (*OtcInstancesReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_otc_1_proto_rawDescGZIP(), []int{5}
}

func (x *OtcInstancesReport) GetOtcInstanceStates() []*OtcInstanceState {
	if x != nil {
		return x.OtcInstanceStates
	}
	return nil
}

// OTC instance state.
type OtcInstanceState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OTC instance ID.
	InstanceId *uint32 `protobuf:"varint,1,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
	// OTC instance name.
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// OTC instance state.
	// This field is associated with InstanceState enum type.
	State *uint32 `protobuf:"varint,3,opt,name=state" json:"state,omitempty"`
}

func (x *OtcInstanceState) Reset() {
	*x = OtcInstanceState{}
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OtcInstanceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtcInstanceState) ProtoMessage() {}

func (x *OtcInstanceState) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtcInstanceState.ProtoReflect.Descriptor instead.
func (*OtcInstanceState) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_otc_1_proto_rawDescGZIP(), []int{6}
}

func (x *OtcInstanceState) GetInstanceId() uint32 {
	if x != nil && x.InstanceId != nil {
		return *x.InstanceId
	}
	return 0
}

func (x *OtcInstanceState) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *OtcInstanceState) GetState() uint32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

// Hedge books subscription.
type HedgeBooksSubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If set to true - subscribe to changes, if false - drop subscription.
	Subscribe *bool `protobuf:"varint,1,opt,name=subscribe,def=1" json:"subscribe,omitempty"`
	// OTC instance id.
	OtcInstanceId *uint32 `protobuf:"varint,2,opt,name=otc_instance_id,json=otcInstanceId" json:"otc_instance_id,omitempty"`
}

// Default values for HedgeBooksSubscription fields.
const (
	Default_HedgeBooksSubscription_Subscribe = bool(true)
)

func (x *HedgeBooksSubscription) Reset() {
	*x = HedgeBooksSubscription{}
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HedgeBooksSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HedgeBooksSubscription) ProtoMessage() {}

func (x *HedgeBooksSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HedgeBooksSubscription.ProtoReflect.Descriptor instead.
func (*HedgeBooksSubscription) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_otc_1_proto_rawDescGZIP(), []int{7}
}

func (x *HedgeBooksSubscription) GetSubscribe() bool {
	if x != nil && x.Subscribe != nil {
		return *x.Subscribe
	}
	return Default_HedgeBooksSubscription_Subscribe
}

func (x *HedgeBooksSubscription) GetOtcInstanceId() uint32 {
	if x != nil && x.OtcInstanceId != nil {
		return *x.OtcInstanceId
	}
	return 0
}

// Hedge books report.
type HedgeBooksReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if this is a snapshot (all previously known data about this hedge
	// book should be cleaned).
	// All updates will be postponed until full snapshot is sent.
	// False used for incremental updates.
	// Snapshot will be sent only once after subscription. May be sent in multiple
	// parts. Each part will have this field set to true. False by default.
	IsSnapshot *bool `protobuf:"varint,1,opt,name=is_snapshot,json=isSnapshot" json:"is_snapshot,omitempty"`
	// If true - then this message mean last part of multi-parted snapshot.
	IsLastPart *bool `protobuf:"varint,2,opt,name=is_last_part,json=isLastPart" json:"is_last_part,omitempty"`
	// Hedge balance details.
	HedgeBalanceDetails []*HedgeBalanceDetails `protobuf:"bytes,3,rep,name=hedge_balance_details,json=hedgeBalanceDetails" json:"hedge_balance_details,omitempty"`
	// List of archived hedge balance details.
	ArchivedHedgeBalanceDetails []*ArchivedHedgeBalanceDetails `protobuf:"bytes,4,rep,name=archived_hedge_balance_details,json=archivedHedgeBalanceDetails" json:"archived_hedge_balance_details,omitempty"`
	// Group balance details.
	GroupBalanceDetails []*GroupBalanceDetails `protobuf:"bytes,5,rep,name=group_balance_details,json=groupBalanceDetails" json:"group_balance_details,omitempty"`
}

func (x *HedgeBooksReport) Reset() {
	*x = HedgeBooksReport{}
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HedgeBooksReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HedgeBooksReport) ProtoMessage() {}

func (x *HedgeBooksReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HedgeBooksReport.ProtoReflect.Descriptor instead.
func (*HedgeBooksReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_otc_1_proto_rawDescGZIP(), []int{8}
}

func (x *HedgeBooksReport) GetIsSnapshot() bool {
	if x != nil && x.IsSnapshot != nil {
		return *x.IsSnapshot
	}
	return false
}

func (x *HedgeBooksReport) GetIsLastPart() bool {
	if x != nil && x.IsLastPart != nil {
		return *x.IsLastPart
	}
	return false
}

func (x *HedgeBooksReport) GetHedgeBalanceDetails() []*HedgeBalanceDetails {
	if x != nil {
		return x.HedgeBalanceDetails
	}
	return nil
}

func (x *HedgeBooksReport) GetArchivedHedgeBalanceDetails() []*ArchivedHedgeBalanceDetails {
	if x != nil {
		return x.ArchivedHedgeBalanceDetails
	}
	return nil
}

func (x *HedgeBooksReport) GetGroupBalanceDetails() []*GroupBalanceDetails {
	if x != nil {
		return x.GroupBalanceDetails
	}
	return nil
}

type HedgeBalanceDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hedge balance key.
	HedgeBalanceKey *HedgeBalanceKey `protobuf:"bytes,1,opt,name=hedge_balance_key,json=hedgeBalanceKey" json:"hedge_balance_key,omitempty"`
	// Deleted flag is used in updates when entity is removed.
	// Only hedge_balance_key will be provided in this case.
	Deleted *bool `protobuf:"varint,2,opt,name=deleted" json:"deleted,omitempty"`
	// Current hedge balance in units. If missing - hedge balance is not changed
	// since last update.
	HedgeBalance *common.Decimal `protobuf:"bytes,3,opt,name=hedge_balance,json=hedgeBalance" json:"hedge_balance,omitempty"`
	// Pending balance in units. Means non-filled hedge orders size in units.
	// If missing - pending balance is not changed since last update.
	PendingBalance *common.Decimal `protobuf:"bytes,4,opt,name=pending_balance,json=pendingBalance" json:"pending_balance,omitempty"`
	// Full contract symbol.
	ContractSymbol *string `protobuf:"bytes,5,opt,name=contract_symbol,json=contractSymbol" json:"contract_symbol,omitempty"`
	// Name of units for balance values in this message.
	UnitsName *common.Text `protobuf:"bytes,6,opt,name=units_name,json=unitsName" json:"units_name,omitempty"`
	// Contract group name, e.g. commodity.
	ContractGroupName *string `protobuf:"bytes,7,opt,name=contract_group_name,json=contractGroupName" json:"contract_group_name,omitempty"`
}

func (x *HedgeBalanceDetails) Reset() {
	*x = HedgeBalanceDetails{}
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HedgeBalanceDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HedgeBalanceDetails) ProtoMessage() {}

func (x *HedgeBalanceDetails) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HedgeBalanceDetails.ProtoReflect.Descriptor instead.
func (*HedgeBalanceDetails) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_otc_1_proto_rawDescGZIP(), []int{9}
}

func (x *HedgeBalanceDetails) GetHedgeBalanceKey() *HedgeBalanceKey {
	if x != nil {
		return x.HedgeBalanceKey
	}
	return nil
}

func (x *HedgeBalanceDetails) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

func (x *HedgeBalanceDetails) GetHedgeBalance() *common.Decimal {
	if x != nil {
		return x.HedgeBalance
	}
	return nil
}

func (x *HedgeBalanceDetails) GetPendingBalance() *common.Decimal {
	if x != nil {
		return x.PendingBalance
	}
	return nil
}

func (x *HedgeBalanceDetails) GetContractSymbol() string {
	if x != nil && x.ContractSymbol != nil {
		return *x.ContractSymbol
	}
	return ""
}

func (x *HedgeBalanceDetails) GetUnitsName() *common.Text {
	if x != nil {
		return x.UnitsName
	}
	return nil
}

func (x *HedgeBalanceDetails) GetContractGroupName() string {
	if x != nil && x.ContractGroupName != nil {
		return *x.ContractGroupName
	}
	return ""
}

type GroupBalanceDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Group key.
	GroupKey *GroupKey `protobuf:"bytes,1,opt,name=group_key,json=groupKey" json:"group_key,omitempty"`
	// Deleted flag is used in updates when entity is removed.
	// Only group_key will be provided in this case.
	Deleted *bool `protobuf:"varint,2,opt,name=deleted" json:"deleted,omitempty"`
	// Current hedge balance in units. If missing - hedge balance is not changed
	// since last update.
	HedgeBalance *common.Decimal `protobuf:"bytes,3,opt,name=hedge_balance,json=hedgeBalance" json:"hedge_balance,omitempty"`
	// Name of units for balance values in this message.
	UnitsName *common.Text `protobuf:"bytes,4,opt,name=units_name,json=unitsName" json:"units_name,omitempty"`
}

func (x *GroupBalanceDetails) Reset() {
	*x = GroupBalanceDetails{}
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupBalanceDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupBalanceDetails) ProtoMessage() {}

func (x *GroupBalanceDetails) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupBalanceDetails.ProtoReflect.Descriptor instead.
func (*GroupBalanceDetails) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_otc_1_proto_rawDescGZIP(), []int{10}
}

func (x *GroupBalanceDetails) GetGroupKey() *GroupKey {
	if x != nil {
		return x.GroupKey
	}
	return nil
}

func (x *GroupBalanceDetails) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

func (x *GroupBalanceDetails) GetHedgeBalance() *common.Decimal {
	if x != nil {
		return x.HedgeBalance
	}
	return nil
}

func (x *GroupBalanceDetails) GetUnitsName() *common.Text {
	if x != nil {
		return x.UnitsName
	}
	return nil
}

// Hedge book details subscription.
type HedgeBookDetailsSubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If set to true - subscribe to changes, if false - drop subscription.
	Subscribe *bool `protobuf:"varint,1,opt,name=subscribe,def=1" json:"subscribe,omitempty"`
	// OTC instance id.
	OtcInstanceId *uint32 `protobuf:"varint,2,opt,name=otc_instance_id,json=otcInstanceId" json:"otc_instance_id,omitempty"`
	// Hedge balance key.
	HedgeBalanceKey *HedgeBalanceKey `protobuf:"bytes,3,opt,name=hedge_balance_key,json=hedgeBalanceKey" json:"hedge_balance_key,omitempty"`
	// Start point for the history request, inclusive.
	// Maximum allowed history is returned if omitted.
	FromUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=from_utc_timestamp,json=fromUtcTimestamp" json:"from_utc_timestamp,omitempty"`
	// Unique identifier of archived hedge balance and its details; generated by OTC.
	// Should be used for grouping archived hedge balance details and archived hedge book details.
	ArchiveId *string `protobuf:"bytes,5,opt,name=archive_id,json=archiveId" json:"archive_id,omitempty"`
}

// Default values for HedgeBookDetailsSubscription fields.
const (
	Default_HedgeBookDetailsSubscription_Subscribe = bool(true)
)

func (x *HedgeBookDetailsSubscription) Reset() {
	*x = HedgeBookDetailsSubscription{}
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HedgeBookDetailsSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HedgeBookDetailsSubscription) ProtoMessage() {}

func (x *HedgeBookDetailsSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HedgeBookDetailsSubscription.ProtoReflect.Descriptor instead.
func (*HedgeBookDetailsSubscription) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_otc_1_proto_rawDescGZIP(), []int{11}
}

func (x *HedgeBookDetailsSubscription) GetSubscribe() bool {
	if x != nil && x.Subscribe != nil {
		return *x.Subscribe
	}
	return Default_HedgeBookDetailsSubscription_Subscribe
}

func (x *HedgeBookDetailsSubscription) GetOtcInstanceId() uint32 {
	if x != nil && x.OtcInstanceId != nil {
		return *x.OtcInstanceId
	}
	return 0
}

func (x *HedgeBookDetailsSubscription) GetHedgeBalanceKey() *HedgeBalanceKey {
	if x != nil {
		return x.HedgeBalanceKey
	}
	return nil
}

func (x *HedgeBookDetailsSubscription) GetFromUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.FromUtcTimestamp
	}
	return nil
}

func (x *HedgeBookDetailsSubscription) GetArchiveId() string {
	if x != nil && x.ArchiveId != nil {
		return *x.ArchiveId
	}
	return ""
}

// Hedge book details report.
type HedgeBookDetailsReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if this is a snapshot (all previously known data about this hedge book
	// should be cleaned).
	// False used for incremental updates.
	// Snapshot will be sent only once after subscription. May be sent in multiple
	// parts. Each part will have this field set to true. False by default.
	IsSnapshot *bool `protobuf:"varint,1,opt,name=is_snapshot,json=isSnapshot" json:"is_snapshot,omitempty"`
	// If true - then this message mean last part of multi-parted snapshot.
	IsLastPart *bool `protobuf:"varint,2,opt,name=is_last_part,json=isLastPart" json:"is_last_part,omitempty"`
	// List of balance items: Cash, Hedge and BalanceOffset
	BalanceItems []*BalanceItem `protobuf:"bytes,6,rep,name=balance_items,json=balanceItems" json:"balance_items,omitempty"`
	// List of links between any type of BalanceItem.
	ItemsLinks []*BalanceItemsLink `protobuf:"bytes,7,rep,name=items_links,json=itemsLinks" json:"items_links,omitempty"`
}

func (x *HedgeBookDetailsReport) Reset() {
	*x = HedgeBookDetailsReport{}
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HedgeBookDetailsReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HedgeBookDetailsReport) ProtoMessage() {}

func (x *HedgeBookDetailsReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HedgeBookDetailsReport.ProtoReflect.Descriptor instead.
func (*HedgeBookDetailsReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_otc_1_proto_rawDescGZIP(), []int{12}
}

func (x *HedgeBookDetailsReport) GetIsSnapshot() bool {
	if x != nil && x.IsSnapshot != nil {
		return *x.IsSnapshot
	}
	return false
}

func (x *HedgeBookDetailsReport) GetIsLastPart() bool {
	if x != nil && x.IsLastPart != nil {
		return *x.IsLastPart
	}
	return false
}

func (x *HedgeBookDetailsReport) GetBalanceItems() []*BalanceItem {
	if x != nil {
		return x.BalanceItems
	}
	return nil
}

func (x *HedgeBookDetailsReport) GetItemsLinks() []*BalanceItemsLink {
	if x != nil {
		return x.ItemsLinks
	}
	return nil
}

// Key that uniquely identifies each BalanceItem.
type BalanceItemKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// For CASH_ORDER and HEDGE_ORDER - Order ID assigned by server to originally placed order.
	// For BALANCE_OFFSET - Offset ID assigned by OTC.
	ItemId *string `protobuf:"bytes,1,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	// This field is associated with ItemType enum.
	ItemType *uint32 `protobuf:"varint,2,opt,name=item_type,json=itemType" json:"item_type,omitempty"`
}

func (x *BalanceItemKey) Reset() {
	*x = BalanceItemKey{}
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BalanceItemKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceItemKey) ProtoMessage() {}

func (x *BalanceItemKey) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceItemKey.ProtoReflect.Descriptor instead.
func (*BalanceItemKey) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_otc_1_proto_rawDescGZIP(), []int{13}
}

func (x *BalanceItemKey) GetItemId() string {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return ""
}

func (x *BalanceItemKey) GetItemType() uint32 {
	if x != nil && x.ItemType != nil {
		return *x.ItemType
	}
	return 0
}

// Balance item details.
type BalanceItem struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Unique identifier for each BalanceItem
	ItemKey *BalanceItemKey `protobuf:"bytes,1,opt,name=item_key,json=itemKey" json:"item_key,omitempty"`
	// Deleted flag is used in updates when entity is removed.
	// Only chain_order_id will be provided in this case.
	Deleted *bool `protobuf:"varint,2,opt,name=deleted" json:"deleted,omitempty"`
	// Time when order placed or balance offset initiated.
	UtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=utc_timestamp,json=utcTimestamp" json:"utc_timestamp,omitempty"`
	// Total order size in units.
	Units *common.Decimal `protobuf:"bytes,4,opt,name=units" json:"units,omitempty"`
	// Quantity open for further execution in units.
	OpenUnits *common.Decimal `protobuf:"bytes,5,opt,name=open_units,json=openUnits" json:"open_units,omitempty"`
	// Name of units for order size values in this message
	UnitsName *common.Text `protobuf:"bytes,6,opt,name=units_name,json=unitsName" json:"units_name,omitempty"`
	// Trader name initiated balance offset.
	// Used for BALANCE_OFFSET and if specified in OffsetHedgeBalanceRequest.
	Username *string `protobuf:"bytes,7,opt,name=username" json:"username,omitempty"`
	// User comment with information related to balance offset.
	// Used for BALANCE_OFFSET and if specified in OffsetHedgeBalanceRequest.
	Comment *string `protobuf:"bytes,8,opt,name=comment" json:"comment,omitempty"`
	// Server side contract id.
	ContractId *uint32 `protobuf:"varint,9,opt,name=contract_id,json=contractId" json:"contract_id,omitempty"`
}

func (x *BalanceItem) Reset() {
	*x = BalanceItem{}
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BalanceItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceItem) ProtoMessage() {}

func (x *BalanceItem) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceItem.ProtoReflect.Descriptor instead.
func (*BalanceItem) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_otc_1_proto_rawDescGZIP(), []int{14}
}

func (x *BalanceItem) GetItemKey() *BalanceItemKey {
	if x != nil {
		return x.ItemKey
	}
	return nil
}

func (x *BalanceItem) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

func (x *BalanceItem) GetUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.UtcTimestamp
	}
	return nil
}

func (x *BalanceItem) GetUnits() *common.Decimal {
	if x != nil {
		return x.Units
	}
	return nil
}

func (x *BalanceItem) GetOpenUnits() *common.Decimal {
	if x != nil {
		return x.OpenUnits
	}
	return nil
}

func (x *BalanceItem) GetUnitsName() *common.Text {
	if x != nil {
		return x.UnitsName
	}
	return nil
}

func (x *BalanceItem) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *BalanceItem) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *BalanceItem) GetContractId() uint32 {
	if x != nil && x.ContractId != nil {
		return *x.ContractId
	}
	return 0
}

// Balance items link details.
type BalanceItemsLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deleted flag is used in updates when entity is removed.
	// Only first_item_key and second_item_key will be provided in this case.
	Deleted *bool `protobuf:"varint,1,opt,name=deleted" json:"deleted,omitempty"`
	// Time when link created.
	LinkUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=link_utc_timestamp,json=linkUtcTimestamp" json:"link_utc_timestamp,omitempty"`
	// Unique identifier for first BalanceItem.
	FirstItemKey *BalanceItemKey `protobuf:"bytes,3,opt,name=first_item_key,json=firstItemKey" json:"first_item_key,omitempty"`
	// Unique identifier for second BalanceItem.
	SecondItemKey *BalanceItemKey `protobuf:"bytes,4,opt,name=second_item_key,json=secondItemKey" json:"second_item_key,omitempty"`
	// Link size in units of first item
	SizeInFirstItemUnits *common.Decimal `protobuf:"bytes,5,opt,name=size_in_first_item_units,json=sizeInFirstItemUnits" json:"size_in_first_item_units,omitempty"`
	// Units for size_in_first_item_units value (eg: 'Bushels', 'Tonnes', 'CAD', ...)
	FirstItemUnits *common.Text `protobuf:"bytes,6,opt,name=first_item_units,json=firstItemUnits" json:"first_item_units,omitempty"`
	// Link size from in units of the second item
	SizeInSecondItemUnits *common.Decimal `protobuf:"bytes,7,opt,name=size_in_second_item_units,json=sizeInSecondItemUnits" json:"size_in_second_item_units,omitempty"`
	// Units for size_in_second_item_units value (eg: 'Bushels', 'Tonnes', 'CAD', ...)
	SecondItemUnits *common.Text `protobuf:"bytes,8,opt,name=second_item_units,json=secondItemUnits" json:"second_item_units,omitempty"`
}

func (x *BalanceItemsLink) Reset() {
	*x = BalanceItemsLink{}
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BalanceItemsLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceItemsLink) ProtoMessage() {}

func (x *BalanceItemsLink) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceItemsLink.ProtoReflect.Descriptor instead.
func (*BalanceItemsLink) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_otc_1_proto_rawDescGZIP(), []int{15}
}

func (x *BalanceItemsLink) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

func (x *BalanceItemsLink) GetLinkUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LinkUtcTimestamp
	}
	return nil
}

func (x *BalanceItemsLink) GetFirstItemKey() *BalanceItemKey {
	if x != nil {
		return x.FirstItemKey
	}
	return nil
}

func (x *BalanceItemsLink) GetSecondItemKey() *BalanceItemKey {
	if x != nil {
		return x.SecondItemKey
	}
	return nil
}

func (x *BalanceItemsLink) GetSizeInFirstItemUnits() *common.Decimal {
	if x != nil {
		return x.SizeInFirstItemUnits
	}
	return nil
}

func (x *BalanceItemsLink) GetFirstItemUnits() *common.Text {
	if x != nil {
		return x.FirstItemUnits
	}
	return nil
}

func (x *BalanceItemsLink) GetSizeInSecondItemUnits() *common.Decimal {
	if x != nil {
		return x.SizeInSecondItemUnits
	}
	return nil
}

func (x *BalanceItemsLink) GetSecondItemUnits() *common.Text {
	if x != nil {
		return x.SecondItemUnits
	}
	return nil
}

// Offset hedge balance request.
type OffsetHedgeBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OTC instance id.
	OtcInstanceId *uint32 `protobuf:"varint,1,opt,name=otc_instance_id,json=otcInstanceId" json:"otc_instance_id,omitempty"`
	// Hedge balance key.
	HedgeBalanceKey *HedgeBalanceKey `protobuf:"bytes,2,opt,name=hedge_balance_key,json=hedgeBalanceKey" json:"hedge_balance_key,omitempty"`
	// Hedge balance offset.
	HedgeBalanceOffset *common.Decimal `protobuf:"bytes,3,opt,name=hedge_balance_offset,json=hedgeBalanceOffset" json:"hedge_balance_offset,omitempty"`
	// Trader name initiated balance offset.
	Username *string `protobuf:"bytes,4,opt,name=username" json:"username,omitempty"`
	// User comment.
	Comment *string `protobuf:"bytes,5,opt,name=comment" json:"comment,omitempty"`
	// offset balance to 0.
	ZeroBalance *bool `protobuf:"varint,6,opt,name=zero_balance,json=zeroBalance" json:"zero_balance,omitempty"`
}

func (x *OffsetHedgeBalanceRequest) Reset() {
	*x = OffsetHedgeBalanceRequest{}
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OffsetHedgeBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OffsetHedgeBalanceRequest) ProtoMessage() {}

func (x *OffsetHedgeBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OffsetHedgeBalanceRequest.ProtoReflect.Descriptor instead.
func (*OffsetHedgeBalanceRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_otc_1_proto_rawDescGZIP(), []int{16}
}

func (x *OffsetHedgeBalanceRequest) GetOtcInstanceId() uint32 {
	if x != nil && x.OtcInstanceId != nil {
		return *x.OtcInstanceId
	}
	return 0
}

func (x *OffsetHedgeBalanceRequest) GetHedgeBalanceKey() *HedgeBalanceKey {
	if x != nil {
		return x.HedgeBalanceKey
	}
	return nil
}

func (x *OffsetHedgeBalanceRequest) GetHedgeBalanceOffset() *common.Decimal {
	if x != nil {
		return x.HedgeBalanceOffset
	}
	return nil
}

func (x *OffsetHedgeBalanceRequest) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *OffsetHedgeBalanceRequest) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *OffsetHedgeBalanceRequest) GetZeroBalance() bool {
	if x != nil && x.ZeroBalance != nil {
		return *x.ZeroBalance
	}
	return false
}

// Offset hedge balance result.
type OffsetHedgeBalanceResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OffsetHedgeBalanceResult) Reset() {
	*x = OffsetHedgeBalanceResult{}
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OffsetHedgeBalanceResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OffsetHedgeBalanceResult) ProtoMessage() {}

func (x *OffsetHedgeBalanceResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OffsetHedgeBalanceResult.ProtoReflect.Descriptor instead.
func (*OffsetHedgeBalanceResult) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_otc_1_proto_rawDescGZIP(), []int{17}
}

// Change OTC state request.
// Shall provide OTC instance ID.
type ChangeOtcStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OTC instance id.
	OtcInstanceId *uint32 `protobuf:"varint,1,opt,name=otc_instance_id,json=otcInstanceId" json:"otc_instance_id,omitempty"`
	// New OTC instance state.
	// This field is associated with Action enum type.
	Action *uint32 `protobuf:"varint,2,opt,name=action" json:"action,omitempty"`
}

func (x *ChangeOtcStateRequest) Reset() {
	*x = ChangeOtcStateRequest{}
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeOtcStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeOtcStateRequest) ProtoMessage() {}

func (x *ChangeOtcStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeOtcStateRequest.ProtoReflect.Descriptor instead.
func (*ChangeOtcStateRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_otc_1_proto_rawDescGZIP(), []int{18}
}

func (x *ChangeOtcStateRequest) GetOtcInstanceId() uint32 {
	if x != nil && x.OtcInstanceId != nil {
		return *x.OtcInstanceId
	}
	return 0
}

func (x *ChangeOtcStateRequest) GetAction() uint32 {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return 0
}

// Change OTC state result.
type ChangeOtcStateResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChangeOtcStateResult) Reset() {
	*x = ChangeOtcStateResult{}
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeOtcStateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeOtcStateResult) ProtoMessage() {}

func (x *ChangeOtcStateResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeOtcStateResult.ProtoReflect.Descriptor instead.
func (*ChangeOtcStateResult) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_otc_1_proto_rawDescGZIP(), []int{19}
}

// Fill cash order request.
type FillCashOrderRequest struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// OTC instance id.
	OtcInstanceId *uint32 `protobuf:"varint,1,opt,name=otc_instance_id,json=otcInstanceId" json:"otc_instance_id,omitempty"`
	// Order ID assigned by server to originally placed order.
	// See order_2.OrderStatus.chain_order_id.
	ChainOrderId *string `protobuf:"bytes,2,opt,name=chain_order_id,json=chainOrderId" json:"chain_order_id,omitempty"`
	// Account ID in CQG trade routing system associated with the order.
	AccountId *int32 `protobuf:"zigzag32,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// Server side contract id of the contract for the order.
	ContractId *uint32 `protobuf:"varint,4,opt,name=contract_id,json=contractId" json:"contract_id,omitempty"`
	// Optional fill quantity in lots. Set this field only for partial fills.
	// Order will be fully filled if this field is not set.
	Qty *common.Decimal `protobuf:"bytes,5,opt,name=qty" json:"qty,omitempty"`
	// Fill price. May be omitted to fill limit order at order's price.
	ScaledFillPrice *int64 `protobuf:"zigzag64,6,opt,name=scaled_fill_price,json=scaledFillPrice" json:"scaled_fill_price,omitempty"`
	// OTC contributor id involved into the order fill processing.
	ContributorId *string `protobuf:"bytes,7,opt,name=contributor_id,json=contributorId" json:"contributor_id,omitempty"`
}

func (x *FillCashOrderRequest) Reset() {
	*x = FillCashOrderRequest{}
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FillCashOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FillCashOrderRequest) ProtoMessage() {}

func (x *FillCashOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FillCashOrderRequest.ProtoReflect.Descriptor instead.
func (*FillCashOrderRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_otc_1_proto_rawDescGZIP(), []int{20}
}

func (x *FillCashOrderRequest) GetOtcInstanceId() uint32 {
	if x != nil && x.OtcInstanceId != nil {
		return *x.OtcInstanceId
	}
	return 0
}

func (x *FillCashOrderRequest) GetChainOrderId() string {
	if x != nil && x.ChainOrderId != nil {
		return *x.ChainOrderId
	}
	return ""
}

func (x *FillCashOrderRequest) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *FillCashOrderRequest) GetContractId() uint32 {
	if x != nil && x.ContractId != nil {
		return *x.ContractId
	}
	return 0
}

func (x *FillCashOrderRequest) GetQty() *common.Decimal {
	if x != nil {
		return x.Qty
	}
	return nil
}

func (x *FillCashOrderRequest) GetScaledFillPrice() int64 {
	if x != nil && x.ScaledFillPrice != nil {
		return *x.ScaledFillPrice
	}
	return 0
}

func (x *FillCashOrderRequest) GetContributorId() string {
	if x != nil && x.ContributorId != nil {
		return *x.ContributorId
	}
	return ""
}

// Fill cash order result.
type FillCashOrderResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FillCashOrderResult) Reset() {
	*x = FillCashOrderResult{}
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FillCashOrderResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FillCashOrderResult) ProtoMessage() {}

func (x *FillCashOrderResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FillCashOrderResult.ProtoReflect.Descriptor instead.
func (*FillCashOrderResult) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_otc_1_proto_rawDescGZIP(), []int{21}
}

// Archive hedge balance details request.
type ArchiveHedgeBalanceDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hedge balance key.
	HedgeBalanceKey *HedgeBalanceKey `protobuf:"bytes,1,opt,name=hedge_balance_key,json=hedgeBalanceKey" json:"hedge_balance_key,omitempty"`
	// OTC instance id.
	OtcInstanceId *uint32 `protobuf:"varint,2,opt,name=otc_instance_id,json=otcInstanceId" json:"otc_instance_id,omitempty"`
}

func (x *ArchiveHedgeBalanceDetailsRequest) Reset() {
	*x = ArchiveHedgeBalanceDetailsRequest{}
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveHedgeBalanceDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveHedgeBalanceDetailsRequest) ProtoMessage() {}

func (x *ArchiveHedgeBalanceDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveHedgeBalanceDetailsRequest.ProtoReflect.Descriptor instead.
func (*ArchiveHedgeBalanceDetailsRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_otc_1_proto_rawDescGZIP(), []int{22}
}

func (x *ArchiveHedgeBalanceDetailsRequest) GetHedgeBalanceKey() *HedgeBalanceKey {
	if x != nil {
		return x.HedgeBalanceKey
	}
	return nil
}

func (x *ArchiveHedgeBalanceDetailsRequest) GetOtcInstanceId() uint32 {
	if x != nil && x.OtcInstanceId != nil {
		return *x.OtcInstanceId
	}
	return 0
}

// Archive hedge balance details response.
type ArchiveHedgeBalanceDetailsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ArchiveHedgeBalanceDetailsResult) Reset() {
	*x = ArchiveHedgeBalanceDetailsResult{}
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveHedgeBalanceDetailsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveHedgeBalanceDetailsResult) ProtoMessage() {}

func (x *ArchiveHedgeBalanceDetailsResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveHedgeBalanceDetailsResult.ProtoReflect.Descriptor instead.
func (*ArchiveHedgeBalanceDetailsResult) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_otc_1_proto_rawDescGZIP(), []int{23}
}

// Hedge balance details, marked as archived.
type ArchivedHedgeBalanceDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deleted flag is used in updates when entity is removed.
	// Only archive_id will be provided in this case.
	Deleted *bool `protobuf:"varint,1,opt,name=deleted" json:"deleted,omitempty"`
	// Unique identifier of archived hedge balance and its details; generated by OTC.
	// Should be used for grouping archived hedge balance details and archived hedge book details.
	ArchiveId *string `protobuf:"bytes,2,opt,name=archive_id,json=archiveId" json:"archive_id,omitempty"`
	// Archived hedge balance details.
	HedgeBalanceDetails *HedgeBalanceDetails `protobuf:"bytes,3,opt,name=hedge_balance_details,json=hedgeBalanceDetails" json:"hedge_balance_details,omitempty"`
	// The time when hedge balance and its details were archived.
	ArchiveUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=archive_utc_timestamp,json=archiveUtcTimestamp" json:"archive_utc_timestamp,omitempty"`
}

func (x *ArchivedHedgeBalanceDetails) Reset() {
	*x = ArchivedHedgeBalanceDetails{}
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchivedHedgeBalanceDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchivedHedgeBalanceDetails) ProtoMessage() {}

func (x *ArchivedHedgeBalanceDetails) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchivedHedgeBalanceDetails.ProtoReflect.Descriptor instead.
func (*ArchivedHedgeBalanceDetails) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_otc_1_proto_rawDescGZIP(), []int{24}
}

func (x *ArchivedHedgeBalanceDetails) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

func (x *ArchivedHedgeBalanceDetails) GetArchiveId() string {
	if x != nil && x.ArchiveId != nil {
		return *x.ArchiveId
	}
	return ""
}

func (x *ArchivedHedgeBalanceDetails) GetHedgeBalanceDetails() *HedgeBalanceDetails {
	if x != nil {
		return x.HedgeBalanceDetails
	}
	return nil
}

func (x *ArchivedHedgeBalanceDetails) GetArchiveUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchiveUtcTimestamp
	}
	return nil
}

// Request balance item links for specific item.
type BalanceItemsLinksRequest struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// OTC instance id.
	OtcInstanceId *uint32 `protobuf:"varint,1,opt,name=otc_instance_id,json=otcInstanceId" json:"otc_instance_id,omitempty"`
	// For CASH_ORDER and HEDGE_ORDER - Order ID assigned by server to originally placed order.
	// For BALANCE_OFFSET - Offset ID assigned by OTC.
	ItemId *string `protobuf:"bytes,2,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	// Order Account ID in CQG trade routing system.
	AccountId *int32 `protobuf:"zigzag32,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// Server side item contract id.
	ContractId *uint32 `protobuf:"varint,4,opt,name=contract_id,json=contractId" json:"contract_id,omitempty"`
}

func (x *BalanceItemsLinksRequest) Reset() {
	*x = BalanceItemsLinksRequest{}
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BalanceItemsLinksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceItemsLinksRequest) ProtoMessage() {}

func (x *BalanceItemsLinksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceItemsLinksRequest.ProtoReflect.Descriptor instead.
func (*BalanceItemsLinksRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_otc_1_proto_rawDescGZIP(), []int{25}
}

func (x *BalanceItemsLinksRequest) GetOtcInstanceId() uint32 {
	if x != nil && x.OtcInstanceId != nil {
		return *x.OtcInstanceId
	}
	return 0
}

func (x *BalanceItemsLinksRequest) GetItemId() string {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return ""
}

func (x *BalanceItemsLinksRequest) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *BalanceItemsLinksRequest) GetContractId() uint32 {
	if x != nil && x.ContractId != nil {
		return *x.ContractId
	}
	return 0
}

// Balance item links for requested item.
type BalanceItemsLinksResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All balance items for provided links.
	BalanceItems []*BalanceItem `protobuf:"bytes,1,rep,name=balance_items,json=balanceItems" json:"balance_items,omitempty"`
	// Links for requested item.
	ItemsLinks []*BalanceItemsLink `protobuf:"bytes,2,rep,name=items_links,json=itemsLinks" json:"items_links,omitempty"`
}

func (x *BalanceItemsLinksResult) Reset() {
	*x = BalanceItemsLinksResult{}
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BalanceItemsLinksResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceItemsLinksResult) ProtoMessage() {}

func (x *BalanceItemsLinksResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceItemsLinksResult.ProtoReflect.Descriptor instead.
func (*BalanceItemsLinksResult) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_otc_1_proto_rawDescGZIP(), []int{26}
}

func (x *BalanceItemsLinksResult) GetBalanceItems() []*BalanceItem {
	if x != nil {
		return x.BalanceItems
	}
	return nil
}

func (x *BalanceItemsLinksResult) GetItemsLinks() []*BalanceItemsLink {
	if x != nil {
		return x.ItemsLinks
	}
	return nil
}

// Update tail management configuration result.
type UpdateTailManagementConfigurationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateTailManagementConfigurationResult) Reset() {
	*x = UpdateTailManagementConfigurationResult{}
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTailManagementConfigurationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTailManagementConfigurationResult) ProtoMessage() {}

func (x *UpdateTailManagementConfigurationResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTailManagementConfigurationResult.ProtoReflect.Descriptor instead.
func (*UpdateTailManagementConfigurationResult) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_otc_1_proto_rawDescGZIP(), []int{27}
}

// Subscribe on Tail Management Configuration updates.
// Deprecated. Use TailManagementConfigurationSubscription2 instead.
type TailManagementConfigurationSubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If set to true - subscribe to changes, if false - drop subscription.
	Subscribe *bool `protobuf:"varint,1,opt,name=subscribe,def=1" json:"subscribe,omitempty"`
	// OTC instance id.
	OtcInstanceId *uint32 `protobuf:"varint,2,opt,name=otc_instance_id,json=otcInstanceId" json:"otc_instance_id,omitempty"`
}

// Default values for TailManagementConfigurationSubscription fields.
const (
	Default_TailManagementConfigurationSubscription_Subscribe = bool(true)
)

func (x *TailManagementConfigurationSubscription) Reset() {
	*x = TailManagementConfigurationSubscription{}
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TailManagementConfigurationSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TailManagementConfigurationSubscription) ProtoMessage() {}

func (x *TailManagementConfigurationSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TailManagementConfigurationSubscription.ProtoReflect.Descriptor instead.
func (*TailManagementConfigurationSubscription) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_otc_1_proto_rawDescGZIP(), []int{28}
}

func (x *TailManagementConfigurationSubscription) GetSubscribe() bool {
	if x != nil && x.Subscribe != nil {
		return *x.Subscribe
	}
	return Default_TailManagementConfigurationSubscription_Subscribe
}

func (x *TailManagementConfigurationSubscription) GetOtcInstanceId() uint32 {
	if x != nil && x.OtcInstanceId != nil {
		return *x.OtcInstanceId
	}
	return 0
}

// Subscribe on Tail Management Configuration updates.
type TailManagementConfigurationSubscription2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If set to true - subscribe to changes, if false - drop subscription.
	Subscribe *bool `protobuf:"varint,1,opt,name=subscribe,def=1" json:"subscribe,omitempty"`
	// OTC instance id.
	OtcInstanceId *uint32 `protobuf:"varint,2,opt,name=otc_instance_id,json=otcInstanceId" json:"otc_instance_id,omitempty"`
}

// Default values for TailManagementConfigurationSubscription2 fields.
const (
	Default_TailManagementConfigurationSubscription2_Subscribe = bool(true)
)

func (x *TailManagementConfigurationSubscription2) Reset() {
	*x = TailManagementConfigurationSubscription2{}
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TailManagementConfigurationSubscription2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TailManagementConfigurationSubscription2) ProtoMessage() {}

func (x *TailManagementConfigurationSubscription2) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TailManagementConfigurationSubscription2.ProtoReflect.Descriptor instead.
func (*TailManagementConfigurationSubscription2) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_otc_1_proto_rawDescGZIP(), []int{29}
}

func (x *TailManagementConfigurationSubscription2) GetSubscribe() bool {
	if x != nil && x.Subscribe != nil {
		return *x.Subscribe
	}
	return Default_TailManagementConfigurationSubscription2_Subscribe
}

func (x *TailManagementConfigurationSubscription2) GetOtcInstanceId() uint32 {
	if x != nil && x.OtcInstanceId != nil {
		return *x.OtcInstanceId
	}
	return 0
}

// Request to update Tail Management Configuration.
type UpdateTailManagementConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OTC instance id.
	OtcInstanceId *uint32 `protobuf:"varint,1,opt,name=otc_instance_id,json=otcInstanceId" json:"otc_instance_id,omitempty"`
	// New tail management configuration.
	TailManagementConfigurations []*TailManagementConfiguration `protobuf:"bytes,2,rep,name=tail_management_configurations,json=tailManagementConfigurations" json:"tail_management_configurations,omitempty"`
	// New group tail management configurations.
	GroupTailManagementConfigurations []*GroupTailManagementConfiguration `protobuf:"bytes,3,rep,name=group_tail_management_configurations,json=groupTailManagementConfigurations" json:"group_tail_management_configurations,omitempty"`
}

func (x *UpdateTailManagementConfiguration) Reset() {
	*x = UpdateTailManagementConfiguration{}
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTailManagementConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTailManagementConfiguration) ProtoMessage() {}

func (x *UpdateTailManagementConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTailManagementConfiguration.ProtoReflect.Descriptor instead.
func (*UpdateTailManagementConfiguration) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_otc_1_proto_rawDescGZIP(), []int{30}
}

func (x *UpdateTailManagementConfiguration) GetOtcInstanceId() uint32 {
	if x != nil && x.OtcInstanceId != nil {
		return *x.OtcInstanceId
	}
	return 0
}

func (x *UpdateTailManagementConfiguration) GetTailManagementConfigurations() []*TailManagementConfiguration {
	if x != nil {
		return x.TailManagementConfigurations
	}
	return nil
}

func (x *UpdateTailManagementConfiguration) GetGroupTailManagementConfigurations() []*GroupTailManagementConfiguration {
	if x != nil {
		return x.GroupTailManagementConfigurations
	}
	return nil
}

// Message sent to subscribers about Tail Management Configuration change.
// Deprecated. TailManagementConfigurationReport2 will be used instead for TailManagementConfigurationSubscription2.
type TailManagementConfigurationReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if this is a snapshot (all previously known configuration data
	// about this contract and account should be cleaned).
	// False used for incremental updates.
	// Snapshot will be sent only once after subscription. May be sent in multiple
	// parts. Each part will have this field set to true. False by default.
	IsSnapshot *bool `protobuf:"varint,1,opt,name=is_snapshot,json=isSnapshot" json:"is_snapshot,omitempty"`
	// If true - then this message means last part of multi-parted snapshot.
	IsLastPart *bool `protobuf:"varint,2,opt,name=is_last_part,json=isLastPart" json:"is_last_part,omitempty"`
	// Contract level tail management configurations set by customer.
	TailManagementConfigurations []*TailManagementConfiguration `protobuf:"bytes,3,rep,name=tail_management_configurations,json=tailManagementConfigurations" json:"tail_management_configurations,omitempty"`
}

func (x *TailManagementConfigurationReport) Reset() {
	*x = TailManagementConfigurationReport{}
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TailManagementConfigurationReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TailManagementConfigurationReport) ProtoMessage() {}

func (x *TailManagementConfigurationReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TailManagementConfigurationReport.ProtoReflect.Descriptor instead.
func (*TailManagementConfigurationReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_otc_1_proto_rawDescGZIP(), []int{31}
}

func (x *TailManagementConfigurationReport) GetIsSnapshot() bool {
	if x != nil && x.IsSnapshot != nil {
		return *x.IsSnapshot
	}
	return false
}

func (x *TailManagementConfigurationReport) GetIsLastPart() bool {
	if x != nil && x.IsLastPart != nil {
		return *x.IsLastPart
	}
	return false
}

func (x *TailManagementConfigurationReport) GetTailManagementConfigurations() []*TailManagementConfiguration {
	if x != nil {
		return x.TailManagementConfigurations
	}
	return nil
}

// Message sent to subscribers about Tail Management Configuration change.
// If configuration on group level is overridden, configuration on symbol level is ignored.
type TailManagementConfigurationReport2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if this is a snapshot (all previously known configuration data
	// about this contract and account should be cleaned).
	// False used for incremental updates.
	// Snapshot will be sent only once after subscription. May be sent in multiple
	// parts. Each part will have this field set to true. False by default.
	IsSnapshot *bool `protobuf:"varint,1,opt,name=is_snapshot,json=isSnapshot" json:"is_snapshot,omitempty"`
	// If true - then this message means last part of multi-parted snapshot.
	IsLastPart *bool `protobuf:"varint,2,opt,name=is_last_part,json=isLastPart" json:"is_last_part,omitempty"`
	// Contract level tail management configurations set by customer.
	TailManagementConfigurations []*TailManagementConfiguration `protobuf:"bytes,3,rep,name=tail_management_configurations,json=tailManagementConfigurations" json:"tail_management_configurations,omitempty"`
	// Default contract level configuration taken from OTC configuration.
	DefaultTailManagementConfiguration *TailManagementConfiguration `protobuf:"bytes,4,opt,name=default_tail_management_configuration,json=defaultTailManagementConfiguration" json:"default_tail_management_configuration,omitempty"`
	// Group level tail management configurations set by customer.
	GroupTailManagementConfigurations []*GroupTailManagementConfiguration `protobuf:"bytes,5,rep,name=group_tail_management_configurations,json=groupTailManagementConfigurations" json:"group_tail_management_configurations,omitempty"`
	// Default group level configurations taken from OTC configuration.
	DefaultGroupTailManagementConfiguration *GroupTailManagementConfiguration `protobuf:"bytes,6,opt,name=default_group_tail_management_configuration,json=defaultGroupTailManagementConfiguration" json:"default_group_tail_management_configuration,omitempty"`
}

func (x *TailManagementConfigurationReport2) Reset() {
	*x = TailManagementConfigurationReport2{}
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TailManagementConfigurationReport2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TailManagementConfigurationReport2) ProtoMessage() {}

func (x *TailManagementConfigurationReport2) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TailManagementConfigurationReport2.ProtoReflect.Descriptor instead.
func (*TailManagementConfigurationReport2) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_otc_1_proto_rawDescGZIP(), []int{32}
}

func (x *TailManagementConfigurationReport2) GetIsSnapshot() bool {
	if x != nil && x.IsSnapshot != nil {
		return *x.IsSnapshot
	}
	return false
}

func (x *TailManagementConfigurationReport2) GetIsLastPart() bool {
	if x != nil && x.IsLastPart != nil {
		return *x.IsLastPart
	}
	return false
}

func (x *TailManagementConfigurationReport2) GetTailManagementConfigurations() []*TailManagementConfiguration {
	if x != nil {
		return x.TailManagementConfigurations
	}
	return nil
}

func (x *TailManagementConfigurationReport2) GetDefaultTailManagementConfiguration() *TailManagementConfiguration {
	if x != nil {
		return x.DefaultTailManagementConfiguration
	}
	return nil
}

func (x *TailManagementConfigurationReport2) GetGroupTailManagementConfigurations() []*GroupTailManagementConfiguration {
	if x != nil {
		return x.GroupTailManagementConfigurations
	}
	return nil
}

func (x *TailManagementConfigurationReport2) GetDefaultGroupTailManagementConfiguration() *GroupTailManagementConfiguration {
	if x != nil {
		return x.DefaultGroupTailManagementConfiguration
	}
	return nil
}

type RequestTailManagementConfigurationMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OTC instance id.
	OtcInstanceId *uint32 `protobuf:"varint,1,opt,name=otc_instance_id,json=otcInstanceId" json:"otc_instance_id,omitempty"`
}

func (x *RequestTailManagementConfigurationMetadata) Reset() {
	*x = RequestTailManagementConfigurationMetadata{}
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestTailManagementConfigurationMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestTailManagementConfigurationMetadata) ProtoMessage() {}

func (x *RequestTailManagementConfigurationMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestTailManagementConfigurationMetadata.ProtoReflect.Descriptor instead.
func (*RequestTailManagementConfigurationMetadata) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_otc_1_proto_rawDescGZIP(), []int{33}
}

func (x *RequestTailManagementConfigurationMetadata) GetOtcInstanceId() uint32 {
	if x != nil && x.OtcInstanceId != nil {
		return *x.OtcInstanceId
	}
	return 0
}

// Metadata to describe Tail Management Configuration.
type TailManagementConfigurationMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ATDL XML schema used to describe parameters metadata and layout.
	Metadata *string `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// ATDL XML schema used to describe parameters metadata and layout for contract groups.
	GroupMetadata *string `protobuf:"bytes,2,opt,name=group_metadata,json=groupMetadata" json:"group_metadata,omitempty"`
}

func (x *TailManagementConfigurationMetadata) Reset() {
	*x = TailManagementConfigurationMetadata{}
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TailManagementConfigurationMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TailManagementConfigurationMetadata) ProtoMessage() {}

func (x *TailManagementConfigurationMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TailManagementConfigurationMetadata.ProtoReflect.Descriptor instead.
func (*TailManagementConfigurationMetadata) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_otc_1_proto_rawDescGZIP(), []int{34}
}

func (x *TailManagementConfigurationMetadata) GetMetadata() string {
	if x != nil && x.Metadata != nil {
		return *x.Metadata
	}
	return ""
}

func (x *TailManagementConfigurationMetadata) GetGroupMetadata() string {
	if x != nil && x.GroupMetadata != nil {
		return *x.GroupMetadata
	}
	return ""
}

// Describe Tail Management Configuration per Hedge Account Balance.
type TailManagementConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hedge balance keys.
	// OTC instance default configuration can be specified by omitting hedge_balance_keys.balance_contract_symbol and
	// hedge_balance_keys.account_id.
	// Account level default can be specified by omitting hedge_balance_keys.balance_contract_symbol.
	HedgeBalanceKeys []*HedgeBalanceKey `protobuf:"bytes,1,rep,name=hedge_balance_keys,json=hedgeBalanceKeys" json:"hedge_balance_keys,omitempty"`
	// If set to true – OTC shall remove this configuration from cache.
	Removed              *bool                 `protobuf:"varint,2,opt,name=removed" json:"removed,omitempty"`
	ConfigurationEntries []*ConfigurationEntry `protobuf:"bytes,3,rep,name=configuration_entries,json=configurationEntries" json:"configuration_entries,omitempty"`
}

func (x *TailManagementConfiguration) Reset() {
	*x = TailManagementConfiguration{}
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TailManagementConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TailManagementConfiguration) ProtoMessage() {}

func (x *TailManagementConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TailManagementConfiguration.ProtoReflect.Descriptor instead.
func (*TailManagementConfiguration) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_otc_1_proto_rawDescGZIP(), []int{35}
}

func (x *TailManagementConfiguration) GetHedgeBalanceKeys() []*HedgeBalanceKey {
	if x != nil {
		return x.HedgeBalanceKeys
	}
	return nil
}

func (x *TailManagementConfiguration) GetRemoved() bool {
	if x != nil && x.Removed != nil {
		return *x.Removed
	}
	return false
}

func (x *TailManagementConfiguration) GetConfigurationEntries() []*ConfigurationEntry {
	if x != nil {
		return x.ConfigurationEntries
	}
	return nil
}

// Describe Tail Management Configuration per contract group.
type GroupTailManagementConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Group keys.
	// OTC instance default configuration can be specified by omitting group_keys.group_symbol and group_keys.account_id.
	// Account level default can be specified by omitting group_keys.group_symbol.
	GroupKeys []*GroupKey `protobuf:"bytes,1,rep,name=group_keys,json=groupKeys" json:"group_keys,omitempty"`
	// If set to true – OTC shall remove this configuration from cache.
	Removed              *bool                 `protobuf:"varint,2,opt,name=removed" json:"removed,omitempty"`
	ConfigurationEntries []*ConfigurationEntry `protobuf:"bytes,3,rep,name=configuration_entries,json=configurationEntries" json:"configuration_entries,omitempty"`
}

func (x *GroupTailManagementConfiguration) Reset() {
	*x = GroupTailManagementConfiguration{}
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupTailManagementConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupTailManagementConfiguration) ProtoMessage() {}

func (x *GroupTailManagementConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupTailManagementConfiguration.ProtoReflect.Descriptor instead.
func (*GroupTailManagementConfiguration) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_otc_1_proto_rawDescGZIP(), []int{36}
}

func (x *GroupTailManagementConfiguration) GetGroupKeys() []*GroupKey {
	if x != nil {
		return x.GroupKeys
	}
	return nil
}

func (x *GroupTailManagementConfiguration) GetRemoved() bool {
	if x != nil && x.Removed != nil {
		return *x.Removed
	}
	return false
}

func (x *GroupTailManagementConfiguration) GetConfigurationEntries() []*ConfigurationEntry {
	if x != nil {
		return x.ConfigurationEntries
	}
	return nil
}

// Pair of configuration name with its value.
type ConfigurationEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If set to true – OTC shall remove this parameter from cache and take default.
	Removed *bool   `protobuf:"varint,1,opt,name=removed" json:"removed,omitempty"`
	Name    *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Value   *string `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (x *ConfigurationEntry) Reset() {
	*x = ConfigurationEntry{}
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigurationEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationEntry) ProtoMessage() {}

func (x *ConfigurationEntry) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_otc_1_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationEntry.ProtoReflect.Descriptor instead.
func (*ConfigurationEntry) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_otc_1_proto_rawDescGZIP(), []int{37}
}

func (x *ConfigurationEntry) GetRemoved() bool {
	if x != nil && x.Removed != nil {
		return *x.Removed
	}
	return false
}

func (x *ConfigurationEntry) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ConfigurationEntry) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

var File_protos_WebAPI_otc_1_proto protoreflect.FileDescriptor

var file_protos_WebAPI_otc_1_proto_rawDesc = []byte{
	0x0a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49, 0x2f,
	0x6f, 0x74, 0x63, 0x5f, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6f, 0x74, 0x63,
	0x5f, 0x31, 0x1a, 0x23, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41, 0x50,
	0x49, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f,
	0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f,
	0x57, 0x65, 0x62, 0x41, 0x50, 0x49, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x64, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x92, 0x0b, 0x0a,
	0x0a, 0x4f, 0x74, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x5d, 0x0a, 0x1a, 0x6f, 0x74,
	0x63, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6f, 0x74, 0x63, 0x5f, 0x31, 0x2e, 0x4f, 0x74, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x18, 0x6f, 0x74, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x18, 0x68, 0x65, 0x64,
	0x67, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x74,
	0x63, 0x5f, 0x31, 0x2e, 0x48, 0x65, 0x64, 0x67, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x73, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x68, 0x65, 0x64, 0x67,
	0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x6a, 0x0a, 0x1f, 0x68, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6b,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x74,
	0x63, 0x5f, 0x31, 0x2e, 0x48, 0x65, 0x64, 0x67, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x1c, 0x68, 0x65, 0x64, 0x67, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61,
	0x0a, 0x1c, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x68, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x74, 0x63, 0x5f, 0x31, 0x2e, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x48, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x19, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x48, 0x65,
	0x64, 0x67, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x55, 0x0a, 0x18, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6f, 0x74, 0x63, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x74, 0x63, 0x5f, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x4f, 0x74, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x15, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x74, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x17, 0x66, 0x69, 0x6c, 0x6c,
	0x5f, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x74, 0x63, 0x5f,
	0x31, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x43, 0x61, 0x73, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x14, 0x66, 0x69, 0x6c, 0x6c, 0x43, 0x61, 0x73, 0x68,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7a, 0x0a, 0x25,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x68, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x74,
	0x63, 0x5f, 0x31, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x48, 0x65, 0x64, 0x67, 0x65,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x21, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x48, 0x65,
	0x64, 0x67, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5e, 0x0a, 0x1b, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6f, 0x74, 0x63, 0x5f, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x18,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x4c, 0x69, 0x6e, 0x6b,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x8f, 0x01, 0x0a, 0x2a, 0x74, 0x61, 0x69,
	0x6c, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x6f, 0x74, 0x63, 0x5f, 0x31, 0x2e, 0x54, 0x61, 0x69, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x27, 0x74, 0x61, 0x69, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x79, 0x0a, 0x24, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x74, 0x63, 0x5f, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x69, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x21, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x69, 0x6c, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x95, 0x01, 0x0a, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x6f, 0x74, 0x63, 0x5f, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x61,
	0x69, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x2a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x61, 0x69, 0x6c, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x8f, 0x01,
	0x0a, 0x2c, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x74, 0x63, 0x5f, 0x31, 0x2e, 0x54, 0x61, 0x69,
	0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x32, 0x52, 0x28, 0x74, 0x61, 0x69, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x4a,
	0x04, 0x08, 0x0d, 0x10, 0x0e, 0x52, 0x1a, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x88, 0x0e, 0x0a, 0x09, 0x4f, 0x74, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x28, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74,
	0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x4b, 0x0a, 0x14, 0x6f, 0x74, 0x63,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x74, 0x63, 0x5f, 0x31, 0x2e,
	0x4f, 0x74, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x12, 0x6f, 0x74, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x45, 0x0a, 0x12, 0x68, 0x65, 0x64, 0x67, 0x65, 0x5f,
	0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x74, 0x63, 0x5f, 0x31, 0x2e, 0x48, 0x65, 0x64, 0x67, 0x65,
	0x42, 0x6f, 0x6f, 0x6b, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x10, 0x68, 0x65, 0x64,
	0x67, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x58, 0x0a,
	0x19, 0x68, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6f, 0x74, 0x63, 0x5f, 0x31, 0x2e, 0x48, 0x65, 0x64, 0x67, 0x65, 0x42, 0x6f,
	0x6f, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x16, 0x68, 0x65, 0x64, 0x67, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x5e, 0x0a, 0x1b, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x5f, 0x68, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f,
	0x74, 0x63, 0x5f, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x48, 0x65, 0x64, 0x67, 0x65,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x18, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x48, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x52, 0x0a, 0x17, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x6f, 0x74, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x74, 0x63, 0x5f, 0x31,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x74, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x14, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x74, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4f, 0x0a, 0x16, 0x66,
	0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x74,
	0x63, 0x5f, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x43, 0x61, 0x73, 0x68, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x13, 0x66, 0x69, 0x6c, 0x6c, 0x43, 0x61, 0x73,
	0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x77, 0x0a, 0x24,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x68, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x74, 0x63,
	0x5f, 0x31, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x48, 0x65, 0x64, 0x67, 0x65, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x20, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x48, 0x65, 0x64, 0x67,
	0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x5b, 0x0a, 0x1a, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x74, 0x63, 0x5f,
	0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x4c, 0x69,
	0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x17, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x7d, 0x0a, 0x24, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x6f, 0x74, 0x63, 0x5f, 0x31, 0x2e, 0x54, 0x61, 0x69, 0x6c, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x02, 0x18, 0x01, 0x52, 0x21,
	0x74, 0x61, 0x69, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x7f, 0x0a, 0x26, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x74, 0x63, 0x5f, 0x31, 0x2e, 0x54, 0x61, 0x69, 0x6c, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x23, 0x74,
	0x61, 0x69, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x8c, 0x01, 0x0a, 0x2b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x61,
	0x69, 0x6c, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x74, 0x63, 0x5f, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x69, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x27, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x69, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x7d, 0x0a, 0x26, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x32, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x74, 0x63, 0x5f, 0x31, 0x2e, 0x54, 0x61, 0x69, 0x6c, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x32, 0x52, 0x22, 0x74, 0x61,
	0x69, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x32,
	0x22, 0x98, 0x03, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x02, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x65, 0x12, 0x1e, 0x0a, 0x1a,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x10, 0x66, 0x12, 0x1d, 0x0a, 0x19,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x67, 0x12, 0x2c, 0x0a, 0x28, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43,
	0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x56, 0x49,
	0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x68, 0x12, 0x31, 0x0a, 0x2d, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54,
	0x5f, 0x56, 0x49, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x69, 0x12, 0x19, 0x0a, 0x15,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x6a, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x6b,
	0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10, 0x6c, 0x4a, 0x04, 0x08, 0x0f, 0x10,
	0x10, 0x52, 0x19, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x62, 0x61, 0x73, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x58, 0x0a, 0x0f,
	0x48, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x2a,
	0x05, 0x08, 0x64, 0x10, 0xc8, 0x01, 0x22, 0x4c, 0x0a, 0x08, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b,
	0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x3e, 0x0a, 0x18, 0x4f, 0x74, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x22, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x22, 0x5d, 0x0a, 0x12, 0x4f, 0x74, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x47, 0x0a, 0x13, 0x6f, 0x74,
	0x63, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x74, 0x63, 0x5f, 0x31, 0x2e,
	0x4f, 0x74, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x11, 0x6f, 0x74, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x22, 0x5d, 0x0a, 0x10, 0x4f, 0x74, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x22, 0x64, 0x0a, 0x16, 0x48, 0x65, 0x64, 0x67, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x73,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x09,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x74, 0x63, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x74, 0x63, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0xde, 0x02, 0x0a, 0x10, 0x48, 0x65, 0x64,
	0x67, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x20,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74,
	0x12, 0x4e, 0x0a, 0x15, 0x68, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6f, 0x74, 0x63, 0x5f, 0x31, 0x2e, 0x48, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x13, 0x68, 0x65, 0x64,
	0x67, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x67, 0x0a, 0x1e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x64,
	0x67, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x74, 0x63, 0x5f, 0x31,
	0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x48, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x1b, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x48, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x4e, 0x0a, 0x15, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x74, 0x63, 0x5f, 0x31,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x13, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xe5, 0x02, 0x0a, 0x13, 0x48, 0x65,
	0x64, 0x67, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x42, 0x0a, 0x11, 0x68, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f,
	0x74, 0x63, 0x5f, 0x31, 0x2e, 0x48, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x4b, 0x65, 0x79, 0x52, 0x0f, 0x68, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12,
	0x31, 0x0a, 0x0d, 0x68, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0c, 0x68, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x35, 0x0a, 0x0f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71,
	0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0e, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x2d, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f,
	0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0xbf, 0x01, 0x0a, 0x13, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x09, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6f,
	0x74, 0x63, 0x5f, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x12, 0x31, 0x0a, 0x0d, 0x68, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0c, 0x68, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x5f, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x97, 0x02, 0x0a, 0x1c, 0x48, 0x65, 0x64, 0x67, 0x65, 0x42, 0x6f, 0x6f,
	0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x09, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x74, 0x63, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x6f, 0x74, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x42, 0x0a, 0x11, 0x68, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x74,
	0x63, 0x5f, 0x31, 0x2e, 0x48, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x4b, 0x65, 0x79, 0x52, 0x0f, 0x68, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x4b, 0x65, 0x79, 0x12, 0x48, 0x0a, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x74, 0x63,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x66, 0x72,
	0x6f, 0x6d, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x49, 0x64, 0x22, 0x99, 0x02,
	0x0a, 0x16, 0x48, 0x65, 0x64, 0x67, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x12, 0x37, 0x0a, 0x0d, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x74, 0x63, 0x5f, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x74, 0x63, 0x5f,
	0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x4a, 0x04,
	0x08, 0x03, 0x10, 0x06, 0x52, 0x12, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x13, 0x68, 0x65, 0x64, 0x67, 0x65, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x1a, 0x63,
	0x61, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x5f, 0x68, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x0e, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x3f, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e,
	0x0a, 0x0a, 0x43, 0x41, 0x53, 0x48, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0f,
	0x0a, 0x0b, 0x48, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x02, 0x12,
	0x12, 0x0a, 0x0e, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45,
	0x54, 0x10, 0x03, 0x22, 0xf8, 0x02, 0x0a, 0x0b, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x30, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x74, 0x63, 0x5f, 0x31, 0x2e, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4b, 0x65, 0x79, 0x52, 0x07, 0x69, 0x74,
	0x65, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12,
	0x3f, 0x0a, 0x0d, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0c, 0x75, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x22, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x05, 0x75,
	0x6e, 0x69, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x55, 0x6e, 0x69, 0x74,
	0x73, 0x12, 0x2d, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x31,
	0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x2a, 0x05, 0x08, 0x64, 0x10, 0xc8, 0x01, 0x22, 0xf6,
	0x03, 0x0a, 0x10, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x4c,
	0x69, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x48, 0x0a,
	0x12, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x6c, 0x69, 0x6e, 0x6b, 0x55, 0x74, 0x63, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3b, 0x0a, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6f, 0x74, 0x63, 0x5f, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x4b, 0x65, 0x79, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x4b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6f, 0x74, 0x63, 0x5f, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x4b, 0x65, 0x79, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x49, 0x74, 0x65, 0x6d,
	0x4b, 0x65, 0x79, 0x12, 0x44, 0x0a, 0x18, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x52, 0x14, 0x73, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x10, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x31, 0x2e, 0x54,
	0x65, 0x78, 0x74, 0x52, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x55, 0x6e,
	0x69, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x19, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x52, 0x15, 0x73, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x11, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f,
	0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x49, 0x74,
	0x65, 0x6d, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x22, 0xa0, 0x02, 0x0a, 0x19, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x48, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x74, 0x63, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x6f, 0x74, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x42, 0x0a,
	0x11, 0x68, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x74, 0x63, 0x5f, 0x31,
	0x2e, 0x48, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79,
	0x52, 0x0f, 0x68, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65,
	0x79, 0x12, 0x3e, 0x0a, 0x14, 0x68, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x12, 0x68,
	0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x7a, 0x65, 0x72, 0x6f, 0x5f,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x7a,
	0x65, 0x72, 0x6f, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x48, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4f, 0x74, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x74, 0x63, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x74, 0x63, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x31, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e,
	0x44, 0x10, 0x01, 0x22, 0x16, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x74, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x9e, 0x02, 0x0a, 0x14,
	0x46, 0x69, 0x6c, 0x6c, 0x43, 0x61, 0x73, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x74, 0x63, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f,
	0x74, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x03, 0x71, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x03, 0x71,
	0x74, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c,
	0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0f, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x2a, 0x05, 0x08, 0x64, 0x10, 0xc8, 0x01, 0x22, 0x15, 0x0a, 0x13,
	0x46, 0x69, 0x6c, 0x6c, 0x43, 0x61, 0x73, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x21, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x48,
	0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x11, 0x68, 0x65, 0x64,
	0x67, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x74, 0x63, 0x5f, 0x31, 0x2e, 0x48, 0x65, 0x64,
	0x67, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x0f, 0x68, 0x65,
	0x64, 0x67, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a,
	0x0f, 0x6f, 0x74, 0x63, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x74, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x22, 0x0a, 0x20, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x48, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xf6, 0x01, 0x0a, 0x1b, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x48, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x49, 0x64, 0x12, 0x4e, 0x0a, 0x15, 0x68, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x74, 0x63, 0x5f, 0x31, 0x2e, 0x48, 0x65, 0x64, 0x67, 0x65, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x13, 0x68,
	0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x4e, 0x0a, 0x15, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x74,
	0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x13, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x22, 0xa2, 0x01, 0x0a, 0x18, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x26, 0x0a, 0x0f, 0x6f, 0x74, 0x63, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x74, 0x63, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64,
	0x2a, 0x05, 0x08, 0x64, 0x10, 0xc8, 0x01, 0x22, 0x8c, 0x01, 0x0a, 0x17, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x37, 0x0a, 0x0d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x74, 0x63,
	0x5f, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x38, 0x0a, 0x0b,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x74, 0x63, 0x5f, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x22, 0x29, 0x0a, 0x27, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x69, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x75, 0x0a, 0x27, 0x54, 0x61, 0x69, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x09,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x74, 0x63, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x74, 0x63, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x76, 0x0a, 0x28, 0x54, 0x61, 0x69, 0x6c,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x32, 0x12, 0x22, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x09, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x74, 0x63, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x6f, 0x74, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x22, 0xaf, 0x02, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x69, 0x6c, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x74, 0x63, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x6f, 0x74, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x68,
	0x0a, 0x1e, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x74, 0x63, 0x5f, 0x31, 0x2e, 0x54,
	0x61, 0x69, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1c, 0x74, 0x61, 0x69, 0x6c,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x78, 0x0a, 0x24, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x74, 0x63, 0x5f, 0x31, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x69, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x21, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x69, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0xd0, 0x01, 0x0a, 0x21, 0x54, 0x61, 0x69, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x12, 0x68, 0x0a, 0x1e, 0x74,
	0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x74, 0x63, 0x5f, 0x31, 0x2e, 0x54, 0x61, 0x69, 0x6c,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1c, 0x74, 0x61, 0x69, 0x6c, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xca, 0x04, 0x0a, 0x22, 0x54, 0x61, 0x69, 0x6c, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x32, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x73, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x20, 0x0a,
	0x0c, 0x69, 0x73, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x12,
	0x68, 0x0a, 0x1e, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x74, 0x63, 0x5f, 0x31, 0x2e,
	0x54, 0x61, 0x69, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1c, 0x74, 0x61, 0x69,
	0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x75, 0x0a, 0x25, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x74, 0x63, 0x5f, 0x31,
	0x2e, 0x54, 0x61, 0x69, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x22, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x61, 0x69, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x78, 0x0a, 0x24, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x6f, 0x74, 0x63, 0x5f, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x69, 0x6c,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x21, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61,
	0x69, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x2b, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x61, 0x69,
	0x6c, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x6f, 0x74, 0x63, 0x5f, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61,
	0x69, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x27, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x69, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x54, 0x0a, 0x2a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x61, 0x69,
	0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x74, 0x63, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x74, 0x63, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x68, 0x0a, 0x23, 0x54, 0x61, 0x69, 0x6c,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xcd, 0x01, 0x0a, 0x1b, 0x54, 0x61, 0x69, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x12, 0x68, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6f, 0x74, 0x63, 0x5f, 0x31, 0x2e, 0x48, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x10, 0x68, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x64, 0x12, 0x4e, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x74, 0x63, 0x5f, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x20, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x69, 0x6c,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6f, 0x74,
	0x63, 0x5f, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x64, 0x12, 0x4e, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6f, 0x74, 0x63, 0x5f, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x22, 0x58, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0x64, 0x0a, 0x0d, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f,
	0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e,
	0x45, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10,
	0x02, 0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65,
	0x62, 0x41, 0x50, 0x49,
}

var (
	file_protos_WebAPI_otc_1_proto_rawDescOnce sync.Once
	file_protos_WebAPI_otc_1_proto_rawDescData = file_protos_WebAPI_otc_1_proto_rawDesc
)

func file_protos_WebAPI_otc_1_proto_rawDescGZIP() []byte {
	file_protos_WebAPI_otc_1_proto_rawDescOnce.Do(func() {
		file_protos_WebAPI_otc_1_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_WebAPI_otc_1_proto_rawDescData)
	})
	return file_protos_WebAPI_otc_1_proto_rawDescData
}

var file_protos_WebAPI_otc_1_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_protos_WebAPI_otc_1_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_protos_WebAPI_otc_1_proto_goTypes = []any{
	(InstanceState)(0),                                 // 0: otc_1.InstanceState
	(OtcReport_StatusCode)(0),                          // 1: otc_1.OtcReport.StatusCode
	(BalanceItemKey_ItemType)(0),                       // 2: otc_1.BalanceItemKey.ItemType
	(ChangeOtcStateRequest_Action)(0),                  // 3: otc_1.ChangeOtcStateRequest.Action
	(*OtcRequest)(nil),                                 // 4: otc_1.OtcRequest
	(*OtcReport)(nil),                                  // 5: otc_1.OtcReport
	(*HedgeBalanceKey)(nil),                            // 6: otc_1.HedgeBalanceKey
	(*GroupKey)(nil),                                   // 7: otc_1.GroupKey
	(*OtcInstancesSubscription)(nil),                   // 8: otc_1.OtcInstancesSubscription
	(*OtcInstancesReport)(nil),                         // 9: otc_1.OtcInstancesReport
	(*OtcInstanceState)(nil),                           // 10: otc_1.OtcInstanceState
	(*HedgeBooksSubscription)(nil),                     // 11: otc_1.HedgeBooksSubscription
	(*HedgeBooksReport)(nil),                           // 12: otc_1.HedgeBooksReport
	(*HedgeBalanceDetails)(nil),                        // 13: otc_1.HedgeBalanceDetails
	(*GroupBalanceDetails)(nil),                        // 14: otc_1.GroupBalanceDetails
	(*HedgeBookDetailsSubscription)(nil),               // 15: otc_1.HedgeBookDetailsSubscription
	(*HedgeBookDetailsReport)(nil),                     // 16: otc_1.HedgeBookDetailsReport
	(*BalanceItemKey)(nil),                             // 17: otc_1.BalanceItemKey
	(*BalanceItem)(nil),                                // 18: otc_1.BalanceItem
	(*BalanceItemsLink)(nil),                           // 19: otc_1.BalanceItemsLink
	(*OffsetHedgeBalanceRequest)(nil),                  // 20: otc_1.OffsetHedgeBalanceRequest
	(*OffsetHedgeBalanceResult)(nil),                   // 21: otc_1.OffsetHedgeBalanceResult
	(*ChangeOtcStateRequest)(nil),                      // 22: otc_1.ChangeOtcStateRequest
	(*ChangeOtcStateResult)(nil),                       // 23: otc_1.ChangeOtcStateResult
	(*FillCashOrderRequest)(nil),                       // 24: otc_1.FillCashOrderRequest
	(*FillCashOrderResult)(nil),                        // 25: otc_1.FillCashOrderResult
	(*ArchiveHedgeBalanceDetailsRequest)(nil),          // 26: otc_1.ArchiveHedgeBalanceDetailsRequest
	(*ArchiveHedgeBalanceDetailsResult)(nil),           // 27: otc_1.ArchiveHedgeBalanceDetailsResult
	(*ArchivedHedgeBalanceDetails)(nil),                // 28: otc_1.ArchivedHedgeBalanceDetails
	(*BalanceItemsLinksRequest)(nil),                   // 29: otc_1.BalanceItemsLinksRequest
	(*BalanceItemsLinksResult)(nil),                    // 30: otc_1.BalanceItemsLinksResult
	(*UpdateTailManagementConfigurationResult)(nil),    // 31: otc_1.UpdateTailManagementConfigurationResult
	(*TailManagementConfigurationSubscription)(nil),    // 32: otc_1.TailManagementConfigurationSubscription
	(*TailManagementConfigurationSubscription2)(nil),   // 33: otc_1.TailManagementConfigurationSubscription2
	(*UpdateTailManagementConfiguration)(nil),          // 34: otc_1.UpdateTailManagementConfiguration
	(*TailManagementConfigurationReport)(nil),          // 35: otc_1.TailManagementConfigurationReport
	(*TailManagementConfigurationReport2)(nil),         // 36: otc_1.TailManagementConfigurationReport2
	(*RequestTailManagementConfigurationMetadata)(nil), // 37: otc_1.RequestTailManagementConfigurationMetadata
	(*TailManagementConfigurationMetadata)(nil),        // 38: otc_1.TailManagementConfigurationMetadata
	(*TailManagementConfiguration)(nil),                // 39: otc_1.TailManagementConfiguration
	(*GroupTailManagementConfiguration)(nil),           // 40: otc_1.GroupTailManagementConfiguration
	(*ConfigurationEntry)(nil),                         // 41: otc_1.ConfigurationEntry
	(*common.Text)(nil),                                // 42: shared_1.Text
	(*common.Decimal)(nil),                             // 43: cqg.Decimal
	(*timestamppb.Timestamp)(nil),                      // 44: google.protobuf.Timestamp
}
var file_protos_WebAPI_otc_1_proto_depIdxs = []int32{
	8,  // 0: otc_1.OtcRequest.otc_instances_subscription:type_name -> otc_1.OtcInstancesSubscription
	11, // 1: otc_1.OtcRequest.hedge_books_subscription:type_name -> otc_1.HedgeBooksSubscription
	15, // 2: otc_1.OtcRequest.hedge_book_details_subscription:type_name -> otc_1.HedgeBookDetailsSubscription
	20, // 3: otc_1.OtcRequest.offset_hedge_balance_request:type_name -> otc_1.OffsetHedgeBalanceRequest
	22, // 4: otc_1.OtcRequest.change_otc_state_request:type_name -> otc_1.ChangeOtcStateRequest
	24, // 5: otc_1.OtcRequest.fill_cash_order_request:type_name -> otc_1.FillCashOrderRequest
	26, // 6: otc_1.OtcRequest.archive_hedge_balance_details_request:type_name -> otc_1.ArchiveHedgeBalanceDetailsRequest
	29, // 7: otc_1.OtcRequest.balance_items_links_request:type_name -> otc_1.BalanceItemsLinksRequest
	32, // 8: otc_1.OtcRequest.tail_management_configuration_subscription:type_name -> otc_1.TailManagementConfigurationSubscription
	34, // 9: otc_1.OtcRequest.update_tail_management_configuration:type_name -> otc_1.UpdateTailManagementConfiguration
	37, // 10: otc_1.OtcRequest.request_tail_management_configuration_metadata:type_name -> otc_1.RequestTailManagementConfigurationMetadata
	33, // 11: otc_1.OtcRequest.tail_management_configuration_subscription_2:type_name -> otc_1.TailManagementConfigurationSubscription2
	42, // 12: otc_1.OtcReport.details:type_name -> shared_1.Text
	9,  // 13: otc_1.OtcReport.otc_instances_report:type_name -> otc_1.OtcInstancesReport
	12, // 14: otc_1.OtcReport.hedge_books_report:type_name -> otc_1.HedgeBooksReport
	16, // 15: otc_1.OtcReport.hedge_book_details_report:type_name -> otc_1.HedgeBookDetailsReport
	21, // 16: otc_1.OtcReport.offset_hedge_balance_result:type_name -> otc_1.OffsetHedgeBalanceResult
	23, // 17: otc_1.OtcReport.change_otc_state_result:type_name -> otc_1.ChangeOtcStateResult
	25, // 18: otc_1.OtcReport.fill_cash_order_result:type_name -> otc_1.FillCashOrderResult
	27, // 19: otc_1.OtcReport.archive_hedge_balance_details_result:type_name -> otc_1.ArchiveHedgeBalanceDetailsResult
	30, // 20: otc_1.OtcReport.balance_items_links_result:type_name -> otc_1.BalanceItemsLinksResult
	35, // 21: otc_1.OtcReport.tail_management_configuration_report:type_name -> otc_1.TailManagementConfigurationReport
	38, // 22: otc_1.OtcReport.tail_management_configuration_metadata:type_name -> otc_1.TailManagementConfigurationMetadata
	31, // 23: otc_1.OtcReport.update_tail_management_configuration_result:type_name -> otc_1.UpdateTailManagementConfigurationResult
	36, // 24: otc_1.OtcReport.tail_management_configuration_report_2:type_name -> otc_1.TailManagementConfigurationReport2
	10, // 25: otc_1.OtcInstancesReport.otc_instance_states:type_name -> otc_1.OtcInstanceState
	13, // 26: otc_1.HedgeBooksReport.hedge_balance_details:type_name -> otc_1.HedgeBalanceDetails
	28, // 27: otc_1.HedgeBooksReport.archived_hedge_balance_details:type_name -> otc_1.ArchivedHedgeBalanceDetails
	14, // 28: otc_1.HedgeBooksReport.group_balance_details:type_name -> otc_1.GroupBalanceDetails
	6,  // 29: otc_1.HedgeBalanceDetails.hedge_balance_key:type_name -> otc_1.HedgeBalanceKey
	43, // 30: otc_1.HedgeBalanceDetails.hedge_balance:type_name -> cqg.Decimal
	43, // 31: otc_1.HedgeBalanceDetails.pending_balance:type_name -> cqg.Decimal
	42, // 32: otc_1.HedgeBalanceDetails.units_name:type_name -> shared_1.Text
	7,  // 33: otc_1.GroupBalanceDetails.group_key:type_name -> otc_1.GroupKey
	43, // 34: otc_1.GroupBalanceDetails.hedge_balance:type_name -> cqg.Decimal
	42, // 35: otc_1.GroupBalanceDetails.units_name:type_name -> shared_1.Text
	6,  // 36: otc_1.HedgeBookDetailsSubscription.hedge_balance_key:type_name -> otc_1.HedgeBalanceKey
	44, // 37: otc_1.HedgeBookDetailsSubscription.from_utc_timestamp:type_name -> google.protobuf.Timestamp
	18, // 38: otc_1.HedgeBookDetailsReport.balance_items:type_name -> otc_1.BalanceItem
	19, // 39: otc_1.HedgeBookDetailsReport.items_links:type_name -> otc_1.BalanceItemsLink
	17, // 40: otc_1.BalanceItem.item_key:type_name -> otc_1.BalanceItemKey
	44, // 41: otc_1.BalanceItem.utc_timestamp:type_name -> google.protobuf.Timestamp
	43, // 42: otc_1.BalanceItem.units:type_name -> cqg.Decimal
	43, // 43: otc_1.BalanceItem.open_units:type_name -> cqg.Decimal
	42, // 44: otc_1.BalanceItem.units_name:type_name -> shared_1.Text
	44, // 45: otc_1.BalanceItemsLink.link_utc_timestamp:type_name -> google.protobuf.Timestamp
	17, // 46: otc_1.BalanceItemsLink.first_item_key:type_name -> otc_1.BalanceItemKey
	17, // 47: otc_1.BalanceItemsLink.second_item_key:type_name -> otc_1.BalanceItemKey
	43, // 48: otc_1.BalanceItemsLink.size_in_first_item_units:type_name -> cqg.Decimal
	42, // 49: otc_1.BalanceItemsLink.first_item_units:type_name -> shared_1.Text
	43, // 50: otc_1.BalanceItemsLink.size_in_second_item_units:type_name -> cqg.Decimal
	42, // 51: otc_1.BalanceItemsLink.second_item_units:type_name -> shared_1.Text
	6,  // 52: otc_1.OffsetHedgeBalanceRequest.hedge_balance_key:type_name -> otc_1.HedgeBalanceKey
	43, // 53: otc_1.OffsetHedgeBalanceRequest.hedge_balance_offset:type_name -> cqg.Decimal
	43, // 54: otc_1.FillCashOrderRequest.qty:type_name -> cqg.Decimal
	6,  // 55: otc_1.ArchiveHedgeBalanceDetailsRequest.hedge_balance_key:type_name -> otc_1.HedgeBalanceKey
	13, // 56: otc_1.ArchivedHedgeBalanceDetails.hedge_balance_details:type_name -> otc_1.HedgeBalanceDetails
	44, // 57: otc_1.ArchivedHedgeBalanceDetails.archive_utc_timestamp:type_name -> google.protobuf.Timestamp
	18, // 58: otc_1.BalanceItemsLinksResult.balance_items:type_name -> otc_1.BalanceItem
	19, // 59: otc_1.BalanceItemsLinksResult.items_links:type_name -> otc_1.BalanceItemsLink
	39, // 60: otc_1.UpdateTailManagementConfiguration.tail_management_configurations:type_name -> otc_1.TailManagementConfiguration
	40, // 61: otc_1.UpdateTailManagementConfiguration.group_tail_management_configurations:type_name -> otc_1.GroupTailManagementConfiguration
	39, // 62: otc_1.TailManagementConfigurationReport.tail_management_configurations:type_name -> otc_1.TailManagementConfiguration
	39, // 63: otc_1.TailManagementConfigurationReport2.tail_management_configurations:type_name -> otc_1.TailManagementConfiguration
	39, // 64: otc_1.TailManagementConfigurationReport2.default_tail_management_configuration:type_name -> otc_1.TailManagementConfiguration
	40, // 65: otc_1.TailManagementConfigurationReport2.group_tail_management_configurations:type_name -> otc_1.GroupTailManagementConfiguration
	40, // 66: otc_1.TailManagementConfigurationReport2.default_group_tail_management_configuration:type_name -> otc_1.GroupTailManagementConfiguration
	6,  // 67: otc_1.TailManagementConfiguration.hedge_balance_keys:type_name -> otc_1.HedgeBalanceKey
	41, // 68: otc_1.TailManagementConfiguration.configuration_entries:type_name -> otc_1.ConfigurationEntry
	7,  // 69: otc_1.GroupTailManagementConfiguration.group_keys:type_name -> otc_1.GroupKey
	41, // 70: otc_1.GroupTailManagementConfiguration.configuration_entries:type_name -> otc_1.ConfigurationEntry
	71, // [71:71] is the sub-list for method output_type
	71, // [71:71] is the sub-list for method input_type
	71, // [71:71] is the sub-list for extension type_name
	71, // [71:71] is the sub-list for extension extendee
	0,  // [0:71] is the sub-list for field type_name
}

func init() { file_protos_WebAPI_otc_1_proto_init() }
func file_protos_WebAPI_otc_1_proto_init() {
	if File_protos_WebAPI_otc_1_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_WebAPI_otc_1_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_WebAPI_otc_1_proto_goTypes,
		DependencyIndexes: file_protos_WebAPI_otc_1_proto_depIdxs,
		EnumInfos:         file_protos_WebAPI_otc_1_proto_enumTypes,
		MessageInfos:      file_protos_WebAPI_otc_1_proto_msgTypes,
	}.Build()
	File_protos_WebAPI_otc_1_proto = out.File
	file_protos_WebAPI_otc_1_proto_rawDesc = nil
	file_protos_WebAPI_otc_1_proto_goTypes = nil
	file_protos_WebAPI_otc_1_proto_depIdxs = nil
}
