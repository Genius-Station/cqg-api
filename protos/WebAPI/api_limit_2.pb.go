// WebAPI limit messages

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: protos/WebAPI/api_limit_2.proto

package WebAPI

import (
	common "cqg-api/protos/WebAPI/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ApiLimit int32

const (
	// Limit type unspecifed and must be ignored.
	ApiLimit_API_LIMIT_UNSPECIFIED ApiLimit = 0
	// Generic and session limits (1 - 99)
	// Max connection rate from one IP address
	ApiLimit_API_LIMIT_CONNECTION_RATE ApiLimit = 1
	// Max concurrent subsession per user
	ApiLimit_API_LIMIT_CONCURRENT_SUBSESSIONS ApiLimit = 2
	// Number of maximum allowed simultaneous connections from single IP address
	ApiLimit_API_LIMIT_CONNECTIONS_PER_IP ApiLimit = 3
	// Generic message related limits (100-199)
	// Maximum allowed duration (in seconds) of WebSocket unavailability
	// for outgoing messages.
	ApiLimit_API_LIMIT_SOCKET_UNREADY_PERIOD_TO_CLOSE_CONNECTION ApiLimit = 100
	ApiLimit_API_LIMIT_CLIENT_MESSAGES_RATE                      ApiLimit = 110
	// Information request limits (200-599)
	ApiLimit_API_LIMIT_INFORMATION_REQUESTS_RATE                  ApiLimit = 200
	ApiLimit_API_LIMIT_ACCOUNTS_REQUESTS_RATE                     ApiLimit = 210
	ApiLimit_API_LIMIT_SYMBOL_RESOLUTION_REQUESTS_RATE            ApiLimit = 220
	ApiLimit_API_LIMIT_LAST_STATEMENT_BALANCES_RATE               ApiLimit = 230
	ApiLimit_API_LIMIT_CURRENCY_RATES_REQUESTS_RATE               ApiLimit = 240
	ApiLimit_API_LIMIT_CURRENCY_RATE_SOURCES_REQUESTS_RATE        ApiLimit = 241
	ApiLimit_API_LIMIT_SESSION_INFORMATION_REQUESTS_IN_PROCESSING ApiLimit = 250
	ApiLimit_API_LIMIT_SESSION_INFORMATION_SUBSCRIPTIONS          ApiLimit = 251
	ApiLimit_API_LIMIT_HISTORICAL_ORDERS_REQUESTS_IN_PROCESSING   ApiLimit = 260
	// Maximum allowed days back from now for historical orders requests.
	// Exceeding fails requests.
	ApiLimit_API_LIMIT_HISTORICAL_ORDERS_DAYS                                         ApiLimit = 261
	ApiLimit_API_LIMIT_OPTION_MATURITY_LIST_REQUESTS_IN_PROCESSING                    ApiLimit = 270
	ApiLimit_API_LIMIT_OPTION_MATURITY_LIST_SUBSCRIPTIONS                             ApiLimit = 271
	ApiLimit_API_LIMIT_INSTRUMENT_GROUP_REQUESTS_IN_PROCESSING                        ApiLimit = 280
	ApiLimit_API_LIMIT_INSTRUMENT_GROUP_SUBSCRIPTIONS                                 ApiLimit = 281
	ApiLimit_API_LIMIT_AT_THE_MONEY_STRIKE_REQUESTS_IN_PROCESSING                     ApiLimit = 290
	ApiLimit_API_LIMIT_AT_THE_MONEY_STRIKE_SUBSCRIPTIONS                              ApiLimit = 291
	ApiLimit_API_LIMIT_STRATEGY_DEFINITION_REQUESTS_RATE                              ApiLimit = 300
	ApiLimit_API_LIMIT_SESSION_TIME_RANGE_REQUESTS_IN_PROCESSING                      ApiLimit = 310
	ApiLimit_API_LIMIT_TRADING_DAY_TIME_RANGE_REQUESTS_IN_PROCESSING                  ApiLimit = 320
	ApiLimit_API_LIMIT_ORDER_ENTITLEMENT_REQUESTS_IN_PROCESSING                       ApiLimit = 330
	ApiLimit_API_LIMIT_SYMBOL_CATEGORY_LIST_REQUESTS_IN_PROCESSING                    ApiLimit = 340
	ApiLimit_API_LIMIT_SYMBOL_CATEGORY_LIST_SUBSCRIPTIONS                             ApiLimit = 341
	ApiLimit_API_LIMIT_SYMBOL_CATEGORY_REQUESTS_IN_PROCESSING                         ApiLimit = 350
	ApiLimit_API_LIMIT_SYMBOL_CATEGORY_SUBSCRIPTIONS                                  ApiLimit = 351
	ApiLimit_API_LIMIT_SYMBOL_LIST_REQUESTS_IN_PROCESSING                             ApiLimit = 360
	ApiLimit_API_LIMIT_SYMBOL_LIST_SUBSCRIPTIONS                                      ApiLimit = 361
	ApiLimit_API_LIMIT_SYMBOL_REQUESTS_RATE                                           ApiLimit = 370
	ApiLimit_API_LIMIT_SYMBOL_REQUESTS_IN_PROCESSING                                  ApiLimit = 371
	ApiLimit_API_LIMIT_ALGO_STRATEGY_DEFINITION_REQUESTS_IN_PROCESSING                ApiLimit = 380
	ApiLimit_API_LIMIT_API_LIMITS_SUBSCRIPTIONS_AND_REQUESTS_IN_PROCESSING            ApiLimit = 390
	ApiLimit_API_LIMIT_CONTRIBUTOR_METADATA_REQUESTS_RATE                             ApiLimit = 400
	ApiLimit_API_LIMIT_CONTRIBUTOR_METADATA_REQUESTS_IN_PROCESSING                    ApiLimit = 401
	ApiLimit_API_LIMIT_CONTRIBUTOR_METADATA_SUBSCRIPTIONS                             ApiLimit = 402
	ApiLimit_API_LIMIT_BROKERAGE_TRADING_FEATURE_ENTITLEMENT_REQUESTS_IN_PROCESSING   ApiLimit = 410
	ApiLimit_API_LIMIT_ORDER_STATUS_REQUESTS_RATE                                     ApiLimit = 420
	ApiLimit_API_LIMIT_PRODUCT_SEARCH_REQUESTS_RATE                                   ApiLimit = 430
	ApiLimit_API_LIMIT_PRODUCT_SEARCH_REQUESTS_IN_PROCESSING                          ApiLimit = 431
	ApiLimit_API_LIMIT_SYMBOL_CATEGORY_LIST_BY_INSTRUMENT_TYPE_REQUESTS_RATE          ApiLimit = 440
	ApiLimit_API_LIMIT_SYMBOL_CATEGORY_LIST_BY_INSTRUMENT_TYPE_REQUESTS_IN_PROCESSING ApiLimit = 441
	ApiLimit_API_LIMIT_MARKET_STATE_METADATA_REQUESTS_RATE                            ApiLimit = 450
	ApiLimit_API_LIMIT_MARKET_STATE_METADATA_REQUESTS_IN_PROCESSING                   ApiLimit = 451
	ApiLimit_API_LIMIT_MARKET_STATE_METADATA_SUBSCRIPTIONS                            ApiLimit = 452
	ApiLimit_API_LIMIT_INSTRUMENT_DEFINITION_REQUESTS_RATE                            ApiLimit = 460
	ApiLimit_API_LIMIT_EXCHANGE_METADATA_REQUESTS_IN_PROCESSING                       ApiLimit = 470
	ApiLimit_API_LIMIT_EXCHANGE_METADATA_SUBSCRIPTIONS                                ApiLimit = 471
	ApiLimit_API_LIMIT_ENTITLEMENT_REQUESTS_SUBSCRIPTIONS                             ApiLimit = 480
	ApiLimit_API_LIMIT_INSTRUMENT_GROUP_BY_SECURITIES_REQUESTS_RATE                   ApiLimit = 490
	ApiLimit_API_LIMIT_INSTRUMENT_GROUP_BY_SECURITIES_REQUESTS_IN_PROCESSING          ApiLimit = 491
	ApiLimit_API_LIMIT_INSTRUMENT_GROUP_BY_SECURITIES_SUBSCRIPTIONS                   ApiLimit = 492
	ApiLimit_API_LIMIT_INSTRUMENT_GROUP_BY_EXCHANGE_REQUESTS_RATE                     ApiLimit = 500
	ApiLimit_API_LIMIT_INSTRUMENT_GROUP_BY_EXCHANGE_REQUESTS_IN_PROCESSING            ApiLimit = 501
	ApiLimit_API_LIMIT_INSTRUMENT_GROUP_BY_EXCHANGE_SUBSCRIPTIONS                     ApiLimit = 502
	ApiLimit_API_LIMIT_EXCHANGE_SECURITIES_REQUESTS_RATE                              ApiLimit = 510
	ApiLimit_API_LIMIT_EXCHANGE_SECURITIES_REQUESTS_IN_PROCESSING                     ApiLimit = 511
	ApiLimit_API_LIMIT_EXCHANGE_SECURITIES_SUBSCRIPTIONS                              ApiLimit = 512
	ApiLimit_API_LIMIT_COUNTRY_LIST_REQUESTS_RATE                                     ApiLimit = 520
	ApiLimit_API_LIMIT_COUNTRY_LIST_REQUESTS_IN_PROCESSING                            ApiLimit = 521
	ApiLimit_API_LIMIT_COUNTRY_LIST_SUBSCRIPTIONS                                     ApiLimit = 522
	ApiLimit_API_LIMIT_CALENDAR_EVENT_LIST_REQUESTS_RATE                              ApiLimit = 530
	ApiLimit_API_LIMIT_CALENDAR_EVENT_LIST_REQUESTS_IN_PROCESSING                     ApiLimit = 531
	ApiLimit_API_LIMIT_CALENDAR_EVENT_LIST_SUBSCRIPTIONS                              ApiLimit = 532
	ApiLimit_API_LIMIT_CALENDAR_EVENT_PROVIDER_LIST_REQUESTS_RATE                     ApiLimit = 540
	ApiLimit_API_LIMIT_CALENDAR_EVENT_PROVIDER_LIST_REQUESTS_IN_PROCESSING            ApiLimit = 541
	ApiLimit_API_LIMIT_CALENDAR_EVENT_PROVIDER_LIST_SUBSCRIPTIONS                     ApiLimit = 542
	ApiLimit_API_LIMIT_CALENDAR_EVENT_TYPE_LIST_REQUESTS_RATE                         ApiLimit = 550
	ApiLimit_API_LIMIT_CALENDAR_EVENT_TYPE_LIST_REQUESTS_IN_PROCESSING                ApiLimit = 551
	ApiLimit_API_LIMIT_CALENDAR_EVENT_TYPE_LIST_SUBSCRIPTIONS                         ApiLimit = 552
	// TradeSubscription (600-699)
	// Maximum account number per trader to process
	ApiLimit_API_LIMIT_TRADE_ROUTING_ACCOUNTS ApiLimit = 600
	ApiLimit_API_LIMIT_TRADE_SUBSCRIPTIONS    ApiLimit = 610
	// Maximum accounts to subscribe to
	ApiLimit_API_LIMIT_TRADE_SUBSCRIPTIONS_ACCOUNTS ApiLimit = 611
	// Order request (700-799)
	ApiLimit_API_LIMIT_ORDER_REQUESTS_RATE ApiLimit = 700
	// Rate per account
	ApiLimit_API_LIMIT_ORDER_REQUESTS_ACCOUNT_RATE ApiLimit = 701
	// Market data subscription (800 - 899)
	ApiLimit_API_LIMIT_MARKET_DATA_SUBSCRIPTION_RATE ApiLimit = 800
	ApiLimit_API_LIMIT_MARKET_DATA_SUBSCRIPTIONS     ApiLimit = 801
	// Market data quotes delay threshold (in seconds)
	// after which user will be disconnected.
	ApiLimit_API_LIMIT_MARKET_DATA_DELAY_TO_CLOSE_CONNECTION ApiLimit = 810
	// Historical requests (1000-1299)
	ApiLimit_API_LIMIT_HISTORICAL_REQUESTS_IN_PROCESSING ApiLimit = 1000
	ApiLimit_API_LIMIT_HISTORICAL_SUBSCRIPTIONS          ApiLimit = 1001
	ApiLimit_API_LIMIT_TIME_AND_SALES_REQUESTS_RATE      ApiLimit = 1010
	ApiLimit_API_LIMIT_TIME_BAR_REQUESTS_RATE            ApiLimit = 1020
	// Per contract and time range, not per connection
	ApiLimit_API_LIMIT_VOLUME_PROFILE_REQUESTS_CONTRACT_AND_RANGE_RATE ApiLimit = 1030
	ApiLimit_API_LIMIT_NON_TIMED_BAR_REQUESTS_RATE                     ApiLimit = 1040
	// Rules requests (1200-1299)
	ApiLimit_API_LIMIT_RULE_REQUESTS_RATE ApiLimit = 1201
	// Metadata admin request (1300-1399)
	ApiLimit_API_LIMIT_RESERVED1                                          ApiLimit = 1300
	ApiLimit_API_LIMIT_PUBLISH_UNPUBLISH_PREVIEW_CONTRACT_REQUESTS_RATE   ApiLimit = 1301
	ApiLimit_API_LIMIT_PUBLISH_UNPUBLISH_PUBLISHED_CONTRACT_REQUESTS_RATE ApiLimit = 1302
	ApiLimit_API_LIMIT_GET_SECURITY_PARAMETERS_REQUESTS_RATE              ApiLimit = 1303
	ApiLimit_API_LIMIT_SET_SECURITY_PARAMETERS_REQUESTS_RATE              ApiLimit = 1304
	ApiLimit_API_LIMIT_GET_CONTRACT_PARAMETERS_REQUESTS_RATE              ApiLimit = 1305
	// OTC request (1400-1499, 10000-10999)
	ApiLimit_API_LIMIT_OTC_INSTANCES_SUBSCRIPTIONS                          ApiLimit = 1400
	ApiLimit_API_LIMIT_HEDGE_BOOKS_SUBSCRIPTIONS                            ApiLimit = 1410
	ApiLimit_API_LIMIT_HEDGE_BOOK_DETAILS_REQUESTS_RATE                     ApiLimit = 1420
	ApiLimit_API_LIMIT_HEDGE_BOOK_DETAILS_REQUESTS_IN_PROCESSING            ApiLimit = 1421
	ApiLimit_API_LIMIT_HEDGE_BOOK_DETAILS_SUBSCRIPTIONS                     ApiLimit = 1422
	ApiLimit_API_LIMIT_OFFSET_HEDGE_BALANCE_REQUESTS_RATE                   ApiLimit = 1430
	ApiLimit_API_LIMIT_CHANGE_OTC_STATE_REQUESTS_RATE                       ApiLimit = 1440
	ApiLimit_API_LIMIT_FILL_CASH_ORDER_REQUESTS_RATE                        ApiLimit = 1450
	ApiLimit_API_LIMIT_BALANCE_ITEMS_LINKS_REQUESTS_RATE                    ApiLimit = 1460
	ApiLimit_API_LIMIT_ARCHIVE_HEDGE_BALANCE_DETAILS_REQUESTS_RATE          ApiLimit = 1470
	ApiLimit_API_LIMIT_TAIL_MANAGEMENT_CONFIGURATION_SUBSCRIPTIONS          ApiLimit = 1480
	ApiLimit_API_LIMIT_UPDATE_TAIL_MANAGEMENT_CONFIGURATION_REQUESTS_RATE   ApiLimit = 1490
	ApiLimit_API_LIMIT_TAIL_MANAGEMENT_CONFIGURATION_METADATA_REQUESTS_RATE ApiLimit = 10000
	ApiLimit_API_LIMIT_RESERVED2                                            ApiLimit = 10010
	// RFQ request (1500-1599)
	ApiLimit_API_LIMIT_RFQ_REQUESTS_ACCOUNT_RATE ApiLimit = 1500
	// Option calculation request (1600-1699)
	ApiLimit_API_LIMIT_OPTION_CALCULATION_REQUESTS_RATE ApiLimit = 1600
	ApiLimit_API_LIMIT_OPTION_CALCULATION_SUBSCRIPTIONS ApiLimit = 1601
	// RFQ subscription request (1700-1799)
	ApiLimit_API_LIMIT_RFQ_SUBSCRIPTION_REQUESTS_RATE ApiLimit = 1700
)

// Enum value maps for ApiLimit.
var (
	ApiLimit_name = map[int32]string{
		0:     "API_LIMIT_UNSPECIFIED",
		1:     "API_LIMIT_CONNECTION_RATE",
		2:     "API_LIMIT_CONCURRENT_SUBSESSIONS",
		3:     "API_LIMIT_CONNECTIONS_PER_IP",
		100:   "API_LIMIT_SOCKET_UNREADY_PERIOD_TO_CLOSE_CONNECTION",
		110:   "API_LIMIT_CLIENT_MESSAGES_RATE",
		200:   "API_LIMIT_INFORMATION_REQUESTS_RATE",
		210:   "API_LIMIT_ACCOUNTS_REQUESTS_RATE",
		220:   "API_LIMIT_SYMBOL_RESOLUTION_REQUESTS_RATE",
		230:   "API_LIMIT_LAST_STATEMENT_BALANCES_RATE",
		240:   "API_LIMIT_CURRENCY_RATES_REQUESTS_RATE",
		241:   "API_LIMIT_CURRENCY_RATE_SOURCES_REQUESTS_RATE",
		250:   "API_LIMIT_SESSION_INFORMATION_REQUESTS_IN_PROCESSING",
		251:   "API_LIMIT_SESSION_INFORMATION_SUBSCRIPTIONS",
		260:   "API_LIMIT_HISTORICAL_ORDERS_REQUESTS_IN_PROCESSING",
		261:   "API_LIMIT_HISTORICAL_ORDERS_DAYS",
		270:   "API_LIMIT_OPTION_MATURITY_LIST_REQUESTS_IN_PROCESSING",
		271:   "API_LIMIT_OPTION_MATURITY_LIST_SUBSCRIPTIONS",
		280:   "API_LIMIT_INSTRUMENT_GROUP_REQUESTS_IN_PROCESSING",
		281:   "API_LIMIT_INSTRUMENT_GROUP_SUBSCRIPTIONS",
		290:   "API_LIMIT_AT_THE_MONEY_STRIKE_REQUESTS_IN_PROCESSING",
		291:   "API_LIMIT_AT_THE_MONEY_STRIKE_SUBSCRIPTIONS",
		300:   "API_LIMIT_STRATEGY_DEFINITION_REQUESTS_RATE",
		310:   "API_LIMIT_SESSION_TIME_RANGE_REQUESTS_IN_PROCESSING",
		320:   "API_LIMIT_TRADING_DAY_TIME_RANGE_REQUESTS_IN_PROCESSING",
		330:   "API_LIMIT_ORDER_ENTITLEMENT_REQUESTS_IN_PROCESSING",
		340:   "API_LIMIT_SYMBOL_CATEGORY_LIST_REQUESTS_IN_PROCESSING",
		341:   "API_LIMIT_SYMBOL_CATEGORY_LIST_SUBSCRIPTIONS",
		350:   "API_LIMIT_SYMBOL_CATEGORY_REQUESTS_IN_PROCESSING",
		351:   "API_LIMIT_SYMBOL_CATEGORY_SUBSCRIPTIONS",
		360:   "API_LIMIT_SYMBOL_LIST_REQUESTS_IN_PROCESSING",
		361:   "API_LIMIT_SYMBOL_LIST_SUBSCRIPTIONS",
		370:   "API_LIMIT_SYMBOL_REQUESTS_RATE",
		371:   "API_LIMIT_SYMBOL_REQUESTS_IN_PROCESSING",
		380:   "API_LIMIT_ALGO_STRATEGY_DEFINITION_REQUESTS_IN_PROCESSING",
		390:   "API_LIMIT_API_LIMITS_SUBSCRIPTIONS_AND_REQUESTS_IN_PROCESSING",
		400:   "API_LIMIT_CONTRIBUTOR_METADATA_REQUESTS_RATE",
		401:   "API_LIMIT_CONTRIBUTOR_METADATA_REQUESTS_IN_PROCESSING",
		402:   "API_LIMIT_CONTRIBUTOR_METADATA_SUBSCRIPTIONS",
		410:   "API_LIMIT_BROKERAGE_TRADING_FEATURE_ENTITLEMENT_REQUESTS_IN_PROCESSING",
		420:   "API_LIMIT_ORDER_STATUS_REQUESTS_RATE",
		430:   "API_LIMIT_PRODUCT_SEARCH_REQUESTS_RATE",
		431:   "API_LIMIT_PRODUCT_SEARCH_REQUESTS_IN_PROCESSING",
		440:   "API_LIMIT_SYMBOL_CATEGORY_LIST_BY_INSTRUMENT_TYPE_REQUESTS_RATE",
		441:   "API_LIMIT_SYMBOL_CATEGORY_LIST_BY_INSTRUMENT_TYPE_REQUESTS_IN_PROCESSING",
		450:   "API_LIMIT_MARKET_STATE_METADATA_REQUESTS_RATE",
		451:   "API_LIMIT_MARKET_STATE_METADATA_REQUESTS_IN_PROCESSING",
		452:   "API_LIMIT_MARKET_STATE_METADATA_SUBSCRIPTIONS",
		460:   "API_LIMIT_INSTRUMENT_DEFINITION_REQUESTS_RATE",
		470:   "API_LIMIT_EXCHANGE_METADATA_REQUESTS_IN_PROCESSING",
		471:   "API_LIMIT_EXCHANGE_METADATA_SUBSCRIPTIONS",
		480:   "API_LIMIT_ENTITLEMENT_REQUESTS_SUBSCRIPTIONS",
		490:   "API_LIMIT_INSTRUMENT_GROUP_BY_SECURITIES_REQUESTS_RATE",
		491:   "API_LIMIT_INSTRUMENT_GROUP_BY_SECURITIES_REQUESTS_IN_PROCESSING",
		492:   "API_LIMIT_INSTRUMENT_GROUP_BY_SECURITIES_SUBSCRIPTIONS",
		500:   "API_LIMIT_INSTRUMENT_GROUP_BY_EXCHANGE_REQUESTS_RATE",
		501:   "API_LIMIT_INSTRUMENT_GROUP_BY_EXCHANGE_REQUESTS_IN_PROCESSING",
		502:   "API_LIMIT_INSTRUMENT_GROUP_BY_EXCHANGE_SUBSCRIPTIONS",
		510:   "API_LIMIT_EXCHANGE_SECURITIES_REQUESTS_RATE",
		511:   "API_LIMIT_EXCHANGE_SECURITIES_REQUESTS_IN_PROCESSING",
		512:   "API_LIMIT_EXCHANGE_SECURITIES_SUBSCRIPTIONS",
		520:   "API_LIMIT_COUNTRY_LIST_REQUESTS_RATE",
		521:   "API_LIMIT_COUNTRY_LIST_REQUESTS_IN_PROCESSING",
		522:   "API_LIMIT_COUNTRY_LIST_SUBSCRIPTIONS",
		530:   "API_LIMIT_CALENDAR_EVENT_LIST_REQUESTS_RATE",
		531:   "API_LIMIT_CALENDAR_EVENT_LIST_REQUESTS_IN_PROCESSING",
		532:   "API_LIMIT_CALENDAR_EVENT_LIST_SUBSCRIPTIONS",
		540:   "API_LIMIT_CALENDAR_EVENT_PROVIDER_LIST_REQUESTS_RATE",
		541:   "API_LIMIT_CALENDAR_EVENT_PROVIDER_LIST_REQUESTS_IN_PROCESSING",
		542:   "API_LIMIT_CALENDAR_EVENT_PROVIDER_LIST_SUBSCRIPTIONS",
		550:   "API_LIMIT_CALENDAR_EVENT_TYPE_LIST_REQUESTS_RATE",
		551:   "API_LIMIT_CALENDAR_EVENT_TYPE_LIST_REQUESTS_IN_PROCESSING",
		552:   "API_LIMIT_CALENDAR_EVENT_TYPE_LIST_SUBSCRIPTIONS",
		600:   "API_LIMIT_TRADE_ROUTING_ACCOUNTS",
		610:   "API_LIMIT_TRADE_SUBSCRIPTIONS",
		611:   "API_LIMIT_TRADE_SUBSCRIPTIONS_ACCOUNTS",
		700:   "API_LIMIT_ORDER_REQUESTS_RATE",
		701:   "API_LIMIT_ORDER_REQUESTS_ACCOUNT_RATE",
		800:   "API_LIMIT_MARKET_DATA_SUBSCRIPTION_RATE",
		801:   "API_LIMIT_MARKET_DATA_SUBSCRIPTIONS",
		810:   "API_LIMIT_MARKET_DATA_DELAY_TO_CLOSE_CONNECTION",
		1000:  "API_LIMIT_HISTORICAL_REQUESTS_IN_PROCESSING",
		1001:  "API_LIMIT_HISTORICAL_SUBSCRIPTIONS",
		1010:  "API_LIMIT_TIME_AND_SALES_REQUESTS_RATE",
		1020:  "API_LIMIT_TIME_BAR_REQUESTS_RATE",
		1030:  "API_LIMIT_VOLUME_PROFILE_REQUESTS_CONTRACT_AND_RANGE_RATE",
		1040:  "API_LIMIT_NON_TIMED_BAR_REQUESTS_RATE",
		1201:  "API_LIMIT_RULE_REQUESTS_RATE",
		1300:  "API_LIMIT_RESERVED1",
		1301:  "API_LIMIT_PUBLISH_UNPUBLISH_PREVIEW_CONTRACT_REQUESTS_RATE",
		1302:  "API_LIMIT_PUBLISH_UNPUBLISH_PUBLISHED_CONTRACT_REQUESTS_RATE",
		1303:  "API_LIMIT_GET_SECURITY_PARAMETERS_REQUESTS_RATE",
		1304:  "API_LIMIT_SET_SECURITY_PARAMETERS_REQUESTS_RATE",
		1305:  "API_LIMIT_GET_CONTRACT_PARAMETERS_REQUESTS_RATE",
		1400:  "API_LIMIT_OTC_INSTANCES_SUBSCRIPTIONS",
		1410:  "API_LIMIT_HEDGE_BOOKS_SUBSCRIPTIONS",
		1420:  "API_LIMIT_HEDGE_BOOK_DETAILS_REQUESTS_RATE",
		1421:  "API_LIMIT_HEDGE_BOOK_DETAILS_REQUESTS_IN_PROCESSING",
		1422:  "API_LIMIT_HEDGE_BOOK_DETAILS_SUBSCRIPTIONS",
		1430:  "API_LIMIT_OFFSET_HEDGE_BALANCE_REQUESTS_RATE",
		1440:  "API_LIMIT_CHANGE_OTC_STATE_REQUESTS_RATE",
		1450:  "API_LIMIT_FILL_CASH_ORDER_REQUESTS_RATE",
		1460:  "API_LIMIT_BALANCE_ITEMS_LINKS_REQUESTS_RATE",
		1470:  "API_LIMIT_ARCHIVE_HEDGE_BALANCE_DETAILS_REQUESTS_RATE",
		1480:  "API_LIMIT_TAIL_MANAGEMENT_CONFIGURATION_SUBSCRIPTIONS",
		1490:  "API_LIMIT_UPDATE_TAIL_MANAGEMENT_CONFIGURATION_REQUESTS_RATE",
		10000: "API_LIMIT_TAIL_MANAGEMENT_CONFIGURATION_METADATA_REQUESTS_RATE",
		10010: "API_LIMIT_RESERVED2",
		1500:  "API_LIMIT_RFQ_REQUESTS_ACCOUNT_RATE",
		1600:  "API_LIMIT_OPTION_CALCULATION_REQUESTS_RATE",
		1601:  "API_LIMIT_OPTION_CALCULATION_SUBSCRIPTIONS",
		1700:  "API_LIMIT_RFQ_SUBSCRIPTION_REQUESTS_RATE",
	}
	ApiLimit_value = map[string]int32{
		"API_LIMIT_UNSPECIFIED":                                                    0,
		"API_LIMIT_CONNECTION_RATE":                                                1,
		"API_LIMIT_CONCURRENT_SUBSESSIONS":                                         2,
		"API_LIMIT_CONNECTIONS_PER_IP":                                             3,
		"API_LIMIT_SOCKET_UNREADY_PERIOD_TO_CLOSE_CONNECTION":                      100,
		"API_LIMIT_CLIENT_MESSAGES_RATE":                                           110,
		"API_LIMIT_INFORMATION_REQUESTS_RATE":                                      200,
		"API_LIMIT_ACCOUNTS_REQUESTS_RATE":                                         210,
		"API_LIMIT_SYMBOL_RESOLUTION_REQUESTS_RATE":                                220,
		"API_LIMIT_LAST_STATEMENT_BALANCES_RATE":                                   230,
		"API_LIMIT_CURRENCY_RATES_REQUESTS_RATE":                                   240,
		"API_LIMIT_CURRENCY_RATE_SOURCES_REQUESTS_RATE":                            241,
		"API_LIMIT_SESSION_INFORMATION_REQUESTS_IN_PROCESSING":                     250,
		"API_LIMIT_SESSION_INFORMATION_SUBSCRIPTIONS":                              251,
		"API_LIMIT_HISTORICAL_ORDERS_REQUESTS_IN_PROCESSING":                       260,
		"API_LIMIT_HISTORICAL_ORDERS_DAYS":                                         261,
		"API_LIMIT_OPTION_MATURITY_LIST_REQUESTS_IN_PROCESSING":                    270,
		"API_LIMIT_OPTION_MATURITY_LIST_SUBSCRIPTIONS":                             271,
		"API_LIMIT_INSTRUMENT_GROUP_REQUESTS_IN_PROCESSING":                        280,
		"API_LIMIT_INSTRUMENT_GROUP_SUBSCRIPTIONS":                                 281,
		"API_LIMIT_AT_THE_MONEY_STRIKE_REQUESTS_IN_PROCESSING":                     290,
		"API_LIMIT_AT_THE_MONEY_STRIKE_SUBSCRIPTIONS":                              291,
		"API_LIMIT_STRATEGY_DEFINITION_REQUESTS_RATE":                              300,
		"API_LIMIT_SESSION_TIME_RANGE_REQUESTS_IN_PROCESSING":                      310,
		"API_LIMIT_TRADING_DAY_TIME_RANGE_REQUESTS_IN_PROCESSING":                  320,
		"API_LIMIT_ORDER_ENTITLEMENT_REQUESTS_IN_PROCESSING":                       330,
		"API_LIMIT_SYMBOL_CATEGORY_LIST_REQUESTS_IN_PROCESSING":                    340,
		"API_LIMIT_SYMBOL_CATEGORY_LIST_SUBSCRIPTIONS":                             341,
		"API_LIMIT_SYMBOL_CATEGORY_REQUESTS_IN_PROCESSING":                         350,
		"API_LIMIT_SYMBOL_CATEGORY_SUBSCRIPTIONS":                                  351,
		"API_LIMIT_SYMBOL_LIST_REQUESTS_IN_PROCESSING":                             360,
		"API_LIMIT_SYMBOL_LIST_SUBSCRIPTIONS":                                      361,
		"API_LIMIT_SYMBOL_REQUESTS_RATE":                                           370,
		"API_LIMIT_SYMBOL_REQUESTS_IN_PROCESSING":                                  371,
		"API_LIMIT_ALGO_STRATEGY_DEFINITION_REQUESTS_IN_PROCESSING":                380,
		"API_LIMIT_API_LIMITS_SUBSCRIPTIONS_AND_REQUESTS_IN_PROCESSING":            390,
		"API_LIMIT_CONTRIBUTOR_METADATA_REQUESTS_RATE":                             400,
		"API_LIMIT_CONTRIBUTOR_METADATA_REQUESTS_IN_PROCESSING":                    401,
		"API_LIMIT_CONTRIBUTOR_METADATA_SUBSCRIPTIONS":                             402,
		"API_LIMIT_BROKERAGE_TRADING_FEATURE_ENTITLEMENT_REQUESTS_IN_PROCESSING":   410,
		"API_LIMIT_ORDER_STATUS_REQUESTS_RATE":                                     420,
		"API_LIMIT_PRODUCT_SEARCH_REQUESTS_RATE":                                   430,
		"API_LIMIT_PRODUCT_SEARCH_REQUESTS_IN_PROCESSING":                          431,
		"API_LIMIT_SYMBOL_CATEGORY_LIST_BY_INSTRUMENT_TYPE_REQUESTS_RATE":          440,
		"API_LIMIT_SYMBOL_CATEGORY_LIST_BY_INSTRUMENT_TYPE_REQUESTS_IN_PROCESSING": 441,
		"API_LIMIT_MARKET_STATE_METADATA_REQUESTS_RATE":                            450,
		"API_LIMIT_MARKET_STATE_METADATA_REQUESTS_IN_PROCESSING":                   451,
		"API_LIMIT_MARKET_STATE_METADATA_SUBSCRIPTIONS":                            452,
		"API_LIMIT_INSTRUMENT_DEFINITION_REQUESTS_RATE":                            460,
		"API_LIMIT_EXCHANGE_METADATA_REQUESTS_IN_PROCESSING":                       470,
		"API_LIMIT_EXCHANGE_METADATA_SUBSCRIPTIONS":                                471,
		"API_LIMIT_ENTITLEMENT_REQUESTS_SUBSCRIPTIONS":                             480,
		"API_LIMIT_INSTRUMENT_GROUP_BY_SECURITIES_REQUESTS_RATE":                   490,
		"API_LIMIT_INSTRUMENT_GROUP_BY_SECURITIES_REQUESTS_IN_PROCESSING":          491,
		"API_LIMIT_INSTRUMENT_GROUP_BY_SECURITIES_SUBSCRIPTIONS":                   492,
		"API_LIMIT_INSTRUMENT_GROUP_BY_EXCHANGE_REQUESTS_RATE":                     500,
		"API_LIMIT_INSTRUMENT_GROUP_BY_EXCHANGE_REQUESTS_IN_PROCESSING":            501,
		"API_LIMIT_INSTRUMENT_GROUP_BY_EXCHANGE_SUBSCRIPTIONS":                     502,
		"API_LIMIT_EXCHANGE_SECURITIES_REQUESTS_RATE":                              510,
		"API_LIMIT_EXCHANGE_SECURITIES_REQUESTS_IN_PROCESSING":                     511,
		"API_LIMIT_EXCHANGE_SECURITIES_SUBSCRIPTIONS":                              512,
		"API_LIMIT_COUNTRY_LIST_REQUESTS_RATE":                                     520,
		"API_LIMIT_COUNTRY_LIST_REQUESTS_IN_PROCESSING":                            521,
		"API_LIMIT_COUNTRY_LIST_SUBSCRIPTIONS":                                     522,
		"API_LIMIT_CALENDAR_EVENT_LIST_REQUESTS_RATE":                              530,
		"API_LIMIT_CALENDAR_EVENT_LIST_REQUESTS_IN_PROCESSING":                     531,
		"API_LIMIT_CALENDAR_EVENT_LIST_SUBSCRIPTIONS":                              532,
		"API_LIMIT_CALENDAR_EVENT_PROVIDER_LIST_REQUESTS_RATE":                     540,
		"API_LIMIT_CALENDAR_EVENT_PROVIDER_LIST_REQUESTS_IN_PROCESSING":            541,
		"API_LIMIT_CALENDAR_EVENT_PROVIDER_LIST_SUBSCRIPTIONS":                     542,
		"API_LIMIT_CALENDAR_EVENT_TYPE_LIST_REQUESTS_RATE":                         550,
		"API_LIMIT_CALENDAR_EVENT_TYPE_LIST_REQUESTS_IN_PROCESSING":                551,
		"API_LIMIT_CALENDAR_EVENT_TYPE_LIST_SUBSCRIPTIONS":                         552,
		"API_LIMIT_TRADE_ROUTING_ACCOUNTS":                                         600,
		"API_LIMIT_TRADE_SUBSCRIPTIONS":                                            610,
		"API_LIMIT_TRADE_SUBSCRIPTIONS_ACCOUNTS":                                   611,
		"API_LIMIT_ORDER_REQUESTS_RATE":                                            700,
		"API_LIMIT_ORDER_REQUESTS_ACCOUNT_RATE":                                    701,
		"API_LIMIT_MARKET_DATA_SUBSCRIPTION_RATE":                                  800,
		"API_LIMIT_MARKET_DATA_SUBSCRIPTIONS":                                      801,
		"API_LIMIT_MARKET_DATA_DELAY_TO_CLOSE_CONNECTION":                          810,
		"API_LIMIT_HISTORICAL_REQUESTS_IN_PROCESSING":                              1000,
		"API_LIMIT_HISTORICAL_SUBSCRIPTIONS":                                       1001,
		"API_LIMIT_TIME_AND_SALES_REQUESTS_RATE":                                   1010,
		"API_LIMIT_TIME_BAR_REQUESTS_RATE":                                         1020,
		"API_LIMIT_VOLUME_PROFILE_REQUESTS_CONTRACT_AND_RANGE_RATE":                1030,
		"API_LIMIT_NON_TIMED_BAR_REQUESTS_RATE":                                    1040,
		"API_LIMIT_RULE_REQUESTS_RATE":                                             1201,
		"API_LIMIT_RESERVED1":                                                      1300,
		"API_LIMIT_PUBLISH_UNPUBLISH_PREVIEW_CONTRACT_REQUESTS_RATE":               1301,
		"API_LIMIT_PUBLISH_UNPUBLISH_PUBLISHED_CONTRACT_REQUESTS_RATE":             1302,
		"API_LIMIT_GET_SECURITY_PARAMETERS_REQUESTS_RATE":                          1303,
		"API_LIMIT_SET_SECURITY_PARAMETERS_REQUESTS_RATE":                          1304,
		"API_LIMIT_GET_CONTRACT_PARAMETERS_REQUESTS_RATE":                          1305,
		"API_LIMIT_OTC_INSTANCES_SUBSCRIPTIONS":                                    1400,
		"API_LIMIT_HEDGE_BOOKS_SUBSCRIPTIONS":                                      1410,
		"API_LIMIT_HEDGE_BOOK_DETAILS_REQUESTS_RATE":                               1420,
		"API_LIMIT_HEDGE_BOOK_DETAILS_REQUESTS_IN_PROCESSING":                      1421,
		"API_LIMIT_HEDGE_BOOK_DETAILS_SUBSCRIPTIONS":                               1422,
		"API_LIMIT_OFFSET_HEDGE_BALANCE_REQUESTS_RATE":                             1430,
		"API_LIMIT_CHANGE_OTC_STATE_REQUESTS_RATE":                                 1440,
		"API_LIMIT_FILL_CASH_ORDER_REQUESTS_RATE":                                  1450,
		"API_LIMIT_BALANCE_ITEMS_LINKS_REQUESTS_RATE":                              1460,
		"API_LIMIT_ARCHIVE_HEDGE_BALANCE_DETAILS_REQUESTS_RATE":                    1470,
		"API_LIMIT_TAIL_MANAGEMENT_CONFIGURATION_SUBSCRIPTIONS":                    1480,
		"API_LIMIT_UPDATE_TAIL_MANAGEMENT_CONFIGURATION_REQUESTS_RATE":             1490,
		"API_LIMIT_TAIL_MANAGEMENT_CONFIGURATION_METADATA_REQUESTS_RATE":           10000,
		"API_LIMIT_RESERVED2":                                                      10010,
		"API_LIMIT_RFQ_REQUESTS_ACCOUNT_RATE":                                      1500,
		"API_LIMIT_OPTION_CALCULATION_REQUESTS_RATE":                               1600,
		"API_LIMIT_OPTION_CALCULATION_SUBSCRIPTIONS":                               1601,
		"API_LIMIT_RFQ_SUBSCRIPTION_REQUESTS_RATE":                                 1700,
	}
)

func (x ApiLimit) Enum() *ApiLimit {
	p := new(ApiLimit)
	*p = x
	return p
}

func (x ApiLimit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApiLimit) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_api_limit_2_proto_enumTypes[0].Descriptor()
}

func (ApiLimit) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_api_limit_2_proto_enumTypes[0]
}

func (x ApiLimit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ApiLimit) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ApiLimit(num)
	return nil
}

// Deprecated: Use ApiLimit.Descriptor instead.
func (ApiLimit) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_api_limit_2_proto_rawDescGZIP(), []int{0}
}

type ApiLimitEntryStatusCode int32

const (
	// Entry not specified and must be ignored.
	ApiLimitEntryStatusCode_API_LIMIT_ENTRY_STATUS_CODE_UNSPECIFIED ApiLimitEntryStatusCode = 0
	// Value is populated.
	ApiLimitEntryStatusCode_API_LIMIT_ENTRY_STATUS_CODE_SUCCESS ApiLimitEntryStatusCode = 1
	// Failure codes (100+)
	// General failure, client should use the default value
	// (from proto file comments, descriptions, etc.)
	ApiLimitEntryStatusCode_API_LIMIT_ENTRY_STATUS_CODE_FAILURE ApiLimitEntryStatusCode = 101
	// Limit type not found or already deleted (value is not restricted).
	ApiLimitEntryStatusCode_API_LIMIT_ENTRY_STATUS_CODE_NOT_FOUND ApiLimitEntryStatusCode = 104
)

// Enum value maps for ApiLimitEntryStatusCode.
var (
	ApiLimitEntryStatusCode_name = map[int32]string{
		0:   "API_LIMIT_ENTRY_STATUS_CODE_UNSPECIFIED",
		1:   "API_LIMIT_ENTRY_STATUS_CODE_SUCCESS",
		101: "API_LIMIT_ENTRY_STATUS_CODE_FAILURE",
		104: "API_LIMIT_ENTRY_STATUS_CODE_NOT_FOUND",
	}
	ApiLimitEntryStatusCode_value = map[string]int32{
		"API_LIMIT_ENTRY_STATUS_CODE_UNSPECIFIED": 0,
		"API_LIMIT_ENTRY_STATUS_CODE_SUCCESS":     1,
		"API_LIMIT_ENTRY_STATUS_CODE_FAILURE":     101,
		"API_LIMIT_ENTRY_STATUS_CODE_NOT_FOUND":   104,
	}
)

func (x ApiLimitEntryStatusCode) Enum() *ApiLimitEntryStatusCode {
	p := new(ApiLimitEntryStatusCode)
	*p = x
	return p
}

func (x ApiLimitEntryStatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApiLimitEntryStatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_api_limit_2_proto_enumTypes[1].Descriptor()
}

func (ApiLimitEntryStatusCode) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_api_limit_2_proto_enumTypes[1]
}

func (x ApiLimitEntryStatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ApiLimitEntryStatusCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ApiLimitEntryStatusCode(num)
	return nil
}

// Deprecated: Use ApiLimitEntryStatusCode.Descriptor instead.
func (ApiLimitEntryStatusCode) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_api_limit_2_proto_rawDescGZIP(), []int{1}
}

type ApiLimitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Limit types to request.
	// This field is associated with ApiLimit enum type.
	// If empty, all supported limits will be returned.
	Limits []uint32 `protobuf:"varint,1,rep,name=limits" json:"limits,omitempty"`
}

func (x *ApiLimitRequest) Reset() {
	*x = ApiLimitRequest{}
	mi := &file_protos_WebAPI_api_limit_2_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiLimitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiLimitRequest) ProtoMessage() {}

func (x *ApiLimitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_api_limit_2_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiLimitRequest.ProtoReflect.Descriptor instead.
func (*ApiLimitRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_api_limit_2_proto_rawDescGZIP(), []int{0}
}

func (x *ApiLimitRequest) GetLimits() []uint32 {
	if x != nil {
		return x.Limits
	}
	return nil
}

type ApiLimitEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Limit type.
	// This field is associated with ApiLimit enum type.
	Limit *uint32 `protobuf:"varint,1,opt,name=limit" json:"limit,omitempty"`
	// Result status of the request.
	// This field is associated with ApiLimitEntryStatusCode enum type.
	StatusCode *uint32 `protobuf:"varint,2,opt,name=status_code,json=statusCode" json:"status_code,omitempty"`
	// Limit value.
	Value *uint32 `protobuf:"varint,3,opt,name=value" json:"value,omitempty"`
	// Populated if the limit is a rate = value / period_sec.
	PeriodSec *uint32 `protobuf:"varint,4,opt,name=period_sec,json=periodSec" json:"period_sec,omitempty"`
	// Limit description.
	Description *common.Text `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
}

func (x *ApiLimitEntry) Reset() {
	*x = ApiLimitEntry{}
	mi := &file_protos_WebAPI_api_limit_2_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiLimitEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiLimitEntry) ProtoMessage() {}

func (x *ApiLimitEntry) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_api_limit_2_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiLimitEntry.ProtoReflect.Descriptor instead.
func (*ApiLimitEntry) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_api_limit_2_proto_rawDescGZIP(), []int{1}
}

func (x *ApiLimitEntry) GetLimit() uint32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ApiLimitEntry) GetStatusCode() uint32 {
	if x != nil && x.StatusCode != nil {
		return *x.StatusCode
	}
	return 0
}

func (x *ApiLimitEntry) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *ApiLimitEntry) GetPeriodSec() uint32 {
	if x != nil && x.PeriodSec != nil {
		return *x.PeriodSec
	}
	return 0
}

func (x *ApiLimitEntry) GetDescription() *common.Text {
	if x != nil {
		return x.Description
	}
	return nil
}

type ApiLimitReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Limit output entries.
	LimitEntries []*ApiLimitEntry `protobuf:"bytes,1,rep,name=limit_entries,json=limitEntries" json:"limit_entries,omitempty"`
}

func (x *ApiLimitReport) Reset() {
	*x = ApiLimitReport{}
	mi := &file_protos_WebAPI_api_limit_2_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiLimitReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiLimitReport) ProtoMessage() {}

func (x *ApiLimitReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_api_limit_2_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiLimitReport.ProtoReflect.Descriptor instead.
func (*ApiLimitReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_api_limit_2_proto_rawDescGZIP(), []int{2}
}

func (x *ApiLimitReport) GetLimitEntries() []*ApiLimitEntry {
	if x != nil {
		return x.LimitEntries
	}
	return nil
}

var File_protos_WebAPI_api_limit_2_proto protoreflect.FileDescriptor

var file_protos_WebAPI_api_limit_2_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49, 0x2f,
	0x61, 0x70, 0x69, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0b, 0x61, 0x70, 0x69, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x32, 0x1a, 0x23,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x31, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x29, 0x0a, 0x0f, 0x41, 0x70, 0x69, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x22, 0xad,
	0x01, 0x0a, 0x0d, 0x41, 0x70, 0x69, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x65, 0x63, 0x12, 0x30, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x31, 0x2e, 0x54, 0x65, 0x78,
	0x74, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x51,
	0x0a, 0x0e, 0x41, 0x70, 0x69, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x3f, 0x0a, 0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x32, 0x2e, 0x41, 0x70, 0x69, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x2a, 0x89, 0x2d, 0x0a, 0x08, 0x41, 0x70, 0x69, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x19,
	0x0a, 0x15, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x50, 0x49,
	0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x50, 0x49, 0x5f,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54,
	0x5f, 0x53, 0x55, 0x42, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x02, 0x12, 0x20,
	0x0a, 0x1c, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x49, 0x50, 0x10, 0x03,
	0x12, 0x37, 0x0a, 0x33, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x53, 0x4f,
	0x43, 0x4b, 0x45, 0x54, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x50, 0x45, 0x52,
	0x49, 0x4f, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x64, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x50, 0x49,
	0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x53, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x6e, 0x12, 0x28, 0x0a,
	0x23, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x5f,
	0x52, 0x41, 0x54, 0x45, 0x10, 0xc8, 0x01, 0x12, 0x25, 0x0a, 0x20, 0x41, 0x50, 0x49, 0x5f, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x53, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0xd2, 0x01, 0x12, 0x2e,
	0x0a, 0x29, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x53, 0x59, 0x4d, 0x42,
	0x4f, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0xdc, 0x01, 0x12, 0x2b,
	0x0a, 0x26, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x4c, 0x41, 0x53, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e,
	0x43, 0x45, 0x53, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0xe6, 0x01, 0x12, 0x2b, 0x0a, 0x26, 0x41,
	0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43,
	0x59, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53,
	0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0xf0, 0x01, 0x12, 0x32, 0x0a, 0x2d, 0x41, 0x50, 0x49, 0x5f,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x52,
	0x41, 0x54, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x53, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0xf1, 0x01, 0x12, 0x39, 0x0a, 0x34,
	0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53,
	0x53, 0x49, 0x4e, 0x47, 0x10, 0xfa, 0x01, 0x12, 0x30, 0x0a, 0x2b, 0x41, 0x50, 0x49, 0x5f, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0xfb, 0x01, 0x12, 0x37, 0x0a, 0x32, 0x41, 0x50, 0x49,
	0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x49, 0x43, 0x41,
	0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10,
	0x84, 0x02, 0x12, 0x25, 0x0a, 0x20, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f,
	0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x53, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x10, 0x85, 0x02, 0x12, 0x3a, 0x0a, 0x35, 0x41, 0x50, 0x49,
	0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41,
	0x54, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49,
	0x4e, 0x47, 0x10, 0x8e, 0x02, 0x12, 0x31, 0x0a, 0x2c, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d,
	0x49, 0x54, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x54, 0x55, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x8f, 0x02, 0x12, 0x36, 0x0a, 0x31, 0x41, 0x50, 0x49, 0x5f,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x5f,
	0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x98, 0x02,
	0x12, 0x2d, 0x0a, 0x28, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x49, 0x4e,
	0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x53,
	0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x99, 0x02, 0x12,
	0x39, 0x0a, 0x34, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x41, 0x54, 0x5f,
	0x54, 0x48, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4b, 0x45,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0xa2, 0x02, 0x12, 0x30, 0x0a, 0x2b, 0x41, 0x50,
	0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x41, 0x54, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x4d,
	0x4f, 0x4e, 0x45, 0x59, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4b, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53,
	0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0xa3, 0x02, 0x12, 0x30, 0x0a, 0x2b,
	0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45,
	0x47, 0x59, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0xac, 0x02, 0x12, 0x38,
	0x0a, 0x33, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45,
	0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0xb6, 0x02, 0x12, 0x3c, 0x0a, 0x37, 0x41, 0x50, 0x49, 0x5f,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x41,
	0x59, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x49, 0x4e, 0x47, 0x10, 0xc0, 0x02, 0x12, 0x37, 0x0a, 0x32, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x4c,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x49,
	0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0xca, 0x02, 0x12,
	0x3a, 0x0a, 0x35, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x53, 0x59, 0x4d,
	0x42, 0x4f, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0xd4, 0x02, 0x12, 0x31, 0x0a, 0x2c, 0x41,
	0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x53, 0x55,
	0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0xd5, 0x02, 0x12, 0x35,
	0x0a, 0x30, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x53, 0x59, 0x4d, 0x42,
	0x4f, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49,
	0x4e, 0x47, 0x10, 0xde, 0x02, 0x12, 0x2c, 0x0a, 0x27, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d,
	0x49, 0x54, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53,
	0x10, 0xdf, 0x02, 0x12, 0x31, 0x0a, 0x2c, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54,
	0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x49, 0x4e, 0x47, 0x10, 0xe8, 0x02, 0x12, 0x28, 0x0a, 0x23, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0xe9, 0x02,
	0x12, 0x23, 0x0a, 0x1e, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x53, 0x59,
	0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x52, 0x41,
	0x54, 0x45, 0x10, 0xf2, 0x02, 0x12, 0x2c, 0x0a, 0x27, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d,
	0x49, 0x54, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47,
	0x10, 0xf3, 0x02, 0x12, 0x3e, 0x0a, 0x39, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54,
	0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47,
	0x10, 0xfc, 0x02, 0x12, 0x42, 0x0a, 0x3d, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54,
	0x5f, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x53, 0x5f, 0x53, 0x55, 0x42, 0x53,
	0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53,
	0x53, 0x49, 0x4e, 0x47, 0x10, 0x86, 0x03, 0x12, 0x31, 0x0a, 0x2c, 0x41, 0x50, 0x49, 0x5f, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x4f, 0x52,
	0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x53, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x90, 0x03, 0x12, 0x3a, 0x0a, 0x35, 0x41, 0x50,
	0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x49, 0x42, 0x55,
	0x54, 0x4f, 0x52, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x49, 0x4e, 0x47, 0x10, 0x91, 0x03, 0x12, 0x31, 0x0a, 0x2c, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x4f, 0x52, 0x5f,
	0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x92, 0x03, 0x12, 0x4b, 0x0a, 0x46, 0x41, 0x50, 0x49,
	0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x52, 0x41, 0x47, 0x45,
	0x5f, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45,
	0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x49, 0x4e, 0x47, 0x10, 0x9a, 0x03, 0x12, 0x29, 0x0a, 0x24, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0xa4,
	0x03, 0x12, 0x2b, 0x0a, 0x26, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x50,
	0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0xae, 0x03, 0x12, 0x34,
	0x0a, 0x2f, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x44,
	0x55, 0x43, 0x54, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e,
	0x47, 0x10, 0xaf, 0x03, 0x12, 0x44, 0x0a, 0x3f, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49,
	0x54, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x53, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0xb8, 0x03, 0x12, 0x4d, 0x0a, 0x48, 0x41, 0x50,
	0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x42, 0x59, 0x5f,
	0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0xb9, 0x03, 0x12, 0x32, 0x0a, 0x2d, 0x41, 0x50, 0x49,
	0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0xc2, 0x03, 0x12, 0x3b, 0x0a,
	0x36, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0xc3, 0x03, 0x12, 0x32, 0x0a, 0x2d, 0x41, 0x50,
	0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x55,
	0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0xc4, 0x03, 0x12, 0x32,
	0x0a, 0x2d, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x49, 0x4e, 0x53, 0x54,
	0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10,
	0xcc, 0x03, 0x12, 0x37, 0x0a, 0x32, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f,
	0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0xd6, 0x03, 0x12, 0x2e, 0x0a, 0x29, 0x41,
	0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43,
	0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0xd7, 0x03, 0x12, 0x31, 0x0a, 0x2c, 0x41,
	0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x4c, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x53, 0x55,
	0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0xe0, 0x03, 0x12, 0x3b,
	0x0a, 0x36, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x49, 0x4e, 0x53, 0x54,
	0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x42, 0x59, 0x5f,
	0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x49, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x53, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0xea, 0x03, 0x12, 0x44, 0x0a, 0x3f, 0x41,
	0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x42, 0x59, 0x5f, 0x53, 0x45, 0x43,
	0x55, 0x52, 0x49, 0x54, 0x49, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53,
	0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0xeb,
	0x03, 0x12, 0x3b, 0x0a, 0x36, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x49,
	0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x42, 0x59, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x49, 0x45, 0x53, 0x5f, 0x53, 0x55,
	0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0xec, 0x03, 0x12, 0x39,
	0x0a, 0x34, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x49, 0x4e, 0x53, 0x54,
	0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x42, 0x59, 0x5f,
	0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x53, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0xf4, 0x03, 0x12, 0x42, 0x0a, 0x3d, 0x41, 0x50, 0x49,
	0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x42, 0x59, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x49, 0x4e, 0x5f,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0xf5, 0x03, 0x12, 0x39, 0x0a,
	0x34, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52,
	0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x42, 0x59, 0x5f, 0x45,
	0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0xf6, 0x03, 0x12, 0x30, 0x0a, 0x2b, 0x41, 0x50, 0x49, 0x5f,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53,
	0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x49, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x53, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0xfe, 0x03, 0x12, 0x39, 0x0a, 0x34, 0x41, 0x50,
	0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x49, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49,
	0x4e, 0x47, 0x10, 0xff, 0x03, 0x12, 0x30, 0x0a, 0x2b, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d,
	0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x43, 0x55,
	0x52, 0x49, 0x54, 0x49, 0x45, 0x53, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x53, 0x10, 0x80, 0x04, 0x12, 0x29, 0x0a, 0x24, 0x41, 0x50, 0x49, 0x5f, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10,
	0x88, 0x04, 0x12, 0x32, 0x0a, 0x2d, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x49, 0x4e, 0x47, 0x10, 0x89, 0x04, 0x12, 0x29, 0x0a, 0x24, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x8a,
	0x04, 0x12, 0x30, 0x0a, 0x2b, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x43,
	0x41, 0x4c, 0x45, 0x4e, 0x44, 0x41, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x49,
	0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x52, 0x41, 0x54, 0x45,
	0x10, 0x92, 0x04, 0x12, 0x39, 0x0a, 0x34, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54,
	0x5f, 0x43, 0x41, 0x4c, 0x45, 0x4e, 0x44, 0x41, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x49, 0x4e,
	0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x93, 0x04, 0x12, 0x30,
	0x0a, 0x2b, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x43, 0x41, 0x4c, 0x45,
	0x4e, 0x44, 0x41, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x94, 0x04,
	0x12, 0x39, 0x0a, 0x34, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x43, 0x41,
	0x4c, 0x45, 0x4e, 0x44, 0x41, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f,
	0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x53, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x9c, 0x04, 0x12, 0x42, 0x0a, 0x3d, 0x41,
	0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x43, 0x41, 0x4c, 0x45, 0x4e, 0x44, 0x41,
	0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x49,
	0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x9d, 0x04, 0x12,
	0x39, 0x0a, 0x34, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x43, 0x41, 0x4c,
	0x45, 0x4e, 0x44, 0x41, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x56,
	0x49, 0x44, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52,
	0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x9e, 0x04, 0x12, 0x35, 0x0a, 0x30, 0x41, 0x50,
	0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x43, 0x41, 0x4c, 0x45, 0x4e, 0x44, 0x41, 0x52,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0xa6,
	0x04, 0x12, 0x3e, 0x0a, 0x39, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x43,
	0x41, 0x4c, 0x45, 0x4e, 0x44, 0x41, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53,
	0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0xa7,
	0x04, 0x12, 0x35, 0x0a, 0x30, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x43,
	0x41, 0x4c, 0x45, 0x4e, 0x44, 0x41, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0xa8, 0x04, 0x12, 0x25, 0x0a, 0x20, 0x41, 0x50, 0x49, 0x5f,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x53, 0x10, 0xd8, 0x04, 0x12,
	0x22, 0x0a, 0x1d, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x54, 0x52, 0x41,
	0x44, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53,
	0x10, 0xe2, 0x04, 0x12, 0x2b, 0x0a, 0x26, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54,
	0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x53, 0x10, 0xe3, 0x04,
	0x12, 0x22, 0x0a, 0x1d, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x52, 0x41, 0x54,
	0x45, 0x10, 0xbc, 0x05, 0x12, 0x2a, 0x0a, 0x25, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49,
	0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53,
	0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0xbd, 0x05,
	0x12, 0x2c, 0x0a, 0x27, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x4d, 0x41,
	0x52, 0x4b, 0x45, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52,
	0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0xa0, 0x06, 0x12, 0x28,
	0x0a, 0x23, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x4d, 0x41, 0x52, 0x4b,
	0x45, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0xa1, 0x06, 0x12, 0x34, 0x0a, 0x2f, 0x41, 0x50, 0x49, 0x5f,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x5f, 0x54, 0x4f, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xaa, 0x06, 0x12, 0x30,
	0x0a, 0x2b, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x48, 0x49, 0x53, 0x54,
	0x4f, 0x52, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x5f,
	0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0xe8, 0x07,
	0x12, 0x27, 0x0a, 0x22, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x48, 0x49,
	0x53, 0x54, 0x4f, 0x52, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0xe9, 0x07, 0x12, 0x2b, 0x0a, 0x26, 0x41, 0x50, 0x49,
	0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f,
	0x53, 0x41, 0x4c, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x52,
	0x41, 0x54, 0x45, 0x10, 0xf2, 0x07, 0x12, 0x25, 0x0a, 0x20, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x42, 0x41, 0x52, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0xfc, 0x07, 0x12, 0x3e, 0x0a,
	0x39, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d,
	0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x41, 0x4e, 0x44, 0x5f,
	0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x86, 0x08, 0x12, 0x2a, 0x0a,
	0x25, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x44, 0x5f, 0x42, 0x41, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x53, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x90, 0x08, 0x12, 0x21, 0x0a, 0x1c, 0x41, 0x50, 0x49,
	0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x53, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0xb1, 0x09, 0x12, 0x18, 0x0a, 0x13,
	0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x44, 0x31, 0x10, 0x94, 0x0a, 0x12, 0x3f, 0x0a, 0x3a, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x55, 0x4e, 0x50, 0x55,
	0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x5f,
	0x52, 0x41, 0x54, 0x45, 0x10, 0x95, 0x0a, 0x12, 0x41, 0x0a, 0x3c, 0x41, 0x50, 0x49, 0x5f, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x55, 0x4e, 0x50,
	0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44,
	0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x53, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x96, 0x0a, 0x12, 0x34, 0x0a, 0x2f, 0x41, 0x50,
	0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x45, 0x43, 0x55,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x53, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x97, 0x0a,
	0x12, 0x34, 0x0a, 0x2f, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x53, 0x45,
	0x54, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x45, 0x54, 0x45, 0x52, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x52,
	0x41, 0x54, 0x45, 0x10, 0x98, 0x0a, 0x12, 0x34, 0x0a, 0x2f, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54,
	0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x53, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x99, 0x0a, 0x12, 0x2a, 0x0a, 0x25,
	0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x4f, 0x54, 0x43, 0x5f, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0xf8, 0x0a, 0x12, 0x28, 0x0a, 0x23, 0x41, 0x50, 0x49, 0x5f,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x48, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x4b,
	0x53, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10,
	0x82, 0x0b, 0x12, 0x2f, 0x0a, 0x2a, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f,
	0x48, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49,
	0x4c, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x52, 0x41, 0x54, 0x45,
	0x10, 0x8c, 0x0b, 0x12, 0x38, 0x0a, 0x33, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54,
	0x5f, 0x48, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x44, 0x45, 0x54, 0x41,
	0x49, 0x4c, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x49, 0x4e, 0x5f,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x8d, 0x0b, 0x12, 0x2f, 0x0a,
	0x2a, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x48, 0x45, 0x44, 0x47, 0x45,
	0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x53, 0x5f, 0x53, 0x55,
	0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x8e, 0x0b, 0x12, 0x31,
	0x0a, 0x2c, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x4f, 0x46, 0x46, 0x53,
	0x45, 0x54, 0x5f, 0x48, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x96,
	0x0b, 0x12, 0x2d, 0x0a, 0x28, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4f, 0x54, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0xa0, 0x0b,
	0x12, 0x2c, 0x0a, 0x27, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x46, 0x49,
	0x4c, 0x4c, 0x5f, 0x43, 0x41, 0x53, 0x48, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0xaa, 0x0b, 0x12, 0x30,
	0x0a, 0x2b, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x42, 0x41, 0x4c, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x53, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x53, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0xb4, 0x0b,
	0x12, 0x3a, 0x0a, 0x35, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x41, 0x52,
	0x43, 0x48, 0x49, 0x56, 0x45, 0x5f, 0x48, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x42, 0x41, 0x4c, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x53, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0xbe, 0x0b, 0x12, 0x3a, 0x0a, 0x35,
	0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x4d,
	0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0xc8, 0x0b, 0x12, 0x41, 0x0a, 0x3c, 0x41, 0x50, 0x49, 0x5f,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x41, 0x49,
	0x4c, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x53, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0xd2, 0x0b, 0x12, 0x43, 0x0a, 0x3e, 0x41,
	0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x4d, 0x41,
	0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x90, 0x4e,
	0x12, 0x18, 0x0a, 0x13, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x52, 0x45,
	0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x32, 0x10, 0x9a, 0x4e, 0x12, 0x28, 0x0a, 0x23, 0x41, 0x50,
	0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x52, 0x46, 0x51, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x53, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x52, 0x41, 0x54,
	0x45, 0x10, 0xdc, 0x0b, 0x12, 0x2f, 0x0a, 0x2a, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49,
	0x54, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x52, 0x41,
	0x54, 0x45, 0x10, 0xc0, 0x0c, 0x12, 0x2f, 0x0a, 0x2a, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d,
	0x49, 0x54, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x53, 0x10, 0xc1, 0x0c, 0x12, 0x2d, 0x0a, 0x28, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x5f, 0x52, 0x46, 0x51, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x52, 0x41,
	0x54, 0x45, 0x10, 0xa4, 0x0d, 0x22, 0x06, 0x08, 0xb0, 0x09, 0x10, 0xb0, 0x09, 0x2a, 0xc3, 0x01,
	0x0a, 0x17, 0x41, 0x70, 0x69, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x27, 0x41, 0x50, 0x49,
	0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12,
	0x27, 0x0a, 0x23, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54,
	0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x65, 0x12, 0x29, 0x0a, 0x25, 0x41, 0x50, 0x49, 0x5f,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x68, 0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f,
	0x57, 0x65, 0x62, 0x41, 0x50, 0x49,
}

var (
	file_protos_WebAPI_api_limit_2_proto_rawDescOnce sync.Once
	file_protos_WebAPI_api_limit_2_proto_rawDescData = file_protos_WebAPI_api_limit_2_proto_rawDesc
)

func file_protos_WebAPI_api_limit_2_proto_rawDescGZIP() []byte {
	file_protos_WebAPI_api_limit_2_proto_rawDescOnce.Do(func() {
		file_protos_WebAPI_api_limit_2_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_WebAPI_api_limit_2_proto_rawDescData)
	})
	return file_protos_WebAPI_api_limit_2_proto_rawDescData
}

var file_protos_WebAPI_api_limit_2_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_protos_WebAPI_api_limit_2_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_protos_WebAPI_api_limit_2_proto_goTypes = []any{
	(ApiLimit)(0),                // 0: api_limit_2.ApiLimit
	(ApiLimitEntryStatusCode)(0), // 1: api_limit_2.ApiLimitEntryStatusCode
	(*ApiLimitRequest)(nil),      // 2: api_limit_2.ApiLimitRequest
	(*ApiLimitEntry)(nil),        // 3: api_limit_2.ApiLimitEntry
	(*ApiLimitReport)(nil),       // 4: api_limit_2.ApiLimitReport
	(*common.Text)(nil),          // 5: shared_1.Text
}
var file_protos_WebAPI_api_limit_2_proto_depIdxs = []int32{
	5, // 0: api_limit_2.ApiLimitEntry.description:type_name -> shared_1.Text
	3, // 1: api_limit_2.ApiLimitReport.limit_entries:type_name -> api_limit_2.ApiLimitEntry
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_protos_WebAPI_api_limit_2_proto_init() }
func file_protos_WebAPI_api_limit_2_proto_init() {
	if File_protos_WebAPI_api_limit_2_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_WebAPI_api_limit_2_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_WebAPI_api_limit_2_proto_goTypes,
		DependencyIndexes: file_protos_WebAPI_api_limit_2_proto_depIdxs,
		EnumInfos:         file_protos_WebAPI_api_limit_2_proto_enumTypes,
		MessageInfos:      file_protos_WebAPI_api_limit_2_proto_msgTypes,
	}.Build()
	File_protos_WebAPI_api_limit_2_proto = out.File
	file_protos_WebAPI_api_limit_2_proto_rawDesc = nil
	file_protos_WebAPI_api_limit_2_proto_goTypes = nil
	file_protos_WebAPI_api_limit_2_proto_depIdxs = nil
}
