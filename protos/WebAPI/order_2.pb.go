// Order related messages

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: protos/WebAPI/order_2.proto

package WebAPI

import (
	common "cqg-api/protos/WebAPI/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Specifies what kind of strategy an order, a trade or a position belongs to.
type SpeculationType int32

const (
	// Speculation strategy.
	SpeculationType_SPECULATION_TYPE_SPECULATION SpeculationType = 1
	// Arbitrage strategy.
	SpeculationType_SPECULATION_TYPE_ARBITRAGE SpeculationType = 2
	// Hedging strategy.
	SpeculationType_SPECULATION_TYPE_HEDGE SpeculationType = 3
)

// Enum value maps for SpeculationType.
var (
	SpeculationType_name = map[int32]string{
		1: "SPECULATION_TYPE_SPECULATION",
		2: "SPECULATION_TYPE_ARBITRAGE",
		3: "SPECULATION_TYPE_HEDGE",
	}
	SpeculationType_value = map[string]int32{
		"SPECULATION_TYPE_SPECULATION": 1,
		"SPECULATION_TYPE_ARBITRAGE":   2,
		"SPECULATION_TYPE_HEDGE":       3,
	}
)

func (x SpeculationType) Enum() *SpeculationType {
	p := new(SpeculationType)
	*p = x
	return p
}

func (x SpeculationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpeculationType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_order_2_proto_enumTypes[0].Descriptor()
}

func (SpeculationType) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_order_2_proto_enumTypes[0]
}

func (x SpeculationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SpeculationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SpeculationType(num)
	return nil
}

// Deprecated: Use SpeculationType.Descriptor instead.
func (SpeculationType) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{0}
}

// MiFID algorithm ID type.
type MiFIDAlgorithmIdType int32

const (
	// External MiFID Algo ID, an explicit value to be sent as-is to the execution system.
	// Non-CQG WebAPI clients should always use this type.
	MiFIDAlgorithmIdType_MIFID_ALGORITHM_ID_TYPE_EXTERNAL MiFIDAlgorithmIdType = 1
	// CQG internal MiFID Algo ID.
	MiFIDAlgorithmIdType_MIFID_ALGORITHM_ID_TYPE_CQG MiFIDAlgorithmIdType = 2
)

// Enum value maps for MiFIDAlgorithmIdType.
var (
	MiFIDAlgorithmIdType_name = map[int32]string{
		1: "MIFID_ALGORITHM_ID_TYPE_EXTERNAL",
		2: "MIFID_ALGORITHM_ID_TYPE_CQG",
	}
	MiFIDAlgorithmIdType_value = map[string]int32{
		"MIFID_ALGORITHM_ID_TYPE_EXTERNAL": 1,
		"MIFID_ALGORITHM_ID_TYPE_CQG":      2,
	}
)

func (x MiFIDAlgorithmIdType) Enum() *MiFIDAlgorithmIdType {
	p := new(MiFIDAlgorithmIdType)
	*p = x
	return p
}

func (x MiFIDAlgorithmIdType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MiFIDAlgorithmIdType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_order_2_proto_enumTypes[1].Descriptor()
}

func (MiFIDAlgorithmIdType) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_order_2_proto_enumTypes[1]
}

func (x MiFIDAlgorithmIdType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MiFIDAlgorithmIdType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MiFIDAlgorithmIdType(num)
	return nil
}

// Deprecated: Use MiFIDAlgorithmIdType.Descriptor instead.
func (MiFIDAlgorithmIdType) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{1}
}

// MiFID investment decision ID type.
type MiFIDInvestmentDecisionIdType int32

const (
	// Trader MiFID short code.
	MiFIDInvestmentDecisionIdType_MIFID_INVESTMENT_DECISION_ID_TYPE_EXTERNAL_TRADER_ID MiFIDInvestmentDecisionIdType = 1
	// External MiFID Algo ID, an explicit value to be sent as-is to the execution system.
	MiFIDInvestmentDecisionIdType_MIFID_INVESTMENT_DECISION_ID_TYPE_EXTERNAL_ALGO_ID MiFIDInvestmentDecisionIdType = 2
	// CQG internal MiFID Algo ID.
	MiFIDInvestmentDecisionIdType_MIFID_INVESTMENT_DECISION_ID_TYPE_CQG_ALGO_ID MiFIDInvestmentDecisionIdType = 3
)

// Enum value maps for MiFIDInvestmentDecisionIdType.
var (
	MiFIDInvestmentDecisionIdType_name = map[int32]string{
		1: "MIFID_INVESTMENT_DECISION_ID_TYPE_EXTERNAL_TRADER_ID",
		2: "MIFID_INVESTMENT_DECISION_ID_TYPE_EXTERNAL_ALGO_ID",
		3: "MIFID_INVESTMENT_DECISION_ID_TYPE_CQG_ALGO_ID",
	}
	MiFIDInvestmentDecisionIdType_value = map[string]int32{
		"MIFID_INVESTMENT_DECISION_ID_TYPE_EXTERNAL_TRADER_ID": 1,
		"MIFID_INVESTMENT_DECISION_ID_TYPE_EXTERNAL_ALGO_ID":   2,
		"MIFID_INVESTMENT_DECISION_ID_TYPE_CQG_ALGO_ID":        3,
	}
)

func (x MiFIDInvestmentDecisionIdType) Enum() *MiFIDInvestmentDecisionIdType {
	p := new(MiFIDInvestmentDecisionIdType)
	*p = x
	return p
}

func (x MiFIDInvestmentDecisionIdType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MiFIDInvestmentDecisionIdType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_order_2_proto_enumTypes[2].Descriptor()
}

func (MiFIDInvestmentDecisionIdType) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_order_2_proto_enumTypes[2]
}

func (x MiFIDInvestmentDecisionIdType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MiFIDInvestmentDecisionIdType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MiFIDInvestmentDecisionIdType(num)
	return nil
}

// Deprecated: Use MiFIDInvestmentDecisionIdType.Descriptor instead.
func (MiFIDInvestmentDecisionIdType) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{2}
}

// MiFID execution decision ID type.
type MiFIDExecutionDecisionIdType int32

const (
	// Trader MiFID short code.
	MiFIDExecutionDecisionIdType_MIFID_EXECUTION_DECISION_ID_TYPE_EXTERNAL_TRADER_ID MiFIDExecutionDecisionIdType = 1
	// External MiFID Algo ID, an explicit value to be sent as-is to the execution system.
	MiFIDExecutionDecisionIdType_MIFID_EXECUTION_DECISION_ID_TYPE_EXTERNAL_ALGO_ID MiFIDExecutionDecisionIdType = 2
)

// Enum value maps for MiFIDExecutionDecisionIdType.
var (
	MiFIDExecutionDecisionIdType_name = map[int32]string{
		1: "MIFID_EXECUTION_DECISION_ID_TYPE_EXTERNAL_TRADER_ID",
		2: "MIFID_EXECUTION_DECISION_ID_TYPE_EXTERNAL_ALGO_ID",
	}
	MiFIDExecutionDecisionIdType_value = map[string]int32{
		"MIFID_EXECUTION_DECISION_ID_TYPE_EXTERNAL_TRADER_ID": 1,
		"MIFID_EXECUTION_DECISION_ID_TYPE_EXTERNAL_ALGO_ID":   2,
	}
)

func (x MiFIDExecutionDecisionIdType) Enum() *MiFIDExecutionDecisionIdType {
	p := new(MiFIDExecutionDecisionIdType)
	*p = x
	return p
}

func (x MiFIDExecutionDecisionIdType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MiFIDExecutionDecisionIdType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_order_2_proto_enumTypes[3].Descriptor()
}

func (MiFIDExecutionDecisionIdType) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_order_2_proto_enumTypes[3]
}

func (x MiFIDExecutionDecisionIdType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MiFIDExecutionDecisionIdType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MiFIDExecutionDecisionIdType(num)
	return nil
}

// Deprecated: Use MiFIDExecutionDecisionIdType.Descriptor instead.
func (MiFIDExecutionDecisionIdType) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{3}
}

type Order_Side int32

const (
	// Describes purchasing side of a trade.
	Order_SIDE_BUY Order_Side = 1
	// Describes selling side of a trade.
	Order_SIDE_SELL Order_Side = 2
)

// Enum value maps for Order_Side.
var (
	Order_Side_name = map[int32]string{
		1: "SIDE_BUY",
		2: "SIDE_SELL",
	}
	Order_Side_value = map[string]int32{
		"SIDE_BUY":  1,
		"SIDE_SELL": 2,
	}
)

func (x Order_Side) Enum() *Order_Side {
	p := new(Order_Side)
	*p = x
	return p
}

func (x Order_Side) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Order_Side) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_order_2_proto_enumTypes[4].Descriptor()
}

func (Order_Side) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_order_2_proto_enumTypes[4]
}

func (x Order_Side) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Order_Side) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Order_Side(num)
	return nil
}

// Deprecated: Use Order_Side.Descriptor instead.
func (Order_Side) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{8, 0}
}

type Order_OrderType int32

const (
	// Market order, buy or sell by the best available opposite price.
	Order_ORDER_TYPE_MKT Order_OrderType = 1
	// Limit order, buy or sell by price that is the same or better then specified limit price.
	Order_ORDER_TYPE_LMT Order_OrderType = 2
	// Stop order, Order becomes a Market when market reaches order's stop price
	// (which is on opposite side of market).
	Order_ORDER_TYPE_STP Order_OrderType = 3
	// Stop-limit order, Order becomes a Limit when market reaches order's stop price.
	Order_ORDER_TYPE_STL Order_OrderType = 4
	// Cross order type. See also CrossOrderParameters message.
	Order_ORDER_TYPE_CROSS Order_OrderType = 5
)

// Enum value maps for Order_OrderType.
var (
	Order_OrderType_name = map[int32]string{
		1: "ORDER_TYPE_MKT",
		2: "ORDER_TYPE_LMT",
		3: "ORDER_TYPE_STP",
		4: "ORDER_TYPE_STL",
		5: "ORDER_TYPE_CROSS",
	}
	Order_OrderType_value = map[string]int32{
		"ORDER_TYPE_MKT":   1,
		"ORDER_TYPE_LMT":   2,
		"ORDER_TYPE_STP":   3,
		"ORDER_TYPE_STL":   4,
		"ORDER_TYPE_CROSS": 5,
	}
)

func (x Order_OrderType) Enum() *Order_OrderType {
	p := new(Order_OrderType)
	*p = x
	return p
}

func (x Order_OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Order_OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_order_2_proto_enumTypes[5].Descriptor()
}

func (Order_OrderType) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_order_2_proto_enumTypes[5]
}

func (x Order_OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Order_OrderType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Order_OrderType(num)
	return nil
}

// Deprecated: Use Order_OrderType.Descriptor instead.
func (Order_OrderType) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{8, 1}
}

type Order_ExecInstruction int32

const (
	// None (this means "plain order without any exec instructions").
	// This value shall not be explicitly provided in OrderRequest.
	Order_EXEC_INSTRUCTION_NONE Order_ExecInstruction = 12
	// All or None (fill order only completely).
	Order_EXEC_INSTRUCTION_AON Order_ExecInstruction = 1
	// Iceberg (show only part of order size).
	Order_EXEC_INSTRUCTION_ICEBERG Order_ExecInstruction = 2
	// Quantity triggered (aka DOM Triggered, honor additional quantity threshold for triggering).
	Order_EXEC_INSTRUCTION_QT Order_ExecInstruction = 3
	// Trailing order (price of the order is following market one direction by specific offset).
	Order_EXEC_INSTRUCTION_TRAIL Order_ExecInstruction = 4
	// Funari (Limit order becomes a Market on Close).
	Order_EXEC_INSTRUCTION_FUNARI Order_ExecInstruction = 5
	// Market if Touched (Limit order becomes a Market when market reaches order's limit price).
	Order_EXEC_INSTRUCTION_MIT Order_ExecInstruction = 6
	// Market Limit Market is a limit order that is used to place a buy order above the best offer
	// to fill by the best offer or a sell order below the best bid to fill by the best bid.
	Order_EXEC_INSTRUCTION_MLM Order_ExecInstruction = 7
	// Post-only order. Ensures the limit order will be added to the order book and not match with
	// a pre-existing order.
	Order_EXEC_INSTRUCTION_POSTONLY Order_ExecInstruction = 8
	// Market with leftover as Limit (market order then unexecuted quantity becomes limit order at last price).
	Order_EXEC_INSTRUCTION_MTL Order_ExecInstruction = 10
	// An auction order is an order to buy or sell in the market at the Calculated Opening Price (COP).
	// Unmatched auction orders are converted to limit orders on the market open.
	Order_EXEC_INSTRUCTION_AUCTION Order_ExecInstruction = 11
	// At Any Price Orders are US-Style Market Orders.
	Order_EXEC_INSTRUCTION_ATANYPRICE Order_ExecInstruction = 13
	// Limit order with prearranged transaction flag (IntentToCross) set.
	Order_EXEC_INSTRUCTION_LMT_PRARGD Order_ExecInstruction = 14
	// Internal Cross Only.
	// This order type is used by OTC to pull up to order size quantity from the exchange on the opposite side.
	Order_EXEC_INSTRUCTION_ICO Order_ExecInstruction = 15
)

// Enum value maps for Order_ExecInstruction.
var (
	Order_ExecInstruction_name = map[int32]string{
		12: "EXEC_INSTRUCTION_NONE",
		1:  "EXEC_INSTRUCTION_AON",
		2:  "EXEC_INSTRUCTION_ICEBERG",
		3:  "EXEC_INSTRUCTION_QT",
		4:  "EXEC_INSTRUCTION_TRAIL",
		5:  "EXEC_INSTRUCTION_FUNARI",
		6:  "EXEC_INSTRUCTION_MIT",
		7:  "EXEC_INSTRUCTION_MLM",
		8:  "EXEC_INSTRUCTION_POSTONLY",
		10: "EXEC_INSTRUCTION_MTL",
		11: "EXEC_INSTRUCTION_AUCTION",
		13: "EXEC_INSTRUCTION_ATANYPRICE",
		14: "EXEC_INSTRUCTION_LMT_PRARGD",
		15: "EXEC_INSTRUCTION_ICO",
	}
	Order_ExecInstruction_value = map[string]int32{
		"EXEC_INSTRUCTION_NONE":       12,
		"EXEC_INSTRUCTION_AON":        1,
		"EXEC_INSTRUCTION_ICEBERG":    2,
		"EXEC_INSTRUCTION_QT":         3,
		"EXEC_INSTRUCTION_TRAIL":      4,
		"EXEC_INSTRUCTION_FUNARI":     5,
		"EXEC_INSTRUCTION_MIT":        6,
		"EXEC_INSTRUCTION_MLM":        7,
		"EXEC_INSTRUCTION_POSTONLY":   8,
		"EXEC_INSTRUCTION_MTL":        10,
		"EXEC_INSTRUCTION_AUCTION":    11,
		"EXEC_INSTRUCTION_ATANYPRICE": 13,
		"EXEC_INSTRUCTION_LMT_PRARGD": 14,
		"EXEC_INSTRUCTION_ICO":        15,
	}
)

func (x Order_ExecInstruction) Enum() *Order_ExecInstruction {
	p := new(Order_ExecInstruction)
	*p = x
	return p
}

func (x Order_ExecInstruction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Order_ExecInstruction) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_order_2_proto_enumTypes[6].Descriptor()
}

func (Order_ExecInstruction) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_order_2_proto_enumTypes[6]
}

func (x Order_ExecInstruction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Order_ExecInstruction) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Order_ExecInstruction(num)
	return nil
}

// Deprecated: Use Order_ExecInstruction.Descriptor instead.
func (Order_ExecInstruction) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{8, 2}
}

type Order_Duration int32

const (
	// Day order. Order is working through the current trading day only.
	Order_DURATION_DAY Order_Duration = 1
	// Good Til Canceled. Order is working until canceled or until the contract is no longer available for trading.
	Order_DURATION_GTC Order_Duration = 2
	// Good Til Date. Order is working through the specified trade date (good_thru_date) for the contract.
	// Note: Exchange must have a trading session for the contract for the specified trade date.
	Order_DURATION_GTD Order_Duration = 3
	// Good Til Time. Order is working until the specified time.
	Order_DURATION_GTT Order_Duration = 4
	// Fill and Kill. Immediately fill as many as possible and cancel the rest.
	Order_DURATION_FAK Order_Duration = 5
	// Fill Or Kill. Immediately fill this order completely or cancel.
	Order_DURATION_FOK Order_Duration = 6
	// At The Open. Buy or sell at the very beginning of the trading day.
	Order_DURATION_ATO Order_Duration = 7
	// At The Close. Buy or sell at the close of the market, or as near to the closing price as possible.
	Order_DURATION_ATC Order_Duration = 8
	// Good for auction. Order only valid for the next auction.
	Order_DURATION_GFA Order_Duration = 9
)

// Enum value maps for Order_Duration.
var (
	Order_Duration_name = map[int32]string{
		1: "DURATION_DAY",
		2: "DURATION_GTC",
		3: "DURATION_GTD",
		4: "DURATION_GTT",
		5: "DURATION_FAK",
		6: "DURATION_FOK",
		7: "DURATION_ATO",
		8: "DURATION_ATC",
		9: "DURATION_GFA",
	}
	Order_Duration_value = map[string]int32{
		"DURATION_DAY": 1,
		"DURATION_GTC": 2,
		"DURATION_GTD": 3,
		"DURATION_GTT": 4,
		"DURATION_FAK": 5,
		"DURATION_FOK": 6,
		"DURATION_ATO": 7,
		"DURATION_ATC": 8,
		"DURATION_GFA": 9,
	}
)

func (x Order_Duration) Enum() *Order_Duration {
	p := new(Order_Duration)
	*p = x
	return p
}

func (x Order_Duration) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Order_Duration) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_order_2_proto_enumTypes[7].Descriptor()
}

func (Order_Duration) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_order_2_proto_enumTypes[7]
}

func (x Order_Duration) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Order_Duration) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Order_Duration(num)
	return nil
}

// Deprecated: Use Order_Duration.Descriptor instead.
func (Order_Duration) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{8, 3}
}

type Order_TrailingPeg int32

const (
	// Trail the best bid.
	Order_TRAILING_PEG_BESTBID Order_TrailingPeg = 1
	// Trail the best ask.
	Order_TRAILING_PEG_BESTASK Order_TrailingPeg = 2
	// Trail the last trade.
	Order_TRAILING_PEG_LASTTRADE Order_TrailingPeg = 3
)

// Enum value maps for Order_TrailingPeg.
var (
	Order_TrailingPeg_name = map[int32]string{
		1: "TRAILING_PEG_BESTBID",
		2: "TRAILING_PEG_BESTASK",
		3: "TRAILING_PEG_LASTTRADE",
	}
	Order_TrailingPeg_value = map[string]int32{
		"TRAILING_PEG_BESTBID":   1,
		"TRAILING_PEG_BESTASK":   2,
		"TRAILING_PEG_LASTTRADE": 3,
	}
)

func (x Order_TrailingPeg) Enum() *Order_TrailingPeg {
	p := new(Order_TrailingPeg)
	*p = x
	return p
}

func (x Order_TrailingPeg) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Order_TrailingPeg) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_order_2_proto_enumTypes[8].Descriptor()
}

func (Order_TrailingPeg) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_order_2_proto_enumTypes[8]
}

func (x Order_TrailingPeg) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Order_TrailingPeg) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Order_TrailingPeg(num)
	return nil
}

// Deprecated: Use Order_TrailingPeg.Descriptor instead.
func (Order_TrailingPeg) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{8, 4}
}

// Specifies what the order is intended to do:
// open (or extend) a position on the same side as the order or close (or reduce) an opposite position.
// Applicable only if ContractMetadata.open_close_type is either OPEN_CLOSE_TYPE_OPTIONAL or OPEN_CLOSE_TYPE_REQUIRED.
type Order_OpenCloseInstruction int32

const (
	// Opening a new today position.
	Order_OPEN_CLOSE_INSTRUCTION_OPEN Order_OpenCloseInstruction = 1
	// Closing or reducing (today only if ContractMetadata.position_tracking is LONG_SHORT_WITH_EXPLICIT_CLOSE,
	// today or yesterday if LONG_SHORT_WITH_IMPLIED_CLOSE).
	Order_OPEN_CLOSE_INSTRUCTION_CLOSE Order_OpenCloseInstruction = 2
	// Closing or reducing a yesterday position
	// (if ContractMetadata.position_tracking is LONG_SHORT_WITH_EXPLICIT_CLOSE).
	Order_OPEN_CLOSE_INSTRUCTION_CLOSE_YESTERDAY Order_OpenCloseInstruction = 3
)

// Enum value maps for Order_OpenCloseInstruction.
var (
	Order_OpenCloseInstruction_name = map[int32]string{
		1: "OPEN_CLOSE_INSTRUCTION_OPEN",
		2: "OPEN_CLOSE_INSTRUCTION_CLOSE",
		3: "OPEN_CLOSE_INSTRUCTION_CLOSE_YESTERDAY",
	}
	Order_OpenCloseInstruction_value = map[string]int32{
		"OPEN_CLOSE_INSTRUCTION_OPEN":            1,
		"OPEN_CLOSE_INSTRUCTION_CLOSE":           2,
		"OPEN_CLOSE_INSTRUCTION_CLOSE_YESTERDAY": 3,
	}
)

func (x Order_OpenCloseInstruction) Enum() *Order_OpenCloseInstruction {
	p := new(Order_OpenCloseInstruction)
	*p = x
	return p
}

func (x Order_OpenCloseInstruction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Order_OpenCloseInstruction) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_order_2_proto_enumTypes[9].Descriptor()
}

func (Order_OpenCloseInstruction) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_order_2_proto_enumTypes[9]
}

func (x Order_OpenCloseInstruction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Order_OpenCloseInstruction) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Order_OpenCloseInstruction(num)
	return nil
}

// Deprecated: Use Order_OpenCloseInstruction.Descriptor instead.
func (Order_OpenCloseInstruction) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{8, 5}
}

// Type of the compound order.
type CompoundOrder_Type int32

const (
	// Order Places Order.
	// [Partial] fill of the first entry triggers [partial] placement of all other orders.
	CompoundOrder_TYPE_OPO CompoundOrder_Type = 1
	// Order Cancels Order. This type allows several compound order entires.
	// [Partial] fill of any order triggers [partial] canceling of all other orders.
	CompoundOrder_TYPE_OCO CompoundOrder_Type = 2
	// A set of otherwise unrelated orders being placed in one action.
	CompoundOrder_TYPE_INDEPENDENT CompoundOrder_Type = 3
)

// Enum value maps for CompoundOrder_Type.
var (
	CompoundOrder_Type_name = map[int32]string{
		1: "TYPE_OPO",
		2: "TYPE_OCO",
		3: "TYPE_INDEPENDENT",
	}
	CompoundOrder_Type_value = map[string]int32{
		"TYPE_OPO":         1,
		"TYPE_OCO":         2,
		"TYPE_INDEPENDENT": 3,
	}
)

func (x CompoundOrder_Type) Enum() *CompoundOrder_Type {
	p := new(CompoundOrder_Type)
	*p = x
	return p
}

func (x CompoundOrder_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompoundOrder_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_order_2_proto_enumTypes[10].Descriptor()
}

func (CompoundOrder_Type) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_order_2_proto_enumTypes[10]
}

func (x CompoundOrder_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CompoundOrder_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CompoundOrder_Type(num)
	return nil
}

// Deprecated: Use CompoundOrder_Type.Descriptor instead.
func (CompoundOrder_Type) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{17, 0}
}

// Status of GoFlat request execution.
type GoFlatStatus_StatusCode int32

const (
	// GoFlat request execution complete.
	GoFlatStatus_STATUS_CODE_COMPLETED GoFlatStatus_StatusCode = 0
	// GoFlat request was not executed in allowed time.
	GoFlatStatus_STATUS_CODE_TIMED_OUT GoFlatStatus_StatusCode = 1
	// GoFlat request was not executed due to error.
	GoFlatStatus_STATUS_CODE_FAILED GoFlatStatus_StatusCode = 2
)

// Enum value maps for GoFlatStatus_StatusCode.
var (
	GoFlatStatus_StatusCode_name = map[int32]string{
		0: "STATUS_CODE_COMPLETED",
		1: "STATUS_CODE_TIMED_OUT",
		2: "STATUS_CODE_FAILED",
	}
	GoFlatStatus_StatusCode_value = map[string]int32{
		"STATUS_CODE_COMPLETED": 0,
		"STATUS_CODE_TIMED_OUT": 1,
		"STATUS_CODE_FAILED":    2,
	}
)

func (x GoFlatStatus_StatusCode) Enum() *GoFlatStatus_StatusCode {
	p := new(GoFlatStatus_StatusCode)
	*p = x
	return p
}

func (x GoFlatStatus_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GoFlatStatus_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_order_2_proto_enumTypes[11].Descriptor()
}

func (GoFlatStatus_StatusCode) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_order_2_proto_enumTypes[11]
}

func (x GoFlatStatus_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GoFlatStatus_StatusCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GoFlatStatus_StatusCode(num)
	return nil
}

// Deprecated: Use GoFlatStatus_StatusCode.Descriptor instead.
func (GoFlatStatus_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{24, 0}
}

type ApproveOrder_Action int32

const (
	// Action to approve the cross order.
	ApproveOrder_APPROVE_ORDER_ACTION_APPROVE ApproveOrder_Action = 0
	// Action to reject the cross order.
	ApproveOrder_APPROVE_ORDER_ACTION_REJECT ApproveOrder_Action = 1
)

// Enum value maps for ApproveOrder_Action.
var (
	ApproveOrder_Action_name = map[int32]string{
		0: "APPROVE_ORDER_ACTION_APPROVE",
		1: "APPROVE_ORDER_ACTION_REJECT",
	}
	ApproveOrder_Action_value = map[string]int32{
		"APPROVE_ORDER_ACTION_APPROVE": 0,
		"APPROVE_ORDER_ACTION_REJECT":  1,
	}
)

func (x ApproveOrder_Action) Enum() *ApproveOrder_Action {
	p := new(ApproveOrder_Action)
	*p = x
	return p
}

func (x ApproveOrder_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApproveOrder_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_order_2_proto_enumTypes[12].Descriptor()
}

func (ApproveOrder_Action) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_order_2_proto_enumTypes[12]
}

func (x ApproveOrder_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ApproveOrder_Action) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ApproveOrder_Action(num)
	return nil
}

// Deprecated: Use ApproveOrder_Action.Descriptor instead.
func (ApproveOrder_Action) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{32, 0}
}

// Low-level order request reject. It is sent only if direct order status updates are impossible.
type OrderRequestReject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the order request this reject corresponds to.
	RequestId *uint32 `protobuf:"varint,1,req,name=request_id,json=requestId" json:"request_id,omitempty"`
	// If order request is rejected, this is rejection code.
	// See https://help.cqg.com/apihelp/#!Documents/rejectcodesfixconnectorderrouting.htm for the list of values.
	// Client implementation must be ready to get new values in this field.
	RejectCode *uint32 `protobuf:"varint,2,req,name=reject_code,json=rejectCode" json:"reject_code,omitempty"`
	// Note: use 'details' instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
	TextMessage *string `protobuf:"bytes,3,opt,name=text_message,json=textMessage" json:"text_message,omitempty"`
	// Optional reject details message.
	Details *common.Text `protobuf:"bytes,4,opt,name=details" json:"details,omitempty"`
}

func (x *OrderRequestReject) Reset() {
	*x = OrderRequestReject{}
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderRequestReject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderRequestReject) ProtoMessage() {}

func (x *OrderRequestReject) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderRequestReject.ProtoReflect.Descriptor instead.
func (*OrderRequestReject) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{0}
}

func (x *OrderRequestReject) GetRequestId() uint32 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *OrderRequestReject) GetRejectCode() uint32 {
	if x != nil && x.RejectCode != nil {
		return *x.RejectCode
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
func (x *OrderRequestReject) GetTextMessage() string {
	if x != nil && x.TextMessage != nil {
		return *x.TextMessage
	}
	return ""
}

func (x *OrderRequestReject) GetDetails() *common.Text {
	if x != nil {
		return x.Details
	}
	return nil
}

// Acknowledgement that CQG trade routing system received and started processing the order request.
// It is sent only for OrderRequest actions: LiquidateAll, CancelAll, GoFlat.
// The result of acknowledged GoFlat request will be returned as GoFlatStatus message.
type OrderRequestAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the order request this acknowledgement corresponds to.
	RequestId *uint32 `protobuf:"varint,1,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	// Time when the order request has been acknowledgement by CQG trade routing system.
	When *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=when" json:"when,omitempty"`
}

func (x *OrderRequestAck) Reset() {
	*x = OrderRequestAck{}
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderRequestAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderRequestAck) ProtoMessage() {}

func (x *OrderRequestAck) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderRequestAck.ProtoReflect.Descriptor instead.
func (*OrderRequestAck) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{1}
}

func (x *OrderRequestAck) GetRequestId() uint32 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *OrderRequestAck) GetWhen() *timestamppb.Timestamp {
	if x != nil {
		return x.When
	}
	return nil
}

// Status of order.
type OrderStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of trade subscription IDs this status is related to.
	SubscriptionIds []uint32 `protobuf:"varint,1,rep,name=subscription_ids,json=subscriptionIds" json:"subscription_ids,omitempty"`
	// True if this is a snapshot related message.
	// Since snapshot might be sent in several messages (including none),
	// client should use TradeSnapshotCompletion message as
	// an indicator of complete snapshot delivery for a particular subscription.
	IsSnapshot *bool `protobuf:"varint,2,opt,name=is_snapshot,json=isSnapshot" json:"is_snapshot,omitempty"`
	// This field is associated with shared_1.OrderStatus.Status enum type.
	Status *uint32 `protobuf:"varint,3,req,name=status" json:"status,omitempty"`
	// Order ID assigned by server.
	// It is changed by server after each modify request acknowledgment.
	// Some fields and nested messages of OrderStatus message may be different
	// for different accounts for the same order (i.e. same order_id).
	OrderId *string `protobuf:"bytes,4,req,name=order_id,json=orderId" json:"order_id,omitempty"`
	// Order ID assigned by server to originally placed order. It stays the same regardless of modification requests.
	ChainOrderId *string `protobuf:"bytes,5,req,name=chain_order_id,json=chainOrderId" json:"chain_order_id,omitempty"`
	// Order ID assigned by execution system (e.g. exchange).
	ExecOrderId *string `protobuf:"bytes,6,opt,name=exec_order_id,json=execOrderId" json:"exec_order_id,omitempty"`
	// Id used to determine a user's order in Detailed DOM.
	// Is unique for an exchange. contract_id + detailed_dom_order_id pair is unique among all orders of a user.
	DetailedDomOrderId *string `protobuf:"bytes,36,opt,name=detailed_dom_order_id,json=detailedDomOrderId" json:"detailed_dom_order_id,omitempty"`
	// Note: use status_utc_timestamp field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
	StatusUtcTime *int64 `protobuf:"zigzag64,7,opt,name=status_utc_time,json=statusUtcTime" json:"status_utc_time,omitempty"`
	// Last order change time from server perspective (UTC).
	// It is not guaranteed that order status (e.g. from different order chain) which comes later has bigger timestamp.
	StatusUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,24,req,name=status_utc_timestamp,json=statusUtcTimestamp" json:"status_utc_timestamp,omitempty"`
	// Note: use submission_utc_timestamp field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
	SubmissionUtcTime *int64 `protobuf:"zigzag64,8,opt,name=submission_utc_time,json=submissionUtcTime" json:"submission_utc_time,omitempty"`
	// Time when original order was submitted to the execution system by server (UTC).
	SubmissionUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,25,req,name=submission_utc_timestamp,json=submissionUtcTimestamp" json:"submission_utc_timestamp,omitempty"`
	// Note: use fill_qty field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
	Uint32FillQty *uint32 `protobuf:"varint,9,opt,name=uint32_fill_qty,json=uint32FillQty" json:"uint32_fill_qty,omitempty"`
	// Filled quantity.
	FillQty *common.Decimal `protobuf:"bytes,28,opt,name=fill_qty,json=fillQty" json:"fill_qty,omitempty"`
	// Number of fill events.
	FillCnt *uint32 `protobuf:"varint,10,req,name=fill_cnt,json=fillCnt" json:"fill_cnt,omitempty"`
	// Average fill price.
	// NOTE: this price is aligned by ContractMetadata.correct_price_scale so don't use it for OTE/UPL calculation but
	// use prices from individual TRADE elements. See also avg_fill_price_correct field.
	ScaledAvgFillPrice *int64 `protobuf:"zigzag64,11,req,name=scaled_avg_fill_price,json=scaledAvgFillPrice" json:"scaled_avg_fill_price,omitempty"`
	// Average fill price in correct price format.
	// Could have higher precision than avg_fill_price multiplied by correct_price_scale.
	AvgFillPriceCorrect *float64 `protobuf:"fixed64,27,req,name=avg_fill_price_correct,json=avgFillPriceCorrect" json:"avg_fill_price_correct,omitempty"`
	// Note: use active_at_utc_timestamp field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
	ActiveAtUtcTime *int64 `protobuf:"zigzag64,12,opt,name=active_at_utc_time,json=activeAtUtcTime" json:"active_at_utc_time,omitempty"`
	// Time when order should be submitted to execution system as assigned by server (UTC).
	ActiveAtUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=active_at_utc_timestamp,json=activeAtUtcTimestamp" json:"active_at_utc_timestamp,omitempty"`
	// Note: use remaining_qty field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
	Uint32RemainingQty *uint32 `protobuf:"varint,13,opt,name=uint32_remaining_qty,json=uint32RemainingQty" json:"uint32_remaining_qty,omitempty"`
	// Remaining (unfilled) order quantity. It is not always equal
	// to order size minus filled size (for example, busted orders violate that).
	RemainingQty *common.Decimal `protobuf:"bytes,29,opt,name=remaining_qty,json=remainingQty" json:"remaining_qty,omitempty"`
	// Order with updated attributes. Server may not send it if order attributes remained the same since last update.
	Order *Order `protobuf:"bytes,14,opt,name=order" json:"order,omitempty"`
	// List of [last] transactions.
	// In case of initial snapshot (if last_orders_update_utc_time was not set in TradeSubscription)
	// all available transactions are sent. This list can be empty if this status is sent to update order attributes only
	// (e.g. to update prices of trailing orders).
	// It is guaranteed that this list is sorted by transaction identifier (TransactionStatus.trans_id).
	TransactionStatuses []*TransactionStatus `protobuf:"bytes,15,rep,name=transaction_statuses,json=transactionStatuses" json:"transaction_statuses,omitempty"`
	// Time of the latest REJECTED, REJECT_CANCEL or REJECT_MODIFY transaction, if any (UTC).
	// Note: only transactions present in this message in OrderStatus.transaction_status contribute to this field.
	RejectUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,30,opt,name=reject_utc_timestamp,json=rejectUtcTimestamp" json:"reject_utc_timestamp,omitempty"`
	// Message of the latest REJECTED, REJECT_CANCEL or REJECT_MODIFY transaction, if any.
	// Note: only transactions present in this message in OrderStatus.transaction_status contribute to this field.
	RejectMessage *string `protobuf:"bytes,31,opt,name=reject_message,json=rejectMessage" json:"reject_message,omitempty"`
	// Time of the latest ACK_CANCEL transaction, if any (UTC).
	CancelUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,32,opt,name=cancel_utc_timestamp,json=cancelUtcTimestamp" json:"cancel_utc_timestamp,omitempty"`
	// Time of the latest FILL transaction, if any (UTC).
	FillUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,33,opt,name=fill_utc_timestamp,json=fillUtcTimestamp" json:"fill_utc_timestamp,omitempty"`
	// Whether there is FILL_CORRECT with updated quantity. Canceled and busted fills are ignored.
	// Note: only transactions present in this message in OrderStatus.transaction_status contribute to this field.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
	HasFillWithModifiedQty *bool `protobuf:"varint,34,opt,name=has_fill_with_modified_qty,json=hasFillWithModifiedQty" json:"has_fill_with_modified_qty,omitempty"`
	// Whether there is FILL_CORRECT with updated price. Canceled and busted fills are ignored.
	// Note: only transactions present in this message in OrderStatus.transaction_status contribute to this field.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
	HasFillWithModifiedPrice *bool `protobuf:"varint,35,opt,name=has_fill_with_modified_price,json=hasFillWithModifiedPrice" json:"has_fill_with_modified_price,omitempty"`
	// User who placed the order, or user on whose behalf the order was placed.
	EnteredByUser *string `protobuf:"bytes,16,req,name=entered_by_user,json=enteredByUser" json:"entered_by_user,omitempty"`
	// Statement date when this order was submitted.
	FirstStatementDate *int64 `protobuf:"zigzag64,17,req,name=first_statement_date,json=firstStatementDate" json:"first_statement_date,omitempty"`
	// Last statement date this order belongs to. It is set when order is cleaned by a statement report or other event
	// so that order is not 'current' any longer. For example, canceled synthetic strategy leg orders without fills
	// may be cleared before the end of 'current' day.
	LastStatementDate *int64 `protobuf:"zigzag64,18,opt,name=last_statement_date,json=lastStatementDate" json:"last_statement_date,omitempty"`
	// Multiple OrderStatus and PositionStatus messages in a single ServerMsg can reference the same contract.
	// If the contract is unknown to the client before this ServerMsg,
	// contract meta-data will be added in at least one of them.
	// If in your code you process orders first and positions second then during processing orders you may
	// encounter order with yet unknown contract_id.
	// In this case you should look for matching contract metadata in positions.
	// The opposite is also true: contract metadata for positions can be in order status messages.
	ContractMetadata []*ContractMetadata `protobuf:"bytes,19,rep,name=contract_metadata,json=contractMetadata" json:"contract_metadata,omitempty"`
	// Id of an account for this order status.
	// Some fields and nested messages of OrderStatus message may be different
	// for different accounts for the same order (i.e. same order_id).
	AccountId *int32 `protobuf:"zigzag32,20,req,name=account_id,json=accountId" json:"account_id,omitempty"`
	// If the order is part of a compound order then this field describe the structure of the compound.
	CompoundOrderStructure *CompoundOrderStructure `protobuf:"bytes,21,opt,name=compound_order_structure,json=compoundOrderStructure" json:"compound_order_structure,omitempty"`
	// The number of active (not resolved) hangs on this synthetic strategy order.
	HangCount *uint32 `protobuf:"varint,22,opt,name=hang_count,json=hangCount" json:"hang_count,omitempty"`
	// Synthetic order's outright properties
	StrategyProperties *SyntheticStrategyProperties `protobuf:"bytes,23,opt,name=strategy_properties,json=strategyProperties" json:"strategy_properties,omitempty"`
	// Cross transaction ID assigned by exchange.
	CrossTransactionId *string `protobuf:"bytes,37,opt,name=cross_transaction_id,json=crossTransactionId" json:"cross_transaction_id,omitempty"`
	// Exchange specific extra attributes.
	ExchangeExtraAttributes []*common.NamedValue `protobuf:"bytes,38,rep,name=exchange_extra_attributes,json=exchangeExtraAttributes" json:"exchange_extra_attributes,omitempty"`
	// Cumulative commission charged for the order fills.
	// CQG trade routing system might not provide this information for some contracts.
	FillCommission *Commission `protobuf:"bytes,39,opt,name=fill_commission,json=fillCommission" json:"fill_commission,omitempty"`
	// Order identifier assigned by server when sending the order to execution system.
	RouteClOrderId *string `protobuf:"bytes,40,opt,name=route_cl_order_id,json=routeClOrderId" json:"route_cl_order_id,omitempty"`
	// Actual value of MiFID Execution Within Firm associated with
	// initial or acknowledged modify order request of this order chain for execution in this account
	MifidExecutionDecision *string `protobuf:"bytes,41,opt,name=mifid_execution_decision,json=mifidExecutionDecision" json:"mifid_execution_decision,omitempty"`
	// Indicates whether MiFID Execution decision identifies a person (false) or algorithm (true)
	MifidExecutionDecisionIsAlgo *bool `protobuf:"varint,42,opt,name=mifid_execution_decision_is_algo,json=mifidExecutionDecisionIsAlgo" json:"mifid_execution_decision_is_algo,omitempty"`
	// Actual value of MiFID Investment Decision Within Firm associated with
	// initial or acknowledged modify order request of this order chain.
	MifidInvestmentDecision *string `protobuf:"bytes,43,opt,name=mifid_investment_decision,json=mifidInvestmentDecision" json:"mifid_investment_decision,omitempty"`
	// Indicates whether MiFID investment decision identifies a person (false) or algorithm (true)
	MifidInvestmentDecisionIsAlgo *bool `protobuf:"varint,44,opt,name=mifid_investment_decision_is_algo,json=mifidInvestmentDecisionIsAlgo" json:"mifid_investment_decision_is_algo,omitempty"`
	// Message originator location (i.e. geographic location)
	SenderLocationId *string `protobuf:"bytes,45,opt,name=sender_location_id,json=senderLocationId" json:"sender_location_id,omitempty"`
	// Message originator identifier (desk, trader etc)
	SenderOperatorId *string `protobuf:"bytes,46,opt,name=sender_operator_id,json=senderOperatorId" json:"sender_operator_id,omitempty"`
	// Applied effective value of message originator identifier
	OperatorId *string `protobuf:"bytes,47,opt,name=operator_id,json=operatorId" json:"operator_id,omitempty"`
	// Identifier that is used to match two filled care orders.
	FillCareOrderRequestId *string `protobuf:"bytes,48,opt,name=fill_care_order_request_id,json=fillCareOrderRequestId" json:"fill_care_order_request_id,omitempty"`
}

func (x *OrderStatus) Reset() {
	*x = OrderStatus{}
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderStatus) ProtoMessage() {}

func (x *OrderStatus) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderStatus.ProtoReflect.Descriptor instead.
func (*OrderStatus) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{2}
}

func (x *OrderStatus) GetSubscriptionIds() []uint32 {
	if x != nil {
		return x.SubscriptionIds
	}
	return nil
}

func (x *OrderStatus) GetIsSnapshot() bool {
	if x != nil && x.IsSnapshot != nil {
		return *x.IsSnapshot
	}
	return false
}

func (x *OrderStatus) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *OrderStatus) GetOrderId() string {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return ""
}

func (x *OrderStatus) GetChainOrderId() string {
	if x != nil && x.ChainOrderId != nil {
		return *x.ChainOrderId
	}
	return ""
}

func (x *OrderStatus) GetExecOrderId() string {
	if x != nil && x.ExecOrderId != nil {
		return *x.ExecOrderId
	}
	return ""
}

func (x *OrderStatus) GetDetailedDomOrderId() string {
	if x != nil && x.DetailedDomOrderId != nil {
		return *x.DetailedDomOrderId
	}
	return ""
}

// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
func (x *OrderStatus) GetStatusUtcTime() int64 {
	if x != nil && x.StatusUtcTime != nil {
		return *x.StatusUtcTime
	}
	return 0
}

func (x *OrderStatus) GetStatusUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.StatusUtcTimestamp
	}
	return nil
}

// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
func (x *OrderStatus) GetSubmissionUtcTime() int64 {
	if x != nil && x.SubmissionUtcTime != nil {
		return *x.SubmissionUtcTime
	}
	return 0
}

func (x *OrderStatus) GetSubmissionUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.SubmissionUtcTimestamp
	}
	return nil
}

// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
func (x *OrderStatus) GetUint32FillQty() uint32 {
	if x != nil && x.Uint32FillQty != nil {
		return *x.Uint32FillQty
	}
	return 0
}

func (x *OrderStatus) GetFillQty() *common.Decimal {
	if x != nil {
		return x.FillQty
	}
	return nil
}

func (x *OrderStatus) GetFillCnt() uint32 {
	if x != nil && x.FillCnt != nil {
		return *x.FillCnt
	}
	return 0
}

func (x *OrderStatus) GetScaledAvgFillPrice() int64 {
	if x != nil && x.ScaledAvgFillPrice != nil {
		return *x.ScaledAvgFillPrice
	}
	return 0
}

func (x *OrderStatus) GetAvgFillPriceCorrect() float64 {
	if x != nil && x.AvgFillPriceCorrect != nil {
		return *x.AvgFillPriceCorrect
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
func (x *OrderStatus) GetActiveAtUtcTime() int64 {
	if x != nil && x.ActiveAtUtcTime != nil {
		return *x.ActiveAtUtcTime
	}
	return 0
}

func (x *OrderStatus) GetActiveAtUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ActiveAtUtcTimestamp
	}
	return nil
}

// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
func (x *OrderStatus) GetUint32RemainingQty() uint32 {
	if x != nil && x.Uint32RemainingQty != nil {
		return *x.Uint32RemainingQty
	}
	return 0
}

func (x *OrderStatus) GetRemainingQty() *common.Decimal {
	if x != nil {
		return x.RemainingQty
	}
	return nil
}

func (x *OrderStatus) GetOrder() *Order {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *OrderStatus) GetTransactionStatuses() []*TransactionStatus {
	if x != nil {
		return x.TransactionStatuses
	}
	return nil
}

func (x *OrderStatus) GetRejectUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.RejectUtcTimestamp
	}
	return nil
}

func (x *OrderStatus) GetRejectMessage() string {
	if x != nil && x.RejectMessage != nil {
		return *x.RejectMessage
	}
	return ""
}

func (x *OrderStatus) GetCancelUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CancelUtcTimestamp
	}
	return nil
}

func (x *OrderStatus) GetFillUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.FillUtcTimestamp
	}
	return nil
}

// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
func (x *OrderStatus) GetHasFillWithModifiedQty() bool {
	if x != nil && x.HasFillWithModifiedQty != nil {
		return *x.HasFillWithModifiedQty
	}
	return false
}

// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
func (x *OrderStatus) GetHasFillWithModifiedPrice() bool {
	if x != nil && x.HasFillWithModifiedPrice != nil {
		return *x.HasFillWithModifiedPrice
	}
	return false
}

func (x *OrderStatus) GetEnteredByUser() string {
	if x != nil && x.EnteredByUser != nil {
		return *x.EnteredByUser
	}
	return ""
}

func (x *OrderStatus) GetFirstStatementDate() int64 {
	if x != nil && x.FirstStatementDate != nil {
		return *x.FirstStatementDate
	}
	return 0
}

func (x *OrderStatus) GetLastStatementDate() int64 {
	if x != nil && x.LastStatementDate != nil {
		return *x.LastStatementDate
	}
	return 0
}

func (x *OrderStatus) GetContractMetadata() []*ContractMetadata {
	if x != nil {
		return x.ContractMetadata
	}
	return nil
}

func (x *OrderStatus) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *OrderStatus) GetCompoundOrderStructure() *CompoundOrderStructure {
	if x != nil {
		return x.CompoundOrderStructure
	}
	return nil
}

func (x *OrderStatus) GetHangCount() uint32 {
	if x != nil && x.HangCount != nil {
		return *x.HangCount
	}
	return 0
}

func (x *OrderStatus) GetStrategyProperties() *SyntheticStrategyProperties {
	if x != nil {
		return x.StrategyProperties
	}
	return nil
}

func (x *OrderStatus) GetCrossTransactionId() string {
	if x != nil && x.CrossTransactionId != nil {
		return *x.CrossTransactionId
	}
	return ""
}

func (x *OrderStatus) GetExchangeExtraAttributes() []*common.NamedValue {
	if x != nil {
		return x.ExchangeExtraAttributes
	}
	return nil
}

func (x *OrderStatus) GetFillCommission() *Commission {
	if x != nil {
		return x.FillCommission
	}
	return nil
}

func (x *OrderStatus) GetRouteClOrderId() string {
	if x != nil && x.RouteClOrderId != nil {
		return *x.RouteClOrderId
	}
	return ""
}

func (x *OrderStatus) GetMifidExecutionDecision() string {
	if x != nil && x.MifidExecutionDecision != nil {
		return *x.MifidExecutionDecision
	}
	return ""
}

func (x *OrderStatus) GetMifidExecutionDecisionIsAlgo() bool {
	if x != nil && x.MifidExecutionDecisionIsAlgo != nil {
		return *x.MifidExecutionDecisionIsAlgo
	}
	return false
}

func (x *OrderStatus) GetMifidInvestmentDecision() string {
	if x != nil && x.MifidInvestmentDecision != nil {
		return *x.MifidInvestmentDecision
	}
	return ""
}

func (x *OrderStatus) GetMifidInvestmentDecisionIsAlgo() bool {
	if x != nil && x.MifidInvestmentDecisionIsAlgo != nil {
		return *x.MifidInvestmentDecisionIsAlgo
	}
	return false
}

func (x *OrderStatus) GetSenderLocationId() string {
	if x != nil && x.SenderLocationId != nil {
		return *x.SenderLocationId
	}
	return ""
}

func (x *OrderStatus) GetSenderOperatorId() string {
	if x != nil && x.SenderOperatorId != nil {
		return *x.SenderOperatorId
	}
	return ""
}

func (x *OrderStatus) GetOperatorId() string {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return ""
}

func (x *OrderStatus) GetFillCareOrderRequestId() string {
	if x != nil && x.FillCareOrderRequestId != nil {
		return *x.FillCareOrderRequestId
	}
	return ""
}

// Status of a specific transaction.
// All attributes are at the transaction moment.
type TransactionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This field is associated with shared_1.TransactionStatus.Status enum type.
	Status *uint32 `protobuf:"varint,1,req,name=status" json:"status,omitempty"`
	// Order transaction identifier.
	// For all transactions within order chain it is guaranteed that:
	// 1) Transaction identifier is unique.
	// 2) The later transaction has greater transaction identifier than the earlier one.
	TransId *uint64 `protobuf:"varint,2,req,name=trans_id,json=transId" json:"trans_id,omitempty"`
	// Transaction time assigned by server (UTC).
	// Note: use trans_utc_timestamp field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
	TransUtcTime *int64 `protobuf:"zigzag64,3,opt,name=trans_utc_time,json=transUtcTime" json:"trans_utc_time,omitempty"`
	// Transaction time assigned by server (UTC).
	TransUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,40,req,name=trans_utc_timestamp,json=transUtcTimestamp" json:"trans_utc_timestamp,omitempty"`
	// Reference transaction ID to the previous fill transaction for a bust, cancel or correction.
	RefTransId *uint64 `protobuf:"varint,4,opt,name=ref_trans_id,json=refTransId" json:"ref_trans_id,omitempty"`
	// If order is modified, this client order ID of the order before modification.
	OrigClOrderId *string `protobuf:"bytes,5,opt,name=orig_cl_order_id,json=origClOrderId" json:"orig_cl_order_id,omitempty"`
	// Client order ID of the order at the transaction moment.
	ClOrderId *string `protobuf:"bytes,6,req,name=cl_order_id,json=clOrderId" json:"cl_order_id,omitempty"`
	// Note: use fill_qty field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
	Uint32FillQty *uint32 `protobuf:"varint,7,opt,name=uint32_fill_qty,json=uint32FillQty" json:"uint32_fill_qty,omitempty"`
	// Filled quantity for fill transactions or updated quantity for fill correction.
	FillQty *common.Decimal `protobuf:"bytes,52,opt,name=fill_qty,json=fillQty" json:"fill_qty,omitempty"`
	// Fill price for fill transactions or updated price for fill correction.
	ScaledFillPrice *int64 `protobuf:"zigzag64,8,opt,name=scaled_fill_price,json=scaledFillPrice" json:"scaled_fill_price,omitempty"`
	// List of specific per leg trades (more than one for strategies).
	Trades []*Trade `protobuf:"bytes,9,rep,name=trades" json:"trades,omitempty"`
	// List of leg order fills that contribute to a synthetic strategy order fill.
	// Present if the transaction is of type FILL or FILL_CORRECT and this order is a synthetic strategy order.
	// Mutually exclusive with 'trade' attribute.
	StrategyLegFills []*StrategyLegFill `protobuf:"bytes,38,rep,name=strategy_leg_fills,json=strategyLegFills" json:"strategy_leg_fills,omitempty"`
	// Details of the hang
	SyntheticHang *SyntheticHang `protobuf:"bytes,39,opt,name=synthetic_hang,json=syntheticHang" json:"synthetic_hang,omitempty"`
	// Note: use prev_order_qty field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
	Uint32PrevOrderQty *uint32 `protobuf:"varint,10,opt,name=uint32_prev_order_qty,json=uint32PrevOrderQty" json:"uint32_prev_order_qty,omitempty"`
	// If order is modified, this is the previous order size.
	PrevOrderQty *common.Decimal `protobuf:"bytes,53,opt,name=prev_order_qty,json=prevOrderQty" json:"prev_order_qty,omitempty"`
	// Note: use order_qty field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
	Uint32OrderQty *uint32 `protobuf:"varint,11,opt,name=uint32_order_qty,json=uint32OrderQty" json:"uint32_order_qty,omitempty"`
	// If order is modified, this is the updated order size.
	OrderQty *common.Decimal `protobuf:"bytes,54,opt,name=order_qty,json=orderQty" json:"order_qty,omitempty"`
	// If order is modified, this is the previous order limit price.
	ScaledPrevLimitPrice *int64 `protobuf:"zigzag64,12,opt,name=scaled_prev_limit_price,json=scaledPrevLimitPrice" json:"scaled_prev_limit_price,omitempty"`
	// If order is modified, this is the updated order limit price.
	ScaledLimitPrice *int64 `protobuf:"zigzag64,13,opt,name=scaled_limit_price,json=scaledLimitPrice" json:"scaled_limit_price,omitempty"`
	// If order is modified, this is the previous order stop price.
	ScaledPrevStopPrice *int64 `protobuf:"zigzag64,14,opt,name=scaled_prev_stop_price,json=scaledPrevStopPrice" json:"scaled_prev_stop_price,omitempty"`
	// If order is modified, this is the updated order stop price.
	ScaledStopPrice *int64 `protobuf:"zigzag64,15,opt,name=scaled_stop_price,json=scaledStopPrice" json:"scaled_stop_price,omitempty"`
	// Note: use prev_visible_qty field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
	Uint32PrevVisibleQty *uint32 `protobuf:"varint,16,opt,name=uint32_prev_visible_qty,json=uint32PrevVisibleQty" json:"uint32_prev_visible_qty,omitempty"`
	// If order is modified, this is the previous visible order size.
	PrevVisibleQty *common.Decimal `protobuf:"bytes,55,opt,name=prev_visible_qty,json=prevVisibleQty" json:"prev_visible_qty,omitempty"`
	// Note: use visible_qty field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
	Uint32VisibleQty *uint32 `protobuf:"varint,17,opt,name=uint32_visible_qty,json=uint32VisibleQty" json:"uint32_visible_qty,omitempty"`
	// If order is modified, this is the updated visible order size.
	VisibleQty *common.Decimal `protobuf:"bytes,56,opt,name=visible_qty,json=visibleQty" json:"visible_qty,omitempty"`
	// Note: use prev_min_visible_qty field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
	Uint32PrevMinVisibleQty *uint32 `protobuf:"varint,18,opt,name=uint32_prev_min_visible_qty,json=uint32PrevMinVisibleQty" json:"uint32_prev_min_visible_qty,omitempty"`
	// If order is modified, this is the previous min visible order size.
	PrevMinVisibleQty *common.Decimal `protobuf:"bytes,57,opt,name=prev_min_visible_qty,json=prevMinVisibleQty" json:"prev_min_visible_qty,omitempty"`
	// Note: use min_visible_qty field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
	Uint32MinVisibleQty *uint32 `protobuf:"varint,19,opt,name=uint32_min_visible_qty,json=uint32MinVisibleQty" json:"uint32_min_visible_qty,omitempty"`
	// If order is modified, this is the updated min visible order size.
	MinVisibleQty *common.Decimal `protobuf:"bytes,58,opt,name=min_visible_qty,json=minVisibleQty" json:"min_visible_qty,omitempty"`
	// Note: use prev_fill_qty field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
	Uint32PrevFillQty *uint32 `protobuf:"varint,20,opt,name=uint32_prev_fill_qty,json=uint32PrevFillQty" json:"uint32_prev_fill_qty,omitempty"`
	// If fill is modified, the previous size is reported here.
	PrevFillQty *common.Decimal `protobuf:"bytes,59,opt,name=prev_fill_qty,json=prevFillQty" json:"prev_fill_qty,omitempty"`
	// If fill is modified, the previous price is reported here.
	ScaledPrevFillPrice *int64 `protobuf:"zigzag64,21,opt,name=scaled_prev_fill_price,json=scaledPrevFillPrice" json:"scaled_prev_fill_price,omitempty"`
	// If order is modified, this is the previous order type.
	// This field is associated with Order.OrderType enum type.
	PrevOrderType *uint32 `protobuf:"varint,22,opt,name=prev_order_type,json=prevOrderType" json:"prev_order_type,omitempty"`
	// If order is modified, this is the updated order type.
	// This field is associated with Order.OrderType enum type.
	OrderType *uint32 `protobuf:"varint,23,opt,name=order_type,json=orderType" json:"order_type,omitempty"`
	// If order is modified, these are the previous exec instructions.
	// This field is associated with Order.ExecInstruction enum type.
	PrevExecInstructions []uint32 `protobuf:"varint,24,rep,name=prev_exec_instructions,json=prevExecInstructions" json:"prev_exec_instructions,omitempty"`
	// If order is modified, these are the updated exec instructions.
	// This field is associated with Order.ExecInstruction enum type.
	ExecInstructions []uint32 `protobuf:"varint,25,rep,name=exec_instructions,json=execInstructions" json:"exec_instructions,omitempty"`
	// If order is modified, this is the previous duration.
	// This field is associated with Order.Duration enum type.
	PrevDuration *uint32 `protobuf:"varint,26,opt,name=prev_duration,json=prevDuration" json:"prev_duration,omitempty"`
	// If order is modified, this is the new duration.
	// This field is associated with Order.Duration enum type.
	Duration *uint32 `protobuf:"varint,27,opt,name=duration" json:"duration,omitempty"`
	// If order is modified, this is the previous date then the order should expire  (see Order.good_thru_date).
	PrevGoodThruDate *int64 `protobuf:"zigzag64,28,opt,name=prev_good_thru_date,json=prevGoodThruDate" json:"prev_good_thru_date,omitempty"`
	// If order is modified, this is the updated date then the order should expire  (see Order.good_thru_date).
	// The value of duration field must be set to GTD when this date value is specified.
	GoodThruDate *int64 `protobuf:"zigzag64,29,opt,name=good_thru_date,json=goodThruDate" json:"good_thru_date,omitempty"`
	// If order request is rejected, this is rejection code.
	// See https://help.cqg.com/apihelp/#!Documents/rejectcodesfixconnectorderrouting.htm for the list of values.
	RejectCode *uint32 `protobuf:"varint,30,opt,name=reject_code,json=rejectCode" json:"reject_code,omitempty"`
	// If present, identifies the counterpart of the order fill, as reported by the execution system.
	FillCounterparty *string `protobuf:"bytes,31,opt,name=fill_counterparty,json=fillCounterparty" json:"fill_counterparty,omitempty"`
	// Order identifier assigned by server when sending the order to execution system.
	RouteClOrderId *string `protobuf:"bytes,32,opt,name=route_cl_order_id,json=routeClOrderId" json:"route_cl_order_id,omitempty"`
	// Additional transaction details.
	TextMessage *string `protobuf:"bytes,33,opt,name=text_message,json=textMessage" json:"text_message,omitempty"`
	// If order is modified, this is the previous time then the order should expire  (see Order.good_thru_utc_time).
	// Note: use prev_good_thru_utc_timestamp field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
	PrevGoodThruUtcTime *int64 `protobuf:"zigzag64,34,opt,name=prev_good_thru_utc_time,json=prevGoodThruUtcTime" json:"prev_good_thru_utc_time,omitempty"`
	// If order is modified, this is the previous time then the order should expire  (see Order.good_thru_utc_timestamp).
	PrevGoodThruUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,41,opt,name=prev_good_thru_utc_timestamp,json=prevGoodThruUtcTimestamp" json:"prev_good_thru_utc_timestamp,omitempty"`
	// If order is modified, this is the updated time then the order should expire  (see Order.good_thru_utc).
	// The value of duration field must be set to GTT when this time value is specified.
	// Note: use good_thru_utc_timestamp field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
	GoodThruUtcTime *int64 `protobuf:"zigzag64,35,opt,name=good_thru_utc_time,json=goodThruUtcTime" json:"good_thru_utc_time,omitempty"`
	// If order is modified, this is the updated time then the order should expire  (see Order.good_thru_utc).
	// The value of duration field must be set to GTT when this time value is specified.
	GoodThruUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,42,opt,name=good_thru_utc_timestamp,json=goodThruUtcTimestamp" json:"good_thru_utc_timestamp,omitempty"`
	// True if fill was made as aggressive. False if fill was made as passive. Abscence of value means undefined.
	IsAggressive *bool `protobuf:"varint,64,opt,name=is_aggressive,json=isAggressive" json:"is_aggressive,omitempty"`
	// OrderRequest.client_regulatory_algorithm_id value echoed back from the latest order request.
	ClientRegulatoryAlgorithmId *uint32 `protobuf:"varint,36,opt,name=client_regulatory_algorithm_id,json=clientRegulatoryAlgorithmId" json:"client_regulatory_algorithm_id,omitempty"`
	// Regulatory Algorithm ID actually sent to the exchange for this order, if any.
	// Will differ from client_regulatory_algorithm_id if any CQG algorithm was applied to the order.
	EffectiveRegulatoryAlgorithmId *uint32 `protobuf:"varint,37,opt,name=effective_regulatory_algorithm_id,json=effectiveRegulatoryAlgorithmId" json:"effective_regulatory_algorithm_id,omitempty"`
	// MiFID algorithm ID provided with this order request, contents depend on mifid_algorithm_id_type.
	MifidAlgorithmId *string `protobuf:"bytes,43,opt,name=mifid_algorithm_id,json=mifidAlgorithmId" json:"mifid_algorithm_id,omitempty"`
	// Defines the type of mifid_algorithm_id reported. One of MiFIDAlgorithmIdType enum.
	MifidAlgorithmIdType *uint32 `protobuf:"varint,44,opt,name=mifid_algorithm_id_type,json=mifidAlgorithmIdType" json:"mifid_algorithm_id_type,omitempty"`
	// The MiFID algorithm ID associated with the order request for execution in this account.
	// It may have no relation to mifid_algorithm_id, e.g. in case client supplied a mifid_algorithm_id
	// and then a server-side algorithm was used, its identifier would be applied to the order instead.
	MifidAppliedAlgorithmId *string `protobuf:"bytes,45,opt,name=mifid_applied_algorithm_id,json=mifidAppliedAlgorithmId" json:"mifid_applied_algorithm_id,omitempty"`
	// The type of mifid_applied_algorithm_id reported. One of MiFIDAlgorithmIdType enum.
	MifidAppliedAlgorithmIdType *uint32 `protobuf:"varint,46,opt,name=mifid_applied_algorithm_id_type,json=mifidAppliedAlgorithmIdType" json:"mifid_applied_algorithm_id_type,omitempty"`
	// Actual value of MiFID Execution Within Firm associated with this order for execution in this account,
	// reflects FCM + route short code mapping if configured.
	MifidExecutionDecision *string `protobuf:"bytes,47,opt,name=mifid_execution_decision,json=mifidExecutionDecision" json:"mifid_execution_decision,omitempty"`
	// Indicates whether MiFID Execution decision identifies a person (false) or algorithm (true)
	MifidExecutionDecisionIsAlgo *bool `protobuf:"varint,67,opt,name=mifid_execution_decision_is_algo,json=mifidExecutionDecisionIsAlgo" json:"mifid_execution_decision_is_algo,omitempty"`
	// Open/close effect of the order fill transaction as a result of the corresponding open_close_instruction.
	// One of OpenCloseInstruction enum.
	OpenCloseEffect *uint32 `protobuf:"varint,48,opt,name=open_close_effect,json=openCloseEffect" json:"open_close_effect,omitempty"`
	// Speculation type of the transaction. One of SpeculationType enum.
	SpeculationType *uint32 `protobuf:"varint,49,opt,name=speculation_type,json=speculationType" json:"speculation_type,omitempty"`
	// Commission charged for the fill.
	// CQG trade routing system might not provide this information for some contracts.
	FillCommission *Commission `protobuf:"bytes,60,opt,name=fill_commission,json=fillCommission" json:"fill_commission,omitempty"`
	// Decision Within Firm associated with this order.
	MifidInvestmentDecision *string `protobuf:"bytes,61,opt,name=mifid_investment_decision,json=mifidInvestmentDecision" json:"mifid_investment_decision,omitempty"`
	// Indicates whether MiFID investment decision identifies a person (false) or algorithm (true)
	MifidInvestmentDecisionIsAlgo *bool `protobuf:"varint,62,opt,name=mifid_investment_decision_is_algo,json=mifidInvestmentDecisionIsAlgo" json:"mifid_investment_decision_is_algo,omitempty"`
	// FIA Execution Source Code value of the operation.
	// See Order.execution_source_code
	ExecutionSourceCode *string `protobuf:"bytes,63,opt,name=execution_source_code,json=executionSourceCode" json:"execution_source_code,omitempty"`
	// True if the order with cl_order_id the same as cl_order_id from the
	// current transaction is automatic, manual (the order was sent after the
	// user direct action) otherwise.
	// Different transaction statuses of the same order (or orders in the same
	// chain, see OrderStatus.chain_order_id) may have different values
	// of the flag, depending on the nature of the corresponding order action.
	IsAutomated *bool `protobuf:"varint,65,opt,name=is_automated,json=isAutomated" json:"is_automated,omitempty"`
	// Identifier assigned to a trade by a matching system.
	TradeMatchId *string `protobuf:"bytes,66,opt,name=trade_match_id,json=tradeMatchId" json:"trade_match_id,omitempty"`
	// Identifier that is used to match two filled care orders.
	FillCareOrderRequestId *string `protobuf:"bytes,68,opt,name=fill_care_order_request_id,json=fillCareOrderRequestId" json:"fill_care_order_request_id,omitempty"`
	// User who modified or canceled the order, or user on whose behalf the order was modified or canceled.
	// It is present in the following cases:
	// 1. For real time events:
	//   - If transaction status is IN_TRANSIT, SUSPEND or ACTIVEAT;
	//   - If a trader who initiated this transaction is different from the trader who initiated the previous
	//     transaction, and if the current transaction has one of the following statuses:
	//     IN_MODIFY, IN_CANCEL, REJECT_MODIFY, REJECT_CANCEL, or UPDATE (when available).
	//
	// 2. For past events:
	//   - If transaction has one of these statuses: IN_TRANSIT, SUSPEND, ACTIVEAT, IN_MODIFY, IN_CANCEL, REJECT_MODIFY,
	//     REJECT_CANCEL or UPDATE (when available).
	Username *string `protobuf:"bytes,69,opt,name=username" json:"username,omitempty"`
}

func (x *TransactionStatus) Reset() {
	*x = TransactionStatus{}
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionStatus) ProtoMessage() {}

func (x *TransactionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionStatus.ProtoReflect.Descriptor instead.
func (*TransactionStatus) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{3}
}

func (x *TransactionStatus) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *TransactionStatus) GetTransId() uint64 {
	if x != nil && x.TransId != nil {
		return *x.TransId
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
func (x *TransactionStatus) GetTransUtcTime() int64 {
	if x != nil && x.TransUtcTime != nil {
		return *x.TransUtcTime
	}
	return 0
}

func (x *TransactionStatus) GetTransUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.TransUtcTimestamp
	}
	return nil
}

func (x *TransactionStatus) GetRefTransId() uint64 {
	if x != nil && x.RefTransId != nil {
		return *x.RefTransId
	}
	return 0
}

func (x *TransactionStatus) GetOrigClOrderId() string {
	if x != nil && x.OrigClOrderId != nil {
		return *x.OrigClOrderId
	}
	return ""
}

func (x *TransactionStatus) GetClOrderId() string {
	if x != nil && x.ClOrderId != nil {
		return *x.ClOrderId
	}
	return ""
}

// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
func (x *TransactionStatus) GetUint32FillQty() uint32 {
	if x != nil && x.Uint32FillQty != nil {
		return *x.Uint32FillQty
	}
	return 0
}

func (x *TransactionStatus) GetFillQty() *common.Decimal {
	if x != nil {
		return x.FillQty
	}
	return nil
}

func (x *TransactionStatus) GetScaledFillPrice() int64 {
	if x != nil && x.ScaledFillPrice != nil {
		return *x.ScaledFillPrice
	}
	return 0
}

func (x *TransactionStatus) GetTrades() []*Trade {
	if x != nil {
		return x.Trades
	}
	return nil
}

func (x *TransactionStatus) GetStrategyLegFills() []*StrategyLegFill {
	if x != nil {
		return x.StrategyLegFills
	}
	return nil
}

func (x *TransactionStatus) GetSyntheticHang() *SyntheticHang {
	if x != nil {
		return x.SyntheticHang
	}
	return nil
}

// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
func (x *TransactionStatus) GetUint32PrevOrderQty() uint32 {
	if x != nil && x.Uint32PrevOrderQty != nil {
		return *x.Uint32PrevOrderQty
	}
	return 0
}

func (x *TransactionStatus) GetPrevOrderQty() *common.Decimal {
	if x != nil {
		return x.PrevOrderQty
	}
	return nil
}

// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
func (x *TransactionStatus) GetUint32OrderQty() uint32 {
	if x != nil && x.Uint32OrderQty != nil {
		return *x.Uint32OrderQty
	}
	return 0
}

func (x *TransactionStatus) GetOrderQty() *common.Decimal {
	if x != nil {
		return x.OrderQty
	}
	return nil
}

func (x *TransactionStatus) GetScaledPrevLimitPrice() int64 {
	if x != nil && x.ScaledPrevLimitPrice != nil {
		return *x.ScaledPrevLimitPrice
	}
	return 0
}

func (x *TransactionStatus) GetScaledLimitPrice() int64 {
	if x != nil && x.ScaledLimitPrice != nil {
		return *x.ScaledLimitPrice
	}
	return 0
}

func (x *TransactionStatus) GetScaledPrevStopPrice() int64 {
	if x != nil && x.ScaledPrevStopPrice != nil {
		return *x.ScaledPrevStopPrice
	}
	return 0
}

func (x *TransactionStatus) GetScaledStopPrice() int64 {
	if x != nil && x.ScaledStopPrice != nil {
		return *x.ScaledStopPrice
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
func (x *TransactionStatus) GetUint32PrevVisibleQty() uint32 {
	if x != nil && x.Uint32PrevVisibleQty != nil {
		return *x.Uint32PrevVisibleQty
	}
	return 0
}

func (x *TransactionStatus) GetPrevVisibleQty() *common.Decimal {
	if x != nil {
		return x.PrevVisibleQty
	}
	return nil
}

// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
func (x *TransactionStatus) GetUint32VisibleQty() uint32 {
	if x != nil && x.Uint32VisibleQty != nil {
		return *x.Uint32VisibleQty
	}
	return 0
}

func (x *TransactionStatus) GetVisibleQty() *common.Decimal {
	if x != nil {
		return x.VisibleQty
	}
	return nil
}

// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
func (x *TransactionStatus) GetUint32PrevMinVisibleQty() uint32 {
	if x != nil && x.Uint32PrevMinVisibleQty != nil {
		return *x.Uint32PrevMinVisibleQty
	}
	return 0
}

func (x *TransactionStatus) GetPrevMinVisibleQty() *common.Decimal {
	if x != nil {
		return x.PrevMinVisibleQty
	}
	return nil
}

// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
func (x *TransactionStatus) GetUint32MinVisibleQty() uint32 {
	if x != nil && x.Uint32MinVisibleQty != nil {
		return *x.Uint32MinVisibleQty
	}
	return 0
}

func (x *TransactionStatus) GetMinVisibleQty() *common.Decimal {
	if x != nil {
		return x.MinVisibleQty
	}
	return nil
}

// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
func (x *TransactionStatus) GetUint32PrevFillQty() uint32 {
	if x != nil && x.Uint32PrevFillQty != nil {
		return *x.Uint32PrevFillQty
	}
	return 0
}

func (x *TransactionStatus) GetPrevFillQty() *common.Decimal {
	if x != nil {
		return x.PrevFillQty
	}
	return nil
}

func (x *TransactionStatus) GetScaledPrevFillPrice() int64 {
	if x != nil && x.ScaledPrevFillPrice != nil {
		return *x.ScaledPrevFillPrice
	}
	return 0
}

func (x *TransactionStatus) GetPrevOrderType() uint32 {
	if x != nil && x.PrevOrderType != nil {
		return *x.PrevOrderType
	}
	return 0
}

func (x *TransactionStatus) GetOrderType() uint32 {
	if x != nil && x.OrderType != nil {
		return *x.OrderType
	}
	return 0
}

func (x *TransactionStatus) GetPrevExecInstructions() []uint32 {
	if x != nil {
		return x.PrevExecInstructions
	}
	return nil
}

func (x *TransactionStatus) GetExecInstructions() []uint32 {
	if x != nil {
		return x.ExecInstructions
	}
	return nil
}

func (x *TransactionStatus) GetPrevDuration() uint32 {
	if x != nil && x.PrevDuration != nil {
		return *x.PrevDuration
	}
	return 0
}

func (x *TransactionStatus) GetDuration() uint32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *TransactionStatus) GetPrevGoodThruDate() int64 {
	if x != nil && x.PrevGoodThruDate != nil {
		return *x.PrevGoodThruDate
	}
	return 0
}

func (x *TransactionStatus) GetGoodThruDate() int64 {
	if x != nil && x.GoodThruDate != nil {
		return *x.GoodThruDate
	}
	return 0
}

func (x *TransactionStatus) GetRejectCode() uint32 {
	if x != nil && x.RejectCode != nil {
		return *x.RejectCode
	}
	return 0
}

func (x *TransactionStatus) GetFillCounterparty() string {
	if x != nil && x.FillCounterparty != nil {
		return *x.FillCounterparty
	}
	return ""
}

func (x *TransactionStatus) GetRouteClOrderId() string {
	if x != nil && x.RouteClOrderId != nil {
		return *x.RouteClOrderId
	}
	return ""
}

func (x *TransactionStatus) GetTextMessage() string {
	if x != nil && x.TextMessage != nil {
		return *x.TextMessage
	}
	return ""
}

// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
func (x *TransactionStatus) GetPrevGoodThruUtcTime() int64 {
	if x != nil && x.PrevGoodThruUtcTime != nil {
		return *x.PrevGoodThruUtcTime
	}
	return 0
}

func (x *TransactionStatus) GetPrevGoodThruUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.PrevGoodThruUtcTimestamp
	}
	return nil
}

// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
func (x *TransactionStatus) GetGoodThruUtcTime() int64 {
	if x != nil && x.GoodThruUtcTime != nil {
		return *x.GoodThruUtcTime
	}
	return 0
}

func (x *TransactionStatus) GetGoodThruUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.GoodThruUtcTimestamp
	}
	return nil
}

func (x *TransactionStatus) GetIsAggressive() bool {
	if x != nil && x.IsAggressive != nil {
		return *x.IsAggressive
	}
	return false
}

func (x *TransactionStatus) GetClientRegulatoryAlgorithmId() uint32 {
	if x != nil && x.ClientRegulatoryAlgorithmId != nil {
		return *x.ClientRegulatoryAlgorithmId
	}
	return 0
}

func (x *TransactionStatus) GetEffectiveRegulatoryAlgorithmId() uint32 {
	if x != nil && x.EffectiveRegulatoryAlgorithmId != nil {
		return *x.EffectiveRegulatoryAlgorithmId
	}
	return 0
}

func (x *TransactionStatus) GetMifidAlgorithmId() string {
	if x != nil && x.MifidAlgorithmId != nil {
		return *x.MifidAlgorithmId
	}
	return ""
}

func (x *TransactionStatus) GetMifidAlgorithmIdType() uint32 {
	if x != nil && x.MifidAlgorithmIdType != nil {
		return *x.MifidAlgorithmIdType
	}
	return 0
}

func (x *TransactionStatus) GetMifidAppliedAlgorithmId() string {
	if x != nil && x.MifidAppliedAlgorithmId != nil {
		return *x.MifidAppliedAlgorithmId
	}
	return ""
}

func (x *TransactionStatus) GetMifidAppliedAlgorithmIdType() uint32 {
	if x != nil && x.MifidAppliedAlgorithmIdType != nil {
		return *x.MifidAppliedAlgorithmIdType
	}
	return 0
}

func (x *TransactionStatus) GetMifidExecutionDecision() string {
	if x != nil && x.MifidExecutionDecision != nil {
		return *x.MifidExecutionDecision
	}
	return ""
}

func (x *TransactionStatus) GetMifidExecutionDecisionIsAlgo() bool {
	if x != nil && x.MifidExecutionDecisionIsAlgo != nil {
		return *x.MifidExecutionDecisionIsAlgo
	}
	return false
}

func (x *TransactionStatus) GetOpenCloseEffect() uint32 {
	if x != nil && x.OpenCloseEffect != nil {
		return *x.OpenCloseEffect
	}
	return 0
}

func (x *TransactionStatus) GetSpeculationType() uint32 {
	if x != nil && x.SpeculationType != nil {
		return *x.SpeculationType
	}
	return 0
}

func (x *TransactionStatus) GetFillCommission() *Commission {
	if x != nil {
		return x.FillCommission
	}
	return nil
}

func (x *TransactionStatus) GetMifidInvestmentDecision() string {
	if x != nil && x.MifidInvestmentDecision != nil {
		return *x.MifidInvestmentDecision
	}
	return ""
}

func (x *TransactionStatus) GetMifidInvestmentDecisionIsAlgo() bool {
	if x != nil && x.MifidInvestmentDecisionIsAlgo != nil {
		return *x.MifidInvestmentDecisionIsAlgo
	}
	return false
}

func (x *TransactionStatus) GetExecutionSourceCode() string {
	if x != nil && x.ExecutionSourceCode != nil {
		return *x.ExecutionSourceCode
	}
	return ""
}

func (x *TransactionStatus) GetIsAutomated() bool {
	if x != nil && x.IsAutomated != nil {
		return *x.IsAutomated
	}
	return false
}

func (x *TransactionStatus) GetTradeMatchId() string {
	if x != nil && x.TradeMatchId != nil {
		return *x.TradeMatchId
	}
	return ""
}

func (x *TransactionStatus) GetFillCareOrderRequestId() string {
	if x != nil && x.FillCareOrderRequestId != nil {
		return *x.FillCareOrderRequestId
	}
	return ""
}

func (x *TransactionStatus) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

// Trade per specific outright contract.
type Trade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Trade ID assigned by server, unique within account.
	TradeId *string `protobuf:"bytes,1,req,name=trade_id,json=tradeId" json:"trade_id,omitempty"`
	// Server contract identifier.
	ContractId *uint32 `protobuf:"varint,2,req,name=contract_id,json=contractId" json:"contract_id,omitempty"`
	// Brokerage statement date this trade corresponds to (in time format, convert to date only).
	StatementDate *int64 `protobuf:"zigzag64,3,req,name=statement_date,json=statementDate" json:"statement_date,omitempty"`
	// Time of the trade (UTC).
	// Note: use trade_utc_timestamp field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
	TradeUtcTime *int64 `protobuf:"zigzag64,4,opt,name=trade_utc_time,json=tradeUtcTime" json:"trade_utc_time,omitempty"`
	// Time of the trade (UTC).
	TradeUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,12,req,name=trade_utc_timestamp,json=tradeUtcTimestamp" json:"trade_utc_timestamp,omitempty"`
	// Exchange trade day this trade corresponds to (in time format, date only value).
	TradeDate *int64 `protobuf:"zigzag64,5,req,name=trade_date,json=tradeDate" json:"trade_date,omitempty"`
	// Trade price in native integer format.
	// price = round(price_correct / correct_price_scale).
	ScaledPrice *int64 `protobuf:"zigzag64,6,req,name=scaled_price,json=scaledPrice" json:"scaled_price,omitempty"`
	// Trade price in correct price format. Could have higher precision than price multiplied by correct_price_scale.
	PriceCorrect *float64 `protobuf:"fixed64,13,req,name=price_correct,json=priceCorrect" json:"price_correct,omitempty"`
	// Trade side.
	// This field is associated with Order.Side enum type.
	Side *uint32 `protobuf:"varint,7,req,name=side" json:"side,omitempty"`
	// Note: use qty field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
	Uint32Qty *uint32 `protobuf:"varint,8,opt,name=uint32_qty,json=uint32Qty" json:"uint32_qty,omitempty"`
	// Trade size.
	Qty *common.Decimal `protobuf:"bytes,16,opt,name=qty" json:"qty,omitempty"`
	// If present, identifies the counter-party of the trade, as reported by the execution system
	// (may or may not match counter-party reported for the order fill).
	TradeCounterparty *string `protobuf:"bytes,9,opt,name=trade_counterparty,json=tradeCounterparty" json:"trade_counterparty,omitempty"`
	// True if trade was made as aggressive. False if trade was made as passive. Abscence of value means undefined.
	IsAggressive *bool `protobuf:"varint,10,opt,name=is_aggressive,json=isAggressive" json:"is_aggressive,omitempty"`
	// Execution id of the leg fill
	LegExecutionId *string `protobuf:"bytes,11,opt,name=leg_execution_id,json=legExecutionId" json:"leg_execution_id,omitempty"`
	// Open/close effect of the trade as a result of the corresponding open_close_instruction.
	// One of OpenCloseInstruction enum.
	OpenCloseEffect *uint32 `protobuf:"varint,14,opt,name=open_close_effect,json=openCloseEffect" json:"open_close_effect,omitempty"`
	// Speculation type of the trade. One of SpeculationType enum.
	SpeculationType *uint32 `protobuf:"varint,15,opt,name=speculation_type,json=speculationType" json:"speculation_type,omitempty"`
	// Identifier assigned to a trade by a matching system.
	TradeMatchId *string `protobuf:"bytes,17,opt,name=trade_match_id,json=tradeMatchId" json:"trade_match_id,omitempty"`
	// When this field is present, the contract_id field contains the server contract identifier of a relative
	// symbol (e.g., in case of relative daily futures), and the specific_contract_id contains the server
	// contract identifier of the specific symbol (e.g. the specific instrument mapped to the relative daily
	// future at the moment of this trade).
	SpecificContractId *uint32 `protobuf:"varint,18,opt,name=specific_contract_id,json=specificContractId" json:"specific_contract_id,omitempty"`
	// List of fill extra attributes.
	FillExtraAttributes []*common.NamedValue `protobuf:"bytes,19,rep,name=fill_extra_attributes,json=fillExtraAttributes" json:"fill_extra_attributes,omitempty"`
}

func (x *Trade) Reset() {
	*x = Trade{}
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Trade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade) ProtoMessage() {}

func (x *Trade) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade.ProtoReflect.Descriptor instead.
func (*Trade) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{4}
}

func (x *Trade) GetTradeId() string {
	if x != nil && x.TradeId != nil {
		return *x.TradeId
	}
	return ""
}

func (x *Trade) GetContractId() uint32 {
	if x != nil && x.ContractId != nil {
		return *x.ContractId
	}
	return 0
}

func (x *Trade) GetStatementDate() int64 {
	if x != nil && x.StatementDate != nil {
		return *x.StatementDate
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
func (x *Trade) GetTradeUtcTime() int64 {
	if x != nil && x.TradeUtcTime != nil {
		return *x.TradeUtcTime
	}
	return 0
}

func (x *Trade) GetTradeUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.TradeUtcTimestamp
	}
	return nil
}

func (x *Trade) GetTradeDate() int64 {
	if x != nil && x.TradeDate != nil {
		return *x.TradeDate
	}
	return 0
}

func (x *Trade) GetScaledPrice() int64 {
	if x != nil && x.ScaledPrice != nil {
		return *x.ScaledPrice
	}
	return 0
}

func (x *Trade) GetPriceCorrect() float64 {
	if x != nil && x.PriceCorrect != nil {
		return *x.PriceCorrect
	}
	return 0
}

func (x *Trade) GetSide() uint32 {
	if x != nil && x.Side != nil {
		return *x.Side
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
func (x *Trade) GetUint32Qty() uint32 {
	if x != nil && x.Uint32Qty != nil {
		return *x.Uint32Qty
	}
	return 0
}

func (x *Trade) GetQty() *common.Decimal {
	if x != nil {
		return x.Qty
	}
	return nil
}

func (x *Trade) GetTradeCounterparty() string {
	if x != nil && x.TradeCounterparty != nil {
		return *x.TradeCounterparty
	}
	return ""
}

func (x *Trade) GetIsAggressive() bool {
	if x != nil && x.IsAggressive != nil {
		return *x.IsAggressive
	}
	return false
}

func (x *Trade) GetLegExecutionId() string {
	if x != nil && x.LegExecutionId != nil {
		return *x.LegExecutionId
	}
	return ""
}

func (x *Trade) GetOpenCloseEffect() uint32 {
	if x != nil && x.OpenCloseEffect != nil {
		return *x.OpenCloseEffect
	}
	return 0
}

func (x *Trade) GetSpeculationType() uint32 {
	if x != nil && x.SpeculationType != nil {
		return *x.SpeculationType
	}
	return 0
}

func (x *Trade) GetTradeMatchId() string {
	if x != nil && x.TradeMatchId != nil {
		return *x.TradeMatchId
	}
	return ""
}

func (x *Trade) GetSpecificContractId() uint32 {
	if x != nil && x.SpecificContractId != nil {
		return *x.SpecificContractId
	}
	return 0
}

func (x *Trade) GetFillExtraAttributes() []*common.NamedValue {
	if x != nil {
		return x.FillExtraAttributes
	}
	return nil
}

type Commission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Commission currency code.
	CommissionCurrency *string `protobuf:"bytes,1,req,name=commission_currency,json=commissionCurrency" json:"commission_currency,omitempty"`
	// Commission.
	Commission *float64 `protobuf:"fixed64,2,req,name=commission" json:"commission,omitempty"`
}

func (x *Commission) Reset() {
	*x = Commission{}
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Commission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commission) ProtoMessage() {}

func (x *Commission) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commission.ProtoReflect.Descriptor instead.
func (*Commission) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{5}
}

func (x *Commission) GetCommissionCurrency() string {
	if x != nil && x.CommissionCurrency != nil {
		return *x.CommissionCurrency
	}
	return ""
}

func (x *Commission) GetCommission() float64 {
	if x != nil && x.Commission != nil {
		return *x.Commission
	}
	return 0
}

// Compound order structure.
type CompoundOrderStructure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This field is associated with CompoundOrder.Type enum type.
	// Type of the compound order.
	Type *uint32 `protobuf:"varint,1,req,name=type" json:"type,omitempty"`
	// ID of the compound order assigned by client.
	ClCompoundId *string `protobuf:"bytes,2,req,name=cl_compound_id,json=clCompoundId" json:"cl_compound_id,omitempty"`
	// List of entires.
	CompoundOrderEntries []*CompoundOrderStructureEntry `protobuf:"bytes,3,rep,name=compound_order_entries,json=compoundOrderEntries" json:"compound_order_entries,omitempty"`
	// Offset in ticks from fill price.
	// New order price will be calculated as
	// (fill price + offset) for buy master orders and (fill price - offset) for sell master orders.
	ProfitOffset *int32 `protobuf:"zigzag32,4,opt,name=profit_offset,json=profitOffset" json:"profit_offset,omitempty"`
	// Offset in ticks from fill price.
	// New order price will be calculated as
	// (fill price - offset) for buy master orders and (fill price + offset) for sell master orders.
	LossOffset *int32 `protobuf:"zigzag32,5,opt,name=loss_offset,json=lossOffset" json:"loss_offset,omitempty"`
	// Offset in ticks from loss_offset for stop limit orders.
	// The offset determines the limit price for the order the stop limit becomes when the stop price is hit.
	StopLimitOffset *int32 `protobuf:"zigzag32,6,opt,name=stop_limit_offset,json=stopLimitOffset" json:"stop_limit_offset,omitempty"`
}

func (x *CompoundOrderStructure) Reset() {
	*x = CompoundOrderStructure{}
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompoundOrderStructure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompoundOrderStructure) ProtoMessage() {}

func (x *CompoundOrderStructure) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompoundOrderStructure.ProtoReflect.Descriptor instead.
func (*CompoundOrderStructure) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{6}
}

func (x *CompoundOrderStructure) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *CompoundOrderStructure) GetClCompoundId() string {
	if x != nil && x.ClCompoundId != nil {
		return *x.ClCompoundId
	}
	return ""
}

func (x *CompoundOrderStructure) GetCompoundOrderEntries() []*CompoundOrderStructureEntry {
	if x != nil {
		return x.CompoundOrderEntries
	}
	return nil
}

func (x *CompoundOrderStructure) GetProfitOffset() int32 {
	if x != nil && x.ProfitOffset != nil {
		return *x.ProfitOffset
	}
	return 0
}

func (x *CompoundOrderStructure) GetLossOffset() int32 {
	if x != nil && x.LossOffset != nil {
		return *x.LossOffset
	}
	return 0
}

func (x *CompoundOrderStructure) GetStopLimitOffset() int32 {
	if x != nil && x.StopLimitOffset != nil {
		return *x.StopLimitOffset
	}
	return 0
}

// Entry of a compound order structure. One of optional fields is specified.
type CompoundOrderStructureEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Regular order id as assigned by server.
	ChainOrderId *string `protobuf:"bytes,1,opt,name=chain_order_id,json=chainOrderId" json:"chain_order_id,omitempty"`
	// Sub-compound order structure entry.
	CompoundOrderStructure *CompoundOrderStructure `protobuf:"bytes,2,opt,name=compound_order_structure,json=compoundOrderStructure" json:"compound_order_structure,omitempty"`
}

func (x *CompoundOrderStructureEntry) Reset() {
	*x = CompoundOrderStructureEntry{}
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompoundOrderStructureEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompoundOrderStructureEntry) ProtoMessage() {}

func (x *CompoundOrderStructureEntry) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompoundOrderStructureEntry.ProtoReflect.Descriptor instead.
func (*CompoundOrderStructureEntry) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{7}
}

func (x *CompoundOrderStructureEntry) GetChainOrderId() string {
	if x != nil && x.ChainOrderId != nil {
		return *x.ChainOrderId
	}
	return ""
}

func (x *CompoundOrderStructureEntry) GetCompoundOrderStructure() *CompoundOrderStructure {
	if x != nil {
		return x.CompoundOrderStructure
	}
	return nil
}

// Trade routing order. It is used as new order request and as a part of order status updates.
type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of an account that is/ was used to place an order.
	AccountId *int32 `protobuf:"zigzag32,1,req,name=account_id,json=accountId" json:"account_id,omitempty"`
	// Client side time when an order was submitted (UTC).
	// Note: use when_utc_timestamp field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
	WhenUtcTime *int64 `protobuf:"zigzag64,2,opt,name=when_utc_time,json=whenUtcTime" json:"when_utc_time,omitempty"`
	// Client side time when an order was submitted (UTC).
	// If specified by the user it's used instead of when_utc_time field
	// (at least one of these fields has to be specified).
	WhenUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,27,opt,name=when_utc_timestamp,json=whenUtcTimestamp" json:"when_utc_timestamp,omitempty"`
	// Server side contract Id of the order (see ContractMetadata message).
	ContractId *uint32 `protobuf:"varint,3,req,name=contract_id,json=contractId" json:"contract_id,omitempty"`
	// Client order identifier.
	// It must be unique within a single trading day for day orders and across days for multi-day orders.
	// Maximum allowed length is 64 bytes.
	// In OrderStatus messages it contains cl_order_id of the last accepted order request in the order chain,
	// which may be a cancel request.
	ClOrderId *string `protobuf:"bytes,4,req,name=cl_order_id,json=clOrderId" json:"cl_order_id,omitempty"`
	// Order type.
	// This field is associated with OrderType enum type.
	OrderType *uint32 `protobuf:"varint,5,req,name=order_type,json=orderType" json:"order_type,omitempty"`
	// List of applicable execution instructions.
	// This field is associated with ExecInstruction enum type.
	ExecInstructions []uint32 `protobuf:"varint,6,rep,name=exec_instructions,json=execInstructions" json:"exec_instructions,omitempty"`
	// Order duration.
	// This field is associated with Duration enum type.
	Duration *uint32 `protobuf:"varint,7,req,name=duration" json:"duration,omitempty"`
	// Date for GTD (local to exchange, date only value in time format) when the order should expire.
	GoodThruDate *int64 `protobuf:"zigzag64,8,opt,name=good_thru_date,json=goodThruDate" json:"good_thru_date,omitempty"`
	// Order side.
	// This field is associated with Side enum type.
	// This field is required for all order types except for ORDER_TYPE_CROSS.
	// For orders with ORDER_TYPE_CROSS order type this field is not relevant and ignored.
	// See CrossOrderParameters.side_allocation field instead.
	Side *uint32 `protobuf:"varint,9,opt,name=side" json:"side,omitempty"`
	// Limit price of the order (required for Limit and Stop-limit orders).
	ScaledLimitPrice *int64 `protobuf:"zigzag64,10,opt,name=scaled_limit_price,json=scaledLimitPrice" json:"scaled_limit_price,omitempty"`
	// Stop price of the order (required for Stop and Stop-limit orders).
	ScaledStopPrice *int64 `protobuf:"zigzag64,11,opt,name=scaled_stop_price,json=scaledStopPrice" json:"scaled_stop_price,omitempty"`
	// Note: use qty field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
	Uint32Qty *uint32 `protobuf:"varint,12,opt,name=uint32_qty,json=uint32Qty" json:"uint32_qty,omitempty"`
	// Note: use visible_qty field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
	Uint32VisibleQty *uint32 `protobuf:"varint,13,opt,name=uint32_visible_qty,json=uint32VisibleQty" json:"uint32_visible_qty,omitempty"`
	// Note: use min_visible_qty field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
	Uint32MinVisibleQty *uint32 `protobuf:"varint,14,opt,name=uint32_min_visible_qty,json=uint32MinVisibleQty" json:"uint32_min_visible_qty,omitempty"`
	// Total positive size of the order.
	Qty *common.Decimal `protobuf:"bytes,34,opt,name=qty" json:"qty,omitempty"`
	// Visible size of the order for Icebergs.
	VisibleQty *common.Decimal `protobuf:"bytes,35,opt,name=visible_qty,json=visibleQty" json:"visible_qty,omitempty"`
	// Minimum visible positive size of the order
	// used for iceberg orders with 'random visible size',
	// must be < visible_qty.
	MinVisibleQty *common.Decimal `protobuf:"bytes,36,opt,name=min_visible_qty,json=minVisibleQty" json:"min_visible_qty,omitempty"`
	// True if this is a manual order (order placed by the user direct action), automated otherwise.
	// Deprecated, use OrderRequest.is_automated to set a request source,
	// or TransactionStatus.is_automated to read the value for an order.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
	IsManual *bool `protobuf:"varint,15,opt,name=is_manual,json=isManual" json:"is_manual,omitempty"`
	// True if order is used for closing/ reducing a position, opening/ increasing otherwise
	// (omit this field if there is no need to be explicit). Deprecated, refer to open_close_instruction.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
	IsClose *bool `protobuf:"varint,16,opt,name=is_close,json=isClose" json:"is_close,omitempty"`
	// True if the order is aggressive (Fixed Income specific order modifier).
	IsAggressive *bool `protobuf:"varint,17,opt,name=is_aggressive,json=isAggressive" json:"is_aggressive,omitempty"`
	// Maximum offset between market and limit prices or market and stop prices for trail orders.
	ScaledTrailOffset *int64 `protobuf:"zigzag64,18,opt,name=scaled_trail_offset,json=scaledTrailOffset" json:"scaled_trail_offset,omitempty"`
	// Trailing peg to follow specific side of the market (for limit orders only).
	// This field is associated with TrailingPeg enum type.
	// Note: order request is rejected if this field is set for stop or stop-limit order.
	TrailingPeg *uint32 `protobuf:"varint,19,opt,name=trailing_peg,json=trailingPeg" json:"trailing_peg,omitempty"`
	// Note: use trigger_qty instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
	Uint32TriggerQty *uint32 `protobuf:"varint,20,opt,name=uint32_trigger_qty,json=uint32TriggerQty" json:"uint32_trigger_qty,omitempty"`
	// Trigger quantity (threshold) as additional stop order activation condition.
	TriggerQty *common.Decimal `protobuf:"bytes,37,opt,name=trigger_qty,json=triggerQty" json:"trigger_qty,omitempty"`
	// Time when order should be submitted to execution system as assigned by client (UTC).
	// Note: use activation_utc_timestamp field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
	ActivationUtcTime *int64 `protobuf:"zigzag64,21,opt,name=activation_utc_time,json=activationUtcTime" json:"activation_utc_time,omitempty"`
	// Time when order should be submitted to execution system as assigned by client (UTC).
	// If specified by the user it's used instead of activation_utc_time field.
	ActivationUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,28,opt,name=activation_utc_timestamp,json=activationUtcTimestamp" json:"activation_utc_timestamp,omitempty"`
	// Time when order should be suspended (parked) (UTC).
	// Note: use suspension_utc_timestamp field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
	SuspensionUtcTime *int64 `protobuf:"zigzag64,22,opt,name=suspension_utc_time,json=suspensionUtcTime" json:"suspension_utc_time,omitempty"`
	// Time when order should be suspended (parked) (UTC).
	// If specified by the user it's used instead of suspension_utc_time field.
	SuspensionUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,29,opt,name=suspension_utc_timestamp,json=suspensionUtcTimestamp" json:"suspension_utc_timestamp,omitempty"`
	// User specific attributes.
	// Only printable ASCII characters are allowed in "name" and "value" fields including 0-9A-Za-z, punctuation.
	// (ASCII character set used by the "C" locale with codes greater than 0x1f (US), except 0x7f (DEL).)
	// Violation of the fields formatting leads to rejection of requests that contain UserAttribute.
	// Note that despite punctuation is allowed, it can cause issues with 3rd party tools and formats like CSV.
	// Order comment is provided for an order via UserAttribute with "name" set to "comment" and "value" set to
	// the order comment. Depending on order route, a limit on order comment length can be imposed.
	// If that limit is exceeded, order comment is skipped, but order is not rejected.
	UserAttributes []*UserAttribute `protobuf:"bytes,23,rep,name=user_attributes,json=userAttributes" json:"user_attributes,omitempty"`
	// List of order extra attributes.
	// Such attributes are used for Pre-Trade Mid-Market Mark, Algo Strategies and other purposes.
	ExtraAttributes []*common.NamedValue `protobuf:"bytes,38,rep,name=extra_attributes,json=extraAttributes" json:"extra_attributes,omitempty"`
	// Case-sensitive identifier (abbreviation) of algorithm used to execute the order (e.g. VWAP, TWAP, etc.).
	AlgoStrategy *string `protobuf:"bytes,39,opt,name=algo_strategy,json=algoStrategy" json:"algo_strategy,omitempty"`
	// Date and time for GTT order (UTC) when the order should expire.
	// Note: use good_thru_utc_timestamp field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
	GoodThruUtcTime *int64 `protobuf:"zigzag64,24,opt,name=good_thru_utc_time,json=goodThruUtcTime" json:"good_thru_utc_time,omitempty"`
	// Date and time for GTT order (UTC) when the order should expire.
	// If specified by the user it's used instead of good_thru_utc_time field.
	GoodThruUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,30,opt,name=good_thru_utc_timestamp,json=goodThruUtcTimestamp" json:"good_thru_utc_timestamp,omitempty"`
	// Flag used by the client for marking the user attributes checked/unchecked.
	IsUserAttributeChecked *bool `protobuf:"varint,25,opt,name=is_user_attribute_checked,json=isUserAttributeChecked,def=1" json:"is_user_attribute_checked,omitempty"`
	// Synthetic strategy trading parameters, applicable only if contract_id designates a synthetic strategy.
	// If the parameter is not applicable for the order the default value is used.
	StrategyTradingParameters *StrategyTradingParameters `protobuf:"bytes,26,opt,name=strategy_trading_parameters,json=strategyTradingParameters" json:"strategy_trading_parameters,omitempty"`
	// Specifies what the order is intended to do: open or close (reduce) a position. One of OpenCloseInstruction enum.
	// Applicable only if ContractMetadata.open_close_type is either OPEN_CLOSE_TYPE_OPTIONAL or OPEN_CLOSE_TYPE_REQUIRED.
	OpenCloseInstruction *uint32 `protobuf:"varint,31,opt,name=open_close_instruction,json=openCloseInstruction" json:"open_close_instruction,omitempty"`
	// Speculation type of the order. One of SpeculationType enum.
	SpeculationType *uint32 `protobuf:"varint,32,opt,name=speculation_type,json=speculationType" json:"speculation_type,omitempty"`
	// Optional OTC contributor involved into the order processing.
	ContributorId *string `protobuf:"bytes,40,opt,name=contributor_id,json=contributorId" json:"contributor_id,omitempty"`
	// FIA Execution Source Code value for the placement.
	// Overrides the value CQG would otherwise automatically assign
	// to the operation based on trader-account configuration.
	// Refer to https://www.fia.org/articles/fia-and-fia-tech-release-guidelines-simplified-execution-source-code
	// Possible values:
	// W - Desk
	// Y - Electronic (Default)
	// C - Vendor-provided Platform billed by Executing Broker
	// G - Sponsored Access via Exchange API or FIX provided by Executing Broker
	// H - Premium Algorithmic Trading Provider billed by Executing Broker
	// D - Other, including Other-provided Screen
	ExecutionSourceCode *string `protobuf:"bytes,41,opt,name=execution_source_code,json=executionSourceCode" json:"execution_source_code,omitempty"`
	// Cross order parameters.
	// It must be specified if order_type is ORDER_TYPE_CROSS.
	CrossOrderParameters *CrossOrderParameters `protobuf:"bytes,42,opt,name=cross_order_parameters,json=crossOrderParameters" json:"cross_order_parameters,omitempty"`
	// Unique identifier of account within the exchange's Member to place order on it.
	// This account can be external for CQG. Placing order on such account may require
	// providing additional exchange-specific information via Order.extra_attributes field.
	// See order_2.ExternalAccount.external_account_number and trading_account_2.Account.allow_external_accounts.
	ExternalAccountNumber *string `protobuf:"bytes,43,opt,name=external_account_number,json=externalAccountNumber" json:"external_account_number,omitempty"`
	// Specifies that the order is Care order.
	IsCareOrder *bool `protobuf:"varint,44,opt,name=is_care_order,json=isCareOrder" json:"is_care_order,omitempty"`
}

// Default values for Order fields.
const (
	Default_Order_IsUserAttributeChecked = bool(true)
)

func (x *Order) Reset() {
	*x = Order{}
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{8}
}

func (x *Order) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
func (x *Order) GetWhenUtcTime() int64 {
	if x != nil && x.WhenUtcTime != nil {
		return *x.WhenUtcTime
	}
	return 0
}

func (x *Order) GetWhenUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.WhenUtcTimestamp
	}
	return nil
}

func (x *Order) GetContractId() uint32 {
	if x != nil && x.ContractId != nil {
		return *x.ContractId
	}
	return 0
}

func (x *Order) GetClOrderId() string {
	if x != nil && x.ClOrderId != nil {
		return *x.ClOrderId
	}
	return ""
}

func (x *Order) GetOrderType() uint32 {
	if x != nil && x.OrderType != nil {
		return *x.OrderType
	}
	return 0
}

func (x *Order) GetExecInstructions() []uint32 {
	if x != nil {
		return x.ExecInstructions
	}
	return nil
}

func (x *Order) GetDuration() uint32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *Order) GetGoodThruDate() int64 {
	if x != nil && x.GoodThruDate != nil {
		return *x.GoodThruDate
	}
	return 0
}

func (x *Order) GetSide() uint32 {
	if x != nil && x.Side != nil {
		return *x.Side
	}
	return 0
}

func (x *Order) GetScaledLimitPrice() int64 {
	if x != nil && x.ScaledLimitPrice != nil {
		return *x.ScaledLimitPrice
	}
	return 0
}

func (x *Order) GetScaledStopPrice() int64 {
	if x != nil && x.ScaledStopPrice != nil {
		return *x.ScaledStopPrice
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
func (x *Order) GetUint32Qty() uint32 {
	if x != nil && x.Uint32Qty != nil {
		return *x.Uint32Qty
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
func (x *Order) GetUint32VisibleQty() uint32 {
	if x != nil && x.Uint32VisibleQty != nil {
		return *x.Uint32VisibleQty
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
func (x *Order) GetUint32MinVisibleQty() uint32 {
	if x != nil && x.Uint32MinVisibleQty != nil {
		return *x.Uint32MinVisibleQty
	}
	return 0
}

func (x *Order) GetQty() *common.Decimal {
	if x != nil {
		return x.Qty
	}
	return nil
}

func (x *Order) GetVisibleQty() *common.Decimal {
	if x != nil {
		return x.VisibleQty
	}
	return nil
}

func (x *Order) GetMinVisibleQty() *common.Decimal {
	if x != nil {
		return x.MinVisibleQty
	}
	return nil
}

// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
func (x *Order) GetIsManual() bool {
	if x != nil && x.IsManual != nil {
		return *x.IsManual
	}
	return false
}

// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
func (x *Order) GetIsClose() bool {
	if x != nil && x.IsClose != nil {
		return *x.IsClose
	}
	return false
}

func (x *Order) GetIsAggressive() bool {
	if x != nil && x.IsAggressive != nil {
		return *x.IsAggressive
	}
	return false
}

func (x *Order) GetScaledTrailOffset() int64 {
	if x != nil && x.ScaledTrailOffset != nil {
		return *x.ScaledTrailOffset
	}
	return 0
}

func (x *Order) GetTrailingPeg() uint32 {
	if x != nil && x.TrailingPeg != nil {
		return *x.TrailingPeg
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
func (x *Order) GetUint32TriggerQty() uint32 {
	if x != nil && x.Uint32TriggerQty != nil {
		return *x.Uint32TriggerQty
	}
	return 0
}

func (x *Order) GetTriggerQty() *common.Decimal {
	if x != nil {
		return x.TriggerQty
	}
	return nil
}

// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
func (x *Order) GetActivationUtcTime() int64 {
	if x != nil && x.ActivationUtcTime != nil {
		return *x.ActivationUtcTime
	}
	return 0
}

func (x *Order) GetActivationUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ActivationUtcTimestamp
	}
	return nil
}

// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
func (x *Order) GetSuspensionUtcTime() int64 {
	if x != nil && x.SuspensionUtcTime != nil {
		return *x.SuspensionUtcTime
	}
	return 0
}

func (x *Order) GetSuspensionUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.SuspensionUtcTimestamp
	}
	return nil
}

func (x *Order) GetUserAttributes() []*UserAttribute {
	if x != nil {
		return x.UserAttributes
	}
	return nil
}

func (x *Order) GetExtraAttributes() []*common.NamedValue {
	if x != nil {
		return x.ExtraAttributes
	}
	return nil
}

func (x *Order) GetAlgoStrategy() string {
	if x != nil && x.AlgoStrategy != nil {
		return *x.AlgoStrategy
	}
	return ""
}

// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
func (x *Order) GetGoodThruUtcTime() int64 {
	if x != nil && x.GoodThruUtcTime != nil {
		return *x.GoodThruUtcTime
	}
	return 0
}

func (x *Order) GetGoodThruUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.GoodThruUtcTimestamp
	}
	return nil
}

func (x *Order) GetIsUserAttributeChecked() bool {
	if x != nil && x.IsUserAttributeChecked != nil {
		return *x.IsUserAttributeChecked
	}
	return Default_Order_IsUserAttributeChecked
}

func (x *Order) GetStrategyTradingParameters() *StrategyTradingParameters {
	if x != nil {
		return x.StrategyTradingParameters
	}
	return nil
}

func (x *Order) GetOpenCloseInstruction() uint32 {
	if x != nil && x.OpenCloseInstruction != nil {
		return *x.OpenCloseInstruction
	}
	return 0
}

func (x *Order) GetSpeculationType() uint32 {
	if x != nil && x.SpeculationType != nil {
		return *x.SpeculationType
	}
	return 0
}

func (x *Order) GetContributorId() string {
	if x != nil && x.ContributorId != nil {
		return *x.ContributorId
	}
	return ""
}

func (x *Order) GetExecutionSourceCode() string {
	if x != nil && x.ExecutionSourceCode != nil {
		return *x.ExecutionSourceCode
	}
	return ""
}

func (x *Order) GetCrossOrderParameters() *CrossOrderParameters {
	if x != nil {
		return x.CrossOrderParameters
	}
	return nil
}

func (x *Order) GetExternalAccountNumber() string {
	if x != nil && x.ExternalAccountNumber != nil {
		return *x.ExternalAccountNumber
	}
	return ""
}

func (x *Order) GetIsCareOrder() bool {
	if x != nil && x.IsCareOrder != nil {
		return *x.IsCareOrder
	}
	return false
}

// One of the order related requests. There must be only one optional order submessage specified per request.
// E.g NewOrder, but not NewOrder and CancelOrder.
// It is required to perform a TradeSubscription before any order requests, the subscription is required
// in order to receive order events.
type OrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of a request that should be unique enough to match with possible OrderRequestReject.
	RequestId *uint32 `protobuf:"varint,1,req,name=request_id,json=requestId" json:"request_id,omitempty"`
	// New order request (place order).
	NewOrder *NewOrder `protobuf:"bytes,2,opt,name=new_order,json=newOrder" json:"new_order,omitempty"`
	// Modify order request.
	ModifyOrder *ModifyOrder `protobuf:"bytes,3,opt,name=modify_order,json=modifyOrder" json:"modify_order,omitempty"`
	// Cancel order request.
	CancelOrder *CancelOrder `protobuf:"bytes,4,opt,name=cancel_order,json=cancelOrder" json:"cancel_order,omitempty"`
	// Cancel all orders request.
	CancelAllOrders *CancelAllOrders `protobuf:"bytes,14,opt,name=cancel_all_orders,json=cancelAllOrders" json:"cancel_all_orders,omitempty"`
	// Liquidate all open positions.
	LiquidateAll *LiquidateAll `protobuf:"bytes,20,opt,name=liquidate_all,json=liquidateAll" json:"liquidate_all,omitempty"`
	// Cancel all orders and liquidate all open positions.
	GoFlat *GoFlat `protobuf:"bytes,21,opt,name=go_flat,json=goFlat" json:"go_flat,omitempty"`
	// Suspend (park) order.
	SuspendOrder *SuspendOrder `protobuf:"bytes,10,opt,name=suspend_order,json=suspendOrder" json:"suspend_order,omitempty"`
	// Activate suspended (parked) order.
	ActivateOrder *ActivateOrder `protobuf:"bytes,5,opt,name=activate_order,json=activateOrder" json:"activate_order,omitempty"`
	// Modify order's user attributes.
	ModifyUserAttributes *ModifyUserAttributes `protobuf:"bytes,6,opt,name=modify_user_attributes,json=modifyUserAttributes" json:"modify_user_attributes,omitempty"`
	// New compound order request (place compound order).
	NewCompoundOrder *NewCompoundOrder `protobuf:"bytes,8,opt,name=new_compound_order,json=newCompoundOrder" json:"new_compound_order,omitempty"`
	// Synthetic hangup liquidation with a MKT order.
	SyntheticLiquidate *SyntheticLiquidate `protobuf:"bytes,11,opt,name=synthetic_liquidate,json=syntheticLiquidate" json:"synthetic_liquidate,omitempty"`
	// Synthetic hangup liquidation with a LMT order.
	SyntheticScratch *SyntheticScratch `protobuf:"bytes,12,opt,name=synthetic_scratch,json=syntheticScratch" json:"synthetic_scratch,omitempty"`
	// Modify a synthetic order to get an immediate fill.
	GoMarket *GoMarket `protobuf:"bytes,13,opt,name=go_market,json=goMarket" json:"go_market,omitempty"`
	// Approve order with ORDER_TYPE_CROSS type.
	ApproveOrder *ApproveOrder `protobuf:"bytes,22,opt,name=approve_order,json=approveOrder" json:"approve_order,omitempty"`
	// Fill specific care order.
	FillCareOrder *FillCareOrder `protobuf:"bytes,28,opt,name=fill_care_order,json=fillCareOrder" json:"fill_care_order,omitempty"`
	// Username of the user on whose behalf the order request is being sent.
	// Must be a known username in CQG trade routing system,
	// otherwise the order will be rejected.
	OnBehalfOfUser *string `protobuf:"bytes,7,opt,name=on_behalf_of_user,json=onBehalfOfUser" json:"on_behalf_of_user,omitempty"`
	// Regulatory Algorithm ID for client algorithm associated with this order, if any.
	// This field is applicable only for exchanges that use it, e.g. Eurex
	// (not currently used, remains in protocol for backward compatibility only).
	// TransactionStatus message echoes back the value from the latest order request
	ClientRegulatoryAlgorithmId *uint32 `protobuf:"varint,9,opt,name=client_regulatory_algorithm_id,json=clientRegulatoryAlgorithmId" json:"client_regulatory_algorithm_id,omitempty"`
	// MiFID algorithm ID for this order, contents depend on mifid_algorithm_id_type.
	// Provide only when the order must have an algorithm as Execution Within Firm under MiFID II definitions.
	MifidAlgorithmId *string `protobuf:"bytes,15,opt,name=mifid_algorithm_id,json=mifidAlgorithmId" json:"mifid_algorithm_id,omitempty"`
	// The type of mifid_algorithm_id supplied. One of MiFIDAlgorithmIdType enum.
	MifidAlgorithmIdType *uint32 `protobuf:"varint,16,opt,name=mifid_algorithm_id_type,json=mifidAlgorithmIdType" json:"mifid_algorithm_id_type,omitempty"`
	// True instructs server to send this order as Execution Within Firm=CLIENT/NORE
	// rather than the user's server-side configured trader short code.
	OverrideExecutionWithinFirmWithNore *bool `protobuf:"varint,17,opt,name=override_execution_within_firm_with_nore,json=overrideExecutionWithinFirmWithNore,def=0" json:"override_execution_within_firm_with_nore,omitempty"`
	// MiFID investment decision ID for this order, contents depend on mifid_investment_decision_id_type.
	MifidInvestmentDecisionId *string `protobuf:"bytes,18,opt,name=mifid_investment_decision_id,json=mifidInvestmentDecisionId" json:"mifid_investment_decision_id,omitempty"`
	// The type of mifid_investment_decision_id supplied. One of MiFIDInvestmentDecisionIdType enum.
	MifidInvestmentDecisionIdType *uint32 `protobuf:"varint,19,opt,name=mifid_investment_decision_id_type,json=mifidInvestmentDecisionIdType" json:"mifid_investment_decision_id_type,omitempty"`
	// MiFID execution decision ID for this order, contents depend on mifid_execution_decision_id_type.
	// Note: this field is used only by approved clients for absolute pass-through; orders from any other
	// clients that use the field will be rejected. Use general-purpose field mifid_algorithm_id with
	// mifid_algorithm_id_type=1 (MIFID_ALGORITHM_ID_TYPE_EXTERNAL) when execution decision is made by
	// an algorithm with registered short code.
	MifidExecutionDecisionId *string `protobuf:"bytes,24,opt,name=mifid_execution_decision_id,json=mifidExecutionDecisionId" json:"mifid_execution_decision_id,omitempty"`
	// The type of mifid_execution_decision_id supplied. One of MiFIDExecutionDecisionIdType enum.
	MifidExecutionDecisionIdType *uint32 `protobuf:"varint,25,opt,name=mifid_execution_decision_id_type,json=mifidExecutionDecisionIdType" json:"mifid_execution_decision_id_type,omitempty"`
	// True if this is an automated order request, manual (request placed by the user direct action) otherwise.
	IsAutomated *bool `protobuf:"varint,23,opt,name=is_automated,json=isAutomated" json:"is_automated,omitempty"`
	// Message originator location (i.e. geographic location).
	// Format: "CC[,SS]", CountryCode (ISO 3166-1 alpha 2) and StateCode
	// (postal abbreviation) when sending country code is "US" or "CA".
	// Examples: "US,CA", "GB".
	SenderLocationId *string `protobuf:"bytes,26,opt,name=sender_location_id,json=senderLocationId" json:"sender_location_id,omitempty"`
	// Message originator identifier (desk, trader etc).
	// It is passed directly to the exchange in the appropriate exchange API field/tag,
	// often 'Operator ID', 'tag 50', or similar.
	SenderOperatorId *string `protobuf:"bytes,27,opt,name=sender_operator_id,json=senderOperatorId" json:"sender_operator_id,omitempty"`
}

// Default values for OrderRequest fields.
const (
	Default_OrderRequest_OverrideExecutionWithinFirmWithNore = bool(false)
)

func (x *OrderRequest) Reset() {
	*x = OrderRequest{}
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderRequest) ProtoMessage() {}

func (x *OrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderRequest.ProtoReflect.Descriptor instead.
func (*OrderRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{9}
}

func (x *OrderRequest) GetRequestId() uint32 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *OrderRequest) GetNewOrder() *NewOrder {
	if x != nil {
		return x.NewOrder
	}
	return nil
}

func (x *OrderRequest) GetModifyOrder() *ModifyOrder {
	if x != nil {
		return x.ModifyOrder
	}
	return nil
}

func (x *OrderRequest) GetCancelOrder() *CancelOrder {
	if x != nil {
		return x.CancelOrder
	}
	return nil
}

func (x *OrderRequest) GetCancelAllOrders() *CancelAllOrders {
	if x != nil {
		return x.CancelAllOrders
	}
	return nil
}

func (x *OrderRequest) GetLiquidateAll() *LiquidateAll {
	if x != nil {
		return x.LiquidateAll
	}
	return nil
}

func (x *OrderRequest) GetGoFlat() *GoFlat {
	if x != nil {
		return x.GoFlat
	}
	return nil
}

func (x *OrderRequest) GetSuspendOrder() *SuspendOrder {
	if x != nil {
		return x.SuspendOrder
	}
	return nil
}

func (x *OrderRequest) GetActivateOrder() *ActivateOrder {
	if x != nil {
		return x.ActivateOrder
	}
	return nil
}

func (x *OrderRequest) GetModifyUserAttributes() *ModifyUserAttributes {
	if x != nil {
		return x.ModifyUserAttributes
	}
	return nil
}

func (x *OrderRequest) GetNewCompoundOrder() *NewCompoundOrder {
	if x != nil {
		return x.NewCompoundOrder
	}
	return nil
}

func (x *OrderRequest) GetSyntheticLiquidate() *SyntheticLiquidate {
	if x != nil {
		return x.SyntheticLiquidate
	}
	return nil
}

func (x *OrderRequest) GetSyntheticScratch() *SyntheticScratch {
	if x != nil {
		return x.SyntheticScratch
	}
	return nil
}

func (x *OrderRequest) GetGoMarket() *GoMarket {
	if x != nil {
		return x.GoMarket
	}
	return nil
}

func (x *OrderRequest) GetApproveOrder() *ApproveOrder {
	if x != nil {
		return x.ApproveOrder
	}
	return nil
}

func (x *OrderRequest) GetFillCareOrder() *FillCareOrder {
	if x != nil {
		return x.FillCareOrder
	}
	return nil
}

func (x *OrderRequest) GetOnBehalfOfUser() string {
	if x != nil && x.OnBehalfOfUser != nil {
		return *x.OnBehalfOfUser
	}
	return ""
}

func (x *OrderRequest) GetClientRegulatoryAlgorithmId() uint32 {
	if x != nil && x.ClientRegulatoryAlgorithmId != nil {
		return *x.ClientRegulatoryAlgorithmId
	}
	return 0
}

func (x *OrderRequest) GetMifidAlgorithmId() string {
	if x != nil && x.MifidAlgorithmId != nil {
		return *x.MifidAlgorithmId
	}
	return ""
}

func (x *OrderRequest) GetMifidAlgorithmIdType() uint32 {
	if x != nil && x.MifidAlgorithmIdType != nil {
		return *x.MifidAlgorithmIdType
	}
	return 0
}

func (x *OrderRequest) GetOverrideExecutionWithinFirmWithNore() bool {
	if x != nil && x.OverrideExecutionWithinFirmWithNore != nil {
		return *x.OverrideExecutionWithinFirmWithNore
	}
	return Default_OrderRequest_OverrideExecutionWithinFirmWithNore
}

func (x *OrderRequest) GetMifidInvestmentDecisionId() string {
	if x != nil && x.MifidInvestmentDecisionId != nil {
		return *x.MifidInvestmentDecisionId
	}
	return ""
}

func (x *OrderRequest) GetMifidInvestmentDecisionIdType() uint32 {
	if x != nil && x.MifidInvestmentDecisionIdType != nil {
		return *x.MifidInvestmentDecisionIdType
	}
	return 0
}

func (x *OrderRequest) GetMifidExecutionDecisionId() string {
	if x != nil && x.MifidExecutionDecisionId != nil {
		return *x.MifidExecutionDecisionId
	}
	return ""
}

func (x *OrderRequest) GetMifidExecutionDecisionIdType() uint32 {
	if x != nil && x.MifidExecutionDecisionIdType != nil {
		return *x.MifidExecutionDecisionIdType
	}
	return 0
}

func (x *OrderRequest) GetIsAutomated() bool {
	if x != nil && x.IsAutomated != nil {
		return *x.IsAutomated
	}
	return false
}

func (x *OrderRequest) GetSenderLocationId() string {
	if x != nil && x.SenderLocationId != nil {
		return *x.SenderLocationId
	}
	return ""
}

func (x *OrderRequest) GetSenderOperatorId() string {
	if x != nil && x.SenderOperatorId != nil {
		return *x.SenderOperatorId
	}
	return ""
}

// New order request.
type NewOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Order to place.
	Order *Order `protobuf:"bytes,1,req,name=order" json:"order,omitempty"`
	// True if order should be suspended (parked) and wait a separate activate request or activation time.
	Suspend *bool `protobuf:"varint,2,opt,name=suspend" json:"suspend,omitempty"`
}

func (x *NewOrder) Reset() {
	*x = NewOrder{}
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewOrder) ProtoMessage() {}

func (x *NewOrder) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewOrder.ProtoReflect.Descriptor instead.
func (*NewOrder) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{10}
}

func (x *NewOrder) GetOrder() *Order {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *NewOrder) GetSuspend() bool {
	if x != nil && x.Suspend != nil {
		return *x.Suspend
	}
	return false
}

// Modify order request, include only fields that are supposed to be modified.
type ModifyOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Order id assigned by server after last modification.
	OrderId *string `protobuf:"bytes,1,req,name=order_id,json=orderId" json:"order_id,omitempty"`
	// ID of the order's account.
	AccountId *int32 `protobuf:"zigzag32,2,req,name=account_id,json=accountId" json:"account_id,omitempty"`
	// This client order ID of the order to modify.
	OrigClOrderId *string `protobuf:"bytes,3,req,name=orig_cl_order_id,json=origClOrderId" json:"orig_cl_order_id,omitempty"`
	// Client order ID of this modify request (will become new client order Id if modify is accepted).
	// Maximum allowed length is 64 bytes.
	ClOrderId *string `protobuf:"bytes,4,req,name=cl_order_id,json=clOrderId" json:"cl_order_id,omitempty"`
	// Client side time when a modify request was submitted (UTC).
	// Note: use when_utc_timestamp field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
	WhenUtcTime *int64 `protobuf:"zigzag64,5,opt,name=when_utc_time,json=whenUtcTime" json:"when_utc_time,omitempty"`
	// Client side time when a modify request was submitted (UTC).
	// If specified it's used instead of when_utc_time field (at least one of these fields has to be specified).
	WhenUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=when_utc_timestamp,json=whenUtcTimestamp" json:"when_utc_timestamp,omitempty"`
	// Note: use qty field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
	Uint32Qty *uint32 `protobuf:"varint,6,opt,name=uint32_qty,json=uint32Qty" json:"uint32_qty,omitempty"`
	// Note: use visible_qty field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
	Uint32VisibleQty *uint32 `protobuf:"varint,7,opt,name=uint32_visible_qty,json=uint32VisibleQty" json:"uint32_visible_qty,omitempty"`
	// Note: use min_visible_qty field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
	Uint32MinVisibleQty *uint32 `protobuf:"varint,8,opt,name=uint32_min_visible_qty,json=uint32MinVisibleQty" json:"uint32_min_visible_qty,omitempty"`
	// Order size what the client wants the total size to become.
	Qty *common.Decimal `protobuf:"bytes,23,opt,name=qty" json:"qty,omitempty"`
	// What the client wants the visible size to become.
	VisibleQty *common.Decimal `protobuf:"bytes,24,opt,name=visible_qty,json=visibleQty" json:"visible_qty,omitempty"`
	// What the client wants the minimum visible size to become.
	MinVisibleQty *common.Decimal `protobuf:"bytes,25,opt,name=min_visible_qty,json=minVisibleQty" json:"min_visible_qty,omitempty"`
	// What the client wants the limit price to become.
	ScaledLimitPrice *int64 `protobuf:"zigzag64,9,opt,name=scaled_limit_price,json=scaledLimitPrice" json:"scaled_limit_price,omitempty"`
	// What the client wants the stop price to become.
	ScaledStopPrice *int64 `protobuf:"zigzag64,10,opt,name=scaled_stop_price,json=scaledStopPrice" json:"scaled_stop_price,omitempty"`
	// What the client wants the activation time to become (UTC).
	// Note: use activation_utc_timestamp field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
	ActivationUtcTime *int64 `protobuf:"zigzag64,11,opt,name=activation_utc_time,json=activationUtcTime" json:"activation_utc_time,omitempty"`
	// What the client wants the activation time to become (UTC).
	// If specified it's used instead of activation_utc_time field.
	ActivationUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=activation_utc_timestamp,json=activationUtcTimestamp" json:"activation_utc_timestamp,omitempty"`
	// True if activation time should be removed.
	RemoveActivationTime *bool `protobuf:"varint,12,opt,name=remove_activation_time,json=removeActivationTime" json:"remove_activation_time,omitempty"`
	// What the client wants the suspension time to become (UTC).
	// Note: use suspension_utc_timestamp field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
	SuspensionUtcTime *int64 `protobuf:"zigzag64,13,opt,name=suspension_utc_time,json=suspensionUtcTime" json:"suspension_utc_time,omitempty"`
	// What the client wants the suspension time to become (UTC).
	// If specified it's used instead of suspension_utc_time field.
	SuspensionUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=suspension_utc_timestamp,json=suspensionUtcTimestamp" json:"suspension_utc_timestamp,omitempty"`
	// True if suspension time should be removed.
	RemoveSuspensionUtcTime *bool `protobuf:"varint,14,opt,name=remove_suspension_utc_time,json=removeSuspensionUtcTime" json:"remove_suspension_utc_time,omitempty"`
	// What the client wants the order duration to become.
	// This field is associated with Order.Duration enum type.
	Duration *uint32 `protobuf:"varint,15,opt,name=duration" json:"duration,omitempty"`
	// What the client wants the order expiration date to become (see Order.good_thru_date).
	GoodThruDate *int64 `protobuf:"zigzag64,16,opt,name=good_thru_date,json=goodThruDate" json:"good_thru_date,omitempty"`
	// What the client wants the order expiration time to become (see Order.good_thru_utc_time).
	// Note: use good_thru_utc_timestamp field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
	GoodThruUtcTime *int64 `protobuf:"zigzag64,17,opt,name=good_thru_utc_time,json=goodThruUtcTime" json:"good_thru_utc_time,omitempty"`
	// What the client wants the order expiration time to become (see Order.good_thru_utc_timestamp).
	// If specified by the user it's used instead of good_thru_utc_time field.
	GoodThruUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=good_thru_utc_timestamp,json=goodThruUtcTimestamp" json:"good_thru_utc_timestamp,omitempty"`
	// List of order extra attributes, can be used to remove or modify existing or add new attributes.
	ExtraAttributes []*common.NamedValue `protobuf:"bytes,26,rep,name=extra_attributes,json=extraAttributes" json:"extra_attributes,omitempty"`
	// FIA Execution Source Code value of the operation.
	// See Order.execution_source_code
	ExecutionSourceCode *string `protobuf:"bytes,27,opt,name=execution_source_code,json=executionSourceCode" json:"execution_source_code,omitempty"`
}

func (x *ModifyOrder) Reset() {
	*x = ModifyOrder{}
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifyOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyOrder) ProtoMessage() {}

func (x *ModifyOrder) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyOrder.ProtoReflect.Descriptor instead.
func (*ModifyOrder) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{11}
}

func (x *ModifyOrder) GetOrderId() string {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return ""
}

func (x *ModifyOrder) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *ModifyOrder) GetOrigClOrderId() string {
	if x != nil && x.OrigClOrderId != nil {
		return *x.OrigClOrderId
	}
	return ""
}

func (x *ModifyOrder) GetClOrderId() string {
	if x != nil && x.ClOrderId != nil {
		return *x.ClOrderId
	}
	return ""
}

// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
func (x *ModifyOrder) GetWhenUtcTime() int64 {
	if x != nil && x.WhenUtcTime != nil {
		return *x.WhenUtcTime
	}
	return 0
}

func (x *ModifyOrder) GetWhenUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.WhenUtcTimestamp
	}
	return nil
}

// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
func (x *ModifyOrder) GetUint32Qty() uint32 {
	if x != nil && x.Uint32Qty != nil {
		return *x.Uint32Qty
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
func (x *ModifyOrder) GetUint32VisibleQty() uint32 {
	if x != nil && x.Uint32VisibleQty != nil {
		return *x.Uint32VisibleQty
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
func (x *ModifyOrder) GetUint32MinVisibleQty() uint32 {
	if x != nil && x.Uint32MinVisibleQty != nil {
		return *x.Uint32MinVisibleQty
	}
	return 0
}

func (x *ModifyOrder) GetQty() *common.Decimal {
	if x != nil {
		return x.Qty
	}
	return nil
}

func (x *ModifyOrder) GetVisibleQty() *common.Decimal {
	if x != nil {
		return x.VisibleQty
	}
	return nil
}

func (x *ModifyOrder) GetMinVisibleQty() *common.Decimal {
	if x != nil {
		return x.MinVisibleQty
	}
	return nil
}

func (x *ModifyOrder) GetScaledLimitPrice() int64 {
	if x != nil && x.ScaledLimitPrice != nil {
		return *x.ScaledLimitPrice
	}
	return 0
}

func (x *ModifyOrder) GetScaledStopPrice() int64 {
	if x != nil && x.ScaledStopPrice != nil {
		return *x.ScaledStopPrice
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
func (x *ModifyOrder) GetActivationUtcTime() int64 {
	if x != nil && x.ActivationUtcTime != nil {
		return *x.ActivationUtcTime
	}
	return 0
}

func (x *ModifyOrder) GetActivationUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ActivationUtcTimestamp
	}
	return nil
}

func (x *ModifyOrder) GetRemoveActivationTime() bool {
	if x != nil && x.RemoveActivationTime != nil {
		return *x.RemoveActivationTime
	}
	return false
}

// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
func (x *ModifyOrder) GetSuspensionUtcTime() int64 {
	if x != nil && x.SuspensionUtcTime != nil {
		return *x.SuspensionUtcTime
	}
	return 0
}

func (x *ModifyOrder) GetSuspensionUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.SuspensionUtcTimestamp
	}
	return nil
}

func (x *ModifyOrder) GetRemoveSuspensionUtcTime() bool {
	if x != nil && x.RemoveSuspensionUtcTime != nil {
		return *x.RemoveSuspensionUtcTime
	}
	return false
}

func (x *ModifyOrder) GetDuration() uint32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *ModifyOrder) GetGoodThruDate() int64 {
	if x != nil && x.GoodThruDate != nil {
		return *x.GoodThruDate
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
func (x *ModifyOrder) GetGoodThruUtcTime() int64 {
	if x != nil && x.GoodThruUtcTime != nil {
		return *x.GoodThruUtcTime
	}
	return 0
}

func (x *ModifyOrder) GetGoodThruUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.GoodThruUtcTimestamp
	}
	return nil
}

func (x *ModifyOrder) GetExtraAttributes() []*common.NamedValue {
	if x != nil {
		return x.ExtraAttributes
	}
	return nil
}

func (x *ModifyOrder) GetExecutionSourceCode() string {
	if x != nil && x.ExecutionSourceCode != nil {
		return *x.ExecutionSourceCode
	}
	return ""
}

// Cancel order request.
type CancelOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Order id assigned by server after last modification.
	OrderId *string `protobuf:"bytes,1,req,name=order_id,json=orderId" json:"order_id,omitempty"`
	// ID of the order's account.
	AccountId *int32 `protobuf:"zigzag32,2,req,name=account_id,json=accountId" json:"account_id,omitempty"`
	// This client order ID of the order to cancel.
	OrigClOrderId *string `protobuf:"bytes,3,req,name=orig_cl_order_id,json=origClOrderId" json:"orig_cl_order_id,omitempty"`
	// Client order ID of this cancel request.
	// Maximum allowed length is 64 bytes.
	ClOrderId *string `protobuf:"bytes,4,req,name=cl_order_id,json=clOrderId" json:"cl_order_id,omitempty"`
	// Client side time when a modify request was submitted (UTC).
	// Note: use when_utc_timestamp field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
	WhenUtcTime *int64 `protobuf:"zigzag64,5,opt,name=when_utc_time,json=whenUtcTime" json:"when_utc_time,omitempty"`
	// Client side time when a modify request was submitted (UTC).
	// If specified it's used instead of when_utc_time field (at least one of these fields has to be specified).
	WhenUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=when_utc_timestamp,json=whenUtcTimestamp" json:"when_utc_timestamp,omitempty"`
	// List of order extra attributes, can be used to remove or modify existing or add new attributes.
	ExtraAttributes []*common.NamedValue `protobuf:"bytes,7,rep,name=extra_attributes,json=extraAttributes" json:"extra_attributes,omitempty"`
}

func (x *CancelOrder) Reset() {
	*x = CancelOrder{}
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOrder) ProtoMessage() {}

func (x *CancelOrder) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOrder.ProtoReflect.Descriptor instead.
func (*CancelOrder) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{12}
}

func (x *CancelOrder) GetOrderId() string {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return ""
}

func (x *CancelOrder) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CancelOrder) GetOrigClOrderId() string {
	if x != nil && x.OrigClOrderId != nil {
		return *x.OrigClOrderId
	}
	return ""
}

func (x *CancelOrder) GetClOrderId() string {
	if x != nil && x.ClOrderId != nil {
		return *x.ClOrderId
	}
	return ""
}

// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
func (x *CancelOrder) GetWhenUtcTime() int64 {
	if x != nil && x.WhenUtcTime != nil {
		return *x.WhenUtcTime
	}
	return 0
}

func (x *CancelOrder) GetWhenUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.WhenUtcTimestamp
	}
	return nil
}

func (x *CancelOrder) GetExtraAttributes() []*common.NamedValue {
	if x != nil {
		return x.ExtraAttributes
	}
	return nil
}

// Specifies an account and what orders to use in the account.
type AccountOrderFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the order's account.
	AccountId *int32 `protobuf:"zigzag32,1,req,name=account_id,json=accountId" json:"account_id,omitempty"`
	// Specifies either all orders in the account or just orders in the
	// account associated with the trader sending the request.
	Mine *bool `protobuf:"varint,2,opt,name=mine,def=1" json:"mine,omitempty"`
	// Specifies whether only suspended orders or all not suspended orders in the
	// account associated with the trader sending the request.
	Suspended *bool `protobuf:"varint,3,opt,name=suspended,def=0" json:"suspended,omitempty"`
	// Specifies whether only BUY orders or only SELL orders.
	// This field is associated with Order.Side enum type.
	Side *uint32 `protobuf:"varint,4,opt,name=side" json:"side,omitempty"`
	// Use only orders of specified contract.
	ContractId *uint32 `protobuf:"varint,5,opt,name=contract_id,json=contractId" json:"contract_id,omitempty"`
	// Specifies whether only order(s) expiring during the
	// current/nearest session should be considered.
	CurrentDayOnly *bool `protobuf:"varint,6,opt,name=current_day_only,json=currentDayOnly,def=0" json:"current_day_only,omitempty"`
}

// Default values for AccountOrderFilter fields.
const (
	Default_AccountOrderFilter_Mine           = bool(true)
	Default_AccountOrderFilter_Suspended      = bool(false)
	Default_AccountOrderFilter_CurrentDayOnly = bool(false)
)

func (x *AccountOrderFilter) Reset() {
	*x = AccountOrderFilter{}
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountOrderFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountOrderFilter) ProtoMessage() {}

func (x *AccountOrderFilter) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountOrderFilter.ProtoReflect.Descriptor instead.
func (*AccountOrderFilter) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{13}
}

func (x *AccountOrderFilter) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *AccountOrderFilter) GetMine() bool {
	if x != nil && x.Mine != nil {
		return *x.Mine
	}
	return Default_AccountOrderFilter_Mine
}

func (x *AccountOrderFilter) GetSuspended() bool {
	if x != nil && x.Suspended != nil {
		return *x.Suspended
	}
	return Default_AccountOrderFilter_Suspended
}

func (x *AccountOrderFilter) GetSide() uint32 {
	if x != nil && x.Side != nil {
		return *x.Side
	}
	return 0
}

func (x *AccountOrderFilter) GetContractId() uint32 {
	if x != nil && x.ContractId != nil {
		return *x.ContractId
	}
	return 0
}

func (x *AccountOrderFilter) GetCurrentDayOnly() bool {
	if x != nil && x.CurrentDayOnly != nil {
		return *x.CurrentDayOnly
	}
	return Default_AccountOrderFilter_CurrentDayOnly
}

// Cancel all orders request.
type CancelAllOrders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Client side time when a modify request was submitted (UTC).
	// Note: use when_utc_timestamp field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
	WhenUtcTime *int64 `protobuf:"zigzag64,1,opt,name=when_utc_time,json=whenUtcTime" json:"when_utc_time,omitempty"`
	// Client side time when a modify request was submitted (UTC).
	// If specified it's used instead of when_utc_time field (at least one of these fields has to be specified).
	WhenUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=when_utc_timestamp,json=whenUtcTimestamp" json:"when_utc_timestamp,omitempty"`
	// Client order ID of this cancel request.
	ClOrderId *string `protobuf:"bytes,2,opt,name=cl_order_id,json=clOrderId" json:"cl_order_id,omitempty"`
	// Specifies an account and what orders to cancel in the account.
	// All orders that meet the criteria (account, mine, suspended etc.) will be canceled.
	// At least one AccountOrderFilter should be present.
	AccountOrderFilters []*AccountOrderFilter `protobuf:"bytes,3,rep,name=account_order_filters,json=accountOrderFilters" json:"account_order_filters,omitempty"`
}

func (x *CancelAllOrders) Reset() {
	*x = CancelAllOrders{}
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelAllOrders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelAllOrders) ProtoMessage() {}

func (x *CancelAllOrders) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelAllOrders.ProtoReflect.Descriptor instead.
func (*CancelAllOrders) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{14}
}

// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
func (x *CancelAllOrders) GetWhenUtcTime() int64 {
	if x != nil && x.WhenUtcTime != nil {
		return *x.WhenUtcTime
	}
	return 0
}

func (x *CancelAllOrders) GetWhenUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.WhenUtcTimestamp
	}
	return nil
}

func (x *CancelAllOrders) GetClOrderId() string {
	if x != nil && x.ClOrderId != nil {
		return *x.ClOrderId
	}
	return ""
}

func (x *CancelAllOrders) GetAccountOrderFilters() []*AccountOrderFilter {
	if x != nil {
		return x.AccountOrderFilters
	}
	return nil
}

// Activate suspended (parked) order request.
type ActivateOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Order id assigned by server after last modification.
	OrderId *string `protobuf:"bytes,1,req,name=order_id,json=orderId" json:"order_id,omitempty"`
	// ID of the order's account.
	AccountId *int32 `protobuf:"zigzag32,2,req,name=account_id,json=accountId" json:"account_id,omitempty"`
	// This client order ID of the order to activate.
	OrigClOrderId *string `protobuf:"bytes,3,req,name=orig_cl_order_id,json=origClOrderId" json:"orig_cl_order_id,omitempty"`
	// Client order ID of this activation request (will become new client order Id if activation is accepted).
	// Maximum allowed length is 64 bytes.
	ClOrderId *string `protobuf:"bytes,4,req,name=cl_order_id,json=clOrderId" json:"cl_order_id,omitempty"`
	// Client side time when a modify request was submitted (UTC).
	// Note: use when_utc_timestamp field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
	WhenUtcTime *int64 `protobuf:"zigzag64,5,opt,name=when_utc_time,json=whenUtcTime" json:"when_utc_time,omitempty"`
	// Client side time when a modify request was submitted (UTC).
	// If specified it's used instead of when_utc_time field (at least one of these fields has to be specified).
	WhenUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=when_utc_timestamp,json=whenUtcTimestamp" json:"when_utc_timestamp,omitempty"`
	// List of order extra attributes, can be used to remove or modify existing or add new attributes.
	ExtraAttributes []*common.NamedValue `protobuf:"bytes,7,rep,name=extra_attributes,json=extraAttributes" json:"extra_attributes,omitempty"`
	// FIA Execution Source Code value of the operation.
	// See Order.execution_source_code.
	ExecutionSourceCode *string `protobuf:"bytes,8,opt,name=execution_source_code,json=executionSourceCode" json:"execution_source_code,omitempty"`
	// Set to true when the action is initiated by care order auto activation algorithm.
	IsCareAutoActivation *bool `protobuf:"varint,9,opt,name=is_care_auto_activation,json=isCareAutoActivation" json:"is_care_auto_activation,omitempty"`
}

func (x *ActivateOrder) Reset() {
	*x = ActivateOrder{}
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivateOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateOrder) ProtoMessage() {}

func (x *ActivateOrder) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateOrder.ProtoReflect.Descriptor instead.
func (*ActivateOrder) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{15}
}

func (x *ActivateOrder) GetOrderId() string {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return ""
}

func (x *ActivateOrder) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *ActivateOrder) GetOrigClOrderId() string {
	if x != nil && x.OrigClOrderId != nil {
		return *x.OrigClOrderId
	}
	return ""
}

func (x *ActivateOrder) GetClOrderId() string {
	if x != nil && x.ClOrderId != nil {
		return *x.ClOrderId
	}
	return ""
}

// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
func (x *ActivateOrder) GetWhenUtcTime() int64 {
	if x != nil && x.WhenUtcTime != nil {
		return *x.WhenUtcTime
	}
	return 0
}

func (x *ActivateOrder) GetWhenUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.WhenUtcTimestamp
	}
	return nil
}

func (x *ActivateOrder) GetExtraAttributes() []*common.NamedValue {
	if x != nil {
		return x.ExtraAttributes
	}
	return nil
}

func (x *ActivateOrder) GetExecutionSourceCode() string {
	if x != nil && x.ExecutionSourceCode != nil {
		return *x.ExecutionSourceCode
	}
	return ""
}

func (x *ActivateOrder) GetIsCareAutoActivation() bool {
	if x != nil && x.IsCareAutoActivation != nil {
		return *x.IsCareAutoActivation
	}
	return false
}

// Placement of a compound order.
type NewCompoundOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Compound order to place.
	CompoundOrder *CompoundOrder `protobuf:"bytes,1,req,name=compound_order,json=compoundOrder" json:"compound_order,omitempty"`
	// Indicates whether compound order execution shall happen on a partial fill (true or omitted)
	// or complete fill (false).
	PartialFillsHandling *bool `protobuf:"varint,2,opt,name=partial_fills_handling,json=partialFillsHandling,def=1" json:"partial_fills_handling,omitempty"`
}

// Default values for NewCompoundOrder fields.
const (
	Default_NewCompoundOrder_PartialFillsHandling = bool(true)
)

func (x *NewCompoundOrder) Reset() {
	*x = NewCompoundOrder{}
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewCompoundOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewCompoundOrder) ProtoMessage() {}

func (x *NewCompoundOrder) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewCompoundOrder.ProtoReflect.Descriptor instead.
func (*NewCompoundOrder) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{16}
}

func (x *NewCompoundOrder) GetCompoundOrder() *CompoundOrder {
	if x != nil {
		return x.CompoundOrder
	}
	return nil
}

func (x *NewCompoundOrder) GetPartialFillsHandling() bool {
	if x != nil && x.PartialFillsHandling != nil {
		return *x.PartialFillsHandling
	}
	return Default_NewCompoundOrder_PartialFillsHandling
}

// Compound order.
type CompoundOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This field is associated with Type enum type.
	Type *uint32 `protobuf:"varint,1,req,name=type" json:"type,omitempty"`
	// ID of the compound order assigned by client.
	// Maximum allowed length is 64 bytes.
	ClCompoundId *string `protobuf:"bytes,2,req,name=cl_compound_id,json=clCompoundId" json:"cl_compound_id,omitempty"`
	// List of entires.
	CompoundOrderEntries []*CompoundOrderEntry `protobuf:"bytes,3,rep,name=compound_order_entries,json=compoundOrderEntries" json:"compound_order_entries,omitempty"`
	// Offset in ticks from fill price (variable ticks size is supported). New order price will be
	// calculated as (fill price + offset) for buy master orders and (price - offset) for sell master orders.
	ProfitTickOffset *int32 `protobuf:"zigzag32,4,opt,name=profit_tick_offset,json=profitTickOffset" json:"profit_tick_offset,omitempty"`
	// Offset in ticks from fill price (variable ticks size is supported). New order price will be
	// calculated as (fill price - offset) for buy master orders and (price + offset) for sell master orders.
	LossTickOffset *int32 `protobuf:"zigzag32,5,opt,name=loss_tick_offset,json=lossTickOffset" json:"loss_tick_offset,omitempty"`
	// Offset in ticks from loss_tick_offset for stop limit orders (variable ticks size is supported).
	// The offset determines the limit price for stop limit order after the stop price is hit.
	StopLimitTickOffset *int32 `protobuf:"zigzag32,6,opt,name=stop_limit_tick_offset,json=stopLimitTickOffset" json:"stop_limit_tick_offset,omitempty"`
	// Treat compound order as server-side bracket.
	IsBracket *bool `protobuf:"varint,7,opt,name=is_bracket,json=isBracket" json:"is_bracket,omitempty"`
}

func (x *CompoundOrder) Reset() {
	*x = CompoundOrder{}
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompoundOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompoundOrder) ProtoMessage() {}

func (x *CompoundOrder) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompoundOrder.ProtoReflect.Descriptor instead.
func (*CompoundOrder) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{17}
}

func (x *CompoundOrder) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *CompoundOrder) GetClCompoundId() string {
	if x != nil && x.ClCompoundId != nil {
		return *x.ClCompoundId
	}
	return ""
}

func (x *CompoundOrder) GetCompoundOrderEntries() []*CompoundOrderEntry {
	if x != nil {
		return x.CompoundOrderEntries
	}
	return nil
}

func (x *CompoundOrder) GetProfitTickOffset() int32 {
	if x != nil && x.ProfitTickOffset != nil {
		return *x.ProfitTickOffset
	}
	return 0
}

func (x *CompoundOrder) GetLossTickOffset() int32 {
	if x != nil && x.LossTickOffset != nil {
		return *x.LossTickOffset
	}
	return 0
}

func (x *CompoundOrder) GetStopLimitTickOffset() int32 {
	if x != nil && x.StopLimitTickOffset != nil {
		return *x.StopLimitTickOffset
	}
	return 0
}

func (x *CompoundOrder) GetIsBracket() bool {
	if x != nil && x.IsBracket != nil {
		return *x.IsBracket
	}
	return false
}

// Use existing order.
type UseOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Order id of existing order assigned by server after last modification.
	OrderId *string `protobuf:"bytes,1,req,name=order_id,json=orderId" json:"order_id,omitempty"`
	// ID of the order's account.
	AccountId *int32 `protobuf:"zigzag32,2,req,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (x *UseOrder) Reset() {
	*x = UseOrder{}
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UseOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseOrder) ProtoMessage() {}

func (x *UseOrder) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseOrder.ProtoReflect.Descriptor instead.
func (*UseOrder) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{18}
}

func (x *UseOrder) GetOrderId() string {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return ""
}

func (x *UseOrder) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

// Entry of a compound order. Only one of optional fields has to be specified.
type CompoundOrderEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Regular order entry.
	Order *Order `protobuf:"bytes,1,opt,name=order" json:"order,omitempty"`
	// Sub-compound order entry.
	CompoundOrder *CompoundOrder `protobuf:"bytes,2,opt,name=compound_order,json=compoundOrder" json:"compound_order,omitempty"`
	// Existing order entry.
	UseOrder *UseOrder `protobuf:"bytes,3,opt,name=use_order,json=useOrder" json:"use_order,omitempty"`
}

func (x *CompoundOrderEntry) Reset() {
	*x = CompoundOrderEntry{}
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompoundOrderEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompoundOrderEntry) ProtoMessage() {}

func (x *CompoundOrderEntry) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompoundOrderEntry.ProtoReflect.Descriptor instead.
func (*CompoundOrderEntry) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{19}
}

func (x *CompoundOrderEntry) GetOrder() *Order {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *CompoundOrderEntry) GetCompoundOrder() *CompoundOrder {
	if x != nil {
		return x.CompoundOrder
	}
	return nil
}

func (x *CompoundOrderEntry) GetUseOrder() *UseOrder {
	if x != nil {
		return x.UseOrder
	}
	return nil
}

// Suspend (park) order request.
type SuspendOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Order id assigned by server after last modification.
	OrderId *string `protobuf:"bytes,1,req,name=order_id,json=orderId" json:"order_id,omitempty"`
	// ID of the order's account.
	AccountId *int32 `protobuf:"zigzag32,2,req,name=account_id,json=accountId" json:"account_id,omitempty"`
	// This client order ID of the order to suspend (park).
	OrigClOrderId *string `protobuf:"bytes,3,req,name=orig_cl_order_id,json=origClOrderId" json:"orig_cl_order_id,omitempty"`
	// Client order ID of this suspension request (will become new client order Id if suspension is accepted).
	// Maximum allowed length is 64 bytes.
	ClOrderId *string `protobuf:"bytes,4,req,name=cl_order_id,json=clOrderId" json:"cl_order_id,omitempty"`
	// Client side time when a modify request was submitted (UTC).
	// Note: use when_utc_timestamp field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
	WhenUtcTime *int64 `protobuf:"zigzag64,5,opt,name=when_utc_time,json=whenUtcTime" json:"when_utc_time,omitempty"`
	// Client side time when a modify request was submitted (UTC).
	// If specified it's used instead of when_utc_time field (at least one of these fields has to be specified).
	WhenUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=when_utc_timestamp,json=whenUtcTimestamp" json:"when_utc_timestamp,omitempty"`
	// Time when the suspended (parked) order should automatically activate (UTC).
	// Note: use activation_utc_timestamp field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
	ActivationUtcTime *int64 `protobuf:"zigzag64,6,opt,name=activation_utc_time,json=activationUtcTime" json:"activation_utc_time,omitempty"`
	// Time when the suspended (parked) order should automatically activate (UTC).
	// If specified it's used instead of activation_utc_time field.
	// If neither this nor activation_utc_time field is specified, order must be activated by ActivateOrder request
	ActivationUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=activation_utc_timestamp,json=activationUtcTimestamp" json:"activation_utc_timestamp,omitempty"`
	// List of order extra attributes, can be used to remove or modify existing or add new attributes.
	ExtraAttributes []*common.NamedValue `protobuf:"bytes,9,rep,name=extra_attributes,json=extraAttributes" json:"extra_attributes,omitempty"`
}

func (x *SuspendOrder) Reset() {
	*x = SuspendOrder{}
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SuspendOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuspendOrder) ProtoMessage() {}

func (x *SuspendOrder) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuspendOrder.ProtoReflect.Descriptor instead.
func (*SuspendOrder) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{20}
}

func (x *SuspendOrder) GetOrderId() string {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return ""
}

func (x *SuspendOrder) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *SuspendOrder) GetOrigClOrderId() string {
	if x != nil && x.OrigClOrderId != nil {
		return *x.OrigClOrderId
	}
	return ""
}

func (x *SuspendOrder) GetClOrderId() string {
	if x != nil && x.ClOrderId != nil {
		return *x.ClOrderId
	}
	return ""
}

// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
func (x *SuspendOrder) GetWhenUtcTime() int64 {
	if x != nil && x.WhenUtcTime != nil {
		return *x.WhenUtcTime
	}
	return 0
}

func (x *SuspendOrder) GetWhenUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.WhenUtcTimestamp
	}
	return nil
}

// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
func (x *SuspendOrder) GetActivationUtcTime() int64 {
	if x != nil && x.ActivationUtcTime != nil {
		return *x.ActivationUtcTime
	}
	return 0
}

func (x *SuspendOrder) GetActivationUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ActivationUtcTimestamp
	}
	return nil
}

func (x *SuspendOrder) GetExtraAttributes() []*common.NamedValue {
	if x != nil {
		return x.ExtraAttributes
	}
	return nil
}

// Specify account and its positions.
type AccountPositionFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of an account.
	AccountId *int32 `protobuf:"zigzag32,1,req,name=account_id,json=accountId" json:"account_id,omitempty"`
	// Server side contract id.
	ContractId *uint32 `protobuf:"varint,2,opt,name=contract_id,json=contractId" json:"contract_id,omitempty"`
	// Specifies whether only short (true) or only long (false) positions should be selected.
	// If not specified, both short and long positions will be selected.
	IsShort *bool `protobuf:"varint,3,opt,name=is_short,json=isShort" json:"is_short,omitempty"`
	// Specifies whether only positions of current day (true)
	// or only positions of previous days (false) should be selected.
	// If not specified, positions of current and previous day(s) will be selected.
	// Should be used only if instrument supports explicit close for positions.
	// If specified, and any instrument not supporting explicit close matches this filter,
	// ServerMsg.OrderRequestReject is sent.
	CurrentDayOnly *bool `protobuf:"varint,4,opt,name=current_day_only,json=currentDayOnly" json:"current_day_only,omitempty"`
}

func (x *AccountPositionFilter) Reset() {
	*x = AccountPositionFilter{}
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountPositionFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountPositionFilter) ProtoMessage() {}

func (x *AccountPositionFilter) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountPositionFilter.ProtoReflect.Descriptor instead.
func (*AccountPositionFilter) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{21}
}

func (x *AccountPositionFilter) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *AccountPositionFilter) GetContractId() uint32 {
	if x != nil && x.ContractId != nil {
		return *x.ContractId
	}
	return 0
}

func (x *AccountPositionFilter) GetIsShort() bool {
	if x != nil && x.IsShort != nil {
		return *x.IsShort
	}
	return false
}

func (x *AccountPositionFilter) GetCurrentDayOnly() bool {
	if x != nil && x.CurrentDayOnly != nil {
		return *x.CurrentDayOnly
	}
	return false
}

// Liquidate all open positions.
type LiquidateAll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Accounts and positions to liquidate.
	// At least one AccountPositionFilter should be specified, otherwise ServerMsg.OrderRequestReject is sent.
	// Position matching any filter is to be liquidated.
	AccountPositionFilters []*AccountPositionFilter `protobuf:"bytes,1,rep,name=account_position_filters,json=accountPositionFilters" json:"account_position_filters,omitempty"`
	// Client side time when this request was submitted (UTC).
	WhenUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,2,req,name=when_utc_timestamp,json=whenUtcTimestamp" json:"when_utc_timestamp,omitempty"`
	// FIA Execution Source Code value of the operation.
	// See Order.execution_source_code.
	ExecutionSourceCode *string `protobuf:"bytes,3,opt,name=execution_source_code,json=executionSourceCode" json:"execution_source_code,omitempty"`
	// Specifies a speculation type. One of SpeculationType enum.
	SpeculationType *uint32 `protobuf:"varint,4,opt,name=speculation_type,json=speculationType" json:"speculation_type,omitempty"`
}

func (x *LiquidateAll) Reset() {
	*x = LiquidateAll{}
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LiquidateAll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidateAll) ProtoMessage() {}

func (x *LiquidateAll) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidateAll.ProtoReflect.Descriptor instead.
func (*LiquidateAll) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{22}
}

func (x *LiquidateAll) GetAccountPositionFilters() []*AccountPositionFilter {
	if x != nil {
		return x.AccountPositionFilters
	}
	return nil
}

func (x *LiquidateAll) GetWhenUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.WhenUtcTimestamp
	}
	return nil
}

func (x *LiquidateAll) GetExecutionSourceCode() string {
	if x != nil && x.ExecutionSourceCode != nil {
		return *x.ExecutionSourceCode
	}
	return ""
}

func (x *LiquidateAll) GetSpeculationType() uint32 {
	if x != nil && x.SpeculationType != nil {
		return *x.SpeculationType
	}
	return 0
}

// Cancel all orders (including parked) and liquidate all open positions.
type GoFlat struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Id of an account. At least one should be specified, otherwise ServerMsg.OrderRequestReject is sent.
	AccountIds []int32 `protobuf:"zigzag32,1,rep,name=account_ids,json=accountIds" json:"account_ids,omitempty"`
	// Client side time when this request was submitted (UTC).
	WhenUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,2,req,name=when_utc_timestamp,json=whenUtcTimestamp" json:"when_utc_timestamp,omitempty"`
	// FIA Execution Source Code value of the operation.
	// See Order.execution_source_code.
	ExecutionSourceCode *string `protobuf:"bytes,3,opt,name=execution_source_code,json=executionSourceCode" json:"execution_source_code,omitempty"`
	// Specifies a speculation type. One of SpeculationType enum.
	SpeculationType *uint32 `protobuf:"varint,4,opt,name=speculation_type,json=speculationType" json:"speculation_type,omitempty"`
}

func (x *GoFlat) Reset() {
	*x = GoFlat{}
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GoFlat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoFlat) ProtoMessage() {}

func (x *GoFlat) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoFlat.ProtoReflect.Descriptor instead.
func (*GoFlat) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{23}
}

func (x *GoFlat) GetAccountIds() []int32 {
	if x != nil {
		return x.AccountIds
	}
	return nil
}

func (x *GoFlat) GetWhenUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.WhenUtcTimestamp
	}
	return nil
}

func (x *GoFlat) GetExecutionSourceCode() string {
	if x != nil && x.ExecutionSourceCode != nil {
		return *x.ExecutionSourceCode
	}
	return ""
}

func (x *GoFlat) GetSpeculationType() uint32 {
	if x != nil && x.SpeculationType != nil {
		return *x.SpeculationType
	}
	return 0
}

// Per-account result of GoFlat request execution.
type GoFlatStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the order request this status corresponds to.
	RequestId *uint32 `protobuf:"varint,1,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	// Account ID in CQG trade routing system.
	AccountId *int32 `protobuf:"zigzag32,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// This field is associated with StatusCode enum type.
	StatusCode *uint32 `protobuf:"varint,3,opt,name=status_code,json=statusCode" json:"status_code,omitempty"`
	// Optional error details message.
	Details *common.Text `protobuf:"bytes,4,opt,name=details" json:"details,omitempty"`
	// Sum of remaining (unfilled) order quantities among not cancelled orders after GoFlat execution.
	RemainingOrdersQty *common.Decimal `protobuf:"bytes,5,opt,name=remaining_orders_qty,json=remainingOrdersQty" json:"remaining_orders_qty,omitempty"`
	// Sum of position quantities among not liquidated open positions after GoFlat execution.
	RemainingPositionsQty *common.Decimal `protobuf:"bytes,6,opt,name=remaining_positions_qty,json=remainingPositionsQty" json:"remaining_positions_qty,omitempty"`
}

func (x *GoFlatStatus) Reset() {
	*x = GoFlatStatus{}
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GoFlatStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoFlatStatus) ProtoMessage() {}

func (x *GoFlatStatus) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoFlatStatus.ProtoReflect.Descriptor instead.
func (*GoFlatStatus) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{24}
}

func (x *GoFlatStatus) GetRequestId() uint32 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *GoFlatStatus) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *GoFlatStatus) GetStatusCode() uint32 {
	if x != nil && x.StatusCode != nil {
		return *x.StatusCode
	}
	return 0
}

func (x *GoFlatStatus) GetDetails() *common.Text {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *GoFlatStatus) GetRemainingOrdersQty() *common.Decimal {
	if x != nil {
		return x.RemainingOrdersQty
	}
	return nil
}

func (x *GoFlatStatus) GetRemainingPositionsQty() *common.Decimal {
	if x != nil {
		return x.RemainingPositionsQty
	}
	return nil
}

// Request of order entitlements.
type OrderEntitlementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Server side contract id.
	ContractId *uint32 `protobuf:"varint,1,req,name=contract_id,json=contractId" json:"contract_id,omitempty"`
	// Account ID in CQG trade routing system.
	AccountId *int32 `protobuf:"zigzag32,2,req,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (x *OrderEntitlementRequest) Reset() {
	*x = OrderEntitlementRequest{}
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderEntitlementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderEntitlementRequest) ProtoMessage() {}

func (x *OrderEntitlementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderEntitlementRequest.ProtoReflect.Descriptor instead.
func (*OrderEntitlementRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{25}
}

func (x *OrderEntitlementRequest) GetContractId() uint32 {
	if x != nil && x.ContractId != nil {
		return *x.ContractId
	}
	return 0
}

func (x *OrderEntitlementRequest) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

// Report with order entitlements.
type OrderEntitlementReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set of order entitlements.
	OrderEntitlements []*OrderEntitlement `protobuf:"bytes,1,rep,name=order_entitlements,json=orderEntitlements" json:"order_entitlements,omitempty"`
}

func (x *OrderEntitlementReport) Reset() {
	*x = OrderEntitlementReport{}
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderEntitlementReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderEntitlementReport) ProtoMessage() {}

func (x *OrderEntitlementReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderEntitlementReport.ProtoReflect.Descriptor instead.
func (*OrderEntitlementReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{26}
}

func (x *OrderEntitlementReport) GetOrderEntitlements() []*OrderEntitlement {
	if x != nil {
		return x.OrderEntitlements
	}
	return nil
}

// Entitlements for order.
// For future compatibility unknown order types/durations/execution instructions should be ignored.
type OrderEntitlement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Order type.
	// This field is associated with Order.OrderType enum type.
	OrderType *uint32 `protobuf:"varint,1,req,name=order_type,json=orderType" json:"order_type,omitempty"`
	// Value indicating whether order_type may be executed synthetically by CQG.
	// E.g. if is_synthetic is true and order_type is MKT, it means that there will be synthetic processing
	// of Market order by CQG before the order is sent to the exchange, where Market order is not natively supported.
	// This is an informational field. The Client cannot specify this field in an order.
	IsSynthetic *bool `protobuf:"varint,2,req,name=is_synthetic,json=isSynthetic" json:"is_synthetic,omitempty"`
	// Order duration.
	// This field is associated with Order.Duration enum type.
	Duration *uint32 `protobuf:"varint,3,req,name=duration" json:"duration,omitempty"`
	// Order execution instruction.
	// This field is associated with Order.ExecInstruction enum type.
	ExecInstruction *uint32 `protobuf:"varint,4,req,name=exec_instruction,json=execInstruction" json:"exec_instruction,omitempty"`
	// Whether the algo strategy is required to be set for the order.
	AlgoStrategyRequired *bool `protobuf:"varint,5,opt,name=algo_strategy_required,json=algoStrategyRequired" json:"algo_strategy_required,omitempty"`
	// List of algo strategies enabled for the order (abbreviations).
	AlgoStrategies []string `protobuf:"bytes,6,rep,name=algo_strategies,json=algoStrategies" json:"algo_strategies,omitempty"`
}

func (x *OrderEntitlement) Reset() {
	*x = OrderEntitlement{}
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderEntitlement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderEntitlement) ProtoMessage() {}

func (x *OrderEntitlement) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderEntitlement.ProtoReflect.Descriptor instead.
func (*OrderEntitlement) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{27}
}

func (x *OrderEntitlement) GetOrderType() uint32 {
	if x != nil && x.OrderType != nil {
		return *x.OrderType
	}
	return 0
}

func (x *OrderEntitlement) GetIsSynthetic() bool {
	if x != nil && x.IsSynthetic != nil {
		return *x.IsSynthetic
	}
	return false
}

func (x *OrderEntitlement) GetDuration() uint32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *OrderEntitlement) GetExecInstruction() uint32 {
	if x != nil && x.ExecInstruction != nil {
		return *x.ExecInstruction
	}
	return 0
}

func (x *OrderEntitlement) GetAlgoStrategyRequired() bool {
	if x != nil && x.AlgoStrategyRequired != nil {
		return *x.AlgoStrategyRequired
	}
	return false
}

func (x *OrderEntitlement) GetAlgoStrategies() []string {
	if x != nil {
		return x.AlgoStrategies
	}
	return nil
}

// Cross order parameters.
// This message allows to report or register privately negotiated pre-agreed
// transactions with one or multiple counter parties. Matching at exchange can
// either immediately occur when the request is submitted as a dual-sided
// or will occur when the different counterparts have all replied
// to the cross order initiator (see ApproveOrder message).
// Examples of these transactions: cross orders, Approved Publication
// Arrangement (APA) and wholesale orders.
// Transaction type is chosen by specifying corresponding execution instruction
// (see Order.ExecInstruction). Note that some transaction types have various
// exchange specific custom parameters (e.g. see Order.extra_attribute,
// SideAllocation.extra_attributes and ApproveOrder.extra_attributes).
// All these transaction types are referred to as "cross orders" within the
// protocol for simplicity.
//
// Note that exchanges may support LegAllocation as independent children of a
// cross order. This is used when each leg is an independent trade, so submitting the
// cross order on a recognized strategy symbol is not possible. In this case, the
// cross order symbol is a exchange-specific placeholder agreed between client and server
// rather than a tradable symbol.
//
// Possible scenarios:
//  1. Dual-sided submission (no match process)
//     Initiator submits a cross order and specifies all participants involved
//     on buy and sell sides of the order; approve from the participants may be
//     required for some exchanges.
//     Two or more side allocations are provided for this type of cross order.
//  2. Single-sided submission
//     Each participant submits its own side (buy or sell) of a cross order.
//     Matching could be done with an associated identifier (see transaction_id
//     field) or with an approve request.
//     One side allocation is provided for this type of cross order.
//  3. Approved Publication Arrangement (APA)
//     Allows users to publish trade reports in all instruments subject to the
//     OTC publication requirement.
//     No side allocations are provided for this type of cross order.
type CrossOrderParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Side allocations of the cross order.
	SideAllocations []*SideAllocation `protobuf:"bytes,1,rep,name=side_allocations,json=sideAllocations" json:"side_allocations,omitempty"`
	// Price of the cross order (in correct format).
	Price *float64 `protobuf:"fixed64,2,opt,name=price" json:"price,omitempty"`
	// Optional ID that can be used to associate the single-sided
	// cross orders with the same transaction (used by Euronext exchange).
	TransactionId *string `protobuf:"bytes,3,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"`
	// Leg allocations of the cross order.
	LegAllocations []*LegAllocation `protobuf:"bytes,4,rep,name=leg_allocations,json=legAllocations" json:"leg_allocations,omitempty"`
}

func (x *CrossOrderParameters) Reset() {
	*x = CrossOrderParameters{}
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CrossOrderParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossOrderParameters) ProtoMessage() {}

func (x *CrossOrderParameters) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrossOrderParameters.ProtoReflect.Descriptor instead.
func (*CrossOrderParameters) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{28}
}

func (x *CrossOrderParameters) GetSideAllocations() []*SideAllocation {
	if x != nil {
		return x.SideAllocations
	}
	return nil
}

func (x *CrossOrderParameters) GetPrice() float64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *CrossOrderParameters) GetTransactionId() string {
	if x != nil && x.TransactionId != nil {
		return *x.TransactionId
	}
	return ""
}

func (x *CrossOrderParameters) GetLegAllocations() []*LegAllocation {
	if x != nil {
		return x.LegAllocations
	}
	return nil
}

// Side allocation of the cross order.
type SideAllocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the side allocation record, this field is generated by
	// server.
	// Client should set this field to modify/approve existing side allocation.
	SideId *int64 `protobuf:"zigzag64,1,opt,name=side_id,json=sideId" json:"side_id,omitempty"`
	// Either this or external_account field must be specified.
	AccountId *int32 `protobuf:"zigzag32,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// Either this or account_id field must be specified.
	ExternalAccount *ExternalAccount `protobuf:"bytes,3,opt,name=external_account,json=externalAccount" json:"external_account,omitempty"`
	// Allocation size, is only used for some particular scenarios
	// (like strategies on options for Euronext), in regular scenarios
	// the attribute is omitted.
	Qty *common.Decimal `protobuf:"bytes,4,opt,name=qty" json:"qty,omitempty"`
	// Allocation side.
	// This field is associated with Order.Side enum type.
	// It is a required field.
	Side *uint32 `protobuf:"varint,5,opt,name=side" json:"side,omitempty"`
	// List of side allocation extra attributes.
	ExtraAttributes []*common.NamedValue `protobuf:"bytes,6,rep,name=extra_attributes,json=extraAttributes" json:"extra_attributes,omitempty"`
}

func (x *SideAllocation) Reset() {
	*x = SideAllocation{}
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SideAllocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SideAllocation) ProtoMessage() {}

func (x *SideAllocation) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SideAllocation.ProtoReflect.Descriptor instead.
func (*SideAllocation) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{29}
}

func (x *SideAllocation) GetSideId() int64 {
	if x != nil && x.SideId != nil {
		return *x.SideId
	}
	return 0
}

func (x *SideAllocation) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *SideAllocation) GetExternalAccount() *ExternalAccount {
	if x != nil {
		return x.ExternalAccount
	}
	return nil
}

func (x *SideAllocation) GetQty() *common.Decimal {
	if x != nil {
		return x.Qty
	}
	return nil
}

func (x *SideAllocation) GetSide() uint32 {
	if x != nil && x.Side != nil {
		return *x.Side
	}
	return 0
}

func (x *SideAllocation) GetExtraAttributes() []*common.NamedValue {
	if x != nil {
		return x.ExtraAttributes
	}
	return nil
}

// Leg allocation of the cross order
type LegAllocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Server side contract Id of the leg (see ContractMetadata message).
	// It is a required field.
	ContractId *uint32 `protobuf:"varint,1,opt,name=contract_id,json=contractId" json:"contract_id,omitempty"`
	// Size of the leg.
	Qty *common.Decimal `protobuf:"bytes,2,opt,name=qty" json:"qty,omitempty"`
	// Price of the leg (in correct format).
	// It is a required field.
	Price *float64 `protobuf:"fixed64,3,opt,name=price" json:"price,omitempty"`
	// Side of the leg, for exchanges that support LegAllocation as independent
	// child of CrossOrderParameters rather than child of SideAllocation.
	// This field is associated with Order.Side enum type.
	Side *uint32 `protobuf:"varint,4,opt,name=side" json:"side,omitempty"`
	// Identifier of the leg allocation record, this field is generated by server.
	// Client may require to set this field to modify/approve existing leg allocation.
	LegAllocId *int64 `protobuf:"zigzag64,5,opt,name=leg_alloc_id,json=legAllocId" json:"leg_alloc_id,omitempty"`
	// Identifier assigned to a trade by a matching system.
	// This field is only sent from server to client.
	// Check if the field is supported for specific execution system.
	TradeMatchId *string `protobuf:"bytes,6,opt,name=trade_match_id,json=tradeMatchId" json:"trade_match_id,omitempty"`
}

func (x *LegAllocation) Reset() {
	*x = LegAllocation{}
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LegAllocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegAllocation) ProtoMessage() {}

func (x *LegAllocation) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegAllocation.ProtoReflect.Descriptor instead.
func (*LegAllocation) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{30}
}

func (x *LegAllocation) GetContractId() uint32 {
	if x != nil && x.ContractId != nil {
		return *x.ContractId
	}
	return 0
}

func (x *LegAllocation) GetQty() *common.Decimal {
	if x != nil {
		return x.Qty
	}
	return nil
}

func (x *LegAllocation) GetPrice() float64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *LegAllocation) GetSide() uint32 {
	if x != nil && x.Side != nil {
		return *x.Side
	}
	return 0
}

func (x *LegAllocation) GetLegAllocId() int64 {
	if x != nil && x.LegAllocId != nil {
		return *x.LegAllocId
	}
	return 0
}

func (x *LegAllocation) GetTradeMatchId() string {
	if x != nil && x.TradeMatchId != nil {
		return *x.TradeMatchId
	}
	return ""
}

// Account related information that is specific for the exchange and/or the
// brokerage.
type ExternalAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of account within the exchange's Member to place order
	// on it.
	// This account can be external for CQG.
	ExternalAccountNumber *string `protobuf:"bytes,1,opt,name=external_account_number,json=externalAccountNumber" json:"external_account_number,omitempty"`
	// Account type (aka Customer Type Indicator), values are specific per
	// execution systems.
	AccountType *string `protobuf:"bytes,2,opt,name=account_type,json=accountType" json:"account_type,omitempty"`
	// Account origin, values are specific per execution systems.
	AccountOrigin *string `protobuf:"bytes,3,opt,name=account_origin,json=accountOrigin" json:"account_origin,omitempty"`
	// Member ID that 'takes up' this account on the target exchange.
	// Should be considered only if account is 'give up'. Can be empty for
	// 'give up' accounts too, means that Member is not specified for current
	// account.
	GiveUpMemberId *string `protobuf:"bytes,4,opt,name=give_up_member_id,json=giveUpMemberId" json:"give_up_member_id,omitempty"`
}

func (x *ExternalAccount) Reset() {
	*x = ExternalAccount{}
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExternalAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalAccount) ProtoMessage() {}

func (x *ExternalAccount) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalAccount.ProtoReflect.Descriptor instead.
func (*ExternalAccount) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{31}
}

func (x *ExternalAccount) GetExternalAccountNumber() string {
	if x != nil && x.ExternalAccountNumber != nil {
		return *x.ExternalAccountNumber
	}
	return ""
}

func (x *ExternalAccount) GetAccountType() string {
	if x != nil && x.AccountType != nil {
		return *x.AccountType
	}
	return ""
}

func (x *ExternalAccount) GetAccountOrigin() string {
	if x != nil && x.AccountOrigin != nil {
		return *x.AccountOrigin
	}
	return ""
}

func (x *ExternalAccount) GetGiveUpMemberId() string {
	if x != nil && x.GiveUpMemberId != nil {
		return *x.GiveUpMemberId
	}
	return ""
}

// This message is sent by contra to approve the alleged order of CROSS type.
// See CrossOrderParameters message for details.
type ApproveOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Order id assigned by server after last modification.
	// It is a required field.
	OrderId *string `protobuf:"bytes,1,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	// ID of the order's account.
	// It is a required field.
	AccountId *int32 `protobuf:"zigzag32,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// This field is associated with Action enum type.
	// APPROVE is used if this field is empty.
	Action *uint32 `protobuf:"varint,3,opt,name=action" json:"action,omitempty"`
	// Client side time when an approve order request was submitted (UTC).
	// It is a required field.
	WhenUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=when_utc_timestamp,json=whenUtcTimestamp" json:"when_utc_timestamp,omitempty"`
	// The contra is expected to provide its own side of the cross order in this
	// field.
	// It is a required field.
	SideAllocation *SideAllocation `protobuf:"bytes,5,opt,name=side_allocation,json=sideAllocation" json:"side_allocation,omitempty"`
	// List of extra attributes.
	ExtraAttributes []*common.NamedValue `protobuf:"bytes,6,rep,name=extra_attributes,json=extraAttributes" json:"extra_attributes,omitempty"`
}

func (x *ApproveOrder) Reset() {
	*x = ApproveOrder{}
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApproveOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveOrder) ProtoMessage() {}

func (x *ApproveOrder) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveOrder.ProtoReflect.Descriptor instead.
func (*ApproveOrder) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{32}
}

func (x *ApproveOrder) GetOrderId() string {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return ""
}

func (x *ApproveOrder) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *ApproveOrder) GetAction() uint32 {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return 0
}

func (x *ApproveOrder) GetWhenUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.WhenUtcTimestamp
	}
	return nil
}

func (x *ApproveOrder) GetSideAllocation() *SideAllocation {
	if x != nil {
		return x.SideAllocation
	}
	return nil
}

func (x *ApproveOrder) GetExtraAttributes() []*common.NamedValue {
	if x != nil {
		return x.ExtraAttributes
	}
	return nil
}

// Fill specific care order.
// This message is sent in order to fill care order without sending it to
// exchange.
type FillCareOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Execution ID of the fill.
	// It is a required field.
	ExecId *string `protobuf:"bytes,1,opt,name=exec_id,json=execId" json:"exec_id,omitempty"`
	// Unique id used to identify filled order.
	FillCareOrderRequestId *string `protobuf:"bytes,2,opt,name=fill_care_order_request_id,json=fillCareOrderRequestId" json:"fill_care_order_request_id,omitempty"`
	// Price for the fill in correct price format.
	// It is a required field.
	FillPrice *float64 `protobuf:"fixed64,3,opt,name=fill_price,json=fillPrice" json:"fill_price,omitempty"`
	// Quantity to fill for the order.
	// It is a required field.
	FillQty *common.Decimal `protobuf:"bytes,4,opt,name=fill_qty,json=fillQty" json:"fill_qty,omitempty"`
	// Order id being filled. See OrderStatus.order_id.
	// It is a required field.
	OrderId *string `protobuf:"bytes,5,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	// ID of the order's account.
	// It is a required field.
	AccountId *int32 `protobuf:"zigzag32,6,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// Holds information about fill parameters of spread legs.
	OrderLegs []*FillCareOrderLeg `protobuf:"bytes,7,rep,name=order_legs,json=orderLegs" json:"order_legs,omitempty"`
	// Holds information about parameters of opposite-side fill.
	OppositeSide *FillCareOppositeSide `protobuf:"bytes,8,opt,name=opposite_side,json=oppositeSide" json:"opposite_side,omitempty"`
}

func (x *FillCareOrder) Reset() {
	*x = FillCareOrder{}
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FillCareOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FillCareOrder) ProtoMessage() {}

func (x *FillCareOrder) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FillCareOrder.ProtoReflect.Descriptor instead.
func (*FillCareOrder) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{33}
}

func (x *FillCareOrder) GetExecId() string {
	if x != nil && x.ExecId != nil {
		return *x.ExecId
	}
	return ""
}

func (x *FillCareOrder) GetFillCareOrderRequestId() string {
	if x != nil && x.FillCareOrderRequestId != nil {
		return *x.FillCareOrderRequestId
	}
	return ""
}

func (x *FillCareOrder) GetFillPrice() float64 {
	if x != nil && x.FillPrice != nil {
		return *x.FillPrice
	}
	return 0
}

func (x *FillCareOrder) GetFillQty() *common.Decimal {
	if x != nil {
		return x.FillQty
	}
	return nil
}

func (x *FillCareOrder) GetOrderId() string {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return ""
}

func (x *FillCareOrder) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *FillCareOrder) GetOrderLegs() []*FillCareOrderLeg {
	if x != nil {
		return x.OrderLegs
	}
	return nil
}

func (x *FillCareOrder) GetOppositeSide() *FillCareOppositeSide {
	if x != nil {
		return x.OppositeSide
	}
	return nil
}

// Provides fill parameters of native strategy order's leg during FillCareOrder.
type FillCareOrderLeg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Execution ID of the leg fill.
	// It is a required field.
	LegExecId *string `protobuf:"bytes,1,opt,name=leg_exec_id,json=legExecId" json:"leg_exec_id,omitempty"`
	// Note: use node_path instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
	NodeIndex *uint32 `protobuf:"varint,2,opt,name=node_index,json=nodeIndex" json:"node_index,omitempty"`
	// Path in the tree of the strategy from the root to the leg node.
	// The format is described in the header of strategy_definition_2.StrategyDefinition message.
	NodePath *string `protobuf:"bytes,5,opt,name=node_path,json=nodePath" json:"node_path,omitempty"`
	// Price for the leg fill in correct price format.
	// It is a required field.
	FillPrice *float64 `protobuf:"fixed64,3,opt,name=fill_price,json=fillPrice" json:"fill_price,omitempty"`
	// Quantity for the leg fill.
	// It is a required field.
	FillQty *common.Decimal `protobuf:"bytes,4,opt,name=fill_qty,json=fillQty" json:"fill_qty,omitempty"`
}

func (x *FillCareOrderLeg) Reset() {
	*x = FillCareOrderLeg{}
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FillCareOrderLeg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FillCareOrderLeg) ProtoMessage() {}

func (x *FillCareOrderLeg) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FillCareOrderLeg.ProtoReflect.Descriptor instead.
func (*FillCareOrderLeg) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{34}
}

func (x *FillCareOrderLeg) GetLegExecId() string {
	if x != nil && x.LegExecId != nil {
		return *x.LegExecId
	}
	return ""
}

// Deprecated: Marked as deprecated in protos/WebAPI/order_2.proto.
func (x *FillCareOrderLeg) GetNodeIndex() uint32 {
	if x != nil && x.NodeIndex != nil {
		return *x.NodeIndex
	}
	return 0
}

func (x *FillCareOrderLeg) GetNodePath() string {
	if x != nil && x.NodePath != nil {
		return *x.NodePath
	}
	return ""
}

func (x *FillCareOrderLeg) GetFillPrice() float64 {
	if x != nil && x.FillPrice != nil {
		return *x.FillPrice
	}
	return 0
}

func (x *FillCareOrderLeg) GetFillQty() *common.Decimal {
	if x != nil {
		return x.FillQty
	}
	return nil
}

// Provides parameters of opposite-side fill during FillCareOrder.
type FillCareOppositeSide struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Execution ID of opposite-side fill.
	// It is a required field.
	ExecId *string `protobuf:"bytes,1,opt,name=exec_id,json=execId" json:"exec_id,omitempty"`
	// ID of opposite-side care order to fill,
	// Can be ommitted if create_new_order=true.
	OrderId *string `protobuf:"bytes,2,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	// Instruction to create a new order for opposite-side fill.
	CreateNewOrder *bool `protobuf:"varint,3,opt,name=create_new_order,json=createNewOrder" json:"create_new_order,omitempty"`
	// ID of the opposite-side fill's account.
	// It is a required field.
	AccountId *int32 `protobuf:"zigzag32,4,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// Holds information about fill parameters of spread legs.
	OrderLegs []*FillCareOrderLeg `protobuf:"bytes,5,rep,name=order_legs,json=orderLegs" json:"order_legs,omitempty"`
}

func (x *FillCareOppositeSide) Reset() {
	*x = FillCareOppositeSide{}
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FillCareOppositeSide) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FillCareOppositeSide) ProtoMessage() {}

func (x *FillCareOppositeSide) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FillCareOppositeSide.ProtoReflect.Descriptor instead.
func (*FillCareOppositeSide) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{35}
}

func (x *FillCareOppositeSide) GetExecId() string {
	if x != nil && x.ExecId != nil {
		return *x.ExecId
	}
	return ""
}

func (x *FillCareOppositeSide) GetOrderId() string {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return ""
}

func (x *FillCareOppositeSide) GetCreateNewOrder() bool {
	if x != nil && x.CreateNewOrder != nil {
		return *x.CreateNewOrder
	}
	return false
}

func (x *FillCareOppositeSide) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *FillCareOppositeSide) GetOrderLegs() []*FillCareOrderLeg {
	if x != nil {
		return x.OrderLegs
	}
	return nil
}

// Allows to get an order status with all transactions.
// Works for current day and historical orders, with
// the exception of unfilled leg orders of
// non-failed synthetic strategy orders.
type OrderStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Chain order id from an order status.
	// See OrderStatus.chain_order_id.
	// It is a required field.
	ChainOrderId *string `protobuf:"bytes,1,opt,name=chain_order_id,json=chainOrderId" json:"chain_order_id,omitempty"`
	// ID of the order's account.
	// It is a required field.
	AccountId *int32 `protobuf:"zigzag32,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (x *OrderStatusRequest) Reset() {
	*x = OrderStatusRequest{}
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderStatusRequest) ProtoMessage() {}

func (x *OrderStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderStatusRequest.ProtoReflect.Descriptor instead.
func (*OrderStatusRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{36}
}

func (x *OrderStatusRequest) GetChainOrderId() string {
	if x != nil && x.ChainOrderId != nil {
		return *x.ChainOrderId
	}
	return ""
}

func (x *OrderStatusRequest) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

// Report with requested information in OrderStatusRequest
type OrderStatusReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Order status with all transactions, if found.
	OrderStatus *OrderStatus `protobuf:"bytes,1,opt,name=order_status,json=orderStatus" json:"order_status,omitempty"`
}

func (x *OrderStatusReport) Reset() {
	*x = OrderStatusReport{}
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderStatusReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderStatusReport) ProtoMessage() {}

func (x *OrderStatusReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_order_2_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderStatusReport.ProtoReflect.Descriptor instead.
func (*OrderStatusReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_order_2_proto_rawDescGZIP(), []int{37}
}

func (x *OrderStatusReport) GetOrderStatus() *OrderStatus {
	if x != nil {
		return x.OrderStatus
	}
	return nil
}

var File_protos_WebAPI_order_2_proto protoreflect.FileDescriptor

var file_protos_WebAPI_order_2_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49, 0x2f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x32, 0x1a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57,
	0x65, 0x62, 0x41, 0x50, 0x49, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57,
	0x65, 0x62, 0x41, 0x50, 0x49, 0x2f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57,
	0x65, 0x62, 0x41, 0x50, 0x49, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x5f, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x23, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x31, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa5, 0x01, 0x0a, 0x12, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x0a, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a,
	0x0c, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x31,
	0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x60,
	0x0a, 0x0f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63,
	0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x04, 0x77, 0x68, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x77, 0x68, 0x65, 0x6e,
	0x22, 0xce, 0x14, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x73, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x69, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78,
	0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x44, 0x6f, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x0f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x12, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x18, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x12, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x12, 0x42, 0x02, 0x18, 0x01, 0x52, 0x11, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x18, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x19, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x16, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x2a, 0x0a, 0x0f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x5f,
	0x71, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x6c, 0x51, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x07, 0x66, 0x69,
	0x6c, 0x6c, 0x51, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x6e,
	0x74, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x6c, 0x43, 0x6e, 0x74,
	0x12, 0x31, 0x0a, 0x15, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x66,
	0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x02, 0x28, 0x12, 0x52,
	0x12, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x41, 0x76, 0x67, 0x46, 0x69, 0x6c, 0x6c, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x61, 0x76, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x18, 0x1b, 0x20,
	0x02, 0x28, 0x01, 0x52, 0x13, 0x61, 0x76, 0x67, 0x46, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x12, 0x2f, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x12, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x41, 0x74, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x17, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x74,
	0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x34, 0x0a, 0x14,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x71, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x12,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x51,
	0x74, 0x79, 0x12, 0x31, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x71, 0x74, 0x79, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x51, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x32, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x14, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x14, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x74, 0x63, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x4c, 0x0a, 0x14, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x48, 0x0a,
	0x12, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x66, 0x69, 0x6c, 0x6c, 0x55, 0x74, 0x63, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3e, 0x0a, 0x1a, 0x68, 0x61, 0x73, 0x5f, 0x66,
	0x69, 0x6c, 0x6c, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x16, 0x68, 0x61, 0x73, 0x46, 0x69, 0x6c, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x51, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x1c, 0x68, 0x61, 0x73, 0x5f, 0x66,
	0x69, 0x6c, 0x6c, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x18, 0x68, 0x61, 0x73, 0x46, 0x69, 0x6c, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x10,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x02, 0x28,
	0x12, 0x52, 0x12, 0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x10,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x14,
	0x20, 0x02, 0x28, 0x11, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x59, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x68, 0x61, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x13, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x5f, 0x32, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x12, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x19, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x26, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x5f, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x6c, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x11, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63,
	0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x38, 0x0a, 0x18, 0x6d, 0x69, 0x66, 0x69, 0x64, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x6d, 0x69, 0x66, 0x69, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x20, 0x6d, 0x69,
	0x66, 0x69, 0x64, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x18, 0x2a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x6d, 0x69, 0x66, 0x69, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x73, 0x41, 0x6c,
	0x67, 0x6f, 0x12, 0x3a, 0x0a, 0x19, 0x6d, 0x69, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6d, 0x69, 0x66, 0x69, 0x64, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x48,
	0x0a, 0x21, 0x6d, 0x69, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x73, 0x5f, 0x61,
	0x6c, 0x67, 0x6f, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x6d, 0x69, 0x66, 0x69, 0x64,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x73, 0x41, 0x6c, 0x67, 0x6f, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x2d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x2e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x1a, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x61,
	0x72, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x66, 0x69, 0x6c, 0x6c, 0x43,
	0x61, 0x72, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x22, 0xe0, 0x1a, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1d, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x07, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x12, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x28, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x24, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0a,
	0x72, 0x65, 0x66, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x10, 0x6f, 0x72,
	0x69, 0x67, 0x5f, 0x63, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x43, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x63, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x0f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x66, 0x69,
	0x6c, 0x6c, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x0d, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x6c, 0x51, 0x74, 0x79, 0x12,
	0x27, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52,
	0x07, 0x66, 0x69, 0x6c, 0x6c, 0x51, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x12, 0x52, 0x0f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x6c, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x32, 0x2e, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x12,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x6c, 0x65, 0x67, 0x5f, 0x66, 0x69, 0x6c,
	0x6c, 0x73, 0x18, 0x26, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x5f, 0x32, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x4c, 0x65,
	0x67, 0x46, 0x69, 0x6c, 0x6c, 0x52, 0x10, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x4c,
	0x65, 0x67, 0x46, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x40, 0x0a, 0x0e, 0x73, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x74, 0x69, 0x63, 0x5f, 0x68, 0x61, 0x6e, 0x67, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x32, 0x2e, 0x53, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x48, 0x61, 0x6e, 0x67, 0x52, 0x0d, 0x73, 0x79, 0x6e, 0x74,
	0x68, 0x65, 0x74, 0x69, 0x63, 0x48, 0x61, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x15, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x71,
	0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x12, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x50, 0x72, 0x65, 0x76, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x74, 0x79,
	0x12, 0x32, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x71,
	0x74, 0x79, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x51, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x10, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x0e, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x51,
	0x74, 0x79, 0x12, 0x29, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x71, 0x74, 0x79, 0x18,
	0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x74, 0x79, 0x12, 0x35, 0x0a,
	0x17, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x12, 0x52, 0x14,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x50, 0x72, 0x65, 0x76, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x12,
	0x52, 0x10, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x65,
	0x76, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x13, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x50, 0x72, 0x65, 0x76, 0x53, 0x74,
	0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x0f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x17, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x70, 0x72,
	0x65, 0x76, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x14, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x50, 0x72, 0x65, 0x76, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x51, 0x74, 0x79, 0x12, 0x36,
	0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x71,
	0x74, 0x79, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x51, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x12, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x10, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x69,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x51, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x0b, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0a, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x51, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x1b, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x17, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x50, 0x72, 0x65, 0x76, 0x4d, 0x69, 0x6e, 0x56,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x51, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x14, 0x70, 0x72, 0x65,
	0x76, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x71, 0x74,
	0x79, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x11, 0x70, 0x72, 0x65, 0x76, 0x4d, 0x69, 0x6e, 0x56, 0x69,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x51, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x16, 0x75, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x71,
	0x74, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x13, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x4d, 0x69, 0x6e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x51, 0x74,
	0x79, 0x12, 0x34, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x5f, 0x71, 0x74, 0x79, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x56, 0x69, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x51, 0x74, 0x79, 0x12, 0x33, 0x0a, 0x14, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x71, 0x74, 0x79, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x11, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x50, 0x72, 0x65, 0x76, 0x46, 0x69, 0x6c, 0x6c, 0x51, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x0d,
	0x70, 0x72, 0x65, 0x76, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x3b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x46, 0x69, 0x6c, 0x6c, 0x51, 0x74, 0x79, 0x12, 0x33,
	0x0a, 0x16, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x66, 0x69,
	0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x12, 0x52, 0x13,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x50, 0x72, 0x65, 0x76, 0x46, 0x69, 0x6c, 0x6c, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x72,
	0x65, 0x76, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72,
	0x65, 0x76, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x14, 0x70, 0x72, 0x65, 0x76,
	0x45, 0x78, 0x65, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2b, 0x0a, 0x11, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x65, 0x78, 0x65,
	0x63, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d,
	0x0a, 0x13, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x74, 0x68, 0x72, 0x75,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x12, 0x52, 0x10, 0x70, 0x72, 0x65,
	0x76, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x68, 0x72, 0x75, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x74, 0x68, 0x72, 0x75, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0c, 0x67, 0x6f, 0x6f, 0x64, 0x54, 0x68, 0x72, 0x75, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x66, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x12, 0x29, 0x0a, 0x11, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x43, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x38, 0x0a, 0x17, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x74, 0x68, 0x72,
	0x75, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x12,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x13, 0x70, 0x72, 0x65, 0x76, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x68,
	0x72, 0x75, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5a, 0x0a, 0x1c, 0x70, 0x72, 0x65,
	0x76, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x74, 0x68, 0x72, 0x75, 0x5f, 0x75, 0x74, 0x63, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x18, 0x70, 0x72, 0x65,
	0x76, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x68, 0x72, 0x75, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2f, 0x0a, 0x12, 0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x74, 0x68,
	0x72, 0x75, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x12, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x67, 0x6f, 0x6f, 0x64, 0x54, 0x68, 0x72, 0x75, 0x55,
	0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x17, 0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x74,
	0x68, 0x72, 0x75, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x14, 0x67, 0x6f, 0x6f, 0x64, 0x54, 0x68, 0x72, 0x75, 0x55, 0x74, 0x63,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x18, 0x40, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x69, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x12, 0x43,
	0x0a, 0x1e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x21, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74,
	0x6f, 0x72, 0x79, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x6d, 0x69, 0x66, 0x69, 0x64, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x69, 0x66, 0x69,
	0x64, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17,
	0x6d, 0x69, 0x66, 0x69, 0x64, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f,
	0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6d,
	0x69, 0x66, 0x69, 0x64, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x49, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x6d, 0x69, 0x66, 0x69, 0x64, 0x5f, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6d, 0x69, 0x66, 0x69, 0x64, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x49, 0x64,
	0x12, 0x44, 0x0a, 0x1f, 0x6d, 0x69, 0x66, 0x69, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x6d, 0x69, 0x66, 0x69, 0x64,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x6d, 0x69, 0x66, 0x69, 0x64, 0x5f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6d, 0x69, 0x66, 0x69, 0x64, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x46, 0x0a, 0x20, 0x6d, 0x69, 0x66, 0x69, 0x64, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x73, 0x5f,
	0x61, 0x6c, 0x67, 0x6f, 0x18, 0x43, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x6d, 0x69, 0x66, 0x69,
	0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x73, 0x41, 0x6c, 0x67, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x30, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x70, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x73, 0x70, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x3c, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x66,
	0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a,
	0x19, 0x6d, 0x69, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x17, 0x6d, 0x69, 0x66, 0x69, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x21, 0x6d, 0x69, 0x66,
	0x69, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x18, 0x3e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x6d, 0x69, 0x66, 0x69, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x73, 0x41,
	0x6c, 0x67, 0x6f, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x3f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x18, 0x41, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x73, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x42, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x12, 0x3a, 0x0a, 0x1a, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x61, 0x72, 0x65, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x44,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x66, 0x69, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x45, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x4a, 0x04, 0x08, 0x32, 0x10, 0x33, 0x4a, 0x04,
	0x08, 0x33, 0x10, 0x34, 0x22, 0x95, 0x06, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x12, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x28, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x12, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x13, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x74, 0x72, 0x61, 0x64, 0x65, 0x55, 0x74, 0x63, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x12, 0x52, 0x09, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x12, 0x52, 0x0b, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x18, 0x0d, 0x20, 0x02, 0x28, 0x01,
	0x52, 0x0c, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69,
	0x64, 0x65, 0x12, 0x21, 0x0a, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x71, 0x74, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x75, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x51, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x03, 0x71, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x52, 0x03, 0x71, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x74, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x76, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x65, 0x67,
	0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x65, 0x67, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12,
	0x29, 0x0a, 0x10, 0x73, 0x70, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x70, 0x65, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x14, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x48, 0x0a, 0x15, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x31, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x66, 0x69, 0x6c, 0x6c, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x5d, 0x0a, 0x0a,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x01, 0x52,
	0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa0, 0x02, 0x0a, 0x16,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6c,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64,
	0x12, 0x5a, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0a, 0x6c, 0x6f, 0x73, 0x73, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0f, 0x73,
	0x74, 0x6f, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x9e,
	0x01, 0x0a, 0x1b, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x24,
	0x0a, 0x0e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x59, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x32,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e,
	0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x22,
	0xbf, 0x18, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x11, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0d, 0x77, 0x68, 0x65, 0x6e,
	0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x12, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x0b, 0x77, 0x68, 0x65, 0x6e, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x48, 0x0a, 0x12, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x77, 0x68, 0x65, 0x6e, 0x55, 0x74,
	0x63, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x63,
	0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x78,
	0x65, 0x63, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x65, 0x78, 0x65, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x74, 0x68, 0x72, 0x75,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0c, 0x67, 0x6f, 0x6f,
	0x64, 0x54, 0x68, 0x72, 0x75, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x64,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x12, 0x52, 0x10, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x53, 0x74,
	0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x09, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x51, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x12, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x71, 0x74, 0x79,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x10, 0x75, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x51, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x16,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x13, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4d, 0x69, 0x6e, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x51, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x03, 0x71, 0x74, 0x79, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x52, 0x03, 0x71, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x5f, 0x71, 0x74, 0x79, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x51, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0d, 0x6d, 0x69, 0x6e,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x51, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x09, 0x69, 0x73,
	0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x08, 0x69, 0x73, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x08, 0x69,
	0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x07, 0x69, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73,
	0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x69, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x12,
	0x2e, 0x0a, 0x13, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x12, 0x52, 0x11, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x64, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x67, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x50,
	0x65, 0x67, 0x12, 0x30, 0x0a, 0x12, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x10, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x51, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f,
	0x71, 0x74, 0x79, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0a, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x51, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x13, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x12,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x18, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x16, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a,
	0x13, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x74, 0x63, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x12, 0x42, 0x02, 0x18, 0x01, 0x52, 0x11,
	0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x54, 0x0a, 0x18, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x16, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x74, 0x63, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x48, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x5f, 0x32, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x3f, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x26, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x5f, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x67, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6c, 0x67, 0x6f, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x2f, 0x0a, 0x12, 0x67, 0x6f, 0x6f, 0x64, 0x5f,
	0x74, 0x68, 0x72, 0x75, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x12, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x67, 0x6f, 0x6f, 0x64, 0x54, 0x68, 0x72,
	0x75, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x17, 0x67, 0x6f, 0x6f, 0x64,
	0x5f, 0x74, 0x68, 0x72, 0x75, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x67, 0x6f, 0x6f, 0x64, 0x54, 0x68, 0x72, 0x75, 0x55,
	0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3f, 0x0a, 0x19, 0x69,
	0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04,
	0x74, 0x72, 0x75, 0x65, 0x52, 0x16, 0x69, 0x73, 0x55, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x65, 0x0a, 0x1b,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x32, 0x2e, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x19, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x70, 0x65,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x70, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x53, 0x0a, 0x16, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x32, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x14,
	0x63, 0x72, 0x6f, 0x73, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0d,
	0x69, 0x73, 0x5f, 0x63, 0x61, 0x72, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x2c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x61, 0x72, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x22, 0x23, 0x0a, 0x04, 0x53, 0x69, 0x64, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x49, 0x44, 0x45,
	0x5f, 0x42, 0x55, 0x59, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x53,
	0x45, 0x4c, 0x4c, 0x10, 0x02, 0x22, 0x71, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x4b, 0x54, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4d, 0x54, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x50, 0x10, 0x03, 0x12, 0x12,
	0x0a, 0x0e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x4c,
	0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x52, 0x4f, 0x53, 0x53, 0x10, 0x05, 0x22, 0xaa, 0x03, 0x0a, 0x0f, 0x45, 0x78, 0x65,
	0x63, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x15,
	0x45, 0x58, 0x45, 0x43, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x0c, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x58, 0x45, 0x43, 0x5f,
	0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4f, 0x4e, 0x10,
	0x01, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x58, 0x45, 0x43, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x43, 0x45, 0x42, 0x45, 0x52, 0x47, 0x10, 0x02, 0x12,
	0x17, 0x0a, 0x13, 0x45, 0x58, 0x45, 0x43, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x54, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x58, 0x45, 0x43,
	0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x41,
	0x49, 0x4c, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x58, 0x45, 0x43, 0x5f, 0x49, 0x4e, 0x53,
	0x54, 0x52, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x55, 0x4e, 0x41, 0x52, 0x49, 0x10,
	0x05, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x58, 0x45, 0x43, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x54, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x45,
	0x58, 0x45, 0x43, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4d, 0x4c, 0x4d, 0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x58, 0x45, 0x43, 0x5f, 0x49, 0x4e,
	0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x4f, 0x4e,
	0x4c, 0x59, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x58, 0x45, 0x43, 0x5f, 0x49, 0x4e, 0x53,
	0x54, 0x52, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x54, 0x4c, 0x10, 0x0a, 0x12, 0x1c,
	0x0a, 0x18, 0x45, 0x58, 0x45, 0x43, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0b, 0x12, 0x1f, 0x0a, 0x1b,
	0x45, 0x58, 0x45, 0x43, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x54, 0x41, 0x4e, 0x59, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x0d, 0x12, 0x1f, 0x0a,
	0x1b, 0x45, 0x58, 0x45, 0x43, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4c, 0x4d, 0x54, 0x5f, 0x50, 0x52, 0x41, 0x52, 0x47, 0x44, 0x10, 0x0e, 0x12, 0x18,
	0x0a, 0x14, 0x45, 0x58, 0x45, 0x43, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x43, 0x4f, 0x10, 0x0f, 0x22, 0x04, 0x08, 0x09, 0x10, 0x09, 0x22, 0x05,
	0x08, 0x64, 0x10, 0xc7, 0x01, 0x22, 0xac, 0x01, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44,
	0x41, 0x59, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x47, 0x54, 0x43, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x47, 0x54, 0x44, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x55, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x54, 0x54, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x55,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x4b, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c,
	0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x4f, 0x4b, 0x10, 0x06, 0x12, 0x10,
	0x0a, 0x0c, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x4f, 0x10, 0x07,
	0x12, 0x10, 0x0a, 0x0c, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x43,
	0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47,
	0x46, 0x41, 0x10, 0x09, 0x22, 0x5d, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67,
	0x50, 0x65, 0x67, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x52, 0x41, 0x49, 0x4c, 0x49, 0x4e, 0x47, 0x5f,
	0x50, 0x45, 0x47, 0x5f, 0x42, 0x45, 0x53, 0x54, 0x42, 0x49, 0x44, 0x10, 0x01, 0x12, 0x18, 0x0a,
	0x14, 0x54, 0x52, 0x41, 0x49, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x45, 0x47, 0x5f, 0x42, 0x45,
	0x53, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x52, 0x41, 0x49, 0x4c,
	0x49, 0x4e, 0x47, 0x5f, 0x50, 0x45, 0x47, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x54, 0x52, 0x41, 0x44,
	0x45, 0x10, 0x03, 0x22, 0x85, 0x01, 0x0a, 0x14, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x1b,
	0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52,
	0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x20, 0x0a,
	0x1c, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x54,
	0x52, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x02, 0x12,
	0x2a, 0x0a, 0x26, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x49, 0x4e,
	0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f,
	0x59, 0x45, 0x53, 0x54, 0x45, 0x52, 0x44, 0x41, 0x59, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x21, 0x10,
	0x22, 0x22, 0xac, 0x0d, 0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x32, 0x2e, 0x4e,
	0x65, 0x77, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x37, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x32, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0b, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0c, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x32, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x11, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x61, 0x6c,
	0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x32, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41,
	0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x41, 0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x0d, 0x6c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x32, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x0c, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x28, 0x0a, 0x07, 0x67, 0x6f, 0x5f, 0x66, 0x6c, 0x61, 0x74,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x32,
	0x2e, 0x47, 0x6f, 0x46, 0x6c, 0x61, 0x74, 0x52, 0x06, 0x67, 0x6f, 0x46, 0x6c, 0x61, 0x74, 0x12,
	0x3a, 0x0a, 0x0d, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x32,
	0x2e, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0c, 0x73,
	0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x32, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x5c, 0x0a, 0x16, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x32, 0x2e, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x52, 0x14, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x12, 0x6e, 0x65, 0x77, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x32, 0x2e, 0x4e,
	0x65, 0x77, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x10, 0x6e, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x4f, 0x0a, 0x13, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x6c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x32, 0x2e, 0x53, 0x79, 0x6e, 0x74,
	0x68, 0x65, 0x74, 0x69, 0x63, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x12,
	0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x49, 0x0a, 0x11, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x5f,
	0x73, 0x63, 0x72, 0x61, 0x74, 0x63, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x32, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x74, 0x69, 0x63, 0x53, 0x63, 0x72, 0x61, 0x74, 0x63, 0x68, 0x52, 0x10, 0x73, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x53, 0x63, 0x72, 0x61, 0x74, 0x63, 0x68, 0x12, 0x31, 0x0a,
	0x09, 0x67, 0x6f, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x32, 0x2e, 0x47, 0x6f,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x08, 0x67, 0x6f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x12, 0x3a, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x32, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0c,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0f,
	0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x61, 0x72, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x32, 0x2e,
	0x46, 0x69, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x66,
	0x69, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x11,
	0x6f, 0x6e, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x6c, 0x66, 0x5f, 0x6f, 0x66, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x6e, 0x42, 0x65, 0x68, 0x61, 0x6c,
	0x66, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x1e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72,
	0x79, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x6d, 0x69, 0x66, 0x69, 0x64, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x69, 0x66, 0x69, 0x64, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x69,
	0x66, 0x69, 0x64, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x69, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6d, 0x69, 0x66,
	0x69, 0x64, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x49, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x5c, 0x0a, 0x28, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x5f, 0x66,
	0x69, 0x72, 0x6d, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6e, 0x6f, 0x72, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x23, 0x6f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74,
	0x68, 0x69, 0x6e, 0x46, 0x69, 0x72, 0x6d, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x6f, 0x72, 0x65, 0x12,
	0x3f, 0x0a, 0x1c, 0x6d, 0x69, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x6d, 0x69, 0x66, 0x69, 0x64, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x48, 0x0a, 0x21, 0x6d, 0x69, 0x66, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x6d, 0x69, 0x66,
	0x69, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x6d, 0x69,
	0x66, 0x69, 0x64, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x18, 0x6d, 0x69, 0x66, 0x69, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x20, 0x6d, 0x69, 0x66,
	0x69, 0x64, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1c, 0x6d, 0x69, 0x66, 0x69, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x22, 0x4a, 0x0a, 0x08, 0x4e, 0x65, 0x77, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x32, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x22, 0xb7, 0x0a, 0x0a,
	0x0b, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x11, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x5f, 0x63,
	0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x43, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0b, 0x63, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0d, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x12, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x77, 0x68, 0x65, 0x6e,
	0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x77, 0x68, 0x65, 0x6e, 0x5f,
	0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x10, 0x77, 0x68, 0x65, 0x6e, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x21, 0x0a, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x71, 0x74, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x51, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x12, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x10, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x51, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x16, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x71, 0x74, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x13, 0x75, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x4d, 0x69, 0x6e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x51, 0x74, 0x79, 0x12,
	0x1e, 0x0a, 0x03, 0x71, 0x74, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63,
	0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x03, 0x71, 0x74, 0x79, 0x12,
	0x2d, 0x0a, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x51, 0x74, 0x79, 0x12, 0x34,
	0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x71, 0x74,
	0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x51, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x12,
	0x52, 0x10, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x6f,
	0x70, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0f, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x32,
	0x0a, 0x13, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x74, 0x63,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x12, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x74, 0x63, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x54, 0x0a, 0x18, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x16, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x74, 0x63, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32,
	0x0a, 0x13, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x74, 0x63,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x12, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x11, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x74, 0x63, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x54, 0x0a, 0x18, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x16, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x74, 0x63, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3b, 0x0a, 0x1a, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x5f, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x74,
	0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x74,
	0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x74, 0x68, 0x72, 0x75, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0c, 0x67, 0x6f, 0x6f, 0x64, 0x54,
	0x68, 0x72, 0x75, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x12, 0x67, 0x6f, 0x6f, 0x64, 0x5f,
	0x74, 0x68, 0x72, 0x75, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x12, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x67, 0x6f, 0x6f, 0x64, 0x54, 0x68, 0x72,
	0x75, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x17, 0x67, 0x6f, 0x6f, 0x64,
	0x5f, 0x74, 0x68, 0x72, 0x75, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x67, 0x6f, 0x6f, 0x64, 0x54, 0x68, 0x72, 0x75, 0x55,
	0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3f, 0x0a, 0x10, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x31,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x4a, 0x04, 0x08, 0x16, 0x10, 0x17, 0x22, 0xc3, 0x02, 0x0a, 0x0b, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x11, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x5f, 0x63, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67,
	0x43, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x63, 0x6c, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0d, 0x77, 0x68, 0x65,
	0x6e, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x12,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x77, 0x68, 0x65, 0x6e, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x48, 0x0a, 0x12, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x77, 0x68, 0x65, 0x6e, 0x55,
	0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3f, 0x0a, 0x10, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x31,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0xd8, 0x01, 0x0a,
	0x12, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x11, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x65, 0x12, 0x23, 0x0a, 0x09,
	0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x79, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0xf4, 0x01, 0x0a, 0x0f, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x41, 0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0d, 0x77,
	0x68, 0x65, 0x6e, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x12, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x77, 0x68, 0x65, 0x6e, 0x55, 0x74, 0x63, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x75, 0x74, 0x63, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x77, 0x68, 0x65,
	0x6e, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1e, 0x0a,
	0x0b, 0x63, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4f, 0x0a,
	0x15, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x13, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0xb0,
	0x03, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x11, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x10, 0x6f, 0x72,
	0x69, 0x67, 0x5f, 0x63, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x43, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x63, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0d, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x75, 0x74, 0x63, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x12, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b,
	0x77, 0x68, 0x65, 0x6e, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x77,
	0x68, 0x65, 0x6e, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x10, 0x77, 0x68, 0x65, 0x6e, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3f, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x73,
	0x5f, 0x63, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x43,
	0x61, 0x72, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x8d, 0x01, 0x0a, 0x10, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e,
	0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e,
	0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x16, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x73, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x14, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x6c, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e,
	0x67, 0x22, 0x82, 0x03, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6c, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x51, 0x0a,
	0x16, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x10, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x28,
	0x0a, 0x10, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0e, 0x6c, 0x6f, 0x73, 0x73, 0x54, 0x69,
	0x63, 0x6b, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x74, 0x6f, 0x70,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x13, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x73, 0x5f, 0x62, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x73, 0x42, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x38, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x50, 0x4f,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x43, 0x4f, 0x10, 0x02,
	0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x50, 0x45, 0x4e,
	0x44, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x22, 0x44, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x11, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xa9, 0x01, 0x0a,
	0x12, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x32, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0e, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x32, 0x2e, 0x55, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xce, 0x03, 0x0a, 0x0c, 0x53, 0x75, 0x73,
	0x70, 0x65, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x11, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x5f, 0x63, 0x6c, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0d, 0x6f,
	0x72, 0x69, 0x67, 0x43, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b,
	0x63, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0d,
	0x77, 0x68, 0x65, 0x6e, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x12, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x77, 0x68, 0x65, 0x6e, 0x55, 0x74, 0x63,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x75, 0x74, 0x63,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x77, 0x68,
	0x65, 0x6e, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x32,
	0x0a, 0x13, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x74, 0x63,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x12, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x74, 0x63, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x54, 0x0a, 0x18, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x16, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x74, 0x63, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3f, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x31, 0x2e, 0x4e, 0x61,
	0x6d, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x15, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x11, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x28,
	0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x6e,
	0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x79, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x91, 0x02, 0x0a, 0x0c, 0x4c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x58, 0x0a, 0x18, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x16, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x48, 0x0a, 0x12, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x75, 0x74, 0x63, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x77, 0x68, 0x65,
	0x6e, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a,
	0x15, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x70, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x70, 0x65,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0xda, 0x01, 0x0a,
	0x06, 0x47, 0x6f, 0x46, 0x6c, 0x61, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x11, 0x52, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x48, 0x0a, 0x12, 0x77, 0x68, 0x65, 0x6e,
	0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x10, 0x77, 0x68, 0x65, 0x6e, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x70, 0x65, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x73, 0x70, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x2a, 0x06, 0x08, 0xc8, 0x01, 0x10, 0xc9, 0x01, 0x22, 0xf9, 0x02, 0x0a, 0x0c, 0x47, 0x6f,
	0x46, 0x6c, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x5f, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x3e, 0x0a, 0x14, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52,
	0x12, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x51, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x17, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x52, 0x15, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x51, 0x74, 0x79, 0x22, 0x5a, 0x0a, 0x0a, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x01, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x02, 0x22, 0x59, 0x0a, 0x17, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x11, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0x62, 0x0a, 0x16, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x48, 0x0a, 0x12, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x32,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0xfa, 0x01, 0x0a, 0x10, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x73,
	0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0b,
	0x69, 0x73, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x6c, 0x67, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x14, 0x61, 0x6c, 0x67, 0x6f, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c, 0x67, 0x6f,
	0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0e, 0x61, 0x6c, 0x67, 0x6f, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65,
	0x73, 0x22, 0xd8, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x42, 0x0a, 0x10, 0x73, 0x69,
	0x64, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x32, 0x2e, 0x53,
	0x69, 0x64, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x73,
	0x69, 0x64, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0f, 0x6c,
	0x65, 0x67, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x32, 0x2e, 0x4c,
	0x65, 0x67, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x6c, 0x65,
	0x67, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x86, 0x02, 0x0a,
	0x0e, 0x53, 0x69, 0x64, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1b, 0x0a, 0x07, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12,
	0x42, 0x02, 0x30, 0x01, 0x52, 0x06, 0x73, 0x69, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x10, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x32, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1e, 0x0a, 0x03, 0x71, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x03, 0x71, 0x74, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x73, 0x69, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0xc2, 0x01, 0x0a, 0x0d, 0x4c, 0x65, 0x67, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x03, 0x71, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x52, 0x03, 0x71, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69,
	0x64, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x65, 0x67, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0a, 0x6c, 0x65, 0x67, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0xbe, 0x01, 0x0a, 0x0f, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36,
	0x0a, 0x17, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x12, 0x29, 0x0a, 0x11, 0x67, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x70, 0x5f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x69, 0x76,
	0x65, 0x55, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x22, 0xfa, 0x02, 0x0a, 0x0c,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48,
	0x0a, 0x12, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x77, 0x68, 0x65, 0x6e, 0x55, 0x74, 0x63, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x40, 0x0a, 0x0f, 0x73, 0x69, 0x64, 0x65,
	0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x32, 0x2e, 0x53, 0x69, 0x64, 0x65,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x73, 0x69, 0x64, 0x65,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x10, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x31, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x4b, 0x0a, 0x06, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45,
	0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x50,
	0x50, 0x52, 0x4f, 0x56, 0x45, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x50, 0x50, 0x52, 0x4f,
	0x56, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x01, 0x22, 0xe4, 0x02, 0x0a, 0x0d, 0x46, 0x69, 0x6c,
	0x6c, 0x43, 0x61, 0x72, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x78,
	0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x65,
	0x63, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x1a, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x61, 0x72, 0x65,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x66, 0x69, 0x6c, 0x6c, 0x43, 0x61, 0x72,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x27,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x07,
	0x66, 0x69, 0x6c, 0x6c, 0x51, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x38, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x67, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x32, 0x2e,
	0x46, 0x69, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x65, 0x67,
	0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x65, 0x67, 0x73, 0x12, 0x42, 0x0a, 0x0d, 0x6f,
	0x70, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x32, 0x2e, 0x46, 0x69, 0x6c,
	0x6c, 0x43, 0x61, 0x72, 0x65, 0x4f, 0x70, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x53, 0x69, 0x64,
	0x65, 0x52, 0x0c, 0x6f, 0x70, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x53, 0x69, 0x64, 0x65, 0x22,
	0xba, 0x01, 0x0a, 0x10, 0x46, 0x69, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4c, 0x65, 0x67, 0x12, 0x1e, 0x0a, 0x0b, 0x6c, 0x65, 0x67, 0x5f, 0x65, 0x78, 0x65, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x65, 0x67, 0x45, 0x78,
	0x65, 0x63, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x6c, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x71, 0x74, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x6c, 0x51, 0x74, 0x79, 0x22, 0xcd, 0x01, 0x0a,
	0x14, 0x46, 0x69, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x65, 0x4f, 0x70, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x65, 0x53, 0x69, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x65, 0x63, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x67, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x32,
	0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x43, 0x61, 0x72, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x65,
	0x67, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x65, 0x67, 0x73, 0x22, 0x59, 0x0a, 0x12,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x37, 0x0a, 0x0c,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x32, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2a, 0x6f, 0x0a, 0x0f, 0x53, 0x70, 0x65, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x50, 0x45, 0x43,
	0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x45,
	0x43, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x50,
	0x45, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x52, 0x42, 0x49, 0x54, 0x52, 0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x50,
	0x45, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48,
	0x45, 0x44, 0x47, 0x45, 0x10, 0x03, 0x2a, 0x5d, 0x0a, 0x14, 0x4d, 0x69, 0x46, 0x49, 0x44, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24,
	0x0a, 0x20, 0x4d, 0x49, 0x46, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48,
	0x4d, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e,
	0x41, 0x4c, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x49, 0x46, 0x49, 0x44, 0x5f, 0x41, 0x4c,
	0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x51, 0x47, 0x10, 0x02, 0x2a, 0xc4, 0x01, 0x0a, 0x1d, 0x4d, 0x69, 0x46, 0x49, 0x44, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x34, 0x4d, 0x49, 0x46, 0x49, 0x44,
	0x5f, 0x49, 0x4e, 0x56, 0x45, 0x53, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x43, 0x49,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x54,
	0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10,
	0x01, 0x12, 0x36, 0x0a, 0x32, 0x4d, 0x49, 0x46, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x53,
	0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f,
	0x41, 0x4c, 0x47, 0x4f, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x12, 0x31, 0x0a, 0x2d, 0x4d, 0x49, 0x46,
	0x49, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x53, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45,
	0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x51, 0x47, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x5f, 0x49, 0x44, 0x10, 0x03, 0x2a, 0x8e, 0x01, 0x0a,
	0x1c, 0x4d, 0x69, 0x46, 0x49, 0x44, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a,
	0x33, 0x4d, 0x49, 0x46, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x44, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45,
	0x52, 0x5f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x35, 0x0a, 0x31, 0x4d, 0x49, 0x46, 0x49, 0x44, 0x5f,
	0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x43, 0x49, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52,
	0x4e, 0x41, 0x4c, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x42, 0x11, 0x5a,
	0x0f, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49,
}

var (
	file_protos_WebAPI_order_2_proto_rawDescOnce sync.Once
	file_protos_WebAPI_order_2_proto_rawDescData = file_protos_WebAPI_order_2_proto_rawDesc
)

func file_protos_WebAPI_order_2_proto_rawDescGZIP() []byte {
	file_protos_WebAPI_order_2_proto_rawDescOnce.Do(func() {
		file_protos_WebAPI_order_2_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_WebAPI_order_2_proto_rawDescData)
	})
	return file_protos_WebAPI_order_2_proto_rawDescData
}

var file_protos_WebAPI_order_2_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_protos_WebAPI_order_2_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_protos_WebAPI_order_2_proto_goTypes = []any{
	(SpeculationType)(0),                // 0: order_2.SpeculationType
	(MiFIDAlgorithmIdType)(0),           // 1: order_2.MiFIDAlgorithmIdType
	(MiFIDInvestmentDecisionIdType)(0),  // 2: order_2.MiFIDInvestmentDecisionIdType
	(MiFIDExecutionDecisionIdType)(0),   // 3: order_2.MiFIDExecutionDecisionIdType
	(Order_Side)(0),                     // 4: order_2.Order.Side
	(Order_OrderType)(0),                // 5: order_2.Order.OrderType
	(Order_ExecInstruction)(0),          // 6: order_2.Order.ExecInstruction
	(Order_Duration)(0),                 // 7: order_2.Order.Duration
	(Order_TrailingPeg)(0),              // 8: order_2.Order.TrailingPeg
	(Order_OpenCloseInstruction)(0),     // 9: order_2.Order.OpenCloseInstruction
	(CompoundOrder_Type)(0),             // 10: order_2.CompoundOrder.Type
	(GoFlatStatus_StatusCode)(0),        // 11: order_2.GoFlatStatus.StatusCode
	(ApproveOrder_Action)(0),            // 12: order_2.ApproveOrder.Action
	(*OrderRequestReject)(nil),          // 13: order_2.OrderRequestReject
	(*OrderRequestAck)(nil),             // 14: order_2.OrderRequestAck
	(*OrderStatus)(nil),                 // 15: order_2.OrderStatus
	(*TransactionStatus)(nil),           // 16: order_2.TransactionStatus
	(*Trade)(nil),                       // 17: order_2.Trade
	(*Commission)(nil),                  // 18: order_2.Commission
	(*CompoundOrderStructure)(nil),      // 19: order_2.CompoundOrderStructure
	(*CompoundOrderStructureEntry)(nil), // 20: order_2.CompoundOrderStructureEntry
	(*Order)(nil),                       // 21: order_2.Order
	(*OrderRequest)(nil),                // 22: order_2.OrderRequest
	(*NewOrder)(nil),                    // 23: order_2.NewOrder
	(*ModifyOrder)(nil),                 // 24: order_2.ModifyOrder
	(*CancelOrder)(nil),                 // 25: order_2.CancelOrder
	(*AccountOrderFilter)(nil),          // 26: order_2.AccountOrderFilter
	(*CancelAllOrders)(nil),             // 27: order_2.CancelAllOrders
	(*ActivateOrder)(nil),               // 28: order_2.ActivateOrder
	(*NewCompoundOrder)(nil),            // 29: order_2.NewCompoundOrder
	(*CompoundOrder)(nil),               // 30: order_2.CompoundOrder
	(*UseOrder)(nil),                    // 31: order_2.UseOrder
	(*CompoundOrderEntry)(nil),          // 32: order_2.CompoundOrderEntry
	(*SuspendOrder)(nil),                // 33: order_2.SuspendOrder
	(*AccountPositionFilter)(nil),       // 34: order_2.AccountPositionFilter
	(*LiquidateAll)(nil),                // 35: order_2.LiquidateAll
	(*GoFlat)(nil),                      // 36: order_2.GoFlat
	(*GoFlatStatus)(nil),                // 37: order_2.GoFlatStatus
	(*OrderEntitlementRequest)(nil),     // 38: order_2.OrderEntitlementRequest
	(*OrderEntitlementReport)(nil),      // 39: order_2.OrderEntitlementReport
	(*OrderEntitlement)(nil),            // 40: order_2.OrderEntitlement
	(*CrossOrderParameters)(nil),        // 41: order_2.CrossOrderParameters
	(*SideAllocation)(nil),              // 42: order_2.SideAllocation
	(*LegAllocation)(nil),               // 43: order_2.LegAllocation
	(*ExternalAccount)(nil),             // 44: order_2.ExternalAccount
	(*ApproveOrder)(nil),                // 45: order_2.ApproveOrder
	(*FillCareOrder)(nil),               // 46: order_2.FillCareOrder
	(*FillCareOrderLeg)(nil),            // 47: order_2.FillCareOrderLeg
	(*FillCareOppositeSide)(nil),        // 48: order_2.FillCareOppositeSide
	(*OrderStatusRequest)(nil),          // 49: order_2.OrderStatusRequest
	(*OrderStatusReport)(nil),           // 50: order_2.OrderStatusReport
	(*common.Text)(nil),                 // 51: shared_1.Text
	(*timestamppb.Timestamp)(nil),       // 52: google.protobuf.Timestamp
	(*common.Decimal)(nil),              // 53: cqg.Decimal
	(*ContractMetadata)(nil),            // 54: metadata_2.ContractMetadata
	(*SyntheticStrategyProperties)(nil), // 55: strategy_2.SyntheticStrategyProperties
	(*common.NamedValue)(nil),           // 56: shared_1.NamedValue
	(*StrategyLegFill)(nil),             // 57: strategy_2.StrategyLegFill
	(*SyntheticHang)(nil),               // 58: strategy_2.SyntheticHang
	(*UserAttribute)(nil),               // 59: user_attribute_2.UserAttribute
	(*StrategyTradingParameters)(nil),   // 60: strategy_2.StrategyTradingParameters
	(*ModifyUserAttributes)(nil),        // 61: user_attribute_2.ModifyUserAttributes
	(*SyntheticLiquidate)(nil),          // 62: strategy_2.SyntheticLiquidate
	(*SyntheticScratch)(nil),            // 63: strategy_2.SyntheticScratch
	(*GoMarket)(nil),                    // 64: strategy_2.GoMarket
}
var file_protos_WebAPI_order_2_proto_depIdxs = []int32{
	51,  // 0: order_2.OrderRequestReject.details:type_name -> shared_1.Text
	52,  // 1: order_2.OrderRequestAck.when:type_name -> google.protobuf.Timestamp
	52,  // 2: order_2.OrderStatus.status_utc_timestamp:type_name -> google.protobuf.Timestamp
	52,  // 3: order_2.OrderStatus.submission_utc_timestamp:type_name -> google.protobuf.Timestamp
	53,  // 4: order_2.OrderStatus.fill_qty:type_name -> cqg.Decimal
	52,  // 5: order_2.OrderStatus.active_at_utc_timestamp:type_name -> google.protobuf.Timestamp
	53,  // 6: order_2.OrderStatus.remaining_qty:type_name -> cqg.Decimal
	21,  // 7: order_2.OrderStatus.order:type_name -> order_2.Order
	16,  // 8: order_2.OrderStatus.transaction_statuses:type_name -> order_2.TransactionStatus
	52,  // 9: order_2.OrderStatus.reject_utc_timestamp:type_name -> google.protobuf.Timestamp
	52,  // 10: order_2.OrderStatus.cancel_utc_timestamp:type_name -> google.protobuf.Timestamp
	52,  // 11: order_2.OrderStatus.fill_utc_timestamp:type_name -> google.protobuf.Timestamp
	54,  // 12: order_2.OrderStatus.contract_metadata:type_name -> metadata_2.ContractMetadata
	19,  // 13: order_2.OrderStatus.compound_order_structure:type_name -> order_2.CompoundOrderStructure
	55,  // 14: order_2.OrderStatus.strategy_properties:type_name -> strategy_2.SyntheticStrategyProperties
	56,  // 15: order_2.OrderStatus.exchange_extra_attributes:type_name -> shared_1.NamedValue
	18,  // 16: order_2.OrderStatus.fill_commission:type_name -> order_2.Commission
	52,  // 17: order_2.TransactionStatus.trans_utc_timestamp:type_name -> google.protobuf.Timestamp
	53,  // 18: order_2.TransactionStatus.fill_qty:type_name -> cqg.Decimal
	17,  // 19: order_2.TransactionStatus.trades:type_name -> order_2.Trade
	57,  // 20: order_2.TransactionStatus.strategy_leg_fills:type_name -> strategy_2.StrategyLegFill
	58,  // 21: order_2.TransactionStatus.synthetic_hang:type_name -> strategy_2.SyntheticHang
	53,  // 22: order_2.TransactionStatus.prev_order_qty:type_name -> cqg.Decimal
	53,  // 23: order_2.TransactionStatus.order_qty:type_name -> cqg.Decimal
	53,  // 24: order_2.TransactionStatus.prev_visible_qty:type_name -> cqg.Decimal
	53,  // 25: order_2.TransactionStatus.visible_qty:type_name -> cqg.Decimal
	53,  // 26: order_2.TransactionStatus.prev_min_visible_qty:type_name -> cqg.Decimal
	53,  // 27: order_2.TransactionStatus.min_visible_qty:type_name -> cqg.Decimal
	53,  // 28: order_2.TransactionStatus.prev_fill_qty:type_name -> cqg.Decimal
	52,  // 29: order_2.TransactionStatus.prev_good_thru_utc_timestamp:type_name -> google.protobuf.Timestamp
	52,  // 30: order_2.TransactionStatus.good_thru_utc_timestamp:type_name -> google.protobuf.Timestamp
	18,  // 31: order_2.TransactionStatus.fill_commission:type_name -> order_2.Commission
	52,  // 32: order_2.Trade.trade_utc_timestamp:type_name -> google.protobuf.Timestamp
	53,  // 33: order_2.Trade.qty:type_name -> cqg.Decimal
	56,  // 34: order_2.Trade.fill_extra_attributes:type_name -> shared_1.NamedValue
	20,  // 35: order_2.CompoundOrderStructure.compound_order_entries:type_name -> order_2.CompoundOrderStructureEntry
	19,  // 36: order_2.CompoundOrderStructureEntry.compound_order_structure:type_name -> order_2.CompoundOrderStructure
	52,  // 37: order_2.Order.when_utc_timestamp:type_name -> google.protobuf.Timestamp
	53,  // 38: order_2.Order.qty:type_name -> cqg.Decimal
	53,  // 39: order_2.Order.visible_qty:type_name -> cqg.Decimal
	53,  // 40: order_2.Order.min_visible_qty:type_name -> cqg.Decimal
	53,  // 41: order_2.Order.trigger_qty:type_name -> cqg.Decimal
	52,  // 42: order_2.Order.activation_utc_timestamp:type_name -> google.protobuf.Timestamp
	52,  // 43: order_2.Order.suspension_utc_timestamp:type_name -> google.protobuf.Timestamp
	59,  // 44: order_2.Order.user_attributes:type_name -> user_attribute_2.UserAttribute
	56,  // 45: order_2.Order.extra_attributes:type_name -> shared_1.NamedValue
	52,  // 46: order_2.Order.good_thru_utc_timestamp:type_name -> google.protobuf.Timestamp
	60,  // 47: order_2.Order.strategy_trading_parameters:type_name -> strategy_2.StrategyTradingParameters
	41,  // 48: order_2.Order.cross_order_parameters:type_name -> order_2.CrossOrderParameters
	23,  // 49: order_2.OrderRequest.new_order:type_name -> order_2.NewOrder
	24,  // 50: order_2.OrderRequest.modify_order:type_name -> order_2.ModifyOrder
	25,  // 51: order_2.OrderRequest.cancel_order:type_name -> order_2.CancelOrder
	27,  // 52: order_2.OrderRequest.cancel_all_orders:type_name -> order_2.CancelAllOrders
	35,  // 53: order_2.OrderRequest.liquidate_all:type_name -> order_2.LiquidateAll
	36,  // 54: order_2.OrderRequest.go_flat:type_name -> order_2.GoFlat
	33,  // 55: order_2.OrderRequest.suspend_order:type_name -> order_2.SuspendOrder
	28,  // 56: order_2.OrderRequest.activate_order:type_name -> order_2.ActivateOrder
	61,  // 57: order_2.OrderRequest.modify_user_attributes:type_name -> user_attribute_2.ModifyUserAttributes
	29,  // 58: order_2.OrderRequest.new_compound_order:type_name -> order_2.NewCompoundOrder
	62,  // 59: order_2.OrderRequest.synthetic_liquidate:type_name -> strategy_2.SyntheticLiquidate
	63,  // 60: order_2.OrderRequest.synthetic_scratch:type_name -> strategy_2.SyntheticScratch
	64,  // 61: order_2.OrderRequest.go_market:type_name -> strategy_2.GoMarket
	45,  // 62: order_2.OrderRequest.approve_order:type_name -> order_2.ApproveOrder
	46,  // 63: order_2.OrderRequest.fill_care_order:type_name -> order_2.FillCareOrder
	21,  // 64: order_2.NewOrder.order:type_name -> order_2.Order
	52,  // 65: order_2.ModifyOrder.when_utc_timestamp:type_name -> google.protobuf.Timestamp
	53,  // 66: order_2.ModifyOrder.qty:type_name -> cqg.Decimal
	53,  // 67: order_2.ModifyOrder.visible_qty:type_name -> cqg.Decimal
	53,  // 68: order_2.ModifyOrder.min_visible_qty:type_name -> cqg.Decimal
	52,  // 69: order_2.ModifyOrder.activation_utc_timestamp:type_name -> google.protobuf.Timestamp
	52,  // 70: order_2.ModifyOrder.suspension_utc_timestamp:type_name -> google.protobuf.Timestamp
	52,  // 71: order_2.ModifyOrder.good_thru_utc_timestamp:type_name -> google.protobuf.Timestamp
	56,  // 72: order_2.ModifyOrder.extra_attributes:type_name -> shared_1.NamedValue
	52,  // 73: order_2.CancelOrder.when_utc_timestamp:type_name -> google.protobuf.Timestamp
	56,  // 74: order_2.CancelOrder.extra_attributes:type_name -> shared_1.NamedValue
	52,  // 75: order_2.CancelAllOrders.when_utc_timestamp:type_name -> google.protobuf.Timestamp
	26,  // 76: order_2.CancelAllOrders.account_order_filters:type_name -> order_2.AccountOrderFilter
	52,  // 77: order_2.ActivateOrder.when_utc_timestamp:type_name -> google.protobuf.Timestamp
	56,  // 78: order_2.ActivateOrder.extra_attributes:type_name -> shared_1.NamedValue
	30,  // 79: order_2.NewCompoundOrder.compound_order:type_name -> order_2.CompoundOrder
	32,  // 80: order_2.CompoundOrder.compound_order_entries:type_name -> order_2.CompoundOrderEntry
	21,  // 81: order_2.CompoundOrderEntry.order:type_name -> order_2.Order
	30,  // 82: order_2.CompoundOrderEntry.compound_order:type_name -> order_2.CompoundOrder
	31,  // 83: order_2.CompoundOrderEntry.use_order:type_name -> order_2.UseOrder
	52,  // 84: order_2.SuspendOrder.when_utc_timestamp:type_name -> google.protobuf.Timestamp
	52,  // 85: order_2.SuspendOrder.activation_utc_timestamp:type_name -> google.protobuf.Timestamp
	56,  // 86: order_2.SuspendOrder.extra_attributes:type_name -> shared_1.NamedValue
	34,  // 87: order_2.LiquidateAll.account_position_filters:type_name -> order_2.AccountPositionFilter
	52,  // 88: order_2.LiquidateAll.when_utc_timestamp:type_name -> google.protobuf.Timestamp
	52,  // 89: order_2.GoFlat.when_utc_timestamp:type_name -> google.protobuf.Timestamp
	51,  // 90: order_2.GoFlatStatus.details:type_name -> shared_1.Text
	53,  // 91: order_2.GoFlatStatus.remaining_orders_qty:type_name -> cqg.Decimal
	53,  // 92: order_2.GoFlatStatus.remaining_positions_qty:type_name -> cqg.Decimal
	40,  // 93: order_2.OrderEntitlementReport.order_entitlements:type_name -> order_2.OrderEntitlement
	42,  // 94: order_2.CrossOrderParameters.side_allocations:type_name -> order_2.SideAllocation
	43,  // 95: order_2.CrossOrderParameters.leg_allocations:type_name -> order_2.LegAllocation
	44,  // 96: order_2.SideAllocation.external_account:type_name -> order_2.ExternalAccount
	53,  // 97: order_2.SideAllocation.qty:type_name -> cqg.Decimal
	56,  // 98: order_2.SideAllocation.extra_attributes:type_name -> shared_1.NamedValue
	53,  // 99: order_2.LegAllocation.qty:type_name -> cqg.Decimal
	52,  // 100: order_2.ApproveOrder.when_utc_timestamp:type_name -> google.protobuf.Timestamp
	42,  // 101: order_2.ApproveOrder.side_allocation:type_name -> order_2.SideAllocation
	56,  // 102: order_2.ApproveOrder.extra_attributes:type_name -> shared_1.NamedValue
	53,  // 103: order_2.FillCareOrder.fill_qty:type_name -> cqg.Decimal
	47,  // 104: order_2.FillCareOrder.order_legs:type_name -> order_2.FillCareOrderLeg
	48,  // 105: order_2.FillCareOrder.opposite_side:type_name -> order_2.FillCareOppositeSide
	53,  // 106: order_2.FillCareOrderLeg.fill_qty:type_name -> cqg.Decimal
	47,  // 107: order_2.FillCareOppositeSide.order_legs:type_name -> order_2.FillCareOrderLeg
	15,  // 108: order_2.OrderStatusReport.order_status:type_name -> order_2.OrderStatus
	109, // [109:109] is the sub-list for method output_type
	109, // [109:109] is the sub-list for method input_type
	109, // [109:109] is the sub-list for extension type_name
	109, // [109:109] is the sub-list for extension extendee
	0,   // [0:109] is the sub-list for field type_name
}

func init() { file_protos_WebAPI_order_2_proto_init() }
func file_protos_WebAPI_order_2_proto_init() {
	if File_protos_WebAPI_order_2_proto != nil {
		return
	}
	file_protos_WebAPI_metadata_2_proto_init()
	file_protos_WebAPI_strategy_2_proto_init()
	file_protos_WebAPI_user_attribute_2_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_WebAPI_order_2_proto_rawDesc,
			NumEnums:      13,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_WebAPI_order_2_proto_goTypes,
		DependencyIndexes: file_protos_WebAPI_order_2_proto_depIdxs,
		EnumInfos:         file_protos_WebAPI_order_2_proto_enumTypes,
		MessageInfos:      file_protos_WebAPI_order_2_proto_msgTypes,
	}.Build()
	File_protos_WebAPI_order_2_proto = out.File
	file_protos_WebAPI_order_2_proto_rawDesc = nil
	file_protos_WebAPI_order_2_proto_goTypes = nil
	file_protos_WebAPI_order_2_proto_depIdxs = nil
}
