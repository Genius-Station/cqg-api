// CQG Web API server protocol

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: protos/WebAPI/webapi_2.proto

package WebAPI

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProtocolVersionMajor int32

const (
	// Major number change is required in the next cases (new 'proto' file is necessary):
	// 1) Protocol is not binary backward compatible with previous versions.
	// 2) Protocol has lots of changes, which affect to clients' compilation.
	ProtocolVersionMajor_PROTOCOL_VERSION_MAJOR ProtocolVersionMajor = 2
)

// Enum value maps for ProtocolVersionMajor.
var (
	ProtocolVersionMajor_name = map[int32]string{
		2: "PROTOCOL_VERSION_MAJOR",
	}
	ProtocolVersionMajor_value = map[string]int32{
		"PROTOCOL_VERSION_MAJOR": 2,
	}
)

func (x ProtocolVersionMajor) Enum() *ProtocolVersionMajor {
	p := new(ProtocolVersionMajor)
	*p = x
	return p
}

func (x ProtocolVersionMajor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtocolVersionMajor) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_webapi_2_proto_enumTypes[0].Descriptor()
}

func (ProtocolVersionMajor) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_webapi_2_proto_enumTypes[0]
}

func (x ProtocolVersionMajor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtocolVersionMajor) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtocolVersionMajor(num)
	return nil
}

// Deprecated: Use ProtocolVersionMajor.Descriptor instead.
func (ProtocolVersionMajor) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_webapi_2_proto_rawDescGZIP(), []int{0}
}

type ProtocolVersionMinor int32

const (
	// Minor number is increased for binary backward compatible protocol versions when new messages and/ or fields are
	// added without removing/ changing any existing messages and fields (new 'proto' file is not created)
	ProtocolVersionMinor_PROTOCOL_VERSION_MINOR ProtocolVersionMinor = 230
)

// Enum value maps for ProtocolVersionMinor.
var (
	ProtocolVersionMinor_name = map[int32]string{
		230: "PROTOCOL_VERSION_MINOR",
	}
	ProtocolVersionMinor_value = map[string]int32{
		"PROTOCOL_VERSION_MINOR": 230,
	}
)

func (x ProtocolVersionMinor) Enum() *ProtocolVersionMinor {
	p := new(ProtocolVersionMinor)
	*p = x
	return p
}

func (x ProtocolVersionMinor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtocolVersionMinor) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_webapi_2_proto_enumTypes[1].Descriptor()
}

func (ProtocolVersionMinor) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_webapi_2_proto_enumTypes[1]
}

func (x ProtocolVersionMinor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtocolVersionMinor) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtocolVersionMinor(num)
	return nil
}

// Deprecated: Use ProtocolVersionMinor.Descriptor instead.
func (ProtocolVersionMinor) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_webapi_2_proto_rawDescGZIP(), []int{1}
}

// Optional status code for a request or subscription, status is only sent for initial status and status changes.
type InformationReport_StatusCode int32

const (
	// / success codes  (0 - 99)
	// Request is processed without subscription
	// (subscription was not requested or can not be established, e.g. for deleted contracts).
	InformationReport_STATUS_CODE_SUCCESS InformationReport_StatusCode = 0
	// Request is processed and subscription is established.
	InformationReport_STATUS_CODE_SUBSCRIBED InformationReport_StatusCode = 1
	// The subscription is dropped by the client.
	InformationReport_STATUS_CODE_DROPPED InformationReport_StatusCode = 2
	// Unsolicited information update because of subscription.
	InformationReport_STATUS_CODE_UPDATE InformationReport_StatusCode = 3
	// Currently subscription is disconnected because of communication issues.
	// NOTE: Clients should not resubscribe in this case, the server will restore subscription with
	// sending SUBSCRIBED status once communication issues are resolved. Collection of items should
	// not be cleared once DISCONNECTED status is received, and further reports should be treated as
	// updates unless otherwise noted in request description.
	InformationReport_STATUS_CODE_DISCONNECTED InformationReport_StatusCode = 4
	// / failure codes (100+), subscription (if any) is dropped in case of failure.
	// General failure.
	InformationReport_STATUS_CODE_FAILURE InformationReport_StatusCode = 101
	// Request parameters are invalid.
	InformationReport_STATUS_CODE_INVALID_PARAMS InformationReport_StatusCode = 102
	// Requested information is not found.
	InformationReport_STATUS_CODE_NOT_FOUND InformationReport_StatusCode = 104
	// The request rate limit has been violated.
	InformationReport_STATUS_CODE_REQUEST_RATE_LIMIT_VIOLATION InformationReport_StatusCode = 105
	// The limit of subscriptions has been violated.
	InformationReport_STATUS_CODE_SUBSCRIPTION_LIMIT_VIOLATION InformationReport_StatusCode = 106
	// The limit of active requests has been violated.
	InformationReport_STATUS_CODE_ACTIVE_REQUESTS_LIMIT_VIOLATION InformationReport_StatusCode = 107
	// The response is too large to return. Try more specific request parameters to narrow response size if possible.
	InformationReport_STATUS_CODE_TOO_LARGE_RESPONSE InformationReport_StatusCode = 108
)

// Enum value maps for InformationReport_StatusCode.
var (
	InformationReport_StatusCode_name = map[int32]string{
		0:   "STATUS_CODE_SUCCESS",
		1:   "STATUS_CODE_SUBSCRIBED",
		2:   "STATUS_CODE_DROPPED",
		3:   "STATUS_CODE_UPDATE",
		4:   "STATUS_CODE_DISCONNECTED",
		101: "STATUS_CODE_FAILURE",
		102: "STATUS_CODE_INVALID_PARAMS",
		104: "STATUS_CODE_NOT_FOUND",
		105: "STATUS_CODE_REQUEST_RATE_LIMIT_VIOLATION",
		106: "STATUS_CODE_SUBSCRIPTION_LIMIT_VIOLATION",
		107: "STATUS_CODE_ACTIVE_REQUESTS_LIMIT_VIOLATION",
		108: "STATUS_CODE_TOO_LARGE_RESPONSE",
	}
	InformationReport_StatusCode_value = map[string]int32{
		"STATUS_CODE_SUCCESS":                         0,
		"STATUS_CODE_SUBSCRIBED":                      1,
		"STATUS_CODE_DROPPED":                         2,
		"STATUS_CODE_UPDATE":                          3,
		"STATUS_CODE_DISCONNECTED":                    4,
		"STATUS_CODE_FAILURE":                         101,
		"STATUS_CODE_INVALID_PARAMS":                  102,
		"STATUS_CODE_NOT_FOUND":                       104,
		"STATUS_CODE_REQUEST_RATE_LIMIT_VIOLATION":    105,
		"STATUS_CODE_SUBSCRIPTION_LIMIT_VIOLATION":    106,
		"STATUS_CODE_ACTIVE_REQUESTS_LIMIT_VIOLATION": 107,
		"STATUS_CODE_TOO_LARGE_RESPONSE":              108,
	}
)

func (x InformationReport_StatusCode) Enum() *InformationReport_StatusCode {
	p := new(InformationReport_StatusCode)
	*p = x
	return p
}

func (x InformationReport_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InformationReport_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_webapi_2_proto_enumTypes[2].Descriptor()
}

func (InformationReport_StatusCode) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_webapi_2_proto_enumTypes[2]
}

func (x InformationReport_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *InformationReport_StatusCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = InformationReport_StatusCode(num)
	return nil
}

// Deprecated: Use InformationReport_StatusCode.Descriptor instead.
func (InformationReport_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_webapi_2_proto_rawDescGZIP(), []int{3, 0}
}

// Client to Server message, must include at least one field.
// Logon, LogonRoutineClient, RestoreOrJoinSession or ObtainDemoCredentials are required to be the first
// and the only message after connection.
// Client messages rate is limited, 1000 messages per 10 seconds by default.
// If this rate is exceeded then a user message is sent with details and the connection is closed.
// NOTE: This and other limits mentioned in this protocol are not guaranteed, they are given for reference only
// and are subject to change without prior notice.
type ClientMsg struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Session level messages from client.
	Logon                       *Logon                       `protobuf:"bytes,100,opt,name=logon" json:"logon,omitempty"`
	RestoreOrJoinSession        *RestoreOrJoinSession        `protobuf:"bytes,101,opt,name=restore_or_join_session,json=restoreOrJoinSession" json:"restore_or_join_session,omitempty"`
	Logoff                      *Logoff                      `protobuf:"bytes,102,opt,name=logoff" json:"logoff,omitempty"`
	PasswordChange              *PasswordChange              `protobuf:"bytes,103,opt,name=password_change,json=passwordChange" json:"password_change,omitempty"`
	ObtainDemoCredentials       *ObtainDemoCredentials       `protobuf:"bytes,104,opt,name=obtain_demo_credentials,json=obtainDemoCredentials" json:"obtain_demo_credentials,omitempty"`
	UserSessionStateRequest     *UserSessionStateRequest     `protobuf:"bytes,105,opt,name=user_session_state_request,json=userSessionStateRequest" json:"user_session_state_request,omitempty"`
	Ping                        *Ping                        `protobuf:"bytes,107,opt,name=ping" json:"ping,omitempty"`
	Pong                        *Pong                        `protobuf:"bytes,108,opt,name=pong" json:"pong,omitempty"`
	LogonRoutineClient          *LogonRoutineClient          `protobuf:"bytes,109,opt,name=logon_routine_client,json=logonRoutineClient" json:"logon_routine_client,omitempty"`
	PasswordChangeRoutineClient *PasswordChangeRoutineClient `protobuf:"bytes,110,opt,name=password_change_routine_client,json=passwordChangeRoutineClient" json:"password_change_routine_client,omitempty"`
	SetCollapsingLevelRequest   *SetCollapsingLevelRequest   `protobuf:"bytes,111,opt,name=set_collapsing_level_request,json=setCollapsingLevelRequest" json:"set_collapsing_level_request,omitempty"`
	// Requests for different information with optional subscription for updates.
	// There are the following limits for information requests:
	//  1. Information request rate is limited, 1000 requests per 100 seconds by default.
	//  2. Number of simultaneous information subscriptions is limited,
	//     a separate limit per information request type is used.
	//  3. Number of overall information requests per session is limited,
	//     a separate limit per information request type is used.
	InformationRequests []*InformationRequest `protobuf:"bytes,1,rep,name=information_requests,json=informationRequests" json:"information_requests,omitempty"`
	// Trade routing subscriptions from client.
	// There are the following limits for trade routing subscriptions:
	//  1. Number of simultaneous subscriptions is limited, 200 by default.
	//  2. Total number of either explicitly or implicitly subscribed accounts is limited, 5000 by default.
	//     Any subscription that leads to exceeding this limit is failed.
	TradeSubscriptions []*TradeSubscription `protobuf:"bytes,2,rep,name=trade_subscriptions,json=tradeSubscriptions" json:"trade_subscriptions,omitempty"`
	// Order requests.
	// Request rate is limited, 300 orders per 10 seconds by default.
	// This is total limit for order actions amount all accounts within the session.
	// There is also per account limit which is 10 order requests per second by default.
	OrderRequests []*OrderRequest `protobuf:"bytes,3,rep,name=order_requests,json=orderRequests" json:"order_requests,omitempty"`
	// Market data subscriptions from client.
	// Subscriptions number is limited, 200 simultaneous subscriptions by default.
	// Subscriptions on options strikes (puts and calls) of the same option maturity
	// are considered as a single subscription within the limit.
	MarketDataSubscriptions []*MarketDataSubscription `protobuf:"bytes,4,rep,name=market_data_subscriptions,json=marketDataSubscriptions" json:"market_data_subscriptions,omitempty"`
	// Historical data requests.
	// Number of simultaneous historical requests in processing is limited, 10 by default
	// (all types of historical requests together).
	// Number of simultaneous historical requests with subscription for updates is limited, 50 by default
	// (all types of historical requests together).
	TimeAndSalesRequests  []*TimeAndSalesRequest  `protobuf:"bytes,7,rep,name=time_and_sales_requests,json=timeAndSalesRequests" json:"time_and_sales_requests,omitempty"`
	TimeBarRequests       []*TimeBarRequest       `protobuf:"bytes,8,rep,name=time_bar_requests,json=timeBarRequests" json:"time_bar_requests,omitempty"`
	VolumeProfileRequests []*VolumeProfileRequest `protobuf:"bytes,9,rep,name=volume_profile_requests,json=volumeProfileRequests" json:"volume_profile_requests,omitempty"`
	NonTimedBarRequests   []*NonTimedBarRequest   `protobuf:"bytes,14,rep,name=non_timed_bar_requests,json=nonTimedBarRequests" json:"non_timed_bar_requests,omitempty"`
	// Rules requests.
	// Number of simultaneous defined rules is limited, 100 by default.
	// Rule requests rate is limited, 30 per 60 seconds by default.
	RuleRequests []*RuleRequest `protobuf:"bytes,10,rep,name=rule_requests,json=ruleRequests" json:"rule_requests,omitempty"`
	// Messages for accounts that require separate authorization process.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/webapi_2.proto.
	AccountLogonRequests                []*AccountLogon                       `protobuf:"bytes,11,rep,name=account_logon_requests,json=accountLogonRequests" json:"account_logon_requests,omitempty"`
	AccountPasswordChangeRequests       []*AccountPasswordChange              `protobuf:"bytes,12,rep,name=account_password_change_requests,json=accountPasswordChangeRequests" json:"account_password_change_requests,omitempty"`
	AccountLogoffRequests               []*AccountLogoff                      `protobuf:"bytes,13,rep,name=account_logoff_requests,json=accountLogoffRequests" json:"account_logoff_requests,omitempty"`
	AccountLogonRoutinesClient          []*AccountLogonRoutineClient          `protobuf:"bytes,19,rep,name=account_logon_routines_client,json=accountLogonRoutinesClient" json:"account_logon_routines_client,omitempty"`
	AccountPasswordChangeRoutinesClient []*AccountPasswordChangeRoutineClient `protobuf:"bytes,20,rep,name=account_password_change_routines_client,json=accountPasswordChangeRoutinesClient" json:"account_password_change_routines_client,omitempty"`
	// Meta-data related requests is an administrative message to manipulate
	// Security and instrument settings.
	// It requires a special permission.
	// Request rate is limited, 100 requests per 100 seconds by default.
	MetadataAdminRequests []*MetadataAdminRequest `protobuf:"bytes,15,rep,name=metadata_admin_requests,json=metadataAdminRequests" json:"metadata_admin_requests,omitempty"`
	// OTC related requests.
	// Used to receive data from OTC and manipulate OTC instances.
	OtcRequests []*OtcRequest `protobuf:"bytes,16,rep,name=otc_requests,json=otcRequests" json:"otc_requests,omitempty"`
	// RFQ requests.
	// Request rate is limited, 10 requests per second per account by default.
	RfqRequests []*RFQRequest `protobuf:"bytes,17,rep,name=rfq_requests,json=rfqRequests" json:"rfq_requests,omitempty"`
	// Option calculation requests.
	// Number of simultaneous option calculation requests with subscription for updates is limited, 10 by default.
	OptionCalculationRequests []*OptionCalculationRequest `protobuf:"bytes,18,rep,name=option_calculation_requests,json=optionCalculationRequests" json:"option_calculation_requests,omitempty"`
	// RFQ subscription requests.
	// Request rate is limited, 1000 requests per hour by default.
	RfqSubscriptionRequests []*RFQSubscriptionRequest `protobuf:"bytes,200,rep,name=rfq_subscription_requests,json=rfqSubscriptionRequests" json:"rfq_subscription_requests,omitempty"`
}

func (x *ClientMsg) Reset() {
	*x = ClientMsg{}
	mi := &file_protos_WebAPI_webapi_2_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMsg) ProtoMessage() {}

func (x *ClientMsg) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_webapi_2_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMsg.ProtoReflect.Descriptor instead.
func (*ClientMsg) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_webapi_2_proto_rawDescGZIP(), []int{0}
}

func (x *ClientMsg) GetLogon() *Logon {
	if x != nil {
		return x.Logon
	}
	return nil
}

func (x *ClientMsg) GetRestoreOrJoinSession() *RestoreOrJoinSession {
	if x != nil {
		return x.RestoreOrJoinSession
	}
	return nil
}

func (x *ClientMsg) GetLogoff() *Logoff {
	if x != nil {
		return x.Logoff
	}
	return nil
}

func (x *ClientMsg) GetPasswordChange() *PasswordChange {
	if x != nil {
		return x.PasswordChange
	}
	return nil
}

func (x *ClientMsg) GetObtainDemoCredentials() *ObtainDemoCredentials {
	if x != nil {
		return x.ObtainDemoCredentials
	}
	return nil
}

func (x *ClientMsg) GetUserSessionStateRequest() *UserSessionStateRequest {
	if x != nil {
		return x.UserSessionStateRequest
	}
	return nil
}

func (x *ClientMsg) GetPing() *Ping {
	if x != nil {
		return x.Ping
	}
	return nil
}

func (x *ClientMsg) GetPong() *Pong {
	if x != nil {
		return x.Pong
	}
	return nil
}

func (x *ClientMsg) GetLogonRoutineClient() *LogonRoutineClient {
	if x != nil {
		return x.LogonRoutineClient
	}
	return nil
}

func (x *ClientMsg) GetPasswordChangeRoutineClient() *PasswordChangeRoutineClient {
	if x != nil {
		return x.PasswordChangeRoutineClient
	}
	return nil
}

func (x *ClientMsg) GetSetCollapsingLevelRequest() *SetCollapsingLevelRequest {
	if x != nil {
		return x.SetCollapsingLevelRequest
	}
	return nil
}

func (x *ClientMsg) GetInformationRequests() []*InformationRequest {
	if x != nil {
		return x.InformationRequests
	}
	return nil
}

func (x *ClientMsg) GetTradeSubscriptions() []*TradeSubscription {
	if x != nil {
		return x.TradeSubscriptions
	}
	return nil
}

func (x *ClientMsg) GetOrderRequests() []*OrderRequest {
	if x != nil {
		return x.OrderRequests
	}
	return nil
}

func (x *ClientMsg) GetMarketDataSubscriptions() []*MarketDataSubscription {
	if x != nil {
		return x.MarketDataSubscriptions
	}
	return nil
}

func (x *ClientMsg) GetTimeAndSalesRequests() []*TimeAndSalesRequest {
	if x != nil {
		return x.TimeAndSalesRequests
	}
	return nil
}

func (x *ClientMsg) GetTimeBarRequests() []*TimeBarRequest {
	if x != nil {
		return x.TimeBarRequests
	}
	return nil
}

func (x *ClientMsg) GetVolumeProfileRequests() []*VolumeProfileRequest {
	if x != nil {
		return x.VolumeProfileRequests
	}
	return nil
}

func (x *ClientMsg) GetNonTimedBarRequests() []*NonTimedBarRequest {
	if x != nil {
		return x.NonTimedBarRequests
	}
	return nil
}

func (x *ClientMsg) GetRuleRequests() []*RuleRequest {
	if x != nil {
		return x.RuleRequests
	}
	return nil
}

// Deprecated: Marked as deprecated in protos/WebAPI/webapi_2.proto.
func (x *ClientMsg) GetAccountLogonRequests() []*AccountLogon {
	if x != nil {
		return x.AccountLogonRequests
	}
	return nil
}

func (x *ClientMsg) GetAccountPasswordChangeRequests() []*AccountPasswordChange {
	if x != nil {
		return x.AccountPasswordChangeRequests
	}
	return nil
}

func (x *ClientMsg) GetAccountLogoffRequests() []*AccountLogoff {
	if x != nil {
		return x.AccountLogoffRequests
	}
	return nil
}

func (x *ClientMsg) GetAccountLogonRoutinesClient() []*AccountLogonRoutineClient {
	if x != nil {
		return x.AccountLogonRoutinesClient
	}
	return nil
}

func (x *ClientMsg) GetAccountPasswordChangeRoutinesClient() []*AccountPasswordChangeRoutineClient {
	if x != nil {
		return x.AccountPasswordChangeRoutinesClient
	}
	return nil
}

func (x *ClientMsg) GetMetadataAdminRequests() []*MetadataAdminRequest {
	if x != nil {
		return x.MetadataAdminRequests
	}
	return nil
}

func (x *ClientMsg) GetOtcRequests() []*OtcRequest {
	if x != nil {
		return x.OtcRequests
	}
	return nil
}

func (x *ClientMsg) GetRfqRequests() []*RFQRequest {
	if x != nil {
		return x.RfqRequests
	}
	return nil
}

func (x *ClientMsg) GetOptionCalculationRequests() []*OptionCalculationRequest {
	if x != nil {
		return x.OptionCalculationRequests
	}
	return nil
}

func (x *ClientMsg) GetRfqSubscriptionRequests() []*RFQSubscriptionRequest {
	if x != nil {
		return x.RfqSubscriptionRequests
	}
	return nil
}

// Server to Client message, server can include different fields in a single message.
type ServerMsg struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Session level messages from server.
	LogonResult                     *LogonResult                   `protobuf:"bytes,100,opt,name=logon_result,json=logonResult" json:"logon_result,omitempty"`
	RestoreOrJoinSessionResult      *RestoreOrJoinSessionResult    `protobuf:"bytes,101,opt,name=restore_or_join_session_result,json=restoreOrJoinSessionResult" json:"restore_or_join_session_result,omitempty"`
	ConcurrentConnectionJoinResults []*ConcurrentConnectionJoin    `protobuf:"bytes,111,rep,name=concurrent_connection_join_results,json=concurrentConnectionJoinResults" json:"concurrent_connection_join_results,omitempty"`
	LoggedOff                       *LoggedOff                     `protobuf:"bytes,102,opt,name=logged_off,json=loggedOff" json:"logged_off,omitempty"`
	PasswordChangeResult            *PasswordChangeResult          `protobuf:"bytes,103,opt,name=password_change_result,json=passwordChangeResult" json:"password_change_result,omitempty"`
	UserMessages                    []*UserMessage                 `protobuf:"bytes,104,rep,name=user_messages,json=userMessages" json:"user_messages,omitempty"`
	ObtainDemoCredentialsResults    []*ObtainDemoCredentialsResult `protobuf:"bytes,105,rep,name=obtain_demo_credentials_results,json=obtainDemoCredentialsResults" json:"obtain_demo_credentials_results,omitempty"`
	UserSessionStateResults         []*UserSessionStateResult      `protobuf:"bytes,106,rep,name=user_session_state_results,json=userSessionStateResults" json:"user_session_state_results,omitempty"`
	Ping                            *Ping                          `protobuf:"bytes,107,opt,name=ping" json:"ping,omitempty"`
	Pong                            *Pong                          `protobuf:"bytes,108,opt,name=pong" json:"pong,omitempty"`
	LogonRoutineServer              *LogonRoutineServer            `protobuf:"bytes,109,opt,name=logon_routine_server,json=logonRoutineServer" json:"logon_routine_server,omitempty"`
	PasswordChangeRoutineServer     *PasswordChangeRoutineServer   `protobuf:"bytes,110,opt,name=password_change_routine_server,json=passwordChangeRoutineServer" json:"password_change_routine_server,omitempty"`
	SetCollapsingLevelResults       []*SetCollapsingLevelResult    `protobuf:"bytes,112,rep,name=set_collapsing_level_results,json=setCollapsingLevelResults" json:"set_collapsing_level_results,omitempty"`
	// Reports with requested information.
	InformationReports []*InformationReport `protobuf:"bytes,1,rep,name=information_reports,json=informationReports" json:"information_reports,omitempty"`
	// Trade routing messages from server.
	OrderRequestRejects       []*OrderRequestReject      `protobuf:"bytes,2,rep,name=order_request_rejects,json=orderRequestRejects" json:"order_request_rejects,omitempty"`
	OrderRequestAcks          []*OrderRequestAck         `protobuf:"bytes,25,rep,name=order_request_acks,json=orderRequestAcks" json:"order_request_acks,omitempty"`
	TradeSubscriptionStatuses []*TradeSubscriptionStatus `protobuf:"bytes,3,rep,name=trade_subscription_statuses,json=tradeSubscriptionStatuses" json:"trade_subscription_statuses,omitempty"`
	TradeSnapshotCompletions  []*TradeSnapshotCompletion `protobuf:"bytes,4,rep,name=trade_snapshot_completions,json=tradeSnapshotCompletions" json:"trade_snapshot_completions,omitempty"`
	OrderStatuses             []*OrderStatus             `protobuf:"bytes,5,rep,name=order_statuses,json=orderStatuses" json:"order_statuses,omitempty"`
	PositionStatuses          []*PositionStatus          `protobuf:"bytes,6,rep,name=position_statuses,json=positionStatuses" json:"position_statuses,omitempty"`
	// Deprecated: Marked as deprecated in protos/WebAPI/webapi_2.proto.
	CollateralStatuses       []*CollateralStatus       `protobuf:"bytes,7,rep,name=collateral_statuses,json=collateralStatuses" json:"collateral_statuses,omitempty"`
	AccountSummaryStatuses   []*AccountSummaryStatus   `protobuf:"bytes,24,rep,name=account_summary_statuses,json=accountSummaryStatuses" json:"account_summary_statuses,omitempty"`
	ExchangePositionStatuses []*ExchangePositionStatus `protobuf:"bytes,28,rep,name=exchange_position_statuses,json=exchangePositionStatuses" json:"exchange_position_statuses,omitempty"`
	ExchangeBalanceStatuses  []*ExchangeBalanceStatus  `protobuf:"bytes,29,rep,name=exchange_balance_statuses,json=exchangeBalanceStatuses" json:"exchange_balance_statuses,omitempty"`
	GoFlatStatuses           []*GoFlatStatus           `protobuf:"bytes,30,rep,name=go_flat_statuses,json=goFlatStatuses" json:"go_flat_statuses,omitempty"`
	// Market data messages from server.
	MarketDataSubscriptionStatuses []*MarketDataSubscriptionStatus `protobuf:"bytes,8,rep,name=market_data_subscription_statuses,json=marketDataSubscriptionStatuses" json:"market_data_subscription_statuses,omitempty"`
	RealTimeMarketData             []*RealTimeMarketData           `protobuf:"bytes,9,rep,name=real_time_market_data,json=realTimeMarketData" json:"real_time_market_data,omitempty"`
	// / Historical data.
	TimeAndSalesReports  []*TimeAndSalesReport  `protobuf:"bytes,12,rep,name=time_and_sales_reports,json=timeAndSalesReports" json:"time_and_sales_reports,omitempty"`
	TimeBarReports       []*TimeBarReport       `protobuf:"bytes,13,rep,name=time_bar_reports,json=timeBarReports" json:"time_bar_reports,omitempty"`
	VolumeProfileReports []*VolumeProfileReport `protobuf:"bytes,14,rep,name=volume_profile_reports,json=volumeProfileReports" json:"volume_profile_reports,omitempty"`
	NonTimedBarReports   []*NonTimedBarReport   `protobuf:"bytes,19,rep,name=non_timed_bar_reports,json=nonTimedBarReports" json:"non_timed_bar_reports,omitempty"`
	// Results of rules requests.
	RuleResults []*RuleResult `protobuf:"bytes,15,rep,name=rule_results,json=ruleResults" json:"rule_results,omitempty"`
	// Result messages for accounts that require separate authorization process.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/webapi_2.proto.
	AccountLogonResults                 []*AccountLogonResult                 `protobuf:"bytes,16,rep,name=account_logon_results,json=accountLogonResults" json:"account_logon_results,omitempty"`
	AccountPasswordChangeResults        []*AccountPasswordChangeResult        `protobuf:"bytes,17,rep,name=account_password_change_results,json=accountPasswordChangeResults" json:"account_password_change_results,omitempty"`
	AccountLogoffResults                []*AccountLogoffResult                `protobuf:"bytes,18,rep,name=account_logoff_results,json=accountLogoffResults" json:"account_logoff_results,omitempty"`
	AccountLogonRoutinesServer          []*AccountLogonRoutineServer          `protobuf:"bytes,26,rep,name=account_logon_routines_server,json=accountLogonRoutinesServer" json:"account_logon_routines_server,omitempty"`
	AccountPasswordChangeRoutinesServer []*AccountPasswordChangeRoutineServer `protobuf:"bytes,27,rep,name=account_password_change_routines_server,json=accountPasswordChangeRoutinesServer" json:"account_password_change_routines_server,omitempty"`
	// Results of Meta-data change request.
	MetadataAdminResults []*MetadataAdminResult `protobuf:"bytes,20,rep,name=metadata_admin_results,json=metadataAdminResults" json:"metadata_admin_results,omitempty"`
	// Results of OTC request.
	OtcReports []*OtcReport `protobuf:"bytes,21,rep,name=otc_reports,json=otcReports" json:"otc_reports,omitempty"`
	// RFQ reports.
	RfqReports []*RFQReport `protobuf:"bytes,22,rep,name=rfq_reports,json=rfqReports" json:"rfq_reports,omitempty"`
	// Results of option calculation request.
	OptionCalculationReports []*OptionCalculationReport `protobuf:"bytes,23,rep,name=option_calculation_reports,json=optionCalculationReports" json:"option_calculation_reports,omitempty"`
	// RFQ subscription reports.
	RfqSubscriptionReports []*RFQSubscriptionReport `protobuf:"bytes,200,rep,name=rfq_subscription_reports,json=rfqSubscriptionReports" json:"rfq_subscription_reports,omitempty"`
}

func (x *ServerMsg) Reset() {
	*x = ServerMsg{}
	mi := &file_protos_WebAPI_webapi_2_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerMsg) ProtoMessage() {}

func (x *ServerMsg) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_webapi_2_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerMsg.ProtoReflect.Descriptor instead.
func (*ServerMsg) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_webapi_2_proto_rawDescGZIP(), []int{1}
}

func (x *ServerMsg) GetLogonResult() *LogonResult {
	if x != nil {
		return x.LogonResult
	}
	return nil
}

func (x *ServerMsg) GetRestoreOrJoinSessionResult() *RestoreOrJoinSessionResult {
	if x != nil {
		return x.RestoreOrJoinSessionResult
	}
	return nil
}

func (x *ServerMsg) GetConcurrentConnectionJoinResults() []*ConcurrentConnectionJoin {
	if x != nil {
		return x.ConcurrentConnectionJoinResults
	}
	return nil
}

func (x *ServerMsg) GetLoggedOff() *LoggedOff {
	if x != nil {
		return x.LoggedOff
	}
	return nil
}

func (x *ServerMsg) GetPasswordChangeResult() *PasswordChangeResult {
	if x != nil {
		return x.PasswordChangeResult
	}
	return nil
}

func (x *ServerMsg) GetUserMessages() []*UserMessage {
	if x != nil {
		return x.UserMessages
	}
	return nil
}

func (x *ServerMsg) GetObtainDemoCredentialsResults() []*ObtainDemoCredentialsResult {
	if x != nil {
		return x.ObtainDemoCredentialsResults
	}
	return nil
}

func (x *ServerMsg) GetUserSessionStateResults() []*UserSessionStateResult {
	if x != nil {
		return x.UserSessionStateResults
	}
	return nil
}

func (x *ServerMsg) GetPing() *Ping {
	if x != nil {
		return x.Ping
	}
	return nil
}

func (x *ServerMsg) GetPong() *Pong {
	if x != nil {
		return x.Pong
	}
	return nil
}

func (x *ServerMsg) GetLogonRoutineServer() *LogonRoutineServer {
	if x != nil {
		return x.LogonRoutineServer
	}
	return nil
}

func (x *ServerMsg) GetPasswordChangeRoutineServer() *PasswordChangeRoutineServer {
	if x != nil {
		return x.PasswordChangeRoutineServer
	}
	return nil
}

func (x *ServerMsg) GetSetCollapsingLevelResults() []*SetCollapsingLevelResult {
	if x != nil {
		return x.SetCollapsingLevelResults
	}
	return nil
}

func (x *ServerMsg) GetInformationReports() []*InformationReport {
	if x != nil {
		return x.InformationReports
	}
	return nil
}

func (x *ServerMsg) GetOrderRequestRejects() []*OrderRequestReject {
	if x != nil {
		return x.OrderRequestRejects
	}
	return nil
}

func (x *ServerMsg) GetOrderRequestAcks() []*OrderRequestAck {
	if x != nil {
		return x.OrderRequestAcks
	}
	return nil
}

func (x *ServerMsg) GetTradeSubscriptionStatuses() []*TradeSubscriptionStatus {
	if x != nil {
		return x.TradeSubscriptionStatuses
	}
	return nil
}

func (x *ServerMsg) GetTradeSnapshotCompletions() []*TradeSnapshotCompletion {
	if x != nil {
		return x.TradeSnapshotCompletions
	}
	return nil
}

func (x *ServerMsg) GetOrderStatuses() []*OrderStatus {
	if x != nil {
		return x.OrderStatuses
	}
	return nil
}

func (x *ServerMsg) GetPositionStatuses() []*PositionStatus {
	if x != nil {
		return x.PositionStatuses
	}
	return nil
}

// Deprecated: Marked as deprecated in protos/WebAPI/webapi_2.proto.
func (x *ServerMsg) GetCollateralStatuses() []*CollateralStatus {
	if x != nil {
		return x.CollateralStatuses
	}
	return nil
}

func (x *ServerMsg) GetAccountSummaryStatuses() []*AccountSummaryStatus {
	if x != nil {
		return x.AccountSummaryStatuses
	}
	return nil
}

func (x *ServerMsg) GetExchangePositionStatuses() []*ExchangePositionStatus {
	if x != nil {
		return x.ExchangePositionStatuses
	}
	return nil
}

func (x *ServerMsg) GetExchangeBalanceStatuses() []*ExchangeBalanceStatus {
	if x != nil {
		return x.ExchangeBalanceStatuses
	}
	return nil
}

func (x *ServerMsg) GetGoFlatStatuses() []*GoFlatStatus {
	if x != nil {
		return x.GoFlatStatuses
	}
	return nil
}

func (x *ServerMsg) GetMarketDataSubscriptionStatuses() []*MarketDataSubscriptionStatus {
	if x != nil {
		return x.MarketDataSubscriptionStatuses
	}
	return nil
}

func (x *ServerMsg) GetRealTimeMarketData() []*RealTimeMarketData {
	if x != nil {
		return x.RealTimeMarketData
	}
	return nil
}

func (x *ServerMsg) GetTimeAndSalesReports() []*TimeAndSalesReport {
	if x != nil {
		return x.TimeAndSalesReports
	}
	return nil
}

func (x *ServerMsg) GetTimeBarReports() []*TimeBarReport {
	if x != nil {
		return x.TimeBarReports
	}
	return nil
}

func (x *ServerMsg) GetVolumeProfileReports() []*VolumeProfileReport {
	if x != nil {
		return x.VolumeProfileReports
	}
	return nil
}

func (x *ServerMsg) GetNonTimedBarReports() []*NonTimedBarReport {
	if x != nil {
		return x.NonTimedBarReports
	}
	return nil
}

func (x *ServerMsg) GetRuleResults() []*RuleResult {
	if x != nil {
		return x.RuleResults
	}
	return nil
}

// Deprecated: Marked as deprecated in protos/WebAPI/webapi_2.proto.
func (x *ServerMsg) GetAccountLogonResults() []*AccountLogonResult {
	if x != nil {
		return x.AccountLogonResults
	}
	return nil
}

func (x *ServerMsg) GetAccountPasswordChangeResults() []*AccountPasswordChangeResult {
	if x != nil {
		return x.AccountPasswordChangeResults
	}
	return nil
}

func (x *ServerMsg) GetAccountLogoffResults() []*AccountLogoffResult {
	if x != nil {
		return x.AccountLogoffResults
	}
	return nil
}

func (x *ServerMsg) GetAccountLogonRoutinesServer() []*AccountLogonRoutineServer {
	if x != nil {
		return x.AccountLogonRoutinesServer
	}
	return nil
}

func (x *ServerMsg) GetAccountPasswordChangeRoutinesServer() []*AccountPasswordChangeRoutineServer {
	if x != nil {
		return x.AccountPasswordChangeRoutinesServer
	}
	return nil
}

func (x *ServerMsg) GetMetadataAdminResults() []*MetadataAdminResult {
	if x != nil {
		return x.MetadataAdminResults
	}
	return nil
}

func (x *ServerMsg) GetOtcReports() []*OtcReport {
	if x != nil {
		return x.OtcReports
	}
	return nil
}

func (x *ServerMsg) GetRfqReports() []*RFQReport {
	if x != nil {
		return x.RfqReports
	}
	return nil
}

func (x *ServerMsg) GetOptionCalculationReports() []*OptionCalculationReport {
	if x != nil {
		return x.OptionCalculationReports
	}
	return nil
}

func (x *ServerMsg) GetRfqSubscriptionReports() []*RFQSubscriptionReport {
	if x != nil {
		return x.RfqSubscriptionReports
	}
	return nil
}

// Request for information.
// There must be only one request type
// (e.g. accountsRequest and lastStatementBalancesRequest can not be sent at the same time).
type InformationRequest struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// ID of a request and optional subscription that should be unique enough to match responses
	// and updates with corresponding requests.
	Id *uint32 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	// If set to true then corresponding reports are also sent when requested information is changed during the session.
	// If set to false then subscription is dropped.
	// If omitted then data is returned without changing subscription status.
	Subscribe *bool `protobuf:"varint,2,opt,name=subscribe" json:"subscribe,omitempty"`
	// Request for authorized accounts for trading.
	// Only one subscription is possible.
	// Request rate is limited, 100 per 24 hours by default.
	// Request is accepted only if the user is not subscribed
	// and there is no pending request for this information at the moment.
	AccountsRequest *AccountsRequest `protobuf:"bytes,3,opt,name=accounts_request,json=accountsRequest" json:"accounts_request,omitempty"`
	// Request symbol resolution with optional subscription.
	// Request rate is limited, 10000 per 24 hours by default.
	// NOTE: subscription is essential to follow active contract switching.
	SymbolResolutionRequest *SymbolResolutionRequest `protobuf:"bytes,4,opt,name=symbol_resolution_request,json=symbolResolutionRequest" json:"symbol_resolution_request,omitempty"`
	// Request for balances from the last statement for all authorized accounts.
	// Only one subscription is possible.
	// Request rate is limited, 100 per 24 hours by default.
	// Request is accepted only if the user is not subscribed
	// and there is no pending request for this information at the moment.
	LastStatementBalancesRequest *LastStatementBalancesRequest `protobuf:"bytes,5,opt,name=last_statement_balances_request,json=lastStatementBalancesRequest" json:"last_statement_balances_request,omitempty"`
	// Request for currency rates for all brokerages user's accounts belong to.
	// Only one subscription is possible.
	// Request rate is limited, 100 per 24 hours by default.
	// Request is accepted only if the user is not subscribed
	// and there is no pending request for this information at the moment.
	CurrencyRatesRequest *CurrencyRatesRequest `protobuf:"bytes,6,opt,name=currency_rates_request,json=currencyRatesRequest" json:"currency_rates_request,omitempty"`
	// Request for currency rate source contracts for all brokerages user's accounts belong to.
	// Only one subscription is possible.
	// Request rate is limited, 100 per 24 hours by default.
	// Request is accepted only if the user is not subscribed
	// and there is no pending request for this information at the moment.
	CurrencyRateSourcesRequest *CurrencyRateSourcesRequest `protobuf:"bytes,41,opt,name=currency_rate_sources_request,json=currencyRateSourcesRequest" json:"currency_rate_sources_request,omitempty"`
	// Request for session information.
	// Number of simultaneous requests in processing is limited, 10 by default.
	// Number of simultaneous session information update subscriptions is limited, 200 by default.
	// Request is accepted only if the user is not subscribed for this information at the moment.
	SessionInformationRequest *SessionInformationRequest `protobuf:"bytes,7,opt,name=session_information_request,json=sessionInformationRequest" json:"session_information_request,omitempty"`
	// Request for a list of historical orders (including all transactions) according to a search criteria.
	// Number of simultaneous requests in processing is limited, 1 by default.
	// The request depth is limited, 30 days by default.
	// Subscription is not supported for this request.
	HistoricalOrdersRequest *HistoricalOrdersRequest `protobuf:"bytes,13,opt,name=historical_orders_request,json=historicalOrdersRequest" json:"historical_orders_request,omitempty"`
	// Request a list of option maturities.
	// Number of simultaneous requests in processing is limited, 5 by default.
	// Number of simultaneous update subscriptions is limited, 100 by default.
	OptionMaturityListRequest *OptionMaturityListRequest `protobuf:"bytes,14,opt,name=option_maturity_list_request,json=optionMaturityListRequest" json:"option_maturity_list_request,omitempty"`
	// Request a group of instruments.
	// Number of simultaneous requests in processing is limited, 5 by default.
	// Number of simultaneous update subscriptions is limited, 100 by default.
	InstrumentGroupRequest *InstrumentGroupRequest `protobuf:"bytes,15,opt,name=instrument_group_request,json=instrumentGroupRequest" json:"instrument_group_request,omitempty"`
	// Request at-the-money strike for the option maturity.
	// Number of simultaneous requests in processing is limited, 5 by default.
	// Number of simultaneous update subscriptions is limited, 100 by default.
	AtTheMoneyStrikeRequest *AtTheMoneyStrikeRequest `protobuf:"bytes,16,opt,name=at_the_money_strike_request,json=atTheMoneyStrikeRequest" json:"at_the_money_strike_request,omitempty"`
	// Request strategy definition with no subscription.
	// Request rate is limited, 10000 per 24 hours by default.
	StrategyDefinitionRequest *StrategyDefinitionRequest `protobuf:"bytes,17,opt,name=strategy_definition_request,json=strategyDefinitionRequest" json:"strategy_definition_request,omitempty"`
	// Request for session timerange information.
	// Number of simultaneous requests in processing is limited, 10 by default.
	// The request range is limited. 1 year/1000 sessions by default.
	// Subscription is NOT supported for this request, so subscribe flag will be ignored.
	SessionTimerangeRequest *SessionTimeRangeRequest `protobuf:"bytes,18,opt,name=session_timerange_request,json=sessionTimerangeRequest" json:"session_timerange_request,omitempty"`
	// Request for trading day timerange information.
	// Number of simultaneous requests in processing is limited, 10 by default.
	// The request range is limited. 1 year/250 trading days by default.
	// Subscription is NOT supported for this request, so subscribe flag will be ignored.
	TradingDayTimerangeRequest *TradingDayTimeRangeRequest `protobuf:"bytes,19,opt,name=trading_day_timerange_request,json=tradingDayTimerangeRequest" json:"trading_day_timerange_request,omitempty"`
	// Request of order entitlements.
	// Number of simultaneous requests in processing is limited, 100 by default.
	// Subscription is not supported for this request.
	OrderEntitlementRequest *OrderEntitlementRequest `protobuf:"bytes,20,opt,name=order_entitlement_request,json=orderEntitlementRequest" json:"order_entitlement_request,omitempty"`
	// Request for a symbol category tree for a particular root. each category can have a list of sub-categories.
	// Number of simultaneous requests in processing is limited, 100 by default.
	// Number of simultaneous update subscriptions is limited, 100 by default.
	// There can be only one subscription per category root for updates.
	SymbolCategoryListRequest *SymbolCategoryListRequest `protobuf:"bytes,21,opt,name=symbol_category_list_request,json=symbolCategoryListRequest" json:"symbol_category_list_request,omitempty"`
	// Request for a specific category by its ID.
	// Number of simultaneous requests in processing is limited, 1000 by default.
	// Number of simultaneous update subscriptions is limited, 1000 by default.
	SymbolCategoryRequest *SymbolCategoryRequest `protobuf:"bytes,27,opt,name=symbol_category_request,json=symbolCategoryRequest" json:"symbol_category_request,omitempty"`
	// Request for a list of category symbols matching input instrument client type.
	// Requests rate is limited, 30 per 60 seconds by default.
	// Number of simultaneous requests in processing is limited, 5 by default.
	// Subscription is not supported for this request.
	SymbolCategoryListByInstrumentTypeRequest *SymbolCategoryListByInstrumentTypeRequest `protobuf:"bytes,33,opt,name=symbol_category_list_by_instrument_type_request,json=symbolCategoryListByInstrumentTypeRequest" json:"symbol_category_list_by_instrument_type_request,omitempty"`
	// Request for a list of symbols according to a specified filter.
	// Number of simultaneous requests in processing is limited, 150 by default.
	// Number of simultaneous update subscriptions is limited, 150 by default.
	SymbolListRequest *SymbolListRequest `protobuf:"bytes,22,opt,name=symbol_list_request,json=symbolListRequest" json:"symbol_list_request,omitempty"`
	// Request for a specific symbol by its ID.
	// Request rate is limited, 10000 per 24 hours by default.
	// Number of simultaneous requests in processing is limited, 150 by default.
	// Subscription is not supported for this request.
	SymbolRequest *SymbolRequest `protobuf:"bytes,23,opt,name=symbol_request,json=symbolRequest" json:"symbol_request,omitempty"`
	// Request contract metadata by contract ID.
	ContractMetadataRequest *ContractMetadataRequest `protobuf:"bytes,25,opt,name=contract_metadata_request,json=contractMetadataRequest" json:"contract_metadata_request,omitempty"`
	// Request algo strategy definitions.
	// Number of simultaneous requests in processing is limited, 100 by default.
	// Subscription is not supported for this request.
	AlgoStrategyDefinitionRequest *AlgoStrategyDefinitionRequest `protobuf:"bytes,26,opt,name=algo_strategy_definition_request,json=algoStrategyDefinitionRequest" json:"algo_strategy_definition_request,omitempty"`
	// Request contributor metadata by contributor group ID.
	// Request rate is limited, 300 per 1 hour by default.
	// Number of simultaneous requests in processing is limited, 300 by default.
	// Number of simultaneous update subscriptions is limited, 300 by default.
	ContributorMetadataRequest *ContributorMetadataRequest `protobuf:"bytes,28,opt,name=contributor_metadata_request,json=contributorMetadataRequest" json:"contributor_metadata_request,omitempty"`
	// WebAPI user limits request.
	// Number of subscriptions and simultaneous requests in processing is limited, 1 by default.
	ApiLimitRequest *ApiLimitRequest `protobuf:"bytes,29,opt,name=api_limit_request,json=apiLimitRequest" json:"api_limit_request,omitempty"`
	// Request for trading feature entitlements.
	// Number of simultaneous requests in processing is limited, 100 by default.
	// Subscription is not supported for this request.
	BrokerageTradingFeatureEntitlementRequest *BrokerageTradingFeatureEntitlementRequest `protobuf:"bytes,30,opt,name=brokerage_trading_feature_entitlement_request,json=brokerageTradingFeatureEntitlementRequest" json:"brokerage_trading_feature_entitlement_request,omitempty"`
	// Request for a single order status.
	// Request rate is limited, 5 per 5 seconds by default.
	// Subscription is not supported for this request.
	OrderStatusRequest *OrderStatusRequest `protobuf:"bytes,31,opt,name=order_status_request,json=orderStatusRequest" json:"order_status_request,omitempty"`
	// Request for a list of product symbols matching the search criteria.
	// Requests rate is limited, 30 per 60 seconds by default.
	// Number of simultaneous requests in processing is limited, 5 by default.
	// Subscription is not supported for this request.
	ProductSearchRequest *ProductSearchRequest `protobuf:"bytes,32,opt,name=product_search_request,json=productSearchRequest" json:"product_search_request,omitempty"`
	// Request MarketState metadata by MarketState group ID.
	// Request rate is limited, 300 per 1 hour by default.
	// Number of simultaneous requests in processing is limited, 300 by default.
	// Number of simultaneous update subscriptions is limited, 300 by default.
	MarketStateMetadataRequest *MarketStateMetadataRequest `protobuf:"bytes,34,opt,name=market_state_metadata_request,json=marketStateMetadataRequest" json:"market_state_metadata_request,omitempty"`
	// Request (non-strategy) instrument definition with no subscription.
	// Request rate is limited, 10000 per 24 hours by default.
	InstrumentDefinitionRequest *InstrumentDefinitionRequest `protobuf:"bytes,35,opt,name=instrument_definition_request,json=instrumentDefinitionRequest" json:"instrument_definition_request,omitempty"`
	// Request metadata of available exchanges.
	// Number of subscriptions and simultaneous requests in processing is limited, 1 per connection by default.
	ExchangeMetadataRequest *ExchangeMetadataRequest `protobuf:"bytes,36,opt,name=exchange_metadata_request,json=exchangeMetadataRequest" json:"exchange_metadata_request,omitempty"`
	// Request for a subscription on metadata for a group of instruments based on given list of securities.
	// Request rate is limited, 10000 per 24 hours by default.
	// Number of simultaneous requests in processing is limited, 5 by default.
	// Number of simultaneous update subscriptions is limited, 100 by default.
	// Multiple subscriptions on the same set of securities are prohibited.
	InstrumentGroupBySecuritiesRequest *InstrumentGroupBySecuritiesRequest `protobuf:"bytes,37,opt,name=instrument_group_by_securities_request,json=instrumentGroupBySecuritiesRequest" json:"instrument_group_by_securities_request,omitempty"`
	// Request for a subscription on metadata for a group of instruments of a particular exchange.
	// Request rate is limited, 10000 per 24 hours by default.
	// Number of simultaneous requests in processing is limited, 5 by default.
	// Number of simultaneous update subscriptions is limited, 100 by default.
	// Multiple subscriptions on the same exchange ID are prohibited.
	InstrumentGroupByExchangeRequest *InstrumentGroupByExchangeRequest `protobuf:"bytes,38,opt,name=instrument_group_by_exchange_request,json=instrumentGroupByExchangeRequest" json:"instrument_group_by_exchange_request,omitempty"`
	// Request for a list of securities for a particular exchange.
	// Request rate is limited, 300 per 1 hour by default.
	// Number of simultaneous requests in processing is limited, 300 by default.
	// Number of simultaneous update subscriptions is limited, 300 by default.
	ExchangeSecuritiesRequest *ExchangeSecuritiesRequest `protobuf:"bytes,39,opt,name=exchange_securities_request,json=exchangeSecuritiesRequest" json:"exchange_securities_request,omitempty"`
	// Request for care auto activation parameters for the user.
	// Only one subscription is possible.
	// Request is accepted only if the user is not subscribed
	// and there is no pending request for this information at the moment.
	CareAutoActivationParametersRequest *CareAutoActivationParametersRequest `protobuf:"bytes,40,opt,name=care_auto_activation_parameters_request,json=careAutoActivationParametersRequest" json:"care_auto_activation_parameters_request,omitempty"`
	// Request for account risk parameters.
	// Number of simultaneous requests in processing is limited, 1 by default.
	// Subscription is not supported for this request.
	AccountRiskParametersRequest *AccountRiskParametersRequest `protobuf:"bytes,42,opt,name=account_risk_parameters_request,json=accountRiskParametersRequest" json:"account_risk_parameters_request,omitempty"`
	// Request list of countries with metadata for them.
	// Request rate is limited, 5 per 5 seconds by default.
	// Number of simultaneous requests in processing is limited, 10 by default.
	// Number of simultaneous update subscriptions is limited, 10 by default.
	CountryListRequest *CountryListRequest `protobuf:"bytes,43,opt,name=country_list_request,json=countryListRequest" json:"country_list_request,omitempty"`
	// Request for calendar events.
	// Request rate is limited, 60 per 60 seconds by default.
	// Number of simultaneous requests in processing is limited, 50 by default.
	// Number of simultaneous update subscriptions is limited, 1 per connection by default.
	CalendarEventListRequest *CalendarEventListRequest `protobuf:"bytes,44,opt,name=calendar_event_list_request,json=calendarEventListRequest" json:"calendar_event_list_request,omitempty"`
	// Request list of calendar event providers.
	// Request rate is limited, 5 per 5 seconds by default.
	// Number of simultaneous requests in processing is limited, 10 by default.
	// Number of simultaneous update subscriptions is limited, 10 by default.
	CalendarEventProviderListRequest *CalendarEventProviderListRequest `protobuf:"bytes,45,opt,name=calendar_event_provider_list_request,json=calendarEventProviderListRequest" json:"calendar_event_provider_list_request,omitempty"`
	// Request list of calendar event types.
	// Request rate is limited, 5 per 5 seconds by default.
	// Number of simultaneous requests in processing is limited, 10 by default.
	// Number of simultaneous update subscriptions is limited, 10 by default.
	CalendarEventTypeListRequest *CalendarEventTypeListRequest `protobuf:"bytes,46,opt,name=calendar_event_type_list_request,json=calendarEventTypeListRequest" json:"calendar_event_type_list_request,omitempty"`
}

func (x *InformationRequest) Reset() {
	*x = InformationRequest{}
	mi := &file_protos_WebAPI_webapi_2_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InformationRequest) ProtoMessage() {}

func (x *InformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_webapi_2_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InformationRequest.ProtoReflect.Descriptor instead.
func (*InformationRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_webapi_2_proto_rawDescGZIP(), []int{2}
}

func (x *InformationRequest) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *InformationRequest) GetSubscribe() bool {
	if x != nil && x.Subscribe != nil {
		return *x.Subscribe
	}
	return false
}

func (x *InformationRequest) GetAccountsRequest() *AccountsRequest {
	if x != nil {
		return x.AccountsRequest
	}
	return nil
}

func (x *InformationRequest) GetSymbolResolutionRequest() *SymbolResolutionRequest {
	if x != nil {
		return x.SymbolResolutionRequest
	}
	return nil
}

func (x *InformationRequest) GetLastStatementBalancesRequest() *LastStatementBalancesRequest {
	if x != nil {
		return x.LastStatementBalancesRequest
	}
	return nil
}

func (x *InformationRequest) GetCurrencyRatesRequest() *CurrencyRatesRequest {
	if x != nil {
		return x.CurrencyRatesRequest
	}
	return nil
}

func (x *InformationRequest) GetCurrencyRateSourcesRequest() *CurrencyRateSourcesRequest {
	if x != nil {
		return x.CurrencyRateSourcesRequest
	}
	return nil
}

func (x *InformationRequest) GetSessionInformationRequest() *SessionInformationRequest {
	if x != nil {
		return x.SessionInformationRequest
	}
	return nil
}

func (x *InformationRequest) GetHistoricalOrdersRequest() *HistoricalOrdersRequest {
	if x != nil {
		return x.HistoricalOrdersRequest
	}
	return nil
}

func (x *InformationRequest) GetOptionMaturityListRequest() *OptionMaturityListRequest {
	if x != nil {
		return x.OptionMaturityListRequest
	}
	return nil
}

func (x *InformationRequest) GetInstrumentGroupRequest() *InstrumentGroupRequest {
	if x != nil {
		return x.InstrumentGroupRequest
	}
	return nil
}

func (x *InformationRequest) GetAtTheMoneyStrikeRequest() *AtTheMoneyStrikeRequest {
	if x != nil {
		return x.AtTheMoneyStrikeRequest
	}
	return nil
}

func (x *InformationRequest) GetStrategyDefinitionRequest() *StrategyDefinitionRequest {
	if x != nil {
		return x.StrategyDefinitionRequest
	}
	return nil
}

func (x *InformationRequest) GetSessionTimerangeRequest() *SessionTimeRangeRequest {
	if x != nil {
		return x.SessionTimerangeRequest
	}
	return nil
}

func (x *InformationRequest) GetTradingDayTimerangeRequest() *TradingDayTimeRangeRequest {
	if x != nil {
		return x.TradingDayTimerangeRequest
	}
	return nil
}

func (x *InformationRequest) GetOrderEntitlementRequest() *OrderEntitlementRequest {
	if x != nil {
		return x.OrderEntitlementRequest
	}
	return nil
}

func (x *InformationRequest) GetSymbolCategoryListRequest() *SymbolCategoryListRequest {
	if x != nil {
		return x.SymbolCategoryListRequest
	}
	return nil
}

func (x *InformationRequest) GetSymbolCategoryRequest() *SymbolCategoryRequest {
	if x != nil {
		return x.SymbolCategoryRequest
	}
	return nil
}

func (x *InformationRequest) GetSymbolCategoryListByInstrumentTypeRequest() *SymbolCategoryListByInstrumentTypeRequest {
	if x != nil {
		return x.SymbolCategoryListByInstrumentTypeRequest
	}
	return nil
}

func (x *InformationRequest) GetSymbolListRequest() *SymbolListRequest {
	if x != nil {
		return x.SymbolListRequest
	}
	return nil
}

func (x *InformationRequest) GetSymbolRequest() *SymbolRequest {
	if x != nil {
		return x.SymbolRequest
	}
	return nil
}

func (x *InformationRequest) GetContractMetadataRequest() *ContractMetadataRequest {
	if x != nil {
		return x.ContractMetadataRequest
	}
	return nil
}

func (x *InformationRequest) GetAlgoStrategyDefinitionRequest() *AlgoStrategyDefinitionRequest {
	if x != nil {
		return x.AlgoStrategyDefinitionRequest
	}
	return nil
}

func (x *InformationRequest) GetContributorMetadataRequest() *ContributorMetadataRequest {
	if x != nil {
		return x.ContributorMetadataRequest
	}
	return nil
}

func (x *InformationRequest) GetApiLimitRequest() *ApiLimitRequest {
	if x != nil {
		return x.ApiLimitRequest
	}
	return nil
}

func (x *InformationRequest) GetBrokerageTradingFeatureEntitlementRequest() *BrokerageTradingFeatureEntitlementRequest {
	if x != nil {
		return x.BrokerageTradingFeatureEntitlementRequest
	}
	return nil
}

func (x *InformationRequest) GetOrderStatusRequest() *OrderStatusRequest {
	if x != nil {
		return x.OrderStatusRequest
	}
	return nil
}

func (x *InformationRequest) GetProductSearchRequest() *ProductSearchRequest {
	if x != nil {
		return x.ProductSearchRequest
	}
	return nil
}

func (x *InformationRequest) GetMarketStateMetadataRequest() *MarketStateMetadataRequest {
	if x != nil {
		return x.MarketStateMetadataRequest
	}
	return nil
}

func (x *InformationRequest) GetInstrumentDefinitionRequest() *InstrumentDefinitionRequest {
	if x != nil {
		return x.InstrumentDefinitionRequest
	}
	return nil
}

func (x *InformationRequest) GetExchangeMetadataRequest() *ExchangeMetadataRequest {
	if x != nil {
		return x.ExchangeMetadataRequest
	}
	return nil
}

func (x *InformationRequest) GetInstrumentGroupBySecuritiesRequest() *InstrumentGroupBySecuritiesRequest {
	if x != nil {
		return x.InstrumentGroupBySecuritiesRequest
	}
	return nil
}

func (x *InformationRequest) GetInstrumentGroupByExchangeRequest() *InstrumentGroupByExchangeRequest {
	if x != nil {
		return x.InstrumentGroupByExchangeRequest
	}
	return nil
}

func (x *InformationRequest) GetExchangeSecuritiesRequest() *ExchangeSecuritiesRequest {
	if x != nil {
		return x.ExchangeSecuritiesRequest
	}
	return nil
}

func (x *InformationRequest) GetCareAutoActivationParametersRequest() *CareAutoActivationParametersRequest {
	if x != nil {
		return x.CareAutoActivationParametersRequest
	}
	return nil
}

func (x *InformationRequest) GetAccountRiskParametersRequest() *AccountRiskParametersRequest {
	if x != nil {
		return x.AccountRiskParametersRequest
	}
	return nil
}

func (x *InformationRequest) GetCountryListRequest() *CountryListRequest {
	if x != nil {
		return x.CountryListRequest
	}
	return nil
}

func (x *InformationRequest) GetCalendarEventListRequest() *CalendarEventListRequest {
	if x != nil {
		return x.CalendarEventListRequest
	}
	return nil
}

func (x *InformationRequest) GetCalendarEventProviderListRequest() *CalendarEventProviderListRequest {
	if x != nil {
		return x.CalendarEventProviderListRequest
	}
	return nil
}

func (x *InformationRequest) GetCalendarEventTypeListRequest() *CalendarEventTypeListRequest {
	if x != nil {
		return x.CalendarEventTypeListRequest
	}
	return nil
}

// Report with requested information and subscription updates.
// It will contain only one report type at the same time (related to id).
// NOTE: In some cases the response may not have a typed report field (e.g in case of multiple chunks,
//
//	if it is the last chunk, see is_report_complete field).
type InformationReport struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Report ID is equal to a corresponding request and subscription ID.
	Id *uint32 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	// True means that requested data is complete at the moment,
	// false means more report messages are expected for completeness.
	IsReportComplete *bool `protobuf:"varint,2,opt,name=is_report_complete,json=isReportComplete,def=1" json:"is_report_complete,omitempty"`
	// This field is associated with StatusCode enum type.
	StatusCode *uint32 `protobuf:"varint,3,req,name=status_code,json=statusCode" json:"status_code,omitempty"`
	// Possible details of status or failure.
	TextMessage *string `protobuf:"bytes,4,opt,name=text_message,json=textMessage" json:"text_message,omitempty"`
	// Report with trading accounts.
	AccountsReport *AccountsReport `protobuf:"bytes,5,opt,name=accounts_report,json=accountsReport" json:"accounts_report,omitempty"`
	// Resolved symbol initial information or update.
	SymbolResolutionReport *SymbolResolutionReport `protobuf:"bytes,6,opt,name=symbol_resolution_report,json=symbolResolutionReport" json:"symbol_resolution_report,omitempty"`
	// Report with balances from the last statement for all authorized accounts.
	LastStatementBalancesReport *LastStatementBalancesReport `protobuf:"bytes,7,opt,name=last_statement_balances_report,json=lastStatementBalancesReport" json:"last_statement_balances_report,omitempty"`
	// Report with currency rates per brokerage.
	CurrencyRatesReport *CurrencyRatesReport `protobuf:"bytes,8,opt,name=currency_rates_report,json=currencyRatesReport" json:"currency_rates_report,omitempty"`
	// Report with currency rate source contracts.
	CurrencyRateSourcesReport *CurrencyRateSourcesReport `protobuf:"bytes,43,opt,name=currency_rate_sources_report,json=currencyRateSourcesReport" json:"currency_rate_sources_report,omitempty"`
	// Report with session information.
	SessionInformationReport *SessionInformationReport `protobuf:"bytes,9,opt,name=session_information_report,json=sessionInformationReport" json:"session_information_report,omitempty"`
	// Report with a list of historical orders according to specified parameters.
	HistoricalOrdersReport *HistoricalOrdersReport `protobuf:"bytes,15,opt,name=historical_orders_report,json=historicalOrdersReport" json:"historical_orders_report,omitempty"`
	// Report with a list of option maturities.
	OptionMaturityListReport *OptionMaturityListReport `protobuf:"bytes,16,opt,name=option_maturity_list_report,json=optionMaturityListReport" json:"option_maturity_list_report,omitempty"`
	// Report with a group of instruments.
	InstrumentGroupReport *InstrumentGroupReport `protobuf:"bytes,17,opt,name=instrument_group_report,json=instrumentGroupReport" json:"instrument_group_report,omitempty"`
	// Report with at-the-money strikes.
	AtTheMoneyStrikeReport *AtTheMoneyStrikeReport `protobuf:"bytes,18,opt,name=at_the_money_strike_report,json=atTheMoneyStrikeReport" json:"at_the_money_strike_report,omitempty"`
	// Report with the defined strategy metadata.
	// This field can be filled in case of STATUS_CODE_FAILURE, if the exchange response contains a strategy
	// that differs significantly from the requested one.
	// Example: user wants to define UDS(A - B), but opposite UDS(B - A) already exists on exchange.
	StrategyDefinitionReport *StrategyDefinitionReport `protobuf:"bytes,19,opt,name=strategy_definition_report,json=strategyDefinitionReport" json:"strategy_definition_report,omitempty"`
	// Report with session timerange information.
	SessionTimerangeReport *SessionTimeRangeReport `protobuf:"bytes,20,opt,name=session_timerange_report,json=sessionTimerangeReport" json:"session_timerange_report,omitempty"`
	// Report with trading day timerange information.
	TradingDayTimerangeReport *TradingDayTimeRangeReport `protobuf:"bytes,21,opt,name=trading_day_timerange_report,json=tradingDayTimerangeReport" json:"trading_day_timerange_report,omitempty"`
	// Report with order entitlements.
	OrderEntitlementReport *OrderEntitlementReport `protobuf:"bytes,22,opt,name=order_entitlement_report,json=orderEntitlementReport" json:"order_entitlement_report,omitempty"`
	// Report with a symbol category tree for a particular root.
	SymbolCategoryListReport *SymbolCategoryListReport `protobuf:"bytes,23,opt,name=symbol_category_list_report,json=symbolCategoryListReport" json:"symbol_category_list_report,omitempty"`
	// Report with a symbol category.
	SymbolCategoryReport *SymbolCategoryReport `protobuf:"bytes,29,opt,name=symbol_category_report,json=symbolCategoryReport" json:"symbol_category_report,omitempty"`
	// Report with a list of matched category symbols.
	SymbolCategoryListByInstrumentTypeReport *SymbolCategoryListByInstrumentTypeReport `protobuf:"bytes,35,opt,name=symbol_category_list_by_instrument_type_report,json=symbolCategoryListByInstrumentTypeReport" json:"symbol_category_list_by_instrument_type_report,omitempty"`
	// Report with a list of found symbols.
	SymbolListReport *SymbolListReport `protobuf:"bytes,24,opt,name=symbol_list_report,json=symbolListReport" json:"symbol_list_report,omitempty"`
	// Report with a symbol.
	SymbolReport *SymbolReport `protobuf:"bytes,25,opt,name=symbol_report,json=symbolReport" json:"symbol_report,omitempty"`
	// Report with the requested contract metadata.
	ContractMetadataReport *ContractMetadataReport `protobuf:"bytes,27,opt,name=contract_metadata_report,json=contractMetadataReport" json:"contract_metadata_report,omitempty"`
	// Report with algo strategies definitions.
	AlgoStrategyDefinitionReport *AlgoStrategyDefinitionReport `protobuf:"bytes,28,opt,name=algo_strategy_definition_report,json=algoStrategyDefinitionReport" json:"algo_strategy_definition_report,omitempty"`
	// Report with contributor metadata.
	ContributorMetadataReport *ContributorMetadataReport `protobuf:"bytes,30,opt,name=contributor_metadata_report,json=contributorMetadataReport" json:"contributor_metadata_report,omitempty"`
	// Report with WebAPI limit values.
	ApiLimitReport *ApiLimitReport `protobuf:"bytes,31,opt,name=api_limit_report,json=apiLimitReport" json:"api_limit_report,omitempty"`
	// Report with trading feature entitlements.
	BrokerageTradingFeatureEntitlementReport *BrokerageTradingFeatureEntitlementReport `protobuf:"bytes,32,opt,name=brokerage_trading_feature_entitlement_report,json=brokerageTradingFeatureEntitlementReport" json:"brokerage_trading_feature_entitlement_report,omitempty"`
	// Report with an order status.
	OrderStatusReport *OrderStatusReport `protobuf:"bytes,33,opt,name=order_status_report,json=orderStatusReport" json:"order_status_report,omitempty"`
	// Report with a list of found product symbols.
	ProductSearchReport *ProductSearchReport `protobuf:"bytes,34,opt,name=product_search_report,json=productSearchReport" json:"product_search_report,omitempty"`
	// Report with Market State/Status metadata.
	MarketStateMetadataReport *MarketStateMetadataReport `protobuf:"bytes,36,opt,name=market_state_metadata_report,json=marketStateMetadataReport" json:"market_state_metadata_report,omitempty"`
	// Report with the defined (non-strategy) instrument metadata.
	InstrumentDefinitionReport *InstrumentDefinitionReport `protobuf:"bytes,37,opt,name=instrument_definition_report,json=instrumentDefinitionReport" json:"instrument_definition_report,omitempty"`
	// Report with exchange metadata
	ExchangeMetadataReport *ExchangeMetadataReport `protobuf:"bytes,38,opt,name=exchange_metadata_report,json=exchangeMetadataReport" json:"exchange_metadata_report,omitempty"`
	// Report with a group of instruments for a particular set of securities.
	InstrumentGroupBySecuritiesReport *InstrumentGroupBySecuritiesReport `protobuf:"bytes,39,opt,name=instrument_group_by_securities_report,json=instrumentGroupBySecuritiesReport" json:"instrument_group_by_securities_report,omitempty"`
	// Report with a group of instruments for a particular exchnage securities.
	InstrumentGroupByExchangeReport *InstrumentGroupByExchangeReport `protobuf:"bytes,40,opt,name=instrument_group_by_exchange_report,json=instrumentGroupByExchangeReport" json:"instrument_group_by_exchange_report,omitempty"`
	// Report with a list of securities for a particular exchange.
	ExchangeSecuritiesReport *ExchangeSecuritiesReport `protobuf:"bytes,41,opt,name=exchange_securities_report,json=exchangeSecuritiesReport" json:"exchange_securities_report,omitempty"`
	// Report with a list of care auto activation parameters.
	CareAutoActivationParametersReport *CareAutoActivationParametersReport `protobuf:"bytes,42,opt,name=care_auto_activation_parameters_report,json=careAutoActivationParametersReport" json:"care_auto_activation_parameters_report,omitempty"`
	// Report with account risk parameters.
	AccountRiskParametersReport *AccountRiskParametersReport `protobuf:"bytes,44,opt,name=account_risk_parameters_report,json=accountRiskParametersReport" json:"account_risk_parameters_report,omitempty"`
	// Report with a list of contries.
	CountryListReport *CountryListReport `protobuf:"bytes,45,opt,name=country_list_report,json=countryListReport" json:"country_list_report,omitempty"`
	// Report with a list of calendar events.
	CalendarEventListReport *CalendarEventListReport `protobuf:"bytes,46,opt,name=calendar_event_list_report,json=calendarEventListReport" json:"calendar_event_list_report,omitempty"`
	// Report with a list of calendar event providers.
	CalendarEventProviderListReport *CalendarEventProviderListReport `protobuf:"bytes,47,opt,name=calendar_event_provider_list_report,json=calendarEventProviderListReport" json:"calendar_event_provider_list_report,omitempty"`
	// Report with a list of calendar event types.
	CalendarEventTypeListReport *CalendarEventTypeListReport `protobuf:"bytes,48,opt,name=calendar_event_type_list_report,json=calendarEventTypeListReport" json:"calendar_event_type_list_report,omitempty"`
}

// Default values for InformationReport fields.
const (
	Default_InformationReport_IsReportComplete = bool(true)
)

func (x *InformationReport) Reset() {
	*x = InformationReport{}
	mi := &file_protos_WebAPI_webapi_2_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InformationReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InformationReport) ProtoMessage() {}

func (x *InformationReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_webapi_2_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InformationReport.ProtoReflect.Descriptor instead.
func (*InformationReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_webapi_2_proto_rawDescGZIP(), []int{3}
}

func (x *InformationReport) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *InformationReport) GetIsReportComplete() bool {
	if x != nil && x.IsReportComplete != nil {
		return *x.IsReportComplete
	}
	return Default_InformationReport_IsReportComplete
}

func (x *InformationReport) GetStatusCode() uint32 {
	if x != nil && x.StatusCode != nil {
		return *x.StatusCode
	}
	return 0
}

func (x *InformationReport) GetTextMessage() string {
	if x != nil && x.TextMessage != nil {
		return *x.TextMessage
	}
	return ""
}

func (x *InformationReport) GetAccountsReport() *AccountsReport {
	if x != nil {
		return x.AccountsReport
	}
	return nil
}

func (x *InformationReport) GetSymbolResolutionReport() *SymbolResolutionReport {
	if x != nil {
		return x.SymbolResolutionReport
	}
	return nil
}

func (x *InformationReport) GetLastStatementBalancesReport() *LastStatementBalancesReport {
	if x != nil {
		return x.LastStatementBalancesReport
	}
	return nil
}

func (x *InformationReport) GetCurrencyRatesReport() *CurrencyRatesReport {
	if x != nil {
		return x.CurrencyRatesReport
	}
	return nil
}

func (x *InformationReport) GetCurrencyRateSourcesReport() *CurrencyRateSourcesReport {
	if x != nil {
		return x.CurrencyRateSourcesReport
	}
	return nil
}

func (x *InformationReport) GetSessionInformationReport() *SessionInformationReport {
	if x != nil {
		return x.SessionInformationReport
	}
	return nil
}

func (x *InformationReport) GetHistoricalOrdersReport() *HistoricalOrdersReport {
	if x != nil {
		return x.HistoricalOrdersReport
	}
	return nil
}

func (x *InformationReport) GetOptionMaturityListReport() *OptionMaturityListReport {
	if x != nil {
		return x.OptionMaturityListReport
	}
	return nil
}

func (x *InformationReport) GetInstrumentGroupReport() *InstrumentGroupReport {
	if x != nil {
		return x.InstrumentGroupReport
	}
	return nil
}

func (x *InformationReport) GetAtTheMoneyStrikeReport() *AtTheMoneyStrikeReport {
	if x != nil {
		return x.AtTheMoneyStrikeReport
	}
	return nil
}

func (x *InformationReport) GetStrategyDefinitionReport() *StrategyDefinitionReport {
	if x != nil {
		return x.StrategyDefinitionReport
	}
	return nil
}

func (x *InformationReport) GetSessionTimerangeReport() *SessionTimeRangeReport {
	if x != nil {
		return x.SessionTimerangeReport
	}
	return nil
}

func (x *InformationReport) GetTradingDayTimerangeReport() *TradingDayTimeRangeReport {
	if x != nil {
		return x.TradingDayTimerangeReport
	}
	return nil
}

func (x *InformationReport) GetOrderEntitlementReport() *OrderEntitlementReport {
	if x != nil {
		return x.OrderEntitlementReport
	}
	return nil
}

func (x *InformationReport) GetSymbolCategoryListReport() *SymbolCategoryListReport {
	if x != nil {
		return x.SymbolCategoryListReport
	}
	return nil
}

func (x *InformationReport) GetSymbolCategoryReport() *SymbolCategoryReport {
	if x != nil {
		return x.SymbolCategoryReport
	}
	return nil
}

func (x *InformationReport) GetSymbolCategoryListByInstrumentTypeReport() *SymbolCategoryListByInstrumentTypeReport {
	if x != nil {
		return x.SymbolCategoryListByInstrumentTypeReport
	}
	return nil
}

func (x *InformationReport) GetSymbolListReport() *SymbolListReport {
	if x != nil {
		return x.SymbolListReport
	}
	return nil
}

func (x *InformationReport) GetSymbolReport() *SymbolReport {
	if x != nil {
		return x.SymbolReport
	}
	return nil
}

func (x *InformationReport) GetContractMetadataReport() *ContractMetadataReport {
	if x != nil {
		return x.ContractMetadataReport
	}
	return nil
}

func (x *InformationReport) GetAlgoStrategyDefinitionReport() *AlgoStrategyDefinitionReport {
	if x != nil {
		return x.AlgoStrategyDefinitionReport
	}
	return nil
}

func (x *InformationReport) GetContributorMetadataReport() *ContributorMetadataReport {
	if x != nil {
		return x.ContributorMetadataReport
	}
	return nil
}

func (x *InformationReport) GetApiLimitReport() *ApiLimitReport {
	if x != nil {
		return x.ApiLimitReport
	}
	return nil
}

func (x *InformationReport) GetBrokerageTradingFeatureEntitlementReport() *BrokerageTradingFeatureEntitlementReport {
	if x != nil {
		return x.BrokerageTradingFeatureEntitlementReport
	}
	return nil
}

func (x *InformationReport) GetOrderStatusReport() *OrderStatusReport {
	if x != nil {
		return x.OrderStatusReport
	}
	return nil
}

func (x *InformationReport) GetProductSearchReport() *ProductSearchReport {
	if x != nil {
		return x.ProductSearchReport
	}
	return nil
}

func (x *InformationReport) GetMarketStateMetadataReport() *MarketStateMetadataReport {
	if x != nil {
		return x.MarketStateMetadataReport
	}
	return nil
}

func (x *InformationReport) GetInstrumentDefinitionReport() *InstrumentDefinitionReport {
	if x != nil {
		return x.InstrumentDefinitionReport
	}
	return nil
}

func (x *InformationReport) GetExchangeMetadataReport() *ExchangeMetadataReport {
	if x != nil {
		return x.ExchangeMetadataReport
	}
	return nil
}

func (x *InformationReport) GetInstrumentGroupBySecuritiesReport() *InstrumentGroupBySecuritiesReport {
	if x != nil {
		return x.InstrumentGroupBySecuritiesReport
	}
	return nil
}

func (x *InformationReport) GetInstrumentGroupByExchangeReport() *InstrumentGroupByExchangeReport {
	if x != nil {
		return x.InstrumentGroupByExchangeReport
	}
	return nil
}

func (x *InformationReport) GetExchangeSecuritiesReport() *ExchangeSecuritiesReport {
	if x != nil {
		return x.ExchangeSecuritiesReport
	}
	return nil
}

func (x *InformationReport) GetCareAutoActivationParametersReport() *CareAutoActivationParametersReport {
	if x != nil {
		return x.CareAutoActivationParametersReport
	}
	return nil
}

func (x *InformationReport) GetAccountRiskParametersReport() *AccountRiskParametersReport {
	if x != nil {
		return x.AccountRiskParametersReport
	}
	return nil
}

func (x *InformationReport) GetCountryListReport() *CountryListReport {
	if x != nil {
		return x.CountryListReport
	}
	return nil
}

func (x *InformationReport) GetCalendarEventListReport() *CalendarEventListReport {
	if x != nil {
		return x.CalendarEventListReport
	}
	return nil
}

func (x *InformationReport) GetCalendarEventProviderListReport() *CalendarEventProviderListReport {
	if x != nil {
		return x.CalendarEventProviderListReport
	}
	return nil
}

func (x *InformationReport) GetCalendarEventTypeListReport() *CalendarEventTypeListReport {
	if x != nil {
		return x.CalendarEventTypeListReport
	}
	return nil
}

var File_protos_WebAPI_webapi_2_proto protoreflect.FileDescriptor

var file_protos_WebAPI_webapi_2_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49, 0x2f,
	0x77, 0x65, 0x62, 0x61, 0x70, 0x69, 0x5f, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08,
	0x57, 0x65, 0x62, 0x41, 0x50, 0x49, 0x5f, 0x32, 0x1a, 0x2b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65,
	0x62, 0x41, 0x50, 0x49, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57,
	0x65, 0x62, 0x41, 0x50, 0x49, 0x2f, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x63,
	0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x5f, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49, 0x2f, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49, 0x2f, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49,
	0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x24, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49,
	0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f,
	0x57, 0x65, 0x62, 0x41, 0x50, 0x49, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62,
	0x41, 0x50, 0x49, 0x2f, 0x6f, 0x74, 0x63, 0x5f, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49, 0x2f, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x5f, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49, 0x2f, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x5f, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49, 0x2f, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x5f, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41,
	0x50, 0x49, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x25, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49, 0x2f, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57,
	0x65, 0x62, 0x41, 0x50, 0x49, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa2, 0x14, 0x0a, 0x09, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x2b, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x6f,
	0x6e, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x6e, 0x52, 0x05,
	0x6c, 0x6f, 0x67, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x17, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x6f, 0x72, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4f,
	0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x72, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x4f, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x6f, 0x66, 0x66, 0x18, 0x66, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x32, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x66, 0x66, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x6f,
	0x66, 0x66, 0x12, 0x47, 0x0a, 0x0f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x5d, 0x0a, 0x17, 0x6f,
	0x62, 0x74, 0x61, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x6d, 0x6f, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x4f, 0x62,
	0x74, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x6d, 0x6f, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x52, 0x15, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x6d, 0x6f, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x64, 0x0a, 0x1a, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x17, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e,
	0x50, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x6f,
	0x6e, 0x67, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x50, 0x6f, 0x6e, 0x67, 0x52, 0x04,
	0x70, 0x6f, 0x6e, 0x67, 0x12, 0x54, 0x0a, 0x14, 0x6c, 0x6f, 0x67, 0x6f, 0x6e, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x6d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x32, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x12, 0x6c, 0x6f, 0x67, 0x6f, 0x6e, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x70, 0x0a, 0x1e, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x6e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x32, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52,
	0x1b, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x6a, 0x0a, 0x1c,
	0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x6f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x69, 0x6e,
	0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x19, 0x73,
	0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x14, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49, 0x5f,
	0x32, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x13, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x53, 0x0a, 0x13, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3c,
	0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x32,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x61, 0x0a, 0x19,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x58, 0x0a, 0x17, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x61, 0x6c, 0x65,
	0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x32, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x61, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x11, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x62, 0x61, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x12, 0x5a, 0x0a, 0x17, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x32, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x15, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12,
	0x55, 0x0a, 0x16, 0x6e, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x72,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x32, 0x2e, 0x4e,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x42, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x13, 0x6e, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x42, 0x61, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x0d, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0c, 0x72, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x12, 0x5f, 0x0a, 0x16, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x6e, 0x42, 0x02, 0x18, 0x01, 0x52, 0x14, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x12, 0x77, 0x0a, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x1d, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x5e, 0x0a, 0x17, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x66, 0x66, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f,
	0x67, 0x6f, 0x66, 0x66, 0x52, 0x15, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x67,
	0x6f, 0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x75, 0x0a, 0x1d, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x1a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c,
	0x6f, 0x67, 0x6f, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x73, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x91, 0x01, 0x0a, 0x27, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x23, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x73,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x5e, 0x0a, 0x17, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x32, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x15, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x0c, 0x6f, 0x74, 0x63, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f,
	0x74, 0x63, 0x5f, 0x31, 0x2e, 0x4f, 0x74, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0b, 0x6f, 0x74, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x0c,
	0x72, 0x66, 0x71, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x32, 0x2e, 0x52, 0x46, 0x51, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x72,
	0x66, 0x71, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x67, 0x0a, 0x1b, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x19, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x12, 0x62, 0x0a, 0x19, 0x72, 0x66, 0x71, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x18, 0xc8, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x52, 0x46, 0x51, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x17,
	0x72, 0x66, 0x71, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x2a, 0x06, 0x08, 0xc9, 0x01, 0x10, 0xfa, 0x01, 0x22,
	0xb7, 0x1d, 0x0a, 0x09, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x3e, 0x0a,
	0x0c, 0x6c, 0x6f, 0x67, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x6e, 0x0a,
	0x1e, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6f, 0x72, 0x5f, 0x6a, 0x6f, 0x69, 0x6e,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4f, 0x72,
	0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x1a, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4f, 0x72, 0x4a, 0x6f, 0x69, 0x6e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x75, 0x0a,
	0x22, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x6f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a,
	0x6f, 0x69, 0x6e, 0x52, 0x1f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x6f,
	0x66, 0x66, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64,
	0x4f, 0x66, 0x66, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x12, 0x5a,
	0x0a, 0x16, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x14, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x68, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x32, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c,
	0x75, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x72, 0x0a, 0x1f,
	0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x6d, 0x6f, 0x5f, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x69, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x6d,
	0x6f, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x1c, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x6d, 0x6f, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x12, 0x63, 0x0a, 0x1a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x6a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x17, 0x75, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x6b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x12,
	0x28, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x50,
	0x6f, 0x6e, 0x67, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x12, 0x54, 0x0a, 0x14, 0x6c, 0x6f, 0x67,
	0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x6e, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x12, 0x6c, 0x6f, 0x67,
	0x6f, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x70, 0x0a, 0x1e, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x1b, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x69, 0x0a, 0x1c, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73,
	0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x70, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c,
	0x61, 0x70, 0x73, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x19, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x69, 0x6e, 0x67,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x4c, 0x0a, 0x13,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x57, 0x65, 0x62, 0x41,
	0x50, 0x49, 0x5f, 0x32, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x12, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x4f, 0x0a, 0x15, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x32, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x13, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x12, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x6b,
	0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x32, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63,
	0x6b, 0x52, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41,
	0x63, 0x6b, 0x73, 0x12, 0x68, 0x0a, 0x1b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x19, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x66, 0x0a,
	0x1a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x32, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x65, 0x73, 0x12, 0x4c, 0x0a, 0x11, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x32, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73,
	0x12, 0x56, 0x0a, 0x13, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x32, 0x2e,
	0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x18, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x65, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x32, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x16, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x65, 0x0a, 0x1a, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x32, 0x2e,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x18, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73,
	0x12, 0x62, 0x0a, 0x19, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x1d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x17, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x10, 0x67, 0x6f, 0x5f, 0x66, 0x6c, 0x61, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x32, 0x2e, 0x47, 0x6f, 0x46, 0x6c, 0x61, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x67, 0x6f, 0x46, 0x6c, 0x61, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x76, 0x0a, 0x21, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x1e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x54, 0x0a,
	0x15, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x52, 0x65, 0x61,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x12, 0x72, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x55, 0x0a, 0x16, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f,
	0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c,
	0x5f, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x13, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x61,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x10, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x62, 0x61, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x12, 0x57, 0x0a, 0x16, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x32,
	0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x14, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x52, 0x0a, 0x15, 0x6e, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x32, 0x2e, 0x4e, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x64, 0x42, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x12, 0x6e, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x64, 0x42, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x36,
	0x0a, 0x0c, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x31, 0x2e, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b, 0x72, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x63, 0x0a, 0x15, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x42, 0x02, 0x18, 0x01, 0x52, 0x13, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c,
	0x6f, 0x67, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x7b, 0x0a, 0x1f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x1c, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x62, 0x0a, 0x16, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x66, 0x66, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x66, 0x66,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x14, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c,
	0x6f, 0x67, 0x6f, 0x66, 0x66, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x75, 0x0a, 0x1d,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x6e, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x1a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x1a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4c, 0x6f, 0x67, 0x6f, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x91, 0x01, 0x0a, 0x27, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18,
	0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x52, 0x23, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x5b, 0x0a, 0x16, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x32, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x14,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x0b, 0x6f, 0x74, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6f, 0x74, 0x63, 0x5f,
	0x31, 0x2e, 0x4f, 0x74, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0a, 0x6f, 0x74, 0x63,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x0b, 0x72, 0x66, 0x71, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x52, 0x46, 0x51,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0a, 0x72, 0x66, 0x71, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x12, 0x64, 0x0a, 0x1a, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x18,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x5f, 0x0a, 0x18, 0x72, 0x66, 0x71, 0x5f,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x18, 0xc8, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x52, 0x46, 0x51, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x16, 0x72, 0x66, 0x71, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2a, 0x06, 0x08, 0xc9, 0x01, 0x10, 0xfa,
	0x01, 0x2a, 0x06, 0x08, 0xac, 0x02, 0x10, 0xad, 0x02, 0x22, 0xc7, 0x20, 0x0a, 0x12, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x4d,
	0x0a, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x32, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a,
	0x19, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x17, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x76,
	0x0a, 0x1f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x32, 0x2e, 0x4c, 0x61, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x1c, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x16, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x32, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x70, 0x0a, 0x1d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x32,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x1a, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6c, 0x0a, 0x1b, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x32,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x19, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x64, 0x0a, 0x19, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x32, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x17, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x66, 0x0a, 0x1c, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x19, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x5c, 0x0a, 0x18, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x32, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x16, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x64, 0x0a, 0x1b, 0x61, 0x74, 0x5f, 0x74, 0x68, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x65,
	0x79, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x41, 0x74, 0x54, 0x68, 0x65, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x17,
	0x61, 0x74, 0x54, 0x68, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x65, 0x0a, 0x1b, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x32, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x19, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x66,
	0x0a, 0x19, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x17, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x70, 0x0a, 0x1d, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x32, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x1a, 0x74, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5c, 0x0a, 0x19, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x32, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x17, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6d, 0x0a, 0x1c, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x32,
	0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x19, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x17, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f,
	0x62, 0x72, 0x6f, 0x77, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x32, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x15, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xa0, 0x01, 0x0a, 0x2f, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x62, 0x79, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x62, 0x72, 0x6f, 0x77, 0x73,
	0x69, 0x6e, 0x67, 0x5f, 0x32, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x29, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x13, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x5f, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x32, 0x2e, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x47, 0x0a, 0x0e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x5f, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x32, 0x2e, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x19, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x72, 0x0a, 0x20, 0x61, 0x6c,
	0x67, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f,
	0x32, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x1d, 0x61, 0x6c, 0x67, 0x6f, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x68,
	0x0a, 0x1c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x1a, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x11, 0x61, 0x70, 0x69, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x32, 0x2e, 0x41, 0x70, 0x69, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0f, 0x61, 0x70, 0x69, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x9c, 0x01, 0x0a, 0x2d, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x32, 0x2e, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x29, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x4d, 0x0a, 0x14, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x32, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x12, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x5d, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x69,
	0x6e, 0x67, 0x5f, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x69, 0x0a, 0x1d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x32, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x1a,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x78, 0x0a, 0x1d, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x1b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x19, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x17, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x82, 0x01, 0x0a, 0x26, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x32, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x79, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x22, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7c, 0x0a, 0x24, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62,
	0x79, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x65, 0x0a, 0x1b, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x19, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x8a, 0x01, 0x0a, 0x27, 0x63, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x32, 0x2e, 0x43, 0x61, 0x72, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x23, 0x63, 0x61, 0x72, 0x65, 0x41, 0x75, 0x74,
	0x6f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x74, 0x0a, 0x1f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x69, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x1c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x69, 0x73,
	0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x50, 0x0a, 0x14, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x12, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x6c, 0x0a, 0x1b, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x5f, 0x32, 0x2e,
	0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x18, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64,
	0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x85, 0x01, 0x0a, 0x24, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x2d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x63, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x5f, 0x32, 0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x20, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64,
	0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x79, 0x0a, 0x20, 0x63, 0x61,
	0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x2e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x5f,
	0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x5f, 0x32, 0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e,
	0x64, 0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x1c, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2a, 0x04, 0x08, 0x18, 0x10, 0x19, 0x2a, 0x06, 0x08, 0xc8, 0x01,
	0x10, 0xfa, 0x01, 0x22, 0xc5, 0x23, 0x0a, 0x11, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x12, 0x69, 0x73, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x10, 0x69, 0x73, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x32, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x5c, 0x0a,
	0x18, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x16, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x73, 0x0a, 0x1e, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x32, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x1b, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x5a, 0x0a, 0x15, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x32, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x6d, 0x0a, 0x1c,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x32, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52,
	0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x19, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x61, 0x74, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x69, 0x0a, 0x1a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x32, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x18, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x61, 0x0a, 0x18, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x32, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x16, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x63, 0x0a, 0x1b, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x18, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x59,
	0x0a, 0x17, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x15, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x61, 0x0a, 0x1a, 0x61, 0x74, 0x5f,
	0x74, 0x68, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x41, 0x74,
	0x54, 0x68, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x16, 0x61, 0x74, 0x54, 0x68, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x62, 0x0a, 0x1a,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x32, 0x2e, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x18, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x63, 0x0a, 0x18, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x16, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x6d, 0x0a, 0x1c, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x64, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e,
	0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x19, 0x74, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x59, 0x0a, 0x18, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x32,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x16, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x6a, 0x0a, 0x1b, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x62, 0x72,
	0x6f, 0x77, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x32, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x18, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x5d, 0x0a, 0x16, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x32, 0x2e,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x14, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x9d, 0x01, 0x0a, 0x2e, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x62, 0x72, 0x6f,
	0x77, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x32, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x28, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x51, 0x0a, 0x12, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f,
	0x62, 0x72, 0x6f, 0x77, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x32, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x10, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x44, 0x0a,
	0x0d, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x62, 0x72,
	0x6f, 0x77, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x32, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0c, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x5c, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x6f, 0x0a, 0x1f, 0x61, 0x6c, 0x67, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x32, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x1c, 0x61, 0x6c, 0x67, 0x6f, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x65, 0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f,
	0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x19,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x45, 0x0a, 0x10, 0x61, 0x70, 0x69,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x32, 0x2e, 0x41, 0x70, 0x69, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x0e, 0x61, 0x70, 0x69, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x99, 0x01, 0x0a, 0x2c, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x32, 0x2e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x28, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x4a, 0x0a, 0x13,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x32, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x5a, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x5f, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x66, 0x0a, 0x1c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x19, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x75, 0x0a, 0x1c,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x1a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x5c, 0x0a, 0x18, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x32, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x16, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x7f, 0x0a, 0x25, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x21, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x79, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x79, 0x0a, 0x23, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x1f, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x62, 0x0a,
	0x1a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x18, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x87, 0x01, 0x0a, 0x26, 0x63, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x32, 0x2e, 0x43, 0x61, 0x72, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x22, 0x63, 0x61, 0x72, 0x65, 0x41, 0x75, 0x74,
	0x6f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x71, 0x0a, 0x1e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x2c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x69, 0x73,
	0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x1b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x4d,
	0x0a, 0x13, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x11, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x69, 0x0a,
	0x1a, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x2e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x63, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x5f, 0x32, 0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x17, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x82, 0x01, 0x0a, 0x23, 0x63, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69,
	0x63, 0x5f, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x5f, 0x32, 0x2e, 0x43, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x1f, 0x63, 0x61,
	0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x76, 0x0a,
	0x1f, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69,
	0x63, 0x5f, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x5f, 0x32, 0x2e, 0x43, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x1b, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64,
	0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x95, 0x03, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x1a, 0x0a,
	0x16, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x55, 0x42,
	0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10,
	0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x10,
	0x66, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x68, 0x12, 0x2c, 0x0a, 0x28,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x56,
	0x49, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x69, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52,
	0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x56, 0x49, 0x4f,
	0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x6a, 0x12, 0x2f, 0x0a, 0x2b, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x56, 0x49,
	0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x6b, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x41, 0x52,
	0x47, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x6c, 0x2a, 0x04, 0x08,
	0x1a, 0x10, 0x1b, 0x2a, 0x06, 0x08, 0xc8, 0x01, 0x10, 0xfa, 0x01, 0x2a, 0x32, 0x0a, 0x14, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61,
	0x6a, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f,
	0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x4a, 0x4f, 0x52, 0x10, 0x02, 0x2a,
	0x33, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x4f,
	0x52, 0x10, 0xe6, 0x01, 0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49,
}

var (
	file_protos_WebAPI_webapi_2_proto_rawDescOnce sync.Once
	file_protos_WebAPI_webapi_2_proto_rawDescData = file_protos_WebAPI_webapi_2_proto_rawDesc
)

func file_protos_WebAPI_webapi_2_proto_rawDescGZIP() []byte {
	file_protos_WebAPI_webapi_2_proto_rawDescOnce.Do(func() {
		file_protos_WebAPI_webapi_2_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_WebAPI_webapi_2_proto_rawDescData)
	})
	return file_protos_WebAPI_webapi_2_proto_rawDescData
}

var file_protos_WebAPI_webapi_2_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_protos_WebAPI_webapi_2_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_protos_WebAPI_webapi_2_proto_goTypes = []any{
	(ProtocolVersionMajor)(0),                         // 0: WebAPI_2.ProtocolVersionMajor
	(ProtocolVersionMinor)(0),                         // 1: WebAPI_2.ProtocolVersionMinor
	(InformationReport_StatusCode)(0),                 // 2: WebAPI_2.InformationReport.StatusCode
	(*ClientMsg)(nil),                                 // 3: WebAPI_2.ClientMsg
	(*ServerMsg)(nil),                                 // 4: WebAPI_2.ServerMsg
	(*InformationRequest)(nil),                        // 5: WebAPI_2.InformationRequest
	(*InformationReport)(nil),                         // 6: WebAPI_2.InformationReport
	(*Logon)(nil),                                     // 7: user_session_2.Logon
	(*RestoreOrJoinSession)(nil),                      // 8: user_session_2.RestoreOrJoinSession
	(*Logoff)(nil),                                    // 9: user_session_2.Logoff
	(*PasswordChange)(nil),                            // 10: user_session_2.PasswordChange
	(*ObtainDemoCredentials)(nil),                     // 11: user_session_2.ObtainDemoCredentials
	(*UserSessionStateRequest)(nil),                   // 12: user_session_2.UserSessionStateRequest
	(*Ping)(nil),                                      // 13: user_session_2.Ping
	(*Pong)(nil),                                      // 14: user_session_2.Pong
	(*LogonRoutineClient)(nil),                        // 15: user_session_2.LogonRoutineClient
	(*PasswordChangeRoutineClient)(nil),               // 16: user_session_2.PasswordChangeRoutineClient
	(*SetCollapsingLevelRequest)(nil),                 // 17: user_session_2.SetCollapsingLevelRequest
	(*TradeSubscription)(nil),                         // 18: trade_routing_2.TradeSubscription
	(*OrderRequest)(nil),                              // 19: order_2.OrderRequest
	(*MarketDataSubscription)(nil),                    // 20: market_data_2.MarketDataSubscription
	(*TimeAndSalesRequest)(nil),                       // 21: historical_2.TimeAndSalesRequest
	(*TimeBarRequest)(nil),                            // 22: historical_2.TimeBarRequest
	(*VolumeProfileRequest)(nil),                      // 23: historical_2.VolumeProfileRequest
	(*NonTimedBarRequest)(nil),                        // 24: historical_2.NonTimedBarRequest
	(*RuleRequest)(nil),                               // 25: rules_1.RuleRequest
	(*AccountLogon)(nil),                              // 26: account_authorization_2.AccountLogon
	(*AccountPasswordChange)(nil),                     // 27: account_authorization_2.AccountPasswordChange
	(*AccountLogoff)(nil),                             // 28: account_authorization_2.AccountLogoff
	(*AccountLogonRoutineClient)(nil),                 // 29: account_authorization_2.AccountLogonRoutineClient
	(*AccountPasswordChangeRoutineClient)(nil),        // 30: account_authorization_2.AccountPasswordChangeRoutineClient
	(*MetadataAdminRequest)(nil),                      // 31: metadata_admin_2.MetadataAdminRequest
	(*OtcRequest)(nil),                                // 32: otc_1.OtcRequest
	(*RFQRequest)(nil),                                // 33: market_data_2.RFQRequest
	(*OptionCalculationRequest)(nil),                  // 34: market_data_2.OptionCalculationRequest
	(*RFQSubscriptionRequest)(nil),                    // 35: market_data_2.RFQSubscriptionRequest
	(*LogonResult)(nil),                               // 36: user_session_2.LogonResult
	(*RestoreOrJoinSessionResult)(nil),                // 37: user_session_2.RestoreOrJoinSessionResult
	(*ConcurrentConnectionJoin)(nil),                  // 38: user_session_2.ConcurrentConnectionJoin
	(*LoggedOff)(nil),                                 // 39: user_session_2.LoggedOff
	(*PasswordChangeResult)(nil),                      // 40: user_session_2.PasswordChangeResult
	(*UserMessage)(nil),                               // 41: user_session_2.UserMessage
	(*ObtainDemoCredentialsResult)(nil),               // 42: user_session_2.ObtainDemoCredentialsResult
	(*UserSessionStateResult)(nil),                    // 43: user_session_2.UserSessionStateResult
	(*LogonRoutineServer)(nil),                        // 44: user_session_2.LogonRoutineServer
	(*PasswordChangeRoutineServer)(nil),               // 45: user_session_2.PasswordChangeRoutineServer
	(*SetCollapsingLevelResult)(nil),                  // 46: user_session_2.SetCollapsingLevelResult
	(*OrderRequestReject)(nil),                        // 47: order_2.OrderRequestReject
	(*OrderRequestAck)(nil),                           // 48: order_2.OrderRequestAck
	(*TradeSubscriptionStatus)(nil),                   // 49: trade_routing_2.TradeSubscriptionStatus
	(*TradeSnapshotCompletion)(nil),                   // 50: trade_routing_2.TradeSnapshotCompletion
	(*OrderStatus)(nil),                               // 51: order_2.OrderStatus
	(*PositionStatus)(nil),                            // 52: trade_routing_2.PositionStatus
	(*CollateralStatus)(nil),                          // 53: trade_routing_2.CollateralStatus
	(*AccountSummaryStatus)(nil),                      // 54: trade_routing_2.AccountSummaryStatus
	(*ExchangePositionStatus)(nil),                    // 55: trade_routing_2.ExchangePositionStatus
	(*ExchangeBalanceStatus)(nil),                     // 56: trade_routing_2.ExchangeBalanceStatus
	(*GoFlatStatus)(nil),                              // 57: order_2.GoFlatStatus
	(*MarketDataSubscriptionStatus)(nil),              // 58: market_data_2.MarketDataSubscriptionStatus
	(*RealTimeMarketData)(nil),                        // 59: market_data_2.RealTimeMarketData
	(*TimeAndSalesReport)(nil),                        // 60: historical_2.TimeAndSalesReport
	(*TimeBarReport)(nil),                             // 61: historical_2.TimeBarReport
	(*VolumeProfileReport)(nil),                       // 62: historical_2.VolumeProfileReport
	(*NonTimedBarReport)(nil),                         // 63: historical_2.NonTimedBarReport
	(*RuleResult)(nil),                                // 64: rules_1.RuleResult
	(*AccountLogonResult)(nil),                        // 65: account_authorization_2.AccountLogonResult
	(*AccountPasswordChangeResult)(nil),               // 66: account_authorization_2.AccountPasswordChangeResult
	(*AccountLogoffResult)(nil),                       // 67: account_authorization_2.AccountLogoffResult
	(*AccountLogonRoutineServer)(nil),                 // 68: account_authorization_2.AccountLogonRoutineServer
	(*AccountPasswordChangeRoutineServer)(nil),        // 69: account_authorization_2.AccountPasswordChangeRoutineServer
	(*MetadataAdminResult)(nil),                       // 70: metadata_admin_2.MetadataAdminResult
	(*OtcReport)(nil),                                 // 71: otc_1.OtcReport
	(*RFQReport)(nil),                                 // 72: market_data_2.RFQReport
	(*OptionCalculationReport)(nil),                   // 73: market_data_2.OptionCalculationReport
	(*RFQSubscriptionReport)(nil),                     // 74: market_data_2.RFQSubscriptionReport
	(*AccountsRequest)(nil),                           // 75: trading_account_2.AccountsRequest
	(*SymbolResolutionRequest)(nil),                   // 76: metadata_2.SymbolResolutionRequest
	(*LastStatementBalancesRequest)(nil),              // 77: trading_account_2.LastStatementBalancesRequest
	(*CurrencyRatesRequest)(nil),                      // 78: trading_account_2.CurrencyRatesRequest
	(*CurrencyRateSourcesRequest)(nil),                // 79: trading_account_2.CurrencyRateSourcesRequest
	(*SessionInformationRequest)(nil),                 // 80: trading_session_2.SessionInformationRequest
	(*HistoricalOrdersRequest)(nil),                   // 81: trade_routing_2.HistoricalOrdersRequest
	(*OptionMaturityListRequest)(nil),                 // 82: metadata_2.OptionMaturityListRequest
	(*InstrumentGroupRequest)(nil),                    // 83: metadata_2.InstrumentGroupRequest
	(*AtTheMoneyStrikeRequest)(nil),                   // 84: market_data_2.AtTheMoneyStrikeRequest
	(*StrategyDefinitionRequest)(nil),                 // 85: strategy_2.StrategyDefinitionRequest
	(*SessionTimeRangeRequest)(nil),                   // 86: trading_session_2.SessionTimeRangeRequest
	(*TradingDayTimeRangeRequest)(nil),                // 87: trading_session_2.TradingDayTimeRangeRequest
	(*OrderEntitlementRequest)(nil),                   // 88: order_2.OrderEntitlementRequest
	(*SymbolCategoryListRequest)(nil),                 // 89: symbol_browsing_2.SymbolCategoryListRequest
	(*SymbolCategoryRequest)(nil),                     // 90: symbol_browsing_2.SymbolCategoryRequest
	(*SymbolCategoryListByInstrumentTypeRequest)(nil), // 91: symbol_browsing_2.SymbolCategoryListByInstrumentTypeRequest
	(*SymbolListRequest)(nil),                         // 92: symbol_browsing_2.SymbolListRequest
	(*SymbolRequest)(nil),                             // 93: symbol_browsing_2.SymbolRequest
	(*ContractMetadataRequest)(nil),                   // 94: metadata_2.ContractMetadataRequest
	(*AlgoStrategyDefinitionRequest)(nil),             // 95: strategy_2.AlgoStrategyDefinitionRequest
	(*ContributorMetadataRequest)(nil),                // 96: metadata_2.ContributorMetadataRequest
	(*ApiLimitRequest)(nil),                           // 97: api_limit_2.ApiLimitRequest
	(*BrokerageTradingFeatureEntitlementRequest)(nil), // 98: trade_routing_2.BrokerageTradingFeatureEntitlementRequest
	(*OrderStatusRequest)(nil),                        // 99: order_2.OrderStatusRequest
	(*ProductSearchRequest)(nil),                      // 100: symbol_browsing_2.ProductSearchRequest
	(*MarketStateMetadataRequest)(nil),                // 101: metadata_2.MarketStateMetadataRequest
	(*InstrumentDefinitionRequest)(nil),               // 102: instrument_definition_2.InstrumentDefinitionRequest
	(*ExchangeMetadataRequest)(nil),                   // 103: metadata_2.ExchangeMetadataRequest
	(*InstrumentGroupBySecuritiesRequest)(nil),        // 104: metadata_2.InstrumentGroupBySecuritiesRequest
	(*InstrumentGroupByExchangeRequest)(nil),          // 105: metadata_2.InstrumentGroupByExchangeRequest
	(*ExchangeSecuritiesRequest)(nil),                 // 106: metadata_2.ExchangeSecuritiesRequest
	(*CareAutoActivationParametersRequest)(nil),       // 107: trade_routing_2.CareAutoActivationParametersRequest
	(*AccountRiskParametersRequest)(nil),              // 108: trade_routing_2.AccountRiskParametersRequest
	(*CountryListRequest)(nil),                        // 109: metadata_2.CountryListRequest
	(*CalendarEventListRequest)(nil),                  // 110: economic_calendar_2.CalendarEventListRequest
	(*CalendarEventProviderListRequest)(nil),          // 111: economic_calendar_2.CalendarEventProviderListRequest
	(*CalendarEventTypeListRequest)(nil),              // 112: economic_calendar_2.CalendarEventTypeListRequest
	(*AccountsReport)(nil),                            // 113: trading_account_2.AccountsReport
	(*SymbolResolutionReport)(nil),                    // 114: metadata_2.SymbolResolutionReport
	(*LastStatementBalancesReport)(nil),               // 115: trading_account_2.LastStatementBalancesReport
	(*CurrencyRatesReport)(nil),                       // 116: trading_account_2.CurrencyRatesReport
	(*CurrencyRateSourcesReport)(nil),                 // 117: trading_account_2.CurrencyRateSourcesReport
	(*SessionInformationReport)(nil),                  // 118: trading_session_2.SessionInformationReport
	(*HistoricalOrdersReport)(nil),                    // 119: trade_routing_2.HistoricalOrdersReport
	(*OptionMaturityListReport)(nil),                  // 120: metadata_2.OptionMaturityListReport
	(*InstrumentGroupReport)(nil),                     // 121: metadata_2.InstrumentGroupReport
	(*AtTheMoneyStrikeReport)(nil),                    // 122: market_data_2.AtTheMoneyStrikeReport
	(*StrategyDefinitionReport)(nil),                  // 123: strategy_2.StrategyDefinitionReport
	(*SessionTimeRangeReport)(nil),                    // 124: trading_session_2.SessionTimeRangeReport
	(*TradingDayTimeRangeReport)(nil),                 // 125: trading_session_2.TradingDayTimeRangeReport
	(*OrderEntitlementReport)(nil),                    // 126: order_2.OrderEntitlementReport
	(*SymbolCategoryListReport)(nil),                  // 127: symbol_browsing_2.SymbolCategoryListReport
	(*SymbolCategoryReport)(nil),                      // 128: symbol_browsing_2.SymbolCategoryReport
	(*SymbolCategoryListByInstrumentTypeReport)(nil),  // 129: symbol_browsing_2.SymbolCategoryListByInstrumentTypeReport
	(*SymbolListReport)(nil),                          // 130: symbol_browsing_2.SymbolListReport
	(*SymbolReport)(nil),                              // 131: symbol_browsing_2.SymbolReport
	(*ContractMetadataReport)(nil),                    // 132: metadata_2.ContractMetadataReport
	(*AlgoStrategyDefinitionReport)(nil),              // 133: strategy_2.AlgoStrategyDefinitionReport
	(*ContributorMetadataReport)(nil),                 // 134: metadata_2.ContributorMetadataReport
	(*ApiLimitReport)(nil),                            // 135: api_limit_2.ApiLimitReport
	(*BrokerageTradingFeatureEntitlementReport)(nil),  // 136: trade_routing_2.BrokerageTradingFeatureEntitlementReport
	(*OrderStatusReport)(nil),                         // 137: order_2.OrderStatusReport
	(*ProductSearchReport)(nil),                       // 138: symbol_browsing_2.ProductSearchReport
	(*MarketStateMetadataReport)(nil),                 // 139: metadata_2.MarketStateMetadataReport
	(*InstrumentDefinitionReport)(nil),                // 140: instrument_definition_2.InstrumentDefinitionReport
	(*ExchangeMetadataReport)(nil),                    // 141: metadata_2.ExchangeMetadataReport
	(*InstrumentGroupBySecuritiesReport)(nil),         // 142: metadata_2.InstrumentGroupBySecuritiesReport
	(*InstrumentGroupByExchangeReport)(nil),           // 143: metadata_2.InstrumentGroupByExchangeReport
	(*ExchangeSecuritiesReport)(nil),                  // 144: metadata_2.ExchangeSecuritiesReport
	(*CareAutoActivationParametersReport)(nil),        // 145: trade_routing_2.CareAutoActivationParametersReport
	(*AccountRiskParametersReport)(nil),               // 146: trade_routing_2.AccountRiskParametersReport
	(*CountryListReport)(nil),                         // 147: metadata_2.CountryListReport
	(*CalendarEventListReport)(nil),                   // 148: economic_calendar_2.CalendarEventListReport
	(*CalendarEventProviderListReport)(nil),           // 149: economic_calendar_2.CalendarEventProviderListReport
	(*CalendarEventTypeListReport)(nil),               // 150: economic_calendar_2.CalendarEventTypeListReport
}
var file_protos_WebAPI_webapi_2_proto_depIdxs = []int32{
	7,   // 0: WebAPI_2.ClientMsg.logon:type_name -> user_session_2.Logon
	8,   // 1: WebAPI_2.ClientMsg.restore_or_join_session:type_name -> user_session_2.RestoreOrJoinSession
	9,   // 2: WebAPI_2.ClientMsg.logoff:type_name -> user_session_2.Logoff
	10,  // 3: WebAPI_2.ClientMsg.password_change:type_name -> user_session_2.PasswordChange
	11,  // 4: WebAPI_2.ClientMsg.obtain_demo_credentials:type_name -> user_session_2.ObtainDemoCredentials
	12,  // 5: WebAPI_2.ClientMsg.user_session_state_request:type_name -> user_session_2.UserSessionStateRequest
	13,  // 6: WebAPI_2.ClientMsg.ping:type_name -> user_session_2.Ping
	14,  // 7: WebAPI_2.ClientMsg.pong:type_name -> user_session_2.Pong
	15,  // 8: WebAPI_2.ClientMsg.logon_routine_client:type_name -> user_session_2.LogonRoutineClient
	16,  // 9: WebAPI_2.ClientMsg.password_change_routine_client:type_name -> user_session_2.PasswordChangeRoutineClient
	17,  // 10: WebAPI_2.ClientMsg.set_collapsing_level_request:type_name -> user_session_2.SetCollapsingLevelRequest
	5,   // 11: WebAPI_2.ClientMsg.information_requests:type_name -> WebAPI_2.InformationRequest
	18,  // 12: WebAPI_2.ClientMsg.trade_subscriptions:type_name -> trade_routing_2.TradeSubscription
	19,  // 13: WebAPI_2.ClientMsg.order_requests:type_name -> order_2.OrderRequest
	20,  // 14: WebAPI_2.ClientMsg.market_data_subscriptions:type_name -> market_data_2.MarketDataSubscription
	21,  // 15: WebAPI_2.ClientMsg.time_and_sales_requests:type_name -> historical_2.TimeAndSalesRequest
	22,  // 16: WebAPI_2.ClientMsg.time_bar_requests:type_name -> historical_2.TimeBarRequest
	23,  // 17: WebAPI_2.ClientMsg.volume_profile_requests:type_name -> historical_2.VolumeProfileRequest
	24,  // 18: WebAPI_2.ClientMsg.non_timed_bar_requests:type_name -> historical_2.NonTimedBarRequest
	25,  // 19: WebAPI_2.ClientMsg.rule_requests:type_name -> rules_1.RuleRequest
	26,  // 20: WebAPI_2.ClientMsg.account_logon_requests:type_name -> account_authorization_2.AccountLogon
	27,  // 21: WebAPI_2.ClientMsg.account_password_change_requests:type_name -> account_authorization_2.AccountPasswordChange
	28,  // 22: WebAPI_2.ClientMsg.account_logoff_requests:type_name -> account_authorization_2.AccountLogoff
	29,  // 23: WebAPI_2.ClientMsg.account_logon_routines_client:type_name -> account_authorization_2.AccountLogonRoutineClient
	30,  // 24: WebAPI_2.ClientMsg.account_password_change_routines_client:type_name -> account_authorization_2.AccountPasswordChangeRoutineClient
	31,  // 25: WebAPI_2.ClientMsg.metadata_admin_requests:type_name -> metadata_admin_2.MetadataAdminRequest
	32,  // 26: WebAPI_2.ClientMsg.otc_requests:type_name -> otc_1.OtcRequest
	33,  // 27: WebAPI_2.ClientMsg.rfq_requests:type_name -> market_data_2.RFQRequest
	34,  // 28: WebAPI_2.ClientMsg.option_calculation_requests:type_name -> market_data_2.OptionCalculationRequest
	35,  // 29: WebAPI_2.ClientMsg.rfq_subscription_requests:type_name -> market_data_2.RFQSubscriptionRequest
	36,  // 30: WebAPI_2.ServerMsg.logon_result:type_name -> user_session_2.LogonResult
	37,  // 31: WebAPI_2.ServerMsg.restore_or_join_session_result:type_name -> user_session_2.RestoreOrJoinSessionResult
	38,  // 32: WebAPI_2.ServerMsg.concurrent_connection_join_results:type_name -> user_session_2.ConcurrentConnectionJoin
	39,  // 33: WebAPI_2.ServerMsg.logged_off:type_name -> user_session_2.LoggedOff
	40,  // 34: WebAPI_2.ServerMsg.password_change_result:type_name -> user_session_2.PasswordChangeResult
	41,  // 35: WebAPI_2.ServerMsg.user_messages:type_name -> user_session_2.UserMessage
	42,  // 36: WebAPI_2.ServerMsg.obtain_demo_credentials_results:type_name -> user_session_2.ObtainDemoCredentialsResult
	43,  // 37: WebAPI_2.ServerMsg.user_session_state_results:type_name -> user_session_2.UserSessionStateResult
	13,  // 38: WebAPI_2.ServerMsg.ping:type_name -> user_session_2.Ping
	14,  // 39: WebAPI_2.ServerMsg.pong:type_name -> user_session_2.Pong
	44,  // 40: WebAPI_2.ServerMsg.logon_routine_server:type_name -> user_session_2.LogonRoutineServer
	45,  // 41: WebAPI_2.ServerMsg.password_change_routine_server:type_name -> user_session_2.PasswordChangeRoutineServer
	46,  // 42: WebAPI_2.ServerMsg.set_collapsing_level_results:type_name -> user_session_2.SetCollapsingLevelResult
	6,   // 43: WebAPI_2.ServerMsg.information_reports:type_name -> WebAPI_2.InformationReport
	47,  // 44: WebAPI_2.ServerMsg.order_request_rejects:type_name -> order_2.OrderRequestReject
	48,  // 45: WebAPI_2.ServerMsg.order_request_acks:type_name -> order_2.OrderRequestAck
	49,  // 46: WebAPI_2.ServerMsg.trade_subscription_statuses:type_name -> trade_routing_2.TradeSubscriptionStatus
	50,  // 47: WebAPI_2.ServerMsg.trade_snapshot_completions:type_name -> trade_routing_2.TradeSnapshotCompletion
	51,  // 48: WebAPI_2.ServerMsg.order_statuses:type_name -> order_2.OrderStatus
	52,  // 49: WebAPI_2.ServerMsg.position_statuses:type_name -> trade_routing_2.PositionStatus
	53,  // 50: WebAPI_2.ServerMsg.collateral_statuses:type_name -> trade_routing_2.CollateralStatus
	54,  // 51: WebAPI_2.ServerMsg.account_summary_statuses:type_name -> trade_routing_2.AccountSummaryStatus
	55,  // 52: WebAPI_2.ServerMsg.exchange_position_statuses:type_name -> trade_routing_2.ExchangePositionStatus
	56,  // 53: WebAPI_2.ServerMsg.exchange_balance_statuses:type_name -> trade_routing_2.ExchangeBalanceStatus
	57,  // 54: WebAPI_2.ServerMsg.go_flat_statuses:type_name -> order_2.GoFlatStatus
	58,  // 55: WebAPI_2.ServerMsg.market_data_subscription_statuses:type_name -> market_data_2.MarketDataSubscriptionStatus
	59,  // 56: WebAPI_2.ServerMsg.real_time_market_data:type_name -> market_data_2.RealTimeMarketData
	60,  // 57: WebAPI_2.ServerMsg.time_and_sales_reports:type_name -> historical_2.TimeAndSalesReport
	61,  // 58: WebAPI_2.ServerMsg.time_bar_reports:type_name -> historical_2.TimeBarReport
	62,  // 59: WebAPI_2.ServerMsg.volume_profile_reports:type_name -> historical_2.VolumeProfileReport
	63,  // 60: WebAPI_2.ServerMsg.non_timed_bar_reports:type_name -> historical_2.NonTimedBarReport
	64,  // 61: WebAPI_2.ServerMsg.rule_results:type_name -> rules_1.RuleResult
	65,  // 62: WebAPI_2.ServerMsg.account_logon_results:type_name -> account_authorization_2.AccountLogonResult
	66,  // 63: WebAPI_2.ServerMsg.account_password_change_results:type_name -> account_authorization_2.AccountPasswordChangeResult
	67,  // 64: WebAPI_2.ServerMsg.account_logoff_results:type_name -> account_authorization_2.AccountLogoffResult
	68,  // 65: WebAPI_2.ServerMsg.account_logon_routines_server:type_name -> account_authorization_2.AccountLogonRoutineServer
	69,  // 66: WebAPI_2.ServerMsg.account_password_change_routines_server:type_name -> account_authorization_2.AccountPasswordChangeRoutineServer
	70,  // 67: WebAPI_2.ServerMsg.metadata_admin_results:type_name -> metadata_admin_2.MetadataAdminResult
	71,  // 68: WebAPI_2.ServerMsg.otc_reports:type_name -> otc_1.OtcReport
	72,  // 69: WebAPI_2.ServerMsg.rfq_reports:type_name -> market_data_2.RFQReport
	73,  // 70: WebAPI_2.ServerMsg.option_calculation_reports:type_name -> market_data_2.OptionCalculationReport
	74,  // 71: WebAPI_2.ServerMsg.rfq_subscription_reports:type_name -> market_data_2.RFQSubscriptionReport
	75,  // 72: WebAPI_2.InformationRequest.accounts_request:type_name -> trading_account_2.AccountsRequest
	76,  // 73: WebAPI_2.InformationRequest.symbol_resolution_request:type_name -> metadata_2.SymbolResolutionRequest
	77,  // 74: WebAPI_2.InformationRequest.last_statement_balances_request:type_name -> trading_account_2.LastStatementBalancesRequest
	78,  // 75: WebAPI_2.InformationRequest.currency_rates_request:type_name -> trading_account_2.CurrencyRatesRequest
	79,  // 76: WebAPI_2.InformationRequest.currency_rate_sources_request:type_name -> trading_account_2.CurrencyRateSourcesRequest
	80,  // 77: WebAPI_2.InformationRequest.session_information_request:type_name -> trading_session_2.SessionInformationRequest
	81,  // 78: WebAPI_2.InformationRequest.historical_orders_request:type_name -> trade_routing_2.HistoricalOrdersRequest
	82,  // 79: WebAPI_2.InformationRequest.option_maturity_list_request:type_name -> metadata_2.OptionMaturityListRequest
	83,  // 80: WebAPI_2.InformationRequest.instrument_group_request:type_name -> metadata_2.InstrumentGroupRequest
	84,  // 81: WebAPI_2.InformationRequest.at_the_money_strike_request:type_name -> market_data_2.AtTheMoneyStrikeRequest
	85,  // 82: WebAPI_2.InformationRequest.strategy_definition_request:type_name -> strategy_2.StrategyDefinitionRequest
	86,  // 83: WebAPI_2.InformationRequest.session_timerange_request:type_name -> trading_session_2.SessionTimeRangeRequest
	87,  // 84: WebAPI_2.InformationRequest.trading_day_timerange_request:type_name -> trading_session_2.TradingDayTimeRangeRequest
	88,  // 85: WebAPI_2.InformationRequest.order_entitlement_request:type_name -> order_2.OrderEntitlementRequest
	89,  // 86: WebAPI_2.InformationRequest.symbol_category_list_request:type_name -> symbol_browsing_2.SymbolCategoryListRequest
	90,  // 87: WebAPI_2.InformationRequest.symbol_category_request:type_name -> symbol_browsing_2.SymbolCategoryRequest
	91,  // 88: WebAPI_2.InformationRequest.symbol_category_list_by_instrument_type_request:type_name -> symbol_browsing_2.SymbolCategoryListByInstrumentTypeRequest
	92,  // 89: WebAPI_2.InformationRequest.symbol_list_request:type_name -> symbol_browsing_2.SymbolListRequest
	93,  // 90: WebAPI_2.InformationRequest.symbol_request:type_name -> symbol_browsing_2.SymbolRequest
	94,  // 91: WebAPI_2.InformationRequest.contract_metadata_request:type_name -> metadata_2.ContractMetadataRequest
	95,  // 92: WebAPI_2.InformationRequest.algo_strategy_definition_request:type_name -> strategy_2.AlgoStrategyDefinitionRequest
	96,  // 93: WebAPI_2.InformationRequest.contributor_metadata_request:type_name -> metadata_2.ContributorMetadataRequest
	97,  // 94: WebAPI_2.InformationRequest.api_limit_request:type_name -> api_limit_2.ApiLimitRequest
	98,  // 95: WebAPI_2.InformationRequest.brokerage_trading_feature_entitlement_request:type_name -> trade_routing_2.BrokerageTradingFeatureEntitlementRequest
	99,  // 96: WebAPI_2.InformationRequest.order_status_request:type_name -> order_2.OrderStatusRequest
	100, // 97: WebAPI_2.InformationRequest.product_search_request:type_name -> symbol_browsing_2.ProductSearchRequest
	101, // 98: WebAPI_2.InformationRequest.market_state_metadata_request:type_name -> metadata_2.MarketStateMetadataRequest
	102, // 99: WebAPI_2.InformationRequest.instrument_definition_request:type_name -> instrument_definition_2.InstrumentDefinitionRequest
	103, // 100: WebAPI_2.InformationRequest.exchange_metadata_request:type_name -> metadata_2.ExchangeMetadataRequest
	104, // 101: WebAPI_2.InformationRequest.instrument_group_by_securities_request:type_name -> metadata_2.InstrumentGroupBySecuritiesRequest
	105, // 102: WebAPI_2.InformationRequest.instrument_group_by_exchange_request:type_name -> metadata_2.InstrumentGroupByExchangeRequest
	106, // 103: WebAPI_2.InformationRequest.exchange_securities_request:type_name -> metadata_2.ExchangeSecuritiesRequest
	107, // 104: WebAPI_2.InformationRequest.care_auto_activation_parameters_request:type_name -> trade_routing_2.CareAutoActivationParametersRequest
	108, // 105: WebAPI_2.InformationRequest.account_risk_parameters_request:type_name -> trade_routing_2.AccountRiskParametersRequest
	109, // 106: WebAPI_2.InformationRequest.country_list_request:type_name -> metadata_2.CountryListRequest
	110, // 107: WebAPI_2.InformationRequest.calendar_event_list_request:type_name -> economic_calendar_2.CalendarEventListRequest
	111, // 108: WebAPI_2.InformationRequest.calendar_event_provider_list_request:type_name -> economic_calendar_2.CalendarEventProviderListRequest
	112, // 109: WebAPI_2.InformationRequest.calendar_event_type_list_request:type_name -> economic_calendar_2.CalendarEventTypeListRequest
	113, // 110: WebAPI_2.InformationReport.accounts_report:type_name -> trading_account_2.AccountsReport
	114, // 111: WebAPI_2.InformationReport.symbol_resolution_report:type_name -> metadata_2.SymbolResolutionReport
	115, // 112: WebAPI_2.InformationReport.last_statement_balances_report:type_name -> trading_account_2.LastStatementBalancesReport
	116, // 113: WebAPI_2.InformationReport.currency_rates_report:type_name -> trading_account_2.CurrencyRatesReport
	117, // 114: WebAPI_2.InformationReport.currency_rate_sources_report:type_name -> trading_account_2.CurrencyRateSourcesReport
	118, // 115: WebAPI_2.InformationReport.session_information_report:type_name -> trading_session_2.SessionInformationReport
	119, // 116: WebAPI_2.InformationReport.historical_orders_report:type_name -> trade_routing_2.HistoricalOrdersReport
	120, // 117: WebAPI_2.InformationReport.option_maturity_list_report:type_name -> metadata_2.OptionMaturityListReport
	121, // 118: WebAPI_2.InformationReport.instrument_group_report:type_name -> metadata_2.InstrumentGroupReport
	122, // 119: WebAPI_2.InformationReport.at_the_money_strike_report:type_name -> market_data_2.AtTheMoneyStrikeReport
	123, // 120: WebAPI_2.InformationReport.strategy_definition_report:type_name -> strategy_2.StrategyDefinitionReport
	124, // 121: WebAPI_2.InformationReport.session_timerange_report:type_name -> trading_session_2.SessionTimeRangeReport
	125, // 122: WebAPI_2.InformationReport.trading_day_timerange_report:type_name -> trading_session_2.TradingDayTimeRangeReport
	126, // 123: WebAPI_2.InformationReport.order_entitlement_report:type_name -> order_2.OrderEntitlementReport
	127, // 124: WebAPI_2.InformationReport.symbol_category_list_report:type_name -> symbol_browsing_2.SymbolCategoryListReport
	128, // 125: WebAPI_2.InformationReport.symbol_category_report:type_name -> symbol_browsing_2.SymbolCategoryReport
	129, // 126: WebAPI_2.InformationReport.symbol_category_list_by_instrument_type_report:type_name -> symbol_browsing_2.SymbolCategoryListByInstrumentTypeReport
	130, // 127: WebAPI_2.InformationReport.symbol_list_report:type_name -> symbol_browsing_2.SymbolListReport
	131, // 128: WebAPI_2.InformationReport.symbol_report:type_name -> symbol_browsing_2.SymbolReport
	132, // 129: WebAPI_2.InformationReport.contract_metadata_report:type_name -> metadata_2.ContractMetadataReport
	133, // 130: WebAPI_2.InformationReport.algo_strategy_definition_report:type_name -> strategy_2.AlgoStrategyDefinitionReport
	134, // 131: WebAPI_2.InformationReport.contributor_metadata_report:type_name -> metadata_2.ContributorMetadataReport
	135, // 132: WebAPI_2.InformationReport.api_limit_report:type_name -> api_limit_2.ApiLimitReport
	136, // 133: WebAPI_2.InformationReport.brokerage_trading_feature_entitlement_report:type_name -> trade_routing_2.BrokerageTradingFeatureEntitlementReport
	137, // 134: WebAPI_2.InformationReport.order_status_report:type_name -> order_2.OrderStatusReport
	138, // 135: WebAPI_2.InformationReport.product_search_report:type_name -> symbol_browsing_2.ProductSearchReport
	139, // 136: WebAPI_2.InformationReport.market_state_metadata_report:type_name -> metadata_2.MarketStateMetadataReport
	140, // 137: WebAPI_2.InformationReport.instrument_definition_report:type_name -> instrument_definition_2.InstrumentDefinitionReport
	141, // 138: WebAPI_2.InformationReport.exchange_metadata_report:type_name -> metadata_2.ExchangeMetadataReport
	142, // 139: WebAPI_2.InformationReport.instrument_group_by_securities_report:type_name -> metadata_2.InstrumentGroupBySecuritiesReport
	143, // 140: WebAPI_2.InformationReport.instrument_group_by_exchange_report:type_name -> metadata_2.InstrumentGroupByExchangeReport
	144, // 141: WebAPI_2.InformationReport.exchange_securities_report:type_name -> metadata_2.ExchangeSecuritiesReport
	145, // 142: WebAPI_2.InformationReport.care_auto_activation_parameters_report:type_name -> trade_routing_2.CareAutoActivationParametersReport
	146, // 143: WebAPI_2.InformationReport.account_risk_parameters_report:type_name -> trade_routing_2.AccountRiskParametersReport
	147, // 144: WebAPI_2.InformationReport.country_list_report:type_name -> metadata_2.CountryListReport
	148, // 145: WebAPI_2.InformationReport.calendar_event_list_report:type_name -> economic_calendar_2.CalendarEventListReport
	149, // 146: WebAPI_2.InformationReport.calendar_event_provider_list_report:type_name -> economic_calendar_2.CalendarEventProviderListReport
	150, // 147: WebAPI_2.InformationReport.calendar_event_type_list_report:type_name -> economic_calendar_2.CalendarEventTypeListReport
	148, // [148:148] is the sub-list for method output_type
	148, // [148:148] is the sub-list for method input_type
	148, // [148:148] is the sub-list for extension type_name
	148, // [148:148] is the sub-list for extension extendee
	0,   // [0:148] is the sub-list for field type_name
}

func init() { file_protos_WebAPI_webapi_2_proto_init() }
func file_protos_WebAPI_webapi_2_proto_init() {
	if File_protos_WebAPI_webapi_2_proto != nil {
		return
	}
	file_protos_WebAPI_account_authorization_2_proto_init()
	file_protos_WebAPI_api_limit_2_proto_init()
	file_protos_WebAPI_economic_calendar_2_proto_init()
	file_protos_WebAPI_historical_2_proto_init()
	file_protos_WebAPI_instrument_definition_2_proto_init()
	file_protos_WebAPI_market_data_2_proto_init()
	file_protos_WebAPI_metadata_2_proto_init()
	file_protos_WebAPI_metadata_admin_2_proto_init()
	file_protos_WebAPI_order_2_proto_init()
	file_protos_WebAPI_otc_1_proto_init()
	file_protos_WebAPI_rules_1_proto_init()
	file_protos_WebAPI_strategy_2_proto_init()
	file_protos_WebAPI_symbol_browsing_2_proto_init()
	file_protos_WebAPI_trade_routing_2_proto_init()
	file_protos_WebAPI_trading_account_2_proto_init()
	file_protos_WebAPI_trading_session_2_proto_init()
	file_protos_WebAPI_user_session_2_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_WebAPI_webapi_2_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_WebAPI_webapi_2_proto_goTypes,
		DependencyIndexes: file_protos_WebAPI_webapi_2_proto_depIdxs,
		EnumInfos:         file_protos_WebAPI_webapi_2_proto_enumTypes,
		MessageInfos:      file_protos_WebAPI_webapi_2_proto_msgTypes,
	}.Build()
	File_protos_WebAPI_webapi_2_proto = out.File
	file_protos_WebAPI_webapi_2_proto_rawDesc = nil
	file_protos_WebAPI_webapi_2_proto_goTypes = nil
	file_protos_WebAPI_webapi_2_proto_depIdxs = nil
}
