// Strategy related messages

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: protos/WebAPI/strategy_2.proto

package WebAPI

import (
	common "cqg-api/protos/WebAPI/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Mode of overfill handling.
type StrategyLimitOrderParameters_OverfillMode int32

const (
	// Overfills are allowed and managed by trader.
	StrategyLimitOrderParameters_OVERFILL_MODE_MANUAL StrategyLimitOrderParameters_OverfillMode = 1
	// Overfills are allowed and must be hedged by the server according to strategy quantity ratios.
	StrategyLimitOrderParameters_OVERFILL_MODE_AUTOMATIC_HEDGING StrategyLimitOrderParameters_OverfillMode = 2
	// Minimize probability of overfills.
	StrategyLimitOrderParameters_OVERFILL_MODE_AVOID_OVERFILLS StrategyLimitOrderParameters_OverfillMode = 3
)

// Enum value maps for StrategyLimitOrderParameters_OverfillMode.
var (
	StrategyLimitOrderParameters_OverfillMode_name = map[int32]string{
		1: "OVERFILL_MODE_MANUAL",
		2: "OVERFILL_MODE_AUTOMATIC_HEDGING",
		3: "OVERFILL_MODE_AVOID_OVERFILLS",
	}
	StrategyLimitOrderParameters_OverfillMode_value = map[string]int32{
		"OVERFILL_MODE_MANUAL":            1,
		"OVERFILL_MODE_AUTOMATIC_HEDGING": 2,
		"OVERFILL_MODE_AVOID_OVERFILLS":   3,
	}
)

func (x StrategyLimitOrderParameters_OverfillMode) Enum() *StrategyLimitOrderParameters_OverfillMode {
	p := new(StrategyLimitOrderParameters_OverfillMode)
	*p = x
	return p
}

func (x StrategyLimitOrderParameters_OverfillMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StrategyLimitOrderParameters_OverfillMode) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_strategy_2_proto_enumTypes[0].Descriptor()
}

func (StrategyLimitOrderParameters_OverfillMode) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_strategy_2_proto_enumTypes[0]
}

func (x StrategyLimitOrderParameters_OverfillMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *StrategyLimitOrderParameters_OverfillMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = StrategyLimitOrderParameters_OverfillMode(num)
	return nil
}

// Deprecated: Use StrategyLimitOrderParameters_OverfillMode.Descriptor instead.
func (StrategyLimitOrderParameters_OverfillMode) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_strategy_2_proto_rawDescGZIP(), []int{10, 0}
}

// Defines sizes of what leg orders must be aligned to strategy lots (opposite to work proportionally).
type StrategyLimitOrderParameters_AlignToStrategyLots int32

const (
	// Both primary and secondary leg orders could work its sizes proportionally (without aligning it to strategy lot).
	StrategyLimitOrderParameters_ALIGN_TO_STRATEGY_LOTS_NONE StrategyLimitOrderParameters_AlignToStrategyLots = 1
	// Secondary leg orders must align its size to strategy lots.
	StrategyLimitOrderParameters_ALIGN_TO_STRATEGY_LOTS_SECONDARY_ONLY StrategyLimitOrderParameters_AlignToStrategyLots = 2
	// Both primary and secondary leg orders align its sizes to strategy lots.
	StrategyLimitOrderParameters_ALIGN_TO_STRATEGY_LOTS_ALL StrategyLimitOrderParameters_AlignToStrategyLots = 3
)

// Enum value maps for StrategyLimitOrderParameters_AlignToStrategyLots.
var (
	StrategyLimitOrderParameters_AlignToStrategyLots_name = map[int32]string{
		1: "ALIGN_TO_STRATEGY_LOTS_NONE",
		2: "ALIGN_TO_STRATEGY_LOTS_SECONDARY_ONLY",
		3: "ALIGN_TO_STRATEGY_LOTS_ALL",
	}
	StrategyLimitOrderParameters_AlignToStrategyLots_value = map[string]int32{
		"ALIGN_TO_STRATEGY_LOTS_NONE":           1,
		"ALIGN_TO_STRATEGY_LOTS_SECONDARY_ONLY": 2,
		"ALIGN_TO_STRATEGY_LOTS_ALL":            3,
	}
)

func (x StrategyLimitOrderParameters_AlignToStrategyLots) Enum() *StrategyLimitOrderParameters_AlignToStrategyLots {
	p := new(StrategyLimitOrderParameters_AlignToStrategyLots)
	*p = x
	return p
}

func (x StrategyLimitOrderParameters_AlignToStrategyLots) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StrategyLimitOrderParameters_AlignToStrategyLots) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_strategy_2_proto_enumTypes[1].Descriptor()
}

func (StrategyLimitOrderParameters_AlignToStrategyLots) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_strategy_2_proto_enumTypes[1]
}

func (x StrategyLimitOrderParameters_AlignToStrategyLots) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *StrategyLimitOrderParameters_AlignToStrategyLots) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = StrategyLimitOrderParameters_AlignToStrategyLots(num)
	return nil
}

// Deprecated: Use StrategyLimitOrderParameters_AlignToStrategyLots.Descriptor instead.
func (StrategyLimitOrderParameters_AlignToStrategyLots) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_strategy_2_proto_rawDescGZIP(), []int{10, 1}
}

// The way prices for secondary orders are calculated.
type StrategyLimitOrderParameters_PricingMethod int32

const (
	// Respect each strategy lot price independently.
	StrategyLimitOrderParameters_PRICING_METHOD_INDEPENDENT_LOT_PRICE StrategyLimitOrderParameters_PricingMethod = 1
	// Respect average strategy order price.
	StrategyLimitOrderParameters_PRICING_METHOD_AVERAGE_ORDER_PRICE StrategyLimitOrderParameters_PricingMethod = 2
)

// Enum value maps for StrategyLimitOrderParameters_PricingMethod.
var (
	StrategyLimitOrderParameters_PricingMethod_name = map[int32]string{
		1: "PRICING_METHOD_INDEPENDENT_LOT_PRICE",
		2: "PRICING_METHOD_AVERAGE_ORDER_PRICE",
	}
	StrategyLimitOrderParameters_PricingMethod_value = map[string]int32{
		"PRICING_METHOD_INDEPENDENT_LOT_PRICE": 1,
		"PRICING_METHOD_AVERAGE_ORDER_PRICE":   2,
	}
)

func (x StrategyLimitOrderParameters_PricingMethod) Enum() *StrategyLimitOrderParameters_PricingMethod {
	p := new(StrategyLimitOrderParameters_PricingMethod)
	*p = x
	return p
}

func (x StrategyLimitOrderParameters_PricingMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StrategyLimitOrderParameters_PricingMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_strategy_2_proto_enumTypes[2].Descriptor()
}

func (StrategyLimitOrderParameters_PricingMethod) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_strategy_2_proto_enumTypes[2]
}

func (x StrategyLimitOrderParameters_PricingMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *StrategyLimitOrderParameters_PricingMethod) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = StrategyLimitOrderParameters_PricingMethod(num)
	return nil
}

// Deprecated: Use StrategyLimitOrderParameters_PricingMethod.Descriptor instead.
func (StrategyLimitOrderParameters_PricingMethod) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_strategy_2_proto_rawDescGZIP(), []int{10, 2}
}

// Enumeration of sides of strategy price that STP orders watch for.
type StrategyStopOrderParameters_StopSide int32

const (
	// Bid price of strategy must be matched against STP price.
	StrategyStopOrderParameters_STOP_SIDE_BID StrategyStopOrderParameters_StopSide = 1
	// Ask price of strategy must be matched against STP price.
	StrategyStopOrderParameters_STOP_SIDE_ASK StrategyStopOrderParameters_StopSide = 2
)

// Enum value maps for StrategyStopOrderParameters_StopSide.
var (
	StrategyStopOrderParameters_StopSide_name = map[int32]string{
		1: "STOP_SIDE_BID",
		2: "STOP_SIDE_ASK",
	}
	StrategyStopOrderParameters_StopSide_value = map[string]int32{
		"STOP_SIDE_BID": 1,
		"STOP_SIDE_ASK": 2,
	}
)

func (x StrategyStopOrderParameters_StopSide) Enum() *StrategyStopOrderParameters_StopSide {
	p := new(StrategyStopOrderParameters_StopSide)
	*p = x
	return p
}

func (x StrategyStopOrderParameters_StopSide) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StrategyStopOrderParameters_StopSide) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_strategy_2_proto_enumTypes[3].Descriptor()
}

func (StrategyStopOrderParameters_StopSide) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_strategy_2_proto_enumTypes[3]
}

func (x StrategyStopOrderParameters_StopSide) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *StrategyStopOrderParameters_StopSide) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = StrategyStopOrderParameters_StopSide(num)
	return nil
}

// Deprecated: Use StrategyStopOrderParameters_StopSide.Descriptor instead.
func (StrategyStopOrderParameters_StopSide) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_strategy_2_proto_rawDescGZIP(), []int{11, 0}
}

// Mode of overfill handling.
type StrategyAggregationParameters_AggrOverfillMode int32

const (
	// Minimize probability of overfills: don't place market taking LMT
	// until existing market making LMT on other legs have quantity reduction acknowledge.
	StrategyAggregationParameters_AGGR_OVERFILL_MODE_AVOID_OVERFILLS StrategyAggregationParameters_AggrOverfillMode = 1
	// Place market taking LMTs and then attempt to reduce market making LMT quantity on other legs.
	// There is a window of time where leg orders may be working that total more than the strategy order quantity.
	StrategyAggregationParameters_AGGR_OVERFILL_MODE_ACCEPT_OVERFILL StrategyAggregationParameters_AggrOverfillMode = 2
	// Place market taking LMT and wait to reduce market making LMT qty on other legs until
	// the market taking LMT are filled (or cancelled after timeout).
	// There is a much larger window of time where leg orders
	// may be working that total more than the strategy order qty,
	// but market making LMT don't lose their place in queue.
	StrategyAggregationParameters_AGGR_OVERFILL_MODE_PRESERVE_QUEUE_POSITION StrategyAggregationParameters_AggrOverfillMode = 3
)

// Enum value maps for StrategyAggregationParameters_AggrOverfillMode.
var (
	StrategyAggregationParameters_AggrOverfillMode_name = map[int32]string{
		1: "AGGR_OVERFILL_MODE_AVOID_OVERFILLS",
		2: "AGGR_OVERFILL_MODE_ACCEPT_OVERFILL",
		3: "AGGR_OVERFILL_MODE_PRESERVE_QUEUE_POSITION",
	}
	StrategyAggregationParameters_AggrOverfillMode_value = map[string]int32{
		"AGGR_OVERFILL_MODE_AVOID_OVERFILLS":         1,
		"AGGR_OVERFILL_MODE_ACCEPT_OVERFILL":         2,
		"AGGR_OVERFILL_MODE_PRESERVE_QUEUE_POSITION": 3,
	}
)

func (x StrategyAggregationParameters_AggrOverfillMode) Enum() *StrategyAggregationParameters_AggrOverfillMode {
	p := new(StrategyAggregationParameters_AggrOverfillMode)
	*p = x
	return p
}

func (x StrategyAggregationParameters_AggrOverfillMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StrategyAggregationParameters_AggrOverfillMode) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_strategy_2_proto_enumTypes[4].Descriptor()
}

func (StrategyAggregationParameters_AggrOverfillMode) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_strategy_2_proto_enumTypes[4]
}

func (x StrategyAggregationParameters_AggrOverfillMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *StrategyAggregationParameters_AggrOverfillMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = StrategyAggregationParameters_AggrOverfillMode(num)
	return nil
}

// Deprecated: Use StrategyAggregationParameters_AggrOverfillMode.Descriptor instead.
func (StrategyAggregationParameters_AggrOverfillMode) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_strategy_2_proto_rawDescGZIP(), []int{12, 0}
}

// Mode of working primary orders with price far from market.
type PrimaryOrdersLimit_FarFromMarketMode int32

const (
	// Primary orders will be canceled (won't be placed) if a new target price is far from market.
	PrimaryOrdersLimit_FAR_FROM_MARKET_MODE_NO_ORDERS PrimaryOrdersLimit_FarFromMarketMode = 1
	// Primary orders will be moved away from market (will be left untouched) if a new target price is far from market.
	PrimaryOrdersLimit_FAR_FROM_MARKET_MODE_MOVE_AWAY_ONLY PrimaryOrdersLimit_FarFromMarketMode = 2
	// Primary orders will be left untouched if current and a new target price are both far from market.
	PrimaryOrdersLimit_FAR_FROM_MARKET_MODE_DONT_MOVE PrimaryOrdersLimit_FarFromMarketMode = 3
)

// Enum value maps for PrimaryOrdersLimit_FarFromMarketMode.
var (
	PrimaryOrdersLimit_FarFromMarketMode_name = map[int32]string{
		1: "FAR_FROM_MARKET_MODE_NO_ORDERS",
		2: "FAR_FROM_MARKET_MODE_MOVE_AWAY_ONLY",
		3: "FAR_FROM_MARKET_MODE_DONT_MOVE",
	}
	PrimaryOrdersLimit_FarFromMarketMode_value = map[string]int32{
		"FAR_FROM_MARKET_MODE_NO_ORDERS":      1,
		"FAR_FROM_MARKET_MODE_MOVE_AWAY_ONLY": 2,
		"FAR_FROM_MARKET_MODE_DONT_MOVE":      3,
	}
)

func (x PrimaryOrdersLimit_FarFromMarketMode) Enum() *PrimaryOrdersLimit_FarFromMarketMode {
	p := new(PrimaryOrdersLimit_FarFromMarketMode)
	*p = x
	return p
}

func (x PrimaryOrdersLimit_FarFromMarketMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrimaryOrdersLimit_FarFromMarketMode) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_strategy_2_proto_enumTypes[5].Descriptor()
}

func (PrimaryOrdersLimit_FarFromMarketMode) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_strategy_2_proto_enumTypes[5]
}

func (x PrimaryOrdersLimit_FarFromMarketMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PrimaryOrdersLimit_FarFromMarketMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PrimaryOrdersLimit_FarFromMarketMode(num)
	return nil
}

// Deprecated: Use PrimaryOrdersLimit_FarFromMarketMode.Descriptor instead.
func (PrimaryOrdersLimit_FarFromMarketMode) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_strategy_2_proto_rawDescGZIP(), []int{16, 0}
}

// Modes of handling DOM data.
type PrimaryOrdersLimit_DOMUsageMode int32

const (
	// Use only top levels of DOMs and produce a single level of primary orders.
	PrimaryOrdersLimit_DOM_USAGE_MODE_TOP_ONLY PrimaryOrdersLimit_DOMUsageMode = 1
	// Use multiple levels of DOMs and produce multiple levels of primary orders.
	PrimaryOrdersLimit_DOM_USAGE_MODE_MULTILEVELS PrimaryOrdersLimit_DOMUsageMode = 2
	// Produce a single level of primary orders of the full quantity
	// corresponding to the worst DOM prices with a sufficient cumulative quantity.
	PrimaryOrdersLimit_DOM_USAGE_MODE_FULL_SIZE_WORST_PRICE PrimaryOrdersLimit_DOMUsageMode = 3
	// Produce a single level of primary orders of the full quantity corresponding
	// to average DOM prices with a sufficient cumulative quantity.
	PrimaryOrdersLimit_DOM_USAGE_MODE_FULL_SIZE_AVERAGE_PRICE PrimaryOrdersLimit_DOMUsageMode = 4
)

// Enum value maps for PrimaryOrdersLimit_DOMUsageMode.
var (
	PrimaryOrdersLimit_DOMUsageMode_name = map[int32]string{
		1: "DOM_USAGE_MODE_TOP_ONLY",
		2: "DOM_USAGE_MODE_MULTILEVELS",
		3: "DOM_USAGE_MODE_FULL_SIZE_WORST_PRICE",
		4: "DOM_USAGE_MODE_FULL_SIZE_AVERAGE_PRICE",
	}
	PrimaryOrdersLimit_DOMUsageMode_value = map[string]int32{
		"DOM_USAGE_MODE_TOP_ONLY":                1,
		"DOM_USAGE_MODE_MULTILEVELS":             2,
		"DOM_USAGE_MODE_FULL_SIZE_WORST_PRICE":   3,
		"DOM_USAGE_MODE_FULL_SIZE_AVERAGE_PRICE": 4,
	}
)

func (x PrimaryOrdersLimit_DOMUsageMode) Enum() *PrimaryOrdersLimit_DOMUsageMode {
	p := new(PrimaryOrdersLimit_DOMUsageMode)
	*p = x
	return p
}

func (x PrimaryOrdersLimit_DOMUsageMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrimaryOrdersLimit_DOMUsageMode) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_strategy_2_proto_enumTypes[6].Descriptor()
}

func (PrimaryOrdersLimit_DOMUsageMode) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_strategy_2_proto_enumTypes[6]
}

func (x PrimaryOrdersLimit_DOMUsageMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PrimaryOrdersLimit_DOMUsageMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PrimaryOrdersLimit_DOMUsageMode(num)
	return nil
}

// Deprecated: Use PrimaryOrdersLimit_DOMUsageMode.Descriptor instead.
func (PrimaryOrdersLimit_DOMUsageMode) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_strategy_2_proto_rawDescGZIP(), []int{16, 1}
}

// Duration for sniper leg orders
type PrimaryOrdersSniper_LegDuration int32

const (
	PrimaryOrdersSniper_LEG_DURATION_DAY PrimaryOrdersSniper_LegDuration = 1
	// Fill and kill
	PrimaryOrdersSniper_LEG_DURATION_FAK PrimaryOrdersSniper_LegDuration = 2
	// Fill or kill
	PrimaryOrdersSniper_LEG_DURATION_FOK PrimaryOrdersSniper_LegDuration = 3
)

// Enum value maps for PrimaryOrdersSniper_LegDuration.
var (
	PrimaryOrdersSniper_LegDuration_name = map[int32]string{
		1: "LEG_DURATION_DAY",
		2: "LEG_DURATION_FAK",
		3: "LEG_DURATION_FOK",
	}
	PrimaryOrdersSniper_LegDuration_value = map[string]int32{
		"LEG_DURATION_DAY": 1,
		"LEG_DURATION_FAK": 2,
		"LEG_DURATION_FOK": 3,
	}
)

func (x PrimaryOrdersSniper_LegDuration) Enum() *PrimaryOrdersSniper_LegDuration {
	p := new(PrimaryOrdersSniper_LegDuration)
	*p = x
	return p
}

func (x PrimaryOrdersSniper_LegDuration) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrimaryOrdersSniper_LegDuration) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_strategy_2_proto_enumTypes[7].Descriptor()
}

func (PrimaryOrdersSniper_LegDuration) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_strategy_2_proto_enumTypes[7]
}

func (x PrimaryOrdersSniper_LegDuration) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PrimaryOrdersSniper_LegDuration) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PrimaryOrdersSniper_LegDuration(num)
	return nil
}

// Deprecated: Use PrimaryOrdersSniper_LegDuration.Descriptor instead.
func (PrimaryOrdersSniper_LegDuration) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_strategy_2_proto_rawDescGZIP(), []int{17, 0}
}

// Type of order placed for the leg.
type MarketTakingParameters_MarketTakingLimitOrderType int32

const (
	MarketTakingParameters_MARKET_TAKING_LIMIT_ORDER_TYPE_LMT MarketTakingParameters_MarketTakingLimitOrderType = 1
	MarketTakingParameters_MARKET_TAKING_LIMIT_ORDER_TYPE_MKT MarketTakingParameters_MarketTakingLimitOrderType = 2
)

// Enum value maps for MarketTakingParameters_MarketTakingLimitOrderType.
var (
	MarketTakingParameters_MarketTakingLimitOrderType_name = map[int32]string{
		1: "MARKET_TAKING_LIMIT_ORDER_TYPE_LMT",
		2: "MARKET_TAKING_LIMIT_ORDER_TYPE_MKT",
	}
	MarketTakingParameters_MarketTakingLimitOrderType_value = map[string]int32{
		"MARKET_TAKING_LIMIT_ORDER_TYPE_LMT": 1,
		"MARKET_TAKING_LIMIT_ORDER_TYPE_MKT": 2,
	}
)

func (x MarketTakingParameters_MarketTakingLimitOrderType) Enum() *MarketTakingParameters_MarketTakingLimitOrderType {
	p := new(MarketTakingParameters_MarketTakingLimitOrderType)
	*p = x
	return p
}

func (x MarketTakingParameters_MarketTakingLimitOrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MarketTakingParameters_MarketTakingLimitOrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_strategy_2_proto_enumTypes[8].Descriptor()
}

func (MarketTakingParameters_MarketTakingLimitOrderType) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_strategy_2_proto_enumTypes[8]
}

func (x MarketTakingParameters_MarketTakingLimitOrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MarketTakingParameters_MarketTakingLimitOrderType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MarketTakingParameters_MarketTakingLimitOrderType(num)
	return nil
}

// Deprecated: Use MarketTakingParameters_MarketTakingLimitOrderType.Descriptor instead.
func (MarketTakingParameters_MarketTakingLimitOrderType) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_strategy_2_proto_rawDescGZIP(), []int{22, 0}
}

// Request for algo strategies definitions.
type AlgoStrategyDefinitionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of algo strategies to request definitions (abbreviations).
	AlgoStrategies []string `protobuf:"bytes,1,rep,name=algo_strategies,json=algoStrategies" json:"algo_strategies,omitempty"`
}

func (x *AlgoStrategyDefinitionRequest) Reset() {
	*x = AlgoStrategyDefinitionRequest{}
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlgoStrategyDefinitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlgoStrategyDefinitionRequest) ProtoMessage() {}

func (x *AlgoStrategyDefinitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlgoStrategyDefinitionRequest.ProtoReflect.Descriptor instead.
func (*AlgoStrategyDefinitionRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_strategy_2_proto_rawDescGZIP(), []int{0}
}

func (x *AlgoStrategyDefinitionRequest) GetAlgoStrategies() []string {
	if x != nil {
		return x.AlgoStrategies
	}
	return nil
}

// Report with algo strategies definitions.
type AlgoStrategyDefinitionReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of algo strategy definitions for given abbreviations.
	AlgoStrategyDefinitions []*AlgoStrategyDefinition `protobuf:"bytes,1,rep,name=algo_strategy_definitions,json=algoStrategyDefinitions" json:"algo_strategy_definitions,omitempty"`
}

func (x *AlgoStrategyDefinitionReport) Reset() {
	*x = AlgoStrategyDefinitionReport{}
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlgoStrategyDefinitionReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlgoStrategyDefinitionReport) ProtoMessage() {}

func (x *AlgoStrategyDefinitionReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlgoStrategyDefinitionReport.ProtoReflect.Descriptor instead.
func (*AlgoStrategyDefinitionReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_strategy_2_proto_rawDescGZIP(), []int{1}
}

func (x *AlgoStrategyDefinitionReport) GetAlgoStrategyDefinitions() []*AlgoStrategyDefinition {
	if x != nil {
		return x.AlgoStrategyDefinitions
	}
	return nil
}

// Request to define a strategy as a contract.
type StrategyDefinitionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Strategy to define.
	StrategyDefinition *StrategyDefinition `protobuf:"bytes,1,req,name=strategy_definition,json=strategyDefinition" json:"strategy_definition,omitempty"`
	// Account ID in CQG trade routing system.
	// Some exchanges require an account ID in the process of defining a UDS. For those exchanges this is a
	// required field.
	AccountId *int32 `protobuf:"zigzag32,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// Exchange specific extra attributes.
	// List of supported attributes can be found in document ExchangeExtraAttributesForStrategyDefinition.adoc.
	ExchangeExtraAttributes []*common.NamedValue `protobuf:"bytes,3,rep,name=exchange_extra_attributes,json=exchangeExtraAttributes" json:"exchange_extra_attributes,omitempty"`
}

func (x *StrategyDefinitionRequest) Reset() {
	*x = StrategyDefinitionRequest{}
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StrategyDefinitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrategyDefinitionRequest) ProtoMessage() {}

func (x *StrategyDefinitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrategyDefinitionRequest.ProtoReflect.Descriptor instead.
func (*StrategyDefinitionRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_strategy_2_proto_rawDescGZIP(), []int{2}
}

func (x *StrategyDefinitionRequest) GetStrategyDefinition() *StrategyDefinition {
	if x != nil {
		return x.StrategyDefinition
	}
	return nil
}

func (x *StrategyDefinitionRequest) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *StrategyDefinitionRequest) GetExchangeExtraAttributes() []*common.NamedValue {
	if x != nil {
		return x.ExchangeExtraAttributes
	}
	return nil
}

// Report of the contract metadata assigned to the strategy.
type StrategyDefinitionReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Assigned strategy metadata.
	// Note: In case of exchange strategies field 'strategy_definition' in contract_metadata always matches the definition
	// received from the exchange, therefore it can be slightly different than field 'strategy_definition' in
	// StrategyDefinitionRequest.
	// Example: user wants to define UDS(A + B - C), but similar UDS(A - C + B) already exists on exchange.
	ContractMetadata *ContractMetadata `protobuf:"bytes,1,req,name=contract_metadata,json=contractMetadata" json:"contract_metadata,omitempty"`
}

func (x *StrategyDefinitionReport) Reset() {
	*x = StrategyDefinitionReport{}
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StrategyDefinitionReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrategyDefinitionReport) ProtoMessage() {}

func (x *StrategyDefinitionReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrategyDefinitionReport.ProtoReflect.Descriptor instead.
func (*StrategyDefinitionReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_strategy_2_proto_rawDescGZIP(), []int{3}
}

func (x *StrategyDefinitionReport) GetContractMetadata() *ContractMetadata {
	if x != nil {
		return x.ContractMetadata
	}
	return nil
}

// Describes a leg order fill that contributes to a synthetic strategy order fill.
type StrategyLegFill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Order id for the leg order (the original OrderStatus.order_id)
	LegOrderId *string `protobuf:"bytes,1,req,name=leg_order_id,json=legOrderId" json:"leg_order_id,omitempty"`
	// Leg_execution_id of the corresponding Trade message for the leg order fill.
	LegExecutionId *string `protobuf:"bytes,2,req,name=leg_execution_id,json=legExecutionId" json:"leg_execution_id,omitempty"`
	// Quantity of the leg order fill used for this synthetic strategy order fill,
	// decimal (fractional quantities are possible for legs with non-integer quantity ratio).
	// This is correct quantity (ContractMetadata.volume_scale must not be applied).
	Qty *float64 `protobuf:"fixed64,3,req,name=qty" json:"qty,omitempty"`
}

func (x *StrategyLegFill) Reset() {
	*x = StrategyLegFill{}
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StrategyLegFill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrategyLegFill) ProtoMessage() {}

func (x *StrategyLegFill) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrategyLegFill.ProtoReflect.Descriptor instead.
func (*StrategyLegFill) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_strategy_2_proto_rawDescGZIP(), []int{4}
}

func (x *StrategyLegFill) GetLegOrderId() string {
	if x != nil && x.LegOrderId != nil {
		return *x.LegOrderId
	}
	return ""
}

func (x *StrategyLegFill) GetLegExecutionId() string {
	if x != nil && x.LegExecutionId != nil {
		return *x.LegExecutionId
	}
	return ""
}

func (x *StrategyLegFill) GetQty() float64 {
	if x != nil && x.Qty != nil {
		return *x.Qty
	}
	return 0
}

// Details of hung quantity on a synthetic strategy order or existing hang resolution.
type SyntheticHang struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique hang identifier supplied by server.
	HangId *int32 `protobuf:"zigzag32,1,req,name=hang_id,json=hangId" json:"hang_id,omitempty"`
	// Note: use hung_qty field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/strategy_2.proto.
	Uint32HungQty *uint32 `protobuf:"varint,2,opt,name=uint32_hung_qty,json=uint32HungQty" json:"uint32_hung_qty,omitempty"`
	// Quantity (of the synthetic strategy order) hung, 0 indicates that hang is resolved.
	HungQty *common.Decimal `protobuf:"bytes,4,opt,name=hung_qty,json=hungQty" json:"hung_qty,omitempty"`
	// Orders participating in a synthetic strategy order hang.
	// Note: this is the original OrderStatus.order_id.
	OrderIds []string `protobuf:"bytes,3,rep,name=order_ids,json=orderIds" json:"order_ids,omitempty"`
}

func (x *SyntheticHang) Reset() {
	*x = SyntheticHang{}
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyntheticHang) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyntheticHang) ProtoMessage() {}

func (x *SyntheticHang) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyntheticHang.ProtoReflect.Descriptor instead.
func (*SyntheticHang) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_strategy_2_proto_rawDescGZIP(), []int{5}
}

func (x *SyntheticHang) GetHangId() int32 {
	if x != nil && x.HangId != nil {
		return *x.HangId
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/strategy_2.proto.
func (x *SyntheticHang) GetUint32HungQty() uint32 {
	if x != nil && x.Uint32HungQty != nil {
		return *x.Uint32HungQty
	}
	return 0
}

func (x *SyntheticHang) GetHungQty() *common.Decimal {
	if x != nil {
		return x.HungQty
	}
	return nil
}

func (x *SyntheticHang) GetOrderIds() []string {
	if x != nil {
		return x.OrderIds
	}
	return nil
}

// Synthetic strategy order's outright properties.
type SyntheticStrategyProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Synthetic strategy trading parameters.
	StrategyTradingParameters *StrategyTradingParameters `protobuf:"bytes,1,opt,name=strategy_trading_parameters,json=strategyTradingParameters" json:"strategy_trading_parameters,omitempty"`
	// Parent synthetic order id that led to this order's (automatic) placement;
	// allows client to show the link to user.
	// Note: this is the original synthetic order's ID (OrderStatus.order_id), not affected by any modifications.
	OriginOrderId *string `protobuf:"bytes,2,opt,name=origin_order_id,json=originOrderId" json:"origin_order_id,omitempty"`
	// Id of the originally placed by trader root synthetic strategy order
	// (The same as origin_order_id for the root immediate legs).
	RootOrderId *string `protobuf:"bytes,3,opt,name=root_order_id,json=rootOrderId" json:"root_order_id,omitempty"`
	// Note: use origin_node_number instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/strategy_2.proto.
	NodeIndex *uint32 `protobuf:"varint,4,opt,name=node_index,json=nodeIndex" json:"node_index,omitempty"`
	// Node number of the synthetic order (specified by origin_order_id);
	// allows client to associate the order which the message belogns to
	// with a particular node of the parent synthetic strategy (either a leg or a nested strategy).
	// This is either LegDefinition.node_number or StrategyDefinition.node_number value.
	OriginNodeNumber *int32 `protobuf:"zigzag32,6,opt,name=origin_node_number,json=originNodeNumber" json:"origin_node_number,omitempty"`
	// When released is set to true, it indicates that the synthetic strategy leg has been released for manual control.
	// I.e. it is no longer linked to the synthetic strategy order.
	Released *bool `protobuf:"varint,5,opt,name=released" json:"released,omitempty"`
}

func (x *SyntheticStrategyProperties) Reset() {
	*x = SyntheticStrategyProperties{}
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyntheticStrategyProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyntheticStrategyProperties) ProtoMessage() {}

func (x *SyntheticStrategyProperties) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyntheticStrategyProperties.ProtoReflect.Descriptor instead.
func (*SyntheticStrategyProperties) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_strategy_2_proto_rawDescGZIP(), []int{6}
}

func (x *SyntheticStrategyProperties) GetStrategyTradingParameters() *StrategyTradingParameters {
	if x != nil {
		return x.StrategyTradingParameters
	}
	return nil
}

func (x *SyntheticStrategyProperties) GetOriginOrderId() string {
	if x != nil && x.OriginOrderId != nil {
		return *x.OriginOrderId
	}
	return ""
}

func (x *SyntheticStrategyProperties) GetRootOrderId() string {
	if x != nil && x.RootOrderId != nil {
		return *x.RootOrderId
	}
	return ""
}

// Deprecated: Marked as deprecated in protos/WebAPI/strategy_2.proto.
func (x *SyntheticStrategyProperties) GetNodeIndex() uint32 {
	if x != nil && x.NodeIndex != nil {
		return *x.NodeIndex
	}
	return 0
}

func (x *SyntheticStrategyProperties) GetOriginNodeNumber() int32 {
	if x != nil && x.OriginNodeNumber != nil {
		return *x.OriginNodeNumber
	}
	return 0
}

func (x *SyntheticStrategyProperties) GetReleased() bool {
	if x != nil && x.Released != nil {
		return *x.Released
	}
	return false
}

// Defines how a placed synthetic strategy order will be executed.
type StrategyTradingParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Parameters applied only to a MKT order.
	MarketOrderParameters []*StrategyMarketOrderParameters `protobuf:"bytes,1,rep,name=market_order_parameters,json=marketOrderParameters" json:"market_order_parameters,omitempty"`
	// Parameters applied only to a LMT order.
	LimitOrderParameters []*StrategyLimitOrderParameters `protobuf:"bytes,2,rep,name=limit_order_parameters,json=limitOrderParameters" json:"limit_order_parameters,omitempty"`
	// Parameters applied only to a STP order.
	StopOrderParameters []*StrategyStopOrderParameters `protobuf:"bytes,3,rep,name=stop_order_parameters,json=stopOrderParameters" json:"stop_order_parameters,omitempty"`
	// Parameters applied only to an aggregation strategy.
	AggregationParameters []*StrategyAggregationParameters `protobuf:"bytes,4,rep,name=aggregation_parameters,json=aggregationParameters" json:"aggregation_parameters,omitempty"`
	// Individual strategy leg parameters.
	LegParameters []*StrategyOrderLegParameters `protobuf:"bytes,5,rep,name=leg_parameters,json=legParameters" json:"leg_parameters,omitempty"`
}

func (x *StrategyTradingParameters) Reset() {
	*x = StrategyTradingParameters{}
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StrategyTradingParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrategyTradingParameters) ProtoMessage() {}

func (x *StrategyTradingParameters) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrategyTradingParameters.ProtoReflect.Descriptor instead.
func (*StrategyTradingParameters) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_strategy_2_proto_rawDescGZIP(), []int{7}
}

func (x *StrategyTradingParameters) GetMarketOrderParameters() []*StrategyMarketOrderParameters {
	if x != nil {
		return x.MarketOrderParameters
	}
	return nil
}

func (x *StrategyTradingParameters) GetLimitOrderParameters() []*StrategyLimitOrderParameters {
	if x != nil {
		return x.LimitOrderParameters
	}
	return nil
}

func (x *StrategyTradingParameters) GetStopOrderParameters() []*StrategyStopOrderParameters {
	if x != nil {
		return x.StopOrderParameters
	}
	return nil
}

func (x *StrategyTradingParameters) GetAggregationParameters() []*StrategyAggregationParameters {
	if x != nil {
		return x.AggregationParameters
	}
	return nil
}

func (x *StrategyTradingParameters) GetLegParameters() []*StrategyOrderLegParameters {
	if x != nil {
		return x.LegParameters
	}
	return nil
}

// Parameters associated with a concrete leg.
type StrategyOrderLegParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Note: use node_path instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/strategy_2.proto.
	NodeIndex *uint32 `protobuf:"varint,1,opt,name=node_index,json=nodeIndex" json:"node_index,omitempty"`
	// Path in the tree of the strategy from the root to the leg node.
	// The format is described in the header of strategy_definition_2.StrategyDefinition message.
	// It is a required field in server message.
	NodePath *string `protobuf:"bytes,5,opt,name=node_path,json=nodePath" json:"node_path,omitempty"`
	// Account id to place an order on the leg. If not set, the account id of the order used instead.
	AccountId *int32 `protobuf:"zigzag32,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// Specifies what the order is intended to do: open or close (reduce) a position. One of OpenCloseInstruction enum.
	// Applicable only if ContractMetadata.position_tracking
	// is either LONG_SHORT_WITH_IMPLIED_CLOSE or LONG_SHORT_WITH_EXPLICIT_CLOSE.
	// If not set, the open/close instruction of the order used instead.
	OpenCloseInstruction *uint32 `protobuf:"varint,3,opt,name=open_close_instruction,json=openCloseInstruction" json:"open_close_instruction,omitempty"`
	// Speculation type of the leg order. One of SpeculationType enum.
	// If not set, the speculation type of the order used instead.
	SpeculationType *uint32 `protobuf:"varint,4,opt,name=speculation_type,json=speculationType" json:"speculation_type,omitempty"`
}

func (x *StrategyOrderLegParameters) Reset() {
	*x = StrategyOrderLegParameters{}
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StrategyOrderLegParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrategyOrderLegParameters) ProtoMessage() {}

func (x *StrategyOrderLegParameters) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrategyOrderLegParameters.ProtoReflect.Descriptor instead.
func (*StrategyOrderLegParameters) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_strategy_2_proto_rawDescGZIP(), []int{8}
}

// Deprecated: Marked as deprecated in protos/WebAPI/strategy_2.proto.
func (x *StrategyOrderLegParameters) GetNodeIndex() uint32 {
	if x != nil && x.NodeIndex != nil {
		return *x.NodeIndex
	}
	return 0
}

func (x *StrategyOrderLegParameters) GetNodePath() string {
	if x != nil && x.NodePath != nil {
		return *x.NodePath
	}
	return ""
}

func (x *StrategyOrderLegParameters) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *StrategyOrderLegParameters) GetOpenCloseInstruction() uint32 {
	if x != nil && x.OpenCloseInstruction != nil {
		return *x.OpenCloseInstruction
	}
	return 0
}

func (x *StrategyOrderLegParameters) GetSpeculationType() uint32 {
	if x != nil && x.SpeculationType != nil {
		return *x.SpeculationType
	}
	return 0
}

// Synthetic strategy MKT order parameters
type StrategyMarketOrderParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Note: use node_path instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/strategy_2.proto.
	NodeIndex *uint32 `protobuf:"varint,1,opt,name=node_index,json=nodeIndex" json:"node_index,omitempty"`
	// Path in the tree of the strategy from the root to the strategy node.
	// The format is described in the header of strategy_definition_2.StrategyDefinition message.
	// It is a required field in server message.
	NodePath *string `protobuf:"bytes,5,opt,name=node_path,json=nodePath" json:"node_path,omitempty"`
	// For Iceberg orders:
	// 'true' means replenish qty on the filled leg immediately upon receiving primary fill;
	// 'false' means to 'freeze' the filled leg (don't add any more qty to it) until SS order
	//
	//	is filled or its qty changes for some other reason, e.g. replace request.
	ReplenishOnPrimaryFill *bool `protobuf:"varint,2,opt,name=replenish_on_primary_fill,json=replenishOnPrimaryFill" json:"replenish_on_primary_fill,omitempty"`
}

func (x *StrategyMarketOrderParameters) Reset() {
	*x = StrategyMarketOrderParameters{}
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StrategyMarketOrderParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrategyMarketOrderParameters) ProtoMessage() {}

func (x *StrategyMarketOrderParameters) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrategyMarketOrderParameters.ProtoReflect.Descriptor instead.
func (*StrategyMarketOrderParameters) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_strategy_2_proto_rawDescGZIP(), []int{9}
}

// Deprecated: Marked as deprecated in protos/WebAPI/strategy_2.proto.
func (x *StrategyMarketOrderParameters) GetNodeIndex() uint32 {
	if x != nil && x.NodeIndex != nil {
		return *x.NodeIndex
	}
	return 0
}

func (x *StrategyMarketOrderParameters) GetNodePath() string {
	if x != nil && x.NodePath != nil {
		return *x.NodePath
	}
	return ""
}

func (x *StrategyMarketOrderParameters) GetReplenishOnPrimaryFill() bool {
	if x != nil && x.ReplenishOnPrimaryFill != nil {
		return *x.ReplenishOnPrimaryFill
	}
	return false
}

// LMT order parameters of the root or a nested strategy.
type StrategyLimitOrderParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Note: use node_path instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/strategy_2.proto.
	NodeIndex *uint32 `protobuf:"varint,1,opt,name=node_index,json=nodeIndex" json:"node_index,omitempty"`
	// Path in the tree of the strategy from the root to the strategy node.
	// The format is described in the header of strategy_definition_2.StrategyDefinition message.
	// It is a required field in server message.
	NodePath *string `protobuf:"bytes,9,opt,name=node_path,json=nodePath" json:"node_path,omitempty"`
	// Defines whether replenish quantity on primary fill or not.
	// For Iceberg orders:
	//
	//	'true' means replenish quantity on the filled leg immediately upon receiving primary fill;
	//	'false' means to 'freeze' the filled leg (don't add any more qty to it) until SS order
	//	        is filled or its quantity changes for some other reason, e.g. replace request.
	ReplenishOnPrimaryFill *bool `protobuf:"varint,2,opt,name=replenish_on_primary_fill,json=replenishOnPrimaryFill" json:"replenish_on_primary_fill,omitempty"`
	// Defines mode of overfill handling for this limit SS order. One of OverfillMode enums.
	// AUTOMATIC_HEDGING is default.
	OverfillMode *uint32 `protobuf:"varint,3,opt,name=overfill_mode,json=overfillMode" json:"overfill_mode,omitempty"`
	// Defines sizes of what leg orders must be aligned to strategy lots.One of AlignToStrategyLots enums.
	// NONE is default.
	AlignToStrategyLots *uint32 `protobuf:"varint,4,opt,name=align_to_strategy_lots,json=alignToStrategyLots" json:"align_to_strategy_lots,omitempty"`
	// The way prices for secondary leg orders are calculated. One of PricingMethod enums.
	// PRICING_METHOD_AVERAGE_ORDER_PRICE is default.
	PricingMethod *uint32 `protobuf:"varint,5,opt,name=pricing_method,json=pricingMethod" json:"pricing_method,omitempty"`
	// Price shifting parameters.
	PriceShifting *PriceShifting `protobuf:"bytes,6,opt,name=price_shifting,json=priceShifting" json:"price_shifting,omitempty"`
	// Parameters for strategy legs.
	LegDescriptions []*LimitOrderLegDescription `protobuf:"bytes,7,rep,name=leg_descriptions,json=legDescriptions" json:"leg_descriptions,omitempty"`
	// Number of incomplete (hung) strategy lots that don't block next iceberg slice.
	IcebergHungLotsLimit *float64 `protobuf:"fixed64,8,opt,name=iceberg_hung_lots_limit,json=icebergHungLotsLimit" json:"iceberg_hung_lots_limit,omitempty"`
}

func (x *StrategyLimitOrderParameters) Reset() {
	*x = StrategyLimitOrderParameters{}
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StrategyLimitOrderParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrategyLimitOrderParameters) ProtoMessage() {}

func (x *StrategyLimitOrderParameters) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrategyLimitOrderParameters.ProtoReflect.Descriptor instead.
func (*StrategyLimitOrderParameters) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_strategy_2_proto_rawDescGZIP(), []int{10}
}

// Deprecated: Marked as deprecated in protos/WebAPI/strategy_2.proto.
func (x *StrategyLimitOrderParameters) GetNodeIndex() uint32 {
	if x != nil && x.NodeIndex != nil {
		return *x.NodeIndex
	}
	return 0
}

func (x *StrategyLimitOrderParameters) GetNodePath() string {
	if x != nil && x.NodePath != nil {
		return *x.NodePath
	}
	return ""
}

func (x *StrategyLimitOrderParameters) GetReplenishOnPrimaryFill() bool {
	if x != nil && x.ReplenishOnPrimaryFill != nil {
		return *x.ReplenishOnPrimaryFill
	}
	return false
}

func (x *StrategyLimitOrderParameters) GetOverfillMode() uint32 {
	if x != nil && x.OverfillMode != nil {
		return *x.OverfillMode
	}
	return 0
}

func (x *StrategyLimitOrderParameters) GetAlignToStrategyLots() uint32 {
	if x != nil && x.AlignToStrategyLots != nil {
		return *x.AlignToStrategyLots
	}
	return 0
}

func (x *StrategyLimitOrderParameters) GetPricingMethod() uint32 {
	if x != nil && x.PricingMethod != nil {
		return *x.PricingMethod
	}
	return 0
}

func (x *StrategyLimitOrderParameters) GetPriceShifting() *PriceShifting {
	if x != nil {
		return x.PriceShifting
	}
	return nil
}

func (x *StrategyLimitOrderParameters) GetLegDescriptions() []*LimitOrderLegDescription {
	if x != nil {
		return x.LegDescriptions
	}
	return nil
}

func (x *StrategyLimitOrderParameters) GetIcebergHungLotsLimit() float64 {
	if x != nil && x.IcebergHungLotsLimit != nil {
		return *x.IcebergHungLotsLimit
	}
	return 0
}

// STP order parameters of the root or a nested strategy.
type StrategyStopOrderParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Note: use node_path instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/strategy_2.proto.
	NodeIndex *uint32 `protobuf:"varint,1,opt,name=node_index,json=nodeIndex" json:"node_index,omitempty"`
	// Path in the tree of the strategy from the root to the strategy node.
	// The format is described in the header of strategy_definition_2.StrategyDefinition message.
	// It is a required field in server message.
	NodePath *string `protobuf:"bytes,4,opt,name=node_path,json=nodePath" json:"node_path,omitempty"`
	// The side of strategy price that STP orders watch for. One of StopSide enums.
	StopSide *uint32 `protobuf:"varint,2,req,name=stop_side,json=stopSide" json:"stop_side,omitempty"`
	// For Iceberg orders:
	//
	//	'true' means replenish qty on the filled leg immediately upon receiving primary fill;
	//	'false' means to 'freeze' the filled leg (don't add any more qty to it) until SS order
	//	        is filled or its qty changes for some other reason, e.g. replace request.
	ReplenishOnPrimaryFill *bool `protobuf:"varint,3,opt,name=replenish_on_primary_fill,json=replenishOnPrimaryFill" json:"replenish_on_primary_fill,omitempty"`
}

func (x *StrategyStopOrderParameters) Reset() {
	*x = StrategyStopOrderParameters{}
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StrategyStopOrderParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrategyStopOrderParameters) ProtoMessage() {}

func (x *StrategyStopOrderParameters) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrategyStopOrderParameters.ProtoReflect.Descriptor instead.
func (*StrategyStopOrderParameters) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_strategy_2_proto_rawDescGZIP(), []int{11}
}

// Deprecated: Marked as deprecated in protos/WebAPI/strategy_2.proto.
func (x *StrategyStopOrderParameters) GetNodeIndex() uint32 {
	if x != nil && x.NodeIndex != nil {
		return *x.NodeIndex
	}
	return 0
}

func (x *StrategyStopOrderParameters) GetNodePath() string {
	if x != nil && x.NodePath != nil {
		return *x.NodePath
	}
	return ""
}

func (x *StrategyStopOrderParameters) GetStopSide() uint32 {
	if x != nil && x.StopSide != nil {
		return *x.StopSide
	}
	return 0
}

func (x *StrategyStopOrderParameters) GetReplenishOnPrimaryFill() bool {
	if x != nil && x.ReplenishOnPrimaryFill != nil {
		return *x.ReplenishOnPrimaryFill
	}
	return false
}

type StrategyAggregationParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Note: use node_path instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/strategy_2.proto.
	NodeIndex *uint32 `protobuf:"varint,1,opt,name=node_index,json=nodeIndex" json:"node_index,omitempty"`
	// Path in the tree of the strategy from the root to the strategy node.
	// The format is described in the header of strategy_definition_2.StrategyDefinition message.
	// It is a required field in server message.
	NodePath *string `protobuf:"bytes,5,opt,name=node_path,json=nodePath" json:"node_path,omitempty"`
	// Mode of overfill handling. One of AggrOverfillMode enums.
	OverfillMode *uint32 `protobuf:"varint,2,req,name=overfill_mode,json=overfillMode" json:"overfill_mode,omitempty"`
	// Price shifting parameters.
	PriceShifting *PriceShifting `protobuf:"bytes,3,opt,name=price_shifting,json=priceShifting" json:"price_shifting,omitempty"`
	// Aggregation legs parameters.
	PatternLegs []*AggregationLegDescription `protobuf:"bytes,4,rep,name=pattern_legs,json=patternLegs" json:"pattern_legs,omitempty"`
}

func (x *StrategyAggregationParameters) Reset() {
	*x = StrategyAggregationParameters{}
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StrategyAggregationParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrategyAggregationParameters) ProtoMessage() {}

func (x *StrategyAggregationParameters) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrategyAggregationParameters.ProtoReflect.Descriptor instead.
func (*StrategyAggregationParameters) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_strategy_2_proto_rawDescGZIP(), []int{12}
}

// Deprecated: Marked as deprecated in protos/WebAPI/strategy_2.proto.
func (x *StrategyAggregationParameters) GetNodeIndex() uint32 {
	if x != nil && x.NodeIndex != nil {
		return *x.NodeIndex
	}
	return 0
}

func (x *StrategyAggregationParameters) GetNodePath() string {
	if x != nil && x.NodePath != nil {
		return *x.NodePath
	}
	return ""
}

func (x *StrategyAggregationParameters) GetOverfillMode() uint32 {
	if x != nil && x.OverfillMode != nil {
		return *x.OverfillMode
	}
	return 0
}

func (x *StrategyAggregationParameters) GetPriceShifting() *PriceShifting {
	if x != nil {
		return x.PriceShifting
	}
	return nil
}

func (x *StrategyAggregationParameters) GetPatternLegs() []*AggregationLegDescription {
	if x != nil {
		return x.PatternLegs
	}
	return nil
}

// Description of aggregation strategy legs.
type AggregationLegDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Note: use node_number instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/strategy_2.proto.
	NodeIndex *uint32 `protobuf:"varint,1,opt,name=node_index,json=nodeIndex" json:"node_index,omitempty"`
	// Node number in the strategy definition the parameters are related to (LegDefinition.node_number value).
	// It is a required field in server message.
	NodeNumber *int32 `protobuf:"zigzag32,6,opt,name=node_number,json=nodeNumber" json:"node_number,omitempty"`
	// Note: use working_threshold instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/strategy_2.proto.
	Uint32WorkingThreshold *uint32 `protobuf:"varint,2,opt,name=uint32_working_threshold,json=uint32WorkingThreshold" json:"uint32_working_threshold,omitempty"`
	// Threshold value for available quotes quantity to be considered
	// (the quantities under this value are ignored).
	WorkingThreshold *common.Decimal `protobuf:"bytes,5,opt,name=working_threshold,json=workingThreshold" json:"working_threshold,omitempty"`
	// The leg is executed in market taking mode.
	MarketTakingParameters *MarketTakingParameters `protobuf:"bytes,3,req,name=market_taking_parameters,json=marketTakingParameters" json:"market_taking_parameters,omitempty"`
	// The leg is executed in market making mode.
	MarketMakingParameters *MarketMakingParameters `protobuf:"bytes,4,req,name=market_making_parameters,json=marketMakingParameters" json:"market_making_parameters,omitempty"`
}

func (x *AggregationLegDescription) Reset() {
	*x = AggregationLegDescription{}
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AggregationLegDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregationLegDescription) ProtoMessage() {}

func (x *AggregationLegDescription) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregationLegDescription.ProtoReflect.Descriptor instead.
func (*AggregationLegDescription) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_strategy_2_proto_rawDescGZIP(), []int{13}
}

// Deprecated: Marked as deprecated in protos/WebAPI/strategy_2.proto.
func (x *AggregationLegDescription) GetNodeIndex() uint32 {
	if x != nil && x.NodeIndex != nil {
		return *x.NodeIndex
	}
	return 0
}

func (x *AggregationLegDescription) GetNodeNumber() int32 {
	if x != nil && x.NodeNumber != nil {
		return *x.NodeNumber
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/strategy_2.proto.
func (x *AggregationLegDescription) GetUint32WorkingThreshold() uint32 {
	if x != nil && x.Uint32WorkingThreshold != nil {
		return *x.Uint32WorkingThreshold
	}
	return 0
}

func (x *AggregationLegDescription) GetWorkingThreshold() *common.Decimal {
	if x != nil {
		return x.WorkingThreshold
	}
	return nil
}

func (x *AggregationLegDescription) GetMarketTakingParameters() *MarketTakingParameters {
	if x != nil {
		return x.MarketTakingParameters
	}
	return nil
}

func (x *AggregationLegDescription) GetMarketMakingParameters() *MarketMakingParameters {
	if x != nil {
		return x.MarketMakingParameters
	}
	return nil
}

// Parameters for strategy price change depending on filled strategy size.
type PriceShifting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// step (in ticks) of each price change.
	PriceStep *int32 `protobuf:"varint,1,req,name=price_step,json=priceStep" json:"price_step,omitempty"`
	// Note: use filled_qty_delta instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/strategy_2.proto.
	Uint32FilledQtyDelta *uint32 `protobuf:"varint,2,opt,name=uint32_filled_qty_delta,json=uint32FilledQtyDelta" json:"uint32_filled_qty_delta,omitempty"`
	// Size of strategy order that must be filled to perform next change of strategy order price.
	FilledQtyDelta *common.Decimal `protobuf:"bytes,3,opt,name=filled_qty_delta,json=filledQtyDelta" json:"filled_qty_delta,omitempty"`
}

func (x *PriceShifting) Reset() {
	*x = PriceShifting{}
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PriceShifting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceShifting) ProtoMessage() {}

func (x *PriceShifting) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceShifting.ProtoReflect.Descriptor instead.
func (*PriceShifting) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_strategy_2_proto_rawDescGZIP(), []int{14}
}

func (x *PriceShifting) GetPriceStep() int32 {
	if x != nil && x.PriceStep != nil {
		return *x.PriceStep
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/strategy_2.proto.
func (x *PriceShifting) GetUint32FilledQtyDelta() uint32 {
	if x != nil && x.Uint32FilledQtyDelta != nil {
		return *x.Uint32FilledQtyDelta
	}
	return 0
}

func (x *PriceShifting) GetFilledQtyDelta() *common.Decimal {
	if x != nil {
		return x.FilledQtyDelta
	}
	return nil
}

// LMT order parameters for a leg.
type LimitOrderLegDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Note: use node_number instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/strategy_2.proto.
	NodeIndex *uint32 `protobuf:"varint,1,opt,name=node_index,json=nodeIndex" json:"node_index,omitempty"`
	// Node number in the strategy definition the parameters are related to (LegDefinition.node_number value).
	// It is a required field in server message.
	NodeNumber *int32 `protobuf:"zigzag32,12,opt,name=node_number,json=nodeNumber" json:"node_number,omitempty"`
	// All the attributes below are mutually exclusive.
	// Sets the leg as working and place LMT orders.
	PrimaryOrderLimit *PrimaryOrdersLimit `protobuf:"bytes,2,opt,name=primary_order_limit,json=primaryOrderLimit" json:"primary_order_limit,omitempty"`
	// Sets the leg as working and place sniper orders.
	PrimaryOrderSniper *PrimaryOrdersSniper `protobuf:"bytes,3,opt,name=primary_order_sniper,json=primaryOrderSniper" json:"primary_order_sniper,omitempty"`
	// Sets the leg as not working and place LMT orders.
	SecondaryOrdersLimit *SecondaryOrdersLimit `protobuf:"bytes,4,opt,name=secondary_orders_limit,json=secondaryOrdersLimit" json:"secondary_orders_limit,omitempty"`
	// Sets the leg as not working and place MKT orders.
	SecondaryOrdersMarket *SecondaryOrdersMarket `protobuf:"bytes,5,opt,name=secondary_orders_market,json=secondaryOrdersMarket" json:"secondary_orders_market,omitempty"`
	// Sets the leg as not working and place payup orders.
	SecondaryOrdersPayup *SecondaryOrdersPayUp `protobuf:"bytes,6,opt,name=secondary_orders_payup,json=secondaryOrdersPayup" json:"secondary_orders_payup,omitempty"`
	// Sets the leg as not working and place trailing orders.
	SecondaryOrdersTrailing *SecondaryOrdersTrailing `protobuf:"bytes,7,opt,name=secondary_orders_trailing,json=secondaryOrdersTrailing" json:"secondary_orders_trailing,omitempty"`
	// Indicates how many lots (in fractions) should be filled before the second leg order is placed.
	// Allowed range 0-1.
	// Default is off, the secondary leg placed after all lots are filled on the primary leg.
	ProportionalExecutionRatio *float64 `protobuf:"fixed64,8,opt,name=proportional_execution_ratio,json=proportionalExecutionRatio" json:"proportional_execution_ratio,omitempty"`
	// Determines the size of working orders based on a percentage of the resting volume
	// available in the queue of the monitored leg.
	// Allowed range 0-1000.
	// Default is 1.
	VolumeMultiplier *float64 `protobuf:"fixed64,9,opt,name=volume_multiplier,json=volumeMultiplier" json:"volume_multiplier,omitempty"`
	// Note: use work_threshold field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/strategy_2.proto.
	Uint32WorkThreshold *uint32 `protobuf:"varint,10,opt,name=uint32_work_threshold,json=uint32WorkThreshold" json:"uint32_work_threshold,omitempty"`
	// Tells the system to work the order if and only if
	// the available quantity in the monitored leg is and remains greater than this value.
	// Default is 0.
	WorkThreshold *common.Decimal `protobuf:"bytes,11,opt,name=work_threshold,json=workThreshold" json:"work_threshold,omitempty"`
}

func (x *LimitOrderLegDescription) Reset() {
	*x = LimitOrderLegDescription{}
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LimitOrderLegDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitOrderLegDescription) ProtoMessage() {}

func (x *LimitOrderLegDescription) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitOrderLegDescription.ProtoReflect.Descriptor instead.
func (*LimitOrderLegDescription) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_strategy_2_proto_rawDescGZIP(), []int{15}
}

// Deprecated: Marked as deprecated in protos/WebAPI/strategy_2.proto.
func (x *LimitOrderLegDescription) GetNodeIndex() uint32 {
	if x != nil && x.NodeIndex != nil {
		return *x.NodeIndex
	}
	return 0
}

func (x *LimitOrderLegDescription) GetNodeNumber() int32 {
	if x != nil && x.NodeNumber != nil {
		return *x.NodeNumber
	}
	return 0
}

func (x *LimitOrderLegDescription) GetPrimaryOrderLimit() *PrimaryOrdersLimit {
	if x != nil {
		return x.PrimaryOrderLimit
	}
	return nil
}

func (x *LimitOrderLegDescription) GetPrimaryOrderSniper() *PrimaryOrdersSniper {
	if x != nil {
		return x.PrimaryOrderSniper
	}
	return nil
}

func (x *LimitOrderLegDescription) GetSecondaryOrdersLimit() *SecondaryOrdersLimit {
	if x != nil {
		return x.SecondaryOrdersLimit
	}
	return nil
}

func (x *LimitOrderLegDescription) GetSecondaryOrdersMarket() *SecondaryOrdersMarket {
	if x != nil {
		return x.SecondaryOrdersMarket
	}
	return nil
}

func (x *LimitOrderLegDescription) GetSecondaryOrdersPayup() *SecondaryOrdersPayUp {
	if x != nil {
		return x.SecondaryOrdersPayup
	}
	return nil
}

func (x *LimitOrderLegDescription) GetSecondaryOrdersTrailing() *SecondaryOrdersTrailing {
	if x != nil {
		return x.SecondaryOrdersTrailing
	}
	return nil
}

func (x *LimitOrderLegDescription) GetProportionalExecutionRatio() float64 {
	if x != nil && x.ProportionalExecutionRatio != nil {
		return *x.ProportionalExecutionRatio
	}
	return 0
}

func (x *LimitOrderLegDescription) GetVolumeMultiplier() float64 {
	if x != nil && x.VolumeMultiplier != nil {
		return *x.VolumeMultiplier
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/strategy_2.proto.
func (x *LimitOrderLegDescription) GetUint32WorkThreshold() uint32 {
	if x != nil && x.Uint32WorkThreshold != nil {
		return *x.Uint32WorkThreshold
	}
	return 0
}

func (x *LimitOrderLegDescription) GetWorkThreshold() *common.Decimal {
	if x != nil {
		return x.WorkThreshold
	}
	return nil
}

// Parameters of LMT orders on a leg which is currently working.
type PrimaryOrdersLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Note: use min_qty_increment field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/strategy_2.proto.
	Uint32MinQtyIncrement *uint32 `protobuf:"varint,1,opt,name=uint32_min_qty_increment,json=uint32MinQtyIncrement" json:"uint32_min_qty_increment,omitempty"`
	// Place an order only if the quantity available in the monitored leg is at least this much and
	// to modify a working order only if the quantity available in the monitored leg increases by at least this much.
	// Default is 1.
	MinQtyIncrement *common.Decimal `protobuf:"bytes,18,opt,name=min_qty_increment,json=minQtyIncrement" json:"min_qty_increment,omitempty"`
	// Queue holders (stacked orders) are additional orders placed in the queue
	// at specified price levels away from the initial working order.
	// Sets the minimum number of orders to include in the queue.
	// Allowed values: 1-10, default is 1.
	QueueHoldersMinSize *uint32 `protobuf:"varint,2,opt,name=queue_holders_min_size,json=queueHoldersMinSize" json:"queue_holders_min_size,omitempty"`
	// Sets the maximum number of orders to include in the queue.
	// Allowed values: 1-10 and not less than queue_holders_min_size, default is 1.
	QueueHoldersMaxSize *uint32 `protobuf:"varint,3,opt,name=queue_holders_max_size,json=queueHoldersMaxSize" json:"queue_holders_max_size,omitempty"`
	// Indicates how many price levels (ticks) to skip between orders in the queue.
	// Allowed range is 1-5, default is 1.
	QueueHoldersDistance *uint32 `protobuf:"varint,4,opt,name=queue_holders_distance,json=queueHoldersDistance" json:"queue_holders_distance,omitempty"`
	// Indicates how far the market should run
	// before maximizing size of a recently placed order that is now part of the group of stacked orders.
	// Must be less than queue_holders_min_size, default is 0.
	OrderSizeRestoreThreshold *uint32 `protobuf:"varint,5,opt,name=order_size_restore_threshold,json=orderSizeRestoreThreshold" json:"order_size_restore_threshold,omitempty"`
	// Note: use visible_qty field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/strategy_2.proto.
	Uint32VisibleQty *uint32 `protobuf:"varint,6,opt,name=uint32_visible_qty,json=uint32VisibleQty" json:"uint32_visible_qty,omitempty"`
	// Primary Iceberg order visible size in lots.
	VisibleQty *common.Decimal `protobuf:"bytes,19,opt,name=visible_qty,json=visibleQty" json:"visible_qty,omitempty"`
	// Note: use min_visible_qty field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/strategy_2.proto.
	Uint32MinVisibleQty *uint32 `protobuf:"varint,7,opt,name=uint32_min_visible_qty,json=uint32MinVisibleQty" json:"uint32_min_visible_qty,omitempty"`
	// Primary Iceberg order min visible size in lots.
	MinVisibleQty *common.Decimal `protobuf:"bytes,20,opt,name=min_visible_qty,json=minVisibleQty" json:"min_visible_qty,omitempty"`
	// Maximal distance between the market price and the old/new limit price of working primary leg
	// orders, which allows modifications of these orders' prices(in ticks).
	// Zero value is acceptable and means that the orders are modified at any distance.
	// 0 is default.
	WorkingOrdersPriceRange *uint32 `protobuf:"varint,8,opt,name=working_orders_price_range,json=workingOrdersPriceRange" json:"working_orders_price_range,omitempty"`
	// Minimal difference between the old and the new limit prices of working
	// primary leg orders, which allows modifications of these orders' prices (in ticks).
	MinPriceChange *uint32 `protobuf:"varint,9,opt,name=min_price_change,json=minPriceChange" json:"min_price_change,omitempty"`
	// Maximum number of leg orders per price level.
	PrimaryOrdersFifoQueueSize *uint32 `protobuf:"varint,10,opt,name=primary_orders_fifo_queue_size,json=primaryOrdersFifoQueueSize" json:"primary_orders_fifo_queue_size,omitempty"`
	// Period of updates to the working leg in milliseconds, such that every N ms,
	// the leg is put where it ought to be placed based upon current prices.
	// Default is to use the server settings.
	ForceUpdatePeriod *uint32 `protobuf:"varint,11,opt,name=force_update_period,json=forceUpdatePeriod" json:"force_update_period,omitempty"`
	// Flag that shows whether observed markets must be used for primary orders size calculation or not.
	IgnoreObservedMarkets *bool `protobuf:"varint,12,opt,name=ignore_observed_markets,json=ignoreObservedMarkets" json:"ignore_observed_markets,omitempty"`
	// Specifies (in ticks) maximum distance
	// primary order price could be moved from target one while creating best bid/ask.
	MaxDimming *uint32 `protobuf:"varint,13,opt,name=max_dimming,json=maxDimming" json:"max_dimming,omitempty"`
	// Mode of handling primary leg orders with target price far from market. One of FarFromMarketMode enums.
	// Default is to use the server settings.
	FarFromMarketMode *uint32 `protobuf:"varint,14,opt,name=far_from_market_mode,json=farFromMarketMode" json:"far_from_market_mode,omitempty"`
	// Defines if and where server must work quantity that cannot lean onto current best bid/offer.
	// Allowed range 0-9, default is to use the server setting.
	TicksAwayToWork *int32 `protobuf:"varint,15,opt,name=ticks_away_to_work,json=ticksAwayToWork" json:"ticks_away_to_work,omitempty"`
	// How to work orders considering DOM data. One of DOMUsageMode enums. TOP_ONLY is default.
	DomUsage *uint32 `protobuf:"varint,16,opt,name=dom_usage,json=domUsage" json:"dom_usage,omitempty"`
	// Work up to this number of orders to get required volume if dom_usage is DOM_USAGE_MODE_MULTILEVELS.
	// Allowed range 1-10, default is 1.
	DomMultilevelQty *uint32 `protobuf:"varint,17,opt,name=dom_multilevel_qty,json=domMultilevelQty" json:"dom_multilevel_qty,omitempty"`
}

func (x *PrimaryOrdersLimit) Reset() {
	*x = PrimaryOrdersLimit{}
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrimaryOrdersLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrimaryOrdersLimit) ProtoMessage() {}

func (x *PrimaryOrdersLimit) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrimaryOrdersLimit.ProtoReflect.Descriptor instead.
func (*PrimaryOrdersLimit) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_strategy_2_proto_rawDescGZIP(), []int{16}
}

// Deprecated: Marked as deprecated in protos/WebAPI/strategy_2.proto.
func (x *PrimaryOrdersLimit) GetUint32MinQtyIncrement() uint32 {
	if x != nil && x.Uint32MinQtyIncrement != nil {
		return *x.Uint32MinQtyIncrement
	}
	return 0
}

func (x *PrimaryOrdersLimit) GetMinQtyIncrement() *common.Decimal {
	if x != nil {
		return x.MinQtyIncrement
	}
	return nil
}

func (x *PrimaryOrdersLimit) GetQueueHoldersMinSize() uint32 {
	if x != nil && x.QueueHoldersMinSize != nil {
		return *x.QueueHoldersMinSize
	}
	return 0
}

func (x *PrimaryOrdersLimit) GetQueueHoldersMaxSize() uint32 {
	if x != nil && x.QueueHoldersMaxSize != nil {
		return *x.QueueHoldersMaxSize
	}
	return 0
}

func (x *PrimaryOrdersLimit) GetQueueHoldersDistance() uint32 {
	if x != nil && x.QueueHoldersDistance != nil {
		return *x.QueueHoldersDistance
	}
	return 0
}

func (x *PrimaryOrdersLimit) GetOrderSizeRestoreThreshold() uint32 {
	if x != nil && x.OrderSizeRestoreThreshold != nil {
		return *x.OrderSizeRestoreThreshold
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/strategy_2.proto.
func (x *PrimaryOrdersLimit) GetUint32VisibleQty() uint32 {
	if x != nil && x.Uint32VisibleQty != nil {
		return *x.Uint32VisibleQty
	}
	return 0
}

func (x *PrimaryOrdersLimit) GetVisibleQty() *common.Decimal {
	if x != nil {
		return x.VisibleQty
	}
	return nil
}

// Deprecated: Marked as deprecated in protos/WebAPI/strategy_2.proto.
func (x *PrimaryOrdersLimit) GetUint32MinVisibleQty() uint32 {
	if x != nil && x.Uint32MinVisibleQty != nil {
		return *x.Uint32MinVisibleQty
	}
	return 0
}

func (x *PrimaryOrdersLimit) GetMinVisibleQty() *common.Decimal {
	if x != nil {
		return x.MinVisibleQty
	}
	return nil
}

func (x *PrimaryOrdersLimit) GetWorkingOrdersPriceRange() uint32 {
	if x != nil && x.WorkingOrdersPriceRange != nil {
		return *x.WorkingOrdersPriceRange
	}
	return 0
}

func (x *PrimaryOrdersLimit) GetMinPriceChange() uint32 {
	if x != nil && x.MinPriceChange != nil {
		return *x.MinPriceChange
	}
	return 0
}

func (x *PrimaryOrdersLimit) GetPrimaryOrdersFifoQueueSize() uint32 {
	if x != nil && x.PrimaryOrdersFifoQueueSize != nil {
		return *x.PrimaryOrdersFifoQueueSize
	}
	return 0
}

func (x *PrimaryOrdersLimit) GetForceUpdatePeriod() uint32 {
	if x != nil && x.ForceUpdatePeriod != nil {
		return *x.ForceUpdatePeriod
	}
	return 0
}

func (x *PrimaryOrdersLimit) GetIgnoreObservedMarkets() bool {
	if x != nil && x.IgnoreObservedMarkets != nil {
		return *x.IgnoreObservedMarkets
	}
	return false
}

func (x *PrimaryOrdersLimit) GetMaxDimming() uint32 {
	if x != nil && x.MaxDimming != nil {
		return *x.MaxDimming
	}
	return 0
}

func (x *PrimaryOrdersLimit) GetFarFromMarketMode() uint32 {
	if x != nil && x.FarFromMarketMode != nil {
		return *x.FarFromMarketMode
	}
	return 0
}

func (x *PrimaryOrdersLimit) GetTicksAwayToWork() int32 {
	if x != nil && x.TicksAwayToWork != nil {
		return *x.TicksAwayToWork
	}
	return 0
}

func (x *PrimaryOrdersLimit) GetDomUsage() uint32 {
	if x != nil && x.DomUsage != nil {
		return *x.DomUsage
	}
	return 0
}

func (x *PrimaryOrdersLimit) GetDomMultilevelQty() uint32 {
	if x != nil && x.DomMultilevelQty != nil {
		return *x.DomMultilevelQty
	}
	return 0
}

// Sniper rule means don't place any primary order.
// It just watches markets waiting for the moment when the strategy order's LMT price is available.
// Then secondary orders on all legs must be placed.
type PrimaryOrdersSniper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One of LegDuration enums.
	LegDuration *uint32 `protobuf:"varint,1,req,name=leg_duration,json=legDuration" json:"leg_duration,omitempty"`
}

func (x *PrimaryOrdersSniper) Reset() {
	*x = PrimaryOrdersSniper{}
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrimaryOrdersSniper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrimaryOrdersSniper) ProtoMessage() {}

func (x *PrimaryOrdersSniper) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrimaryOrdersSniper.ProtoReflect.Descriptor instead.
func (*PrimaryOrdersSniper) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_strategy_2_proto_rawDescGZIP(), []int{17}
}

func (x *PrimaryOrdersSniper) GetLegDuration() uint32 {
	if x != nil && x.LegDuration != nil {
		return *x.LegDuration
	}
	return 0
}

// LMT secondary orders parameters.
type SecondaryOrdersLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Offset to adjust secondary order price at the moment of place. Default is 0.
	InitialOffset *float64 `protobuf:"fixed64,1,opt,name=initial_offset,json=initialOffset" json:"initial_offset,omitempty"`
}

func (x *SecondaryOrdersLimit) Reset() {
	*x = SecondaryOrdersLimit{}
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecondaryOrdersLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecondaryOrdersLimit) ProtoMessage() {}

func (x *SecondaryOrdersLimit) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecondaryOrdersLimit.ProtoReflect.Descriptor instead.
func (*SecondaryOrdersLimit) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_strategy_2_proto_rawDescGZIP(), []int{18}
}

func (x *SecondaryOrdersLimit) GetInitialOffset() float64 {
	if x != nil && x.InitialOffset != nil {
		return *x.InitialOffset
	}
	return 0
}

// MKT secondary orders parameters.
type SecondaryOrdersMarket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SecondaryOrdersMarket) Reset() {
	*x = SecondaryOrdersMarket{}
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecondaryOrdersMarket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecondaryOrdersMarket) ProtoMessage() {}

func (x *SecondaryOrdersMarket) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecondaryOrdersMarket.ProtoReflect.Descriptor instead.
func (*SecondaryOrdersMarket) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_strategy_2_proto_rawDescGZIP(), []int{19}
}

// Pay up secondary orders parameters.
type SecondaryOrdersPayUp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Offset to modify the price of a hung secondary order.
	Offset *float64 `protobuf:"fixed64,1,req,name=offset" json:"offset,omitempty"`
	// Offset to adjust the secondary order price at the moment of placement.
	InitialOffset *float64 `protobuf:"fixed64,2,opt,name=initial_offset,json=initialOffset" json:"initial_offset,omitempty"`
	// One of the conditions below must be set.
	// Condition to check that pointed time interval is passed.
	ConditionTimeout *uint32 `protobuf:"varint,3,opt,name=condition_timeout,json=conditionTimeout" json:"condition_timeout,omitempty"`
	// Note: use condition_absolute_volume field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/strategy_2.proto.
	Uint32ConditionAbsoluteVolume *uint32 `protobuf:"varint,4,opt,name=uint32_condition_absolute_volume,json=uint32ConditionAbsoluteVolume" json:"uint32_condition_absolute_volume,omitempty"`
	// Condition to check the opposite market volume.
	ConditionAbsoluteVolume *common.Decimal `protobuf:"bytes,7,opt,name=condition_absolute_volume,json=conditionAbsoluteVolume" json:"condition_absolute_volume,omitempty"`
	// Condition to check the ratio between the opposite side and secondary order sizes.
	ConditionOppositeVolumeRatio *float64 `protobuf:"fixed64,5,opt,name=condition_opposite_volume_ratio,json=conditionOppositeVolumeRatio" json:"condition_opposite_volume_ratio,omitempty"`
	// Condition to check the opposite side and the local side volumes ratio.
	ConditionBbaVolumeRatio *float64 `protobuf:"fixed64,6,opt,name=condition_bba_volume_ratio,json=conditionBbaVolumeRatio" json:"condition_bba_volume_ratio,omitempty"`
}

func (x *SecondaryOrdersPayUp) Reset() {
	*x = SecondaryOrdersPayUp{}
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecondaryOrdersPayUp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecondaryOrdersPayUp) ProtoMessage() {}

func (x *SecondaryOrdersPayUp) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecondaryOrdersPayUp.ProtoReflect.Descriptor instead.
func (*SecondaryOrdersPayUp) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_strategy_2_proto_rawDescGZIP(), []int{20}
}

func (x *SecondaryOrdersPayUp) GetOffset() float64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *SecondaryOrdersPayUp) GetInitialOffset() float64 {
	if x != nil && x.InitialOffset != nil {
		return *x.InitialOffset
	}
	return 0
}

func (x *SecondaryOrdersPayUp) GetConditionTimeout() uint32 {
	if x != nil && x.ConditionTimeout != nil {
		return *x.ConditionTimeout
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/strategy_2.proto.
func (x *SecondaryOrdersPayUp) GetUint32ConditionAbsoluteVolume() uint32 {
	if x != nil && x.Uint32ConditionAbsoluteVolume != nil {
		return *x.Uint32ConditionAbsoluteVolume
	}
	return 0
}

func (x *SecondaryOrdersPayUp) GetConditionAbsoluteVolume() *common.Decimal {
	if x != nil {
		return x.ConditionAbsoluteVolume
	}
	return nil
}

func (x *SecondaryOrdersPayUp) GetConditionOppositeVolumeRatio() float64 {
	if x != nil && x.ConditionOppositeVolumeRatio != nil {
		return *x.ConditionOppositeVolumeRatio
	}
	return 0
}

func (x *SecondaryOrdersPayUp) GetConditionBbaVolumeRatio() float64 {
	if x != nil && x.ConditionBbaVolumeRatio != nil {
		return *x.ConditionBbaVolumeRatio
	}
	return 0
}

// Trailing secondary orders parameters.
type SecondaryOrdersTrailing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Trailing offset.
	TrailingOffset *float64 `protobuf:"fixed64,1,req,name=trailing_offset,json=trailingOffset" json:"trailing_offset,omitempty"`
	// Peg that price must follow. One of Order.TrailingPeg enum.
	TrailingPeg *uint32 `protobuf:"varint,2,req,name=trailing_peg,json=trailingPeg" json:"trailing_peg,omitempty"`
	// Offset to adjust secondary order price at the moment of place.
	InitialOffset *float64 `protobuf:"fixed64,3,opt,name=initial_offset,json=initialOffset" json:"initial_offset,omitempty"`
	// Maximum distance to trail away from the initial price.
	MaxTrail *float64 `protobuf:"fixed64,4,opt,name=max_trail,json=maxTrail" json:"max_trail,omitempty"`
	// Note: use condition_absolute_volume field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/strategy_2.proto.
	Uint32ConditionAbsoluteVolume *uint32 `protobuf:"varint,5,opt,name=uint32_condition_absolute_volume,json=uint32ConditionAbsoluteVolume" json:"uint32_condition_absolute_volume,omitempty"`
	// Condition that checks the opposite market volume.
	ConditionAbsoluteVolume *common.Decimal `protobuf:"bytes,8,opt,name=condition_absolute_volume,json=conditionAbsoluteVolume" json:"condition_absolute_volume,omitempty"`
	// Condition that checks relation between opposite side and secondary order sizes.
	ConditionOppositeVolumeRatio *float64 `protobuf:"fixed64,6,opt,name=condition_opposite_volume_ratio,json=conditionOppositeVolumeRatio" json:"condition_opposite_volume_ratio,omitempty"`
	// Condition that checks the opposite side and the local side volumes ratio.
	ConditionBbaVolumeRatio *float64 `protobuf:"fixed64,7,opt,name=condition_bba_volume_ratio,json=conditionBbaVolumeRatio" json:"condition_bba_volume_ratio,omitempty"`
}

func (x *SecondaryOrdersTrailing) Reset() {
	*x = SecondaryOrdersTrailing{}
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecondaryOrdersTrailing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecondaryOrdersTrailing) ProtoMessage() {}

func (x *SecondaryOrdersTrailing) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecondaryOrdersTrailing.ProtoReflect.Descriptor instead.
func (*SecondaryOrdersTrailing) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_strategy_2_proto_rawDescGZIP(), []int{21}
}

func (x *SecondaryOrdersTrailing) GetTrailingOffset() float64 {
	if x != nil && x.TrailingOffset != nil {
		return *x.TrailingOffset
	}
	return 0
}

func (x *SecondaryOrdersTrailing) GetTrailingPeg() uint32 {
	if x != nil && x.TrailingPeg != nil {
		return *x.TrailingPeg
	}
	return 0
}

func (x *SecondaryOrdersTrailing) GetInitialOffset() float64 {
	if x != nil && x.InitialOffset != nil {
		return *x.InitialOffset
	}
	return 0
}

func (x *SecondaryOrdersTrailing) GetMaxTrail() float64 {
	if x != nil && x.MaxTrail != nil {
		return *x.MaxTrail
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/strategy_2.proto.
func (x *SecondaryOrdersTrailing) GetUint32ConditionAbsoluteVolume() uint32 {
	if x != nil && x.Uint32ConditionAbsoluteVolume != nil {
		return *x.Uint32ConditionAbsoluteVolume
	}
	return 0
}

func (x *SecondaryOrdersTrailing) GetConditionAbsoluteVolume() *common.Decimal {
	if x != nil {
		return x.ConditionAbsoluteVolume
	}
	return nil
}

func (x *SecondaryOrdersTrailing) GetConditionOppositeVolumeRatio() float64 {
	if x != nil && x.ConditionOppositeVolumeRatio != nil {
		return *x.ConditionOppositeVolumeRatio
	}
	return 0
}

func (x *SecondaryOrdersTrailing) GetConditionBbaVolumeRatio() float64 {
	if x != nil && x.ConditionBbaVolumeRatio != nil {
		return *x.ConditionBbaVolumeRatio
	}
	return 0
}

// Aggregation market taking mode:
// the order is held on the server until the price becomes available in at least one market;
// at which time, the server sends an order to the exchange.
type MarketTakingParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Allocation percent (in range 0...1) for the leg (must total 100% among all legs).
	AllocationPercent *float64 `protobuf:"fixed64,1,req,name=allocation_percent,json=allocationPercent" json:"allocation_percent,omitempty"`
	// Time period (in ms) that the order can work (after exchange ack)
	// before the server considers it timed out and cancels it (0 means 'never',
	// leaves order working until filled, cancelled, or expired).
	WorkingTimeout *uint32 `protobuf:"varint,2,req,name=working_timeout,json=workingTimeout" json:"working_timeout,omitempty"`
	// Type of order placed for the leg. One of MarketTakingLimitOrderType enums.
	OrderType *uint32 `protobuf:"varint,3,req,name=order_type,json=orderType" json:"order_type,omitempty"`
}

func (x *MarketTakingParameters) Reset() {
	*x = MarketTakingParameters{}
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarketTakingParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketTakingParameters) ProtoMessage() {}

func (x *MarketTakingParameters) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketTakingParameters.ProtoReflect.Descriptor instead.
func (*MarketTakingParameters) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_strategy_2_proto_rawDescGZIP(), []int{22}
}

func (x *MarketTakingParameters) GetAllocationPercent() float64 {
	if x != nil && x.AllocationPercent != nil {
		return *x.AllocationPercent
	}
	return 0
}

func (x *MarketTakingParameters) GetWorkingTimeout() uint32 {
	if x != nil && x.WorkingTimeout != nil {
		return *x.WorkingTimeout
	}
	return 0
}

func (x *MarketTakingParameters) GetOrderType() uint32 {
	if x != nil && x.OrderType != nil {
		return *x.OrderType
	}
	return 0
}

// Aggregation market making mode: the order is sent immediately to the exchanges based on the allocation percent.
// The server then manages the orders to get them filled as quickly as possible at the given price.
type MarketMakingParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Allocation percent (in range 0...1) for the leg (doesn't have to total 100% allocation among all legs).
	// Default is 0, the market making mode is turned off for the leg.
	AllocationPercent *float64 `protobuf:"fixed64,1,opt,name=allocation_percent,json=allocationPercent" json:"allocation_percent,omitempty"`
	// Note: use visible_qty instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/strategy_2.proto.
	Uint32VisibleQty *uint32 `protobuf:"varint,2,opt,name=uint32_visible_qty,json=uint32VisibleQty" json:"uint32_visible_qty,omitempty"`
	// Note: use min_visible_qty instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/strategy_2.proto.
	Uint32MinVisibleQty *uint32 `protobuf:"varint,3,opt,name=uint32_min_visible_qty,json=uint32MinVisibleQty" json:"uint32_min_visible_qty,omitempty"`
	// Note: use native_visible_qty instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/strategy_2.proto.
	Uint32NativeVisibleQty *uint32 `protobuf:"varint,4,opt,name=uint32_native_visible_qty,json=uint32NativeVisibleQty" json:"uint32_native_visible_qty,omitempty"`
	// Visible size in lots.
	VisibleQty *common.Decimal `protobuf:"bytes,5,opt,name=visible_qty,json=visibleQty" json:"visible_qty,omitempty"`
	// Min visible size in lots.
	MinVisibleQty *common.Decimal `protobuf:"bytes,6,opt,name=min_visible_qty,json=minVisibleQty" json:"min_visible_qty,omitempty"`
	// Visible size of native Iceberg.
	NativeVisibleQty *common.Decimal `protobuf:"bytes,7,opt,name=native_visible_qty,json=nativeVisibleQty" json:"native_visible_qty,omitempty"`
}

func (x *MarketMakingParameters) Reset() {
	*x = MarketMakingParameters{}
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarketMakingParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketMakingParameters) ProtoMessage() {}

func (x *MarketMakingParameters) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketMakingParameters.ProtoReflect.Descriptor instead.
func (*MarketMakingParameters) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_strategy_2_proto_rawDescGZIP(), []int{23}
}

func (x *MarketMakingParameters) GetAllocationPercent() float64 {
	if x != nil && x.AllocationPercent != nil {
		return *x.AllocationPercent
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/strategy_2.proto.
func (x *MarketMakingParameters) GetUint32VisibleQty() uint32 {
	if x != nil && x.Uint32VisibleQty != nil {
		return *x.Uint32VisibleQty
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/strategy_2.proto.
func (x *MarketMakingParameters) GetUint32MinVisibleQty() uint32 {
	if x != nil && x.Uint32MinVisibleQty != nil {
		return *x.Uint32MinVisibleQty
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/strategy_2.proto.
func (x *MarketMakingParameters) GetUint32NativeVisibleQty() uint32 {
	if x != nil && x.Uint32NativeVisibleQty != nil {
		return *x.Uint32NativeVisibleQty
	}
	return 0
}

func (x *MarketMakingParameters) GetVisibleQty() *common.Decimal {
	if x != nil {
		return x.VisibleQty
	}
	return nil
}

func (x *MarketMakingParameters) GetMinVisibleQty() *common.Decimal {
	if x != nil {
		return x.MinVisibleQty
	}
	return nil
}

func (x *MarketMakingParameters) GetNativeVisibleQty() *common.Decimal {
	if x != nil {
		return x.NativeVisibleQty
	}
	return nil
}

// Request to resolve previously reported hung quantity on a synthetic strategy order by
// 1) placing orders to offset filled leg position(s) at current mkt price(s) and (simultaneously)
// 2) cancelling the hung quantity.
type SyntheticLiquidate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of an account that is used to place an order.
	AccountId *int32 `protobuf:"zigzag32,1,req,name=account_id,json=accountId" json:"account_id,omitempty"`
	// Order id assigned by server after last modification.
	OrderId *string `protobuf:"bytes,2,req,name=order_id,json=orderId" json:"order_id,omitempty"`
	// Id of the hang from the SyntheticHang message.
	HangId *int32 `protobuf:"zigzag32,3,req,name=hang_id,json=hangId" json:"hang_id,omitempty"`
	// Client side time when a request was submitted (UTC).
	// Note: use when_utc_timestamp field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/strategy_2.proto.
	WhenUtcTime *int64 `protobuf:"zigzag64,4,opt,name=when_utc_time,json=whenUtcTime" json:"when_utc_time,omitempty"`
	// Client side time when a request was submitted (UTC).
	// If specified it's used instead of when_utc_time field (at least one of these fields has to be specified).
	WhenUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=when_utc_timestamp,json=whenUtcTimestamp" json:"when_utc_timestamp,omitempty"`
}

func (x *SyntheticLiquidate) Reset() {
	*x = SyntheticLiquidate{}
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyntheticLiquidate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyntheticLiquidate) ProtoMessage() {}

func (x *SyntheticLiquidate) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyntheticLiquidate.ProtoReflect.Descriptor instead.
func (*SyntheticLiquidate) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_strategy_2_proto_rawDescGZIP(), []int{24}
}

func (x *SyntheticLiquidate) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *SyntheticLiquidate) GetOrderId() string {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return ""
}

func (x *SyntheticLiquidate) GetHangId() int32 {
	if x != nil && x.HangId != nil {
		return *x.HangId
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/strategy_2.proto.
func (x *SyntheticLiquidate) GetWhenUtcTime() int64 {
	if x != nil && x.WhenUtcTime != nil {
		return *x.WhenUtcTime
	}
	return 0
}

func (x *SyntheticLiquidate) GetWhenUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.WhenUtcTimestamp
	}
	return nil
}

// Request to resolve previously reported hung quantity on a synthetic strategy order by
// 1) placing LMT orders to offset filled leg position(s) at their fill price(s) and (simultaneously)
// 2) cancelling the hung quantity.
type SyntheticScratch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of an account that is used to place an order.
	AccountId *int32 `protobuf:"zigzag32,1,req,name=account_id,json=accountId" json:"account_id,omitempty"`
	// Order id assigned by server after last modification.
	OrderId *string `protobuf:"bytes,2,req,name=order_id,json=orderId" json:"order_id,omitempty"`
	// Id of the hang from the SyntheticHang message.
	HangId *int32 `protobuf:"zigzag32,3,req,name=hang_id,json=hangId" json:"hang_id,omitempty"`
	// Client side time when a request was submitted (UTC).
	// Note: use when_utc_timestamp field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/strategy_2.proto.
	WhenUtcTime *int64 `protobuf:"zigzag64,4,opt,name=when_utc_time,json=whenUtcTime" json:"when_utc_time,omitempty"`
	// Client side time when a request was submitted (UTC).
	// If specified it's used instead of when_utc_time field (at least one of these fields has to be specified).
	WhenUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=when_utc_timestamp,json=whenUtcTimestamp" json:"when_utc_timestamp,omitempty"`
}

func (x *SyntheticScratch) Reset() {
	*x = SyntheticScratch{}
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyntheticScratch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyntheticScratch) ProtoMessage() {}

func (x *SyntheticScratch) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyntheticScratch.ProtoReflect.Descriptor instead.
func (*SyntheticScratch) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_strategy_2_proto_rawDescGZIP(), []int{25}
}

func (x *SyntheticScratch) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *SyntheticScratch) GetOrderId() string {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return ""
}

func (x *SyntheticScratch) GetHangId() int32 {
	if x != nil && x.HangId != nil {
		return *x.HangId
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/strategy_2.proto.
func (x *SyntheticScratch) GetWhenUtcTime() int64 {
	if x != nil && x.WhenUtcTime != nil {
		return *x.WhenUtcTime
	}
	return 0
}

func (x *SyntheticScratch) GetWhenUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.WhenUtcTimestamp
	}
	return nil
}

// Modify an order to get an immediate fill
// (on either the entire order or previously reported hanging quantity on a synthetic strategy order).
type GoMarket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of an account that is used to place an order.
	AccountId *int32 `protobuf:"zigzag32,1,req,name=account_id,json=accountId" json:"account_id,omitempty"`
	// Order id assigned by the server after the last modification.
	OrderId *string `protobuf:"bytes,2,req,name=order_id,json=orderId" json:"order_id,omitempty"`
	// Id of the hang from the SyntheticHang message.
	// This is a required field for a synthetic strategy order.
	HangId *int32 `protobuf:"zigzag32,3,opt,name=hang_id,json=hangId" json:"hang_id,omitempty"`
	// Client side time when a request was submitted (UTC).
	// Note: use when_utc_timestamp field instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/strategy_2.proto.
	WhenUtcTime *int64 `protobuf:"zigzag64,4,opt,name=when_utc_time,json=whenUtcTime" json:"when_utc_time,omitempty"`
	// Client side time when a request was submitted (UTC).
	// If specified it's used instead of when_utc_time field (at least one of these fields has to be specified).
	WhenUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=when_utc_timestamp,json=whenUtcTimestamp" json:"when_utc_timestamp,omitempty"`
}

func (x *GoMarket) Reset() {
	*x = GoMarket{}
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GoMarket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoMarket) ProtoMessage() {}

func (x *GoMarket) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_strategy_2_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoMarket.ProtoReflect.Descriptor instead.
func (*GoMarket) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_strategy_2_proto_rawDescGZIP(), []int{26}
}

func (x *GoMarket) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *GoMarket) GetOrderId() string {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return ""
}

func (x *GoMarket) GetHangId() int32 {
	if x != nil && x.HangId != nil {
		return *x.HangId
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/strategy_2.proto.
func (x *GoMarket) GetWhenUtcTime() int64 {
	if x != nil && x.WhenUtcTime != nil {
		return *x.WhenUtcTime
	}
	return 0
}

func (x *GoMarket) GetWhenUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.WhenUtcTimestamp
	}
	return nil
}

var File_protos_WebAPI_strategy_2_proto protoreflect.FileDescriptor

var file_protos_WebAPI_strategy_2_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49, 0x2f,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0a, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x32, 0x1a, 0x1e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49, 0x2f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49, 0x2f, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f,
	0x57, 0x65, 0x62, 0x41, 0x50, 0x49, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x64, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x48, 0x0a, 0x1d, 0x41, 0x6c, 0x67, 0x6f, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c, 0x67, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6c, 0x67,
	0x6f, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x1c,
	0x41, 0x6c, 0x67, 0x6f, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x69, 0x0a, 0x19,
	0x61, 0x6c, 0x67, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17,
	0x61, 0x6c, 0x67, 0x6f, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xe8, 0x01, 0x0a, 0x19, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x13, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x50, 0x0a, 0x19, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x31, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x22, 0x65, 0x0a, 0x18, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x49,
	0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x6f, 0x0a, 0x0f, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x4c, 0x65, 0x67, 0x46, 0x69, 0x6c, 0x6c, 0x12, 0x20, 0x0a, 0x0c,
	0x6c, 0x65, 0x67, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x6c, 0x65, 0x67, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x65, 0x67, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x71, 0x74, 0x79, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x01, 0x52, 0x03, 0x71, 0x74, 0x79, 0x22, 0x9a, 0x01, 0x0a, 0x0d, 0x53,
	0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x48, 0x61, 0x6e, 0x67, 0x12, 0x17, 0x0a, 0x07,
	0x68, 0x61, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x11, 0x52, 0x06, 0x68,
	0x61, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x0f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x68, 0x75, 0x6e, 0x67, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x0d, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x48, 0x75, 0x6e, 0x67, 0x51, 0x74,
	0x79, 0x12, 0x27, 0x0a, 0x08, 0x68, 0x75, 0x6e, 0x67, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x52, 0x07, 0x68, 0x75, 0x6e, 0x67, 0x51, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0xbd, 0x02, 0x0a, 0x1b, 0x53, 0x79, 0x6e, 0x74,
	0x68, 0x65, 0x74, 0x69, 0x63, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x65, 0x0a, 0x1b, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x32, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x19, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72,
	0x6f, 0x6f, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0a, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2c, 0x0a,
	0x12, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x22, 0xec, 0x03, 0x0a, 0x19, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x61, 0x0a, 0x17, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x5f, 0x32, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x15, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x5e, 0x0a, 0x16, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x5f, 0x32, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x14, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x5b, 0x0a, 0x15, 0x73, 0x74, 0x6f, 0x70,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x5f, 0x32, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x53, 0x74, 0x6f,
	0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x13, 0x73, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x60, 0x0a, 0x16, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x5f, 0x32, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x15, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x4d, 0x0a, 0x0e, 0x6c, 0x65, 0x67, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x32, 0x2e, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x65, 0x67, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0d, 0x6c, 0x65, 0x67, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0xdc, 0x01, 0x0a, 0x1a, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x65, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x70,
	0x65, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x70, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x1d, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x09, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e,
	0x6f, 0x64, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x39, 0x0a, 0x19, 0x72, 0x65, 0x70, 0x6c, 0x65,
	0x6e, 0x69, 0x73, 0x68, 0x5f, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f,
	0x66, 0x69, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x72, 0x65, 0x70, 0x6c,
	0x65, 0x6e, 0x69, 0x73, 0x68, 0x4f, 0x6e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x46, 0x69,
	0x6c, 0x6c, 0x22, 0xbd, 0x06, 0x0a, 0x1c, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x39, 0x0a, 0x19, 0x72, 0x65, 0x70, 0x6c, 0x65, 0x6e, 0x69, 0x73, 0x68,
	0x5f, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x72, 0x65, 0x70, 0x6c, 0x65, 0x6e, 0x69, 0x73,
	0x68, 0x4f, 0x6e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x6c, 0x12, 0x23,
	0x0a, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x69, 0x6c, 0x6c, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x6f, 0x5f,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x4c, 0x6f, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x63,
	0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x40, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x5f, 0x32, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x4f, 0x0a, 0x10, 0x6c, 0x65, 0x67, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x32, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4c, 0x65, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0f, 0x6c, 0x65, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x63, 0x65, 0x62, 0x65, 0x72, 0x67, 0x5f, 0x68, 0x75,
	0x6e, 0x67, 0x5f, 0x6c, 0x6f, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x14, 0x69, 0x63, 0x65, 0x62, 0x65, 0x72, 0x67, 0x48, 0x75, 0x6e, 0x67,
	0x4c, 0x6f, 0x74, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x70, 0x0a, 0x0c, 0x4f, 0x76, 0x65,
	0x72, 0x66, 0x69, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x56, 0x45,
	0x52, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41,
	0x4c, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x4f, 0x56, 0x45, 0x52, 0x46, 0x49, 0x4c, 0x4c, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x4d, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x48,
	0x45, 0x44, 0x47, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x56, 0x45, 0x52,
	0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x56, 0x4f, 0x49, 0x44, 0x5f,
	0x4f, 0x56, 0x45, 0x52, 0x46, 0x49, 0x4c, 0x4c, 0x53, 0x10, 0x03, 0x22, 0x81, 0x01, 0x0a, 0x13,
	0x41, 0x6c, 0x69, 0x67, 0x6e, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x4c,
	0x6f, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x5f, 0x54, 0x4f, 0x5f,
	0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x4c, 0x4f, 0x54, 0x53, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x5f, 0x54, 0x4f,
	0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x4c, 0x4f, 0x54, 0x53, 0x5f, 0x53,
	0x45, 0x43, 0x4f, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x12,
	0x1e, 0x0a, 0x1a, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x54, 0x52, 0x41,
	0x54, 0x45, 0x47, 0x59, 0x5f, 0x4c, 0x4f, 0x54, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x03, 0x22,
	0x61, 0x0a, 0x0d, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x28, 0x0a, 0x24, 0x50, 0x52, 0x49, 0x43, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x45, 0x54, 0x48,
	0x4f, 0x44, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x4c,
	0x4f, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x52,
	0x49, 0x43, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x41, 0x56, 0x45,
	0x52, 0x41, 0x47, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45,
	0x10, 0x02, 0x22, 0xe7, 0x01, 0x0a, 0x1b, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x53,
	0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x21, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x53, 0x69, 0x64, 0x65, 0x12,
	0x39, 0x0a, 0x19, 0x72, 0x65, 0x70, 0x6c, 0x65, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x6f, 0x6e, 0x5f,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x16, 0x72, 0x65, 0x70, 0x6c, 0x65, 0x6e, 0x69, 0x73, 0x68, 0x4f, 0x6e, 0x50,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x6c, 0x22, 0x30, 0x0a, 0x08, 0x53, 0x74,
	0x6f, 0x70, 0x53, 0x69, 0x64, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x53,
	0x49, 0x44, 0x45, 0x5f, 0x42, 0x49, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x4f,
	0x50, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x41, 0x53, 0x4b, 0x10, 0x02, 0x22, 0xa5, 0x03, 0x0a,
	0x1d, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x21,
	0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x23,
	0x0a, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x69, 0x6c, 0x6c, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x32, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x68,
	0x69, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x68, 0x69,
	0x66, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x48, 0x0a, 0x0c, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x5f, 0x6c, 0x65, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x32, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x4c, 0x65, 0x67, 0x73, 0x22,
	0x92, 0x01, 0x0a, 0x10, 0x41, 0x67, 0x67, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x66, 0x69, 0x6c, 0x6c,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x47, 0x47, 0x52, 0x5f, 0x4f, 0x56, 0x45,
	0x52, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x56, 0x4f, 0x49, 0x44,
	0x5f, 0x4f, 0x56, 0x45, 0x52, 0x46, 0x49, 0x4c, 0x4c, 0x53, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22,
	0x41, 0x47, 0x47, 0x52, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x46, 0x49,
	0x4c, 0x4c, 0x10, 0x02, 0x12, 0x2e, 0x0a, 0x2a, 0x41, 0x47, 0x47, 0x52, 0x5f, 0x4f, 0x56, 0x45,
	0x52, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45,
	0x52, 0x56, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x03, 0x22, 0x94, 0x03, 0x0a, 0x19, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x18, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x16, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x12, 0x39, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x10, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12,
	0x5c, 0x0a, 0x18, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x32, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x16, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x5c, 0x0a,
	0x18, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x32, 0x2e, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x4d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x16, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x0d,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x39, 0x0a, 0x17,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x71, 0x74,
	0x79, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x14, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x51,
	0x74, 0x79, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x6c, 0x65,
	0x64, 0x5f, 0x71, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52,
	0x0e, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x51, 0x74, 0x79, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x22,
	0xc9, 0x06, 0x0a, 0x18, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x65,
	0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0a,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x4e, 0x0a, 0x13, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x32, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x11, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x51, 0x0a, 0x14, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x73, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x32, 0x2e, 0x50, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x53, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x52,
	0x12, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x6e, 0x69,
	0x70, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x16, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x32,
	0x2e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x14, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x59, 0x0a, 0x17, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x5f,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x32, 0x2e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52,
	0x15, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x56, 0x0a, 0x16, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x75, 0x70,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x5f, 0x32, 0x2e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x50, 0x61, 0x79, 0x55, 0x70, 0x52, 0x14, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x50, 0x61, 0x79, 0x75, 0x70, 0x12, 0x5f,
	0x0a, 0x19, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x32, 0x2e, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x54, 0x72,
	0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x17, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x12,
	0x40, 0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x36,
	0x0a, 0x15, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x13, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x33, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0d, 0x77, 0x6f,
	0x72, 0x6b, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0xc4, 0x0a, 0x0a, 0x12,
	0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x3b, 0x0a, 0x18, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6d, 0x69, 0x6e,
	0x5f, 0x71, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x15, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x4d, 0x69, 0x6e, 0x51, 0x74, 0x79, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x38, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x5f, 0x71, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x51, 0x74, 0x79,
	0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x4d, 0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x33,
	0x0a, 0x16, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x4d, 0x61, 0x78, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x68, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x71, 0x75, 0x65, 0x75, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x73, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x19, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x30, 0x0a, 0x12, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x71, 0x74, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x10, 0x75, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x51, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x0b,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52,
	0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x51, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x16, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x13, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4d, 0x69, 0x6e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x51, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0d, 0x6d, 0x69, 0x6e,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x51, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x1a, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x42, 0x0a, 0x1e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x5f, 0x66, 0x69, 0x66, 0x6f, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x46, 0x69, 0x66, 0x6f, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f,
	0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x69, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x44, 0x69, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x2f,
	0x0a, 0x14, 0x66, 0x61, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x66, 0x61,
	0x72, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x2b, 0x0a, 0x12, 0x74, 0x69, 0x63, 0x6b, 0x73, 0x5f, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x74, 0x6f,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x69, 0x63,
	0x6b, 0x73, 0x41, 0x77, 0x61, 0x79, 0x54, 0x6f, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x6f, 0x6d, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x64, 0x6f, 0x6d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x6f, 0x6d,
	0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x71, 0x74, 0x79, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x64, 0x6f, 0x6d, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x51, 0x74, 0x79, 0x22, 0x84, 0x01, 0x0a, 0x11, 0x46, 0x61, 0x72, 0x46,
	0x72, 0x6f, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a,
	0x1e, 0x46, 0x41, 0x52, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x53, 0x10,
	0x01, 0x12, 0x27, 0x0a, 0x23, 0x46, 0x41, 0x52, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x4d, 0x41,
	0x52, 0x4b, 0x45, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x41,
	0x57, 0x41, 0x59, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x41,
	0x52, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x44, 0x4f, 0x4e, 0x54, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x03, 0x22, 0xa1,
	0x01, 0x0a, 0x0c, 0x44, 0x4f, 0x4d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x1b, 0x0a, 0x17, 0x44, 0x4f, 0x4d, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x54, 0x4f, 0x50, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a,
	0x44, 0x4f, 0x4d, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4d,
	0x55, 0x4c, 0x54, 0x49, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x53, 0x10, 0x02, 0x12, 0x28, 0x0a, 0x24,
	0x44, 0x4f, 0x4d, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x46,
	0x55, 0x4c, 0x4c, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x53, 0x54, 0x5f, 0x50,
	0x52, 0x49, 0x43, 0x45, 0x10, 0x03, 0x12, 0x2a, 0x0a, 0x26, 0x44, 0x4f, 0x4d, 0x5f, 0x55, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x53, 0x49,
	0x5a, 0x45, 0x5f, 0x41, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45,
	0x10, 0x04, 0x22, 0x89, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x53, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x65,
	0x67, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x0b, 0x6c, 0x65, 0x67, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4f, 0x0a,
	0x0b, 0x4c, 0x65, 0x67, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x10,
	0x4c, 0x45, 0x47, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x59,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x45, 0x47, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x4b, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x45, 0x47, 0x5f,
	0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x4f, 0x4b, 0x10, 0x03, 0x22, 0x3d,
	0x0a, 0x14, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x17, 0x0a,
	0x15, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x22, 0x9d, 0x03, 0x0a, 0x14, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x50, 0x61, 0x79, 0x55, 0x70, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x01, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2b,
	0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x4b, 0x0a, 0x20, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x1d, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x5f, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71,
	0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x45, 0x0a, 0x1f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6f, 0x70, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1c, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x3b, 0x0a, 0x1a, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x62, 0x61, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x62, 0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x22, 0xc4, 0x03, 0x0a, 0x17, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x69,
	0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x01, 0x52, 0x0e, 0x74, 0x72, 0x61,
	0x69, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x67, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x67, 0x12, 0x25,
	0x0a, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x72, 0x61,
	0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x54, 0x72, 0x61,
	0x69, 0x6c, 0x12, 0x4b, 0x0a, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x5f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x1d, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x48, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x62, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x52, 0x17, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x62, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x1f, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x5f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x1c, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x12, 0x3b, 0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x62,
	0x61, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x62, 0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x22, 0xfd, 0x01,
	0x0a, 0x16, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x01, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x6c, 0x0a, 0x1a, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a,
	0x22, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4c, 0x4d, 0x54, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f,
	0x54, 0x41, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4b, 0x54, 0x10, 0x02, 0x22, 0x92, 0x03,
	0x0a, 0x16, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x12, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x10, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x51, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x16, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f,
	0x71, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x13, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x4d, 0x69, 0x6e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x51,
	0x74, 0x79, 0x12, 0x3d, 0x0a, 0x19, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x71, 0x74, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x16, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x51, 0x74,
	0x79, 0x12, 0x2d, 0x0a, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x71, 0x74, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x51, 0x74, 0x79,
	0x12, 0x34, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f,
	0x71, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x51, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x12, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x52, 0x10, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x51,
	0x74, 0x79, 0x22, 0xd9, 0x01, 0x0a, 0x12, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63,
	0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x11, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x61, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x11, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0d,
	0x77, 0x68, 0x65, 0x6e, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x12, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x77, 0x68, 0x65, 0x6e, 0x55, 0x74, 0x63,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x75, 0x74, 0x63,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x77, 0x68,
	0x65, 0x6e, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xd7,
	0x01, 0x0a, 0x10, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x53, 0x63, 0x72, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x11, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x68, 0x61, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x11, 0x52, 0x06,
	0x68, 0x61, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0d, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x75,
	0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x12, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x0b, 0x77, 0x68, 0x65, 0x6e, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x48,
	0x0a, 0x12, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x77, 0x68, 0x65, 0x6e, 0x55, 0x74, 0x63, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xcf, 0x01, 0x0a, 0x08, 0x47, 0x6f, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x11, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x68, 0x61, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x06, 0x68, 0x61, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0d, 0x77, 0x68, 0x65, 0x6e,
	0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x12, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x0b, 0x77, 0x68, 0x65, 0x6e, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x48, 0x0a, 0x12, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x77, 0x68, 0x65, 0x6e, 0x55, 0x74,
	0x63, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49,
}

var (
	file_protos_WebAPI_strategy_2_proto_rawDescOnce sync.Once
	file_protos_WebAPI_strategy_2_proto_rawDescData = file_protos_WebAPI_strategy_2_proto_rawDesc
)

func file_protos_WebAPI_strategy_2_proto_rawDescGZIP() []byte {
	file_protos_WebAPI_strategy_2_proto_rawDescOnce.Do(func() {
		file_protos_WebAPI_strategy_2_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_WebAPI_strategy_2_proto_rawDescData)
	})
	return file_protos_WebAPI_strategy_2_proto_rawDescData
}

var file_protos_WebAPI_strategy_2_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_protos_WebAPI_strategy_2_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_protos_WebAPI_strategy_2_proto_goTypes = []any{
	(StrategyLimitOrderParameters_OverfillMode)(0),         // 0: strategy_2.StrategyLimitOrderParameters.OverfillMode
	(StrategyLimitOrderParameters_AlignToStrategyLots)(0),  // 1: strategy_2.StrategyLimitOrderParameters.AlignToStrategyLots
	(StrategyLimitOrderParameters_PricingMethod)(0),        // 2: strategy_2.StrategyLimitOrderParameters.PricingMethod
	(StrategyStopOrderParameters_StopSide)(0),              // 3: strategy_2.StrategyStopOrderParameters.StopSide
	(StrategyAggregationParameters_AggrOverfillMode)(0),    // 4: strategy_2.StrategyAggregationParameters.AggrOverfillMode
	(PrimaryOrdersLimit_FarFromMarketMode)(0),              // 5: strategy_2.PrimaryOrdersLimit.FarFromMarketMode
	(PrimaryOrdersLimit_DOMUsageMode)(0),                   // 6: strategy_2.PrimaryOrdersLimit.DOMUsageMode
	(PrimaryOrdersSniper_LegDuration)(0),                   // 7: strategy_2.PrimaryOrdersSniper.LegDuration
	(MarketTakingParameters_MarketTakingLimitOrderType)(0), // 8: strategy_2.MarketTakingParameters.MarketTakingLimitOrderType
	(*AlgoStrategyDefinitionRequest)(nil),                  // 9: strategy_2.AlgoStrategyDefinitionRequest
	(*AlgoStrategyDefinitionReport)(nil),                   // 10: strategy_2.AlgoStrategyDefinitionReport
	(*StrategyDefinitionRequest)(nil),                      // 11: strategy_2.StrategyDefinitionRequest
	(*StrategyDefinitionReport)(nil),                       // 12: strategy_2.StrategyDefinitionReport
	(*StrategyLegFill)(nil),                                // 13: strategy_2.StrategyLegFill
	(*SyntheticHang)(nil),                                  // 14: strategy_2.SyntheticHang
	(*SyntheticStrategyProperties)(nil),                    // 15: strategy_2.SyntheticStrategyProperties
	(*StrategyTradingParameters)(nil),                      // 16: strategy_2.StrategyTradingParameters
	(*StrategyOrderLegParameters)(nil),                     // 17: strategy_2.StrategyOrderLegParameters
	(*StrategyMarketOrderParameters)(nil),                  // 18: strategy_2.StrategyMarketOrderParameters
	(*StrategyLimitOrderParameters)(nil),                   // 19: strategy_2.StrategyLimitOrderParameters
	(*StrategyStopOrderParameters)(nil),                    // 20: strategy_2.StrategyStopOrderParameters
	(*StrategyAggregationParameters)(nil),                  // 21: strategy_2.StrategyAggregationParameters
	(*AggregationLegDescription)(nil),                      // 22: strategy_2.AggregationLegDescription
	(*PriceShifting)(nil),                                  // 23: strategy_2.PriceShifting
	(*LimitOrderLegDescription)(nil),                       // 24: strategy_2.LimitOrderLegDescription
	(*PrimaryOrdersLimit)(nil),                             // 25: strategy_2.PrimaryOrdersLimit
	(*PrimaryOrdersSniper)(nil),                            // 26: strategy_2.PrimaryOrdersSniper
	(*SecondaryOrdersLimit)(nil),                           // 27: strategy_2.SecondaryOrdersLimit
	(*SecondaryOrdersMarket)(nil),                          // 28: strategy_2.SecondaryOrdersMarket
	(*SecondaryOrdersPayUp)(nil),                           // 29: strategy_2.SecondaryOrdersPayUp
	(*SecondaryOrdersTrailing)(nil),                        // 30: strategy_2.SecondaryOrdersTrailing
	(*MarketTakingParameters)(nil),                         // 31: strategy_2.MarketTakingParameters
	(*MarketMakingParameters)(nil),                         // 32: strategy_2.MarketMakingParameters
	(*SyntheticLiquidate)(nil),                             // 33: strategy_2.SyntheticLiquidate
	(*SyntheticScratch)(nil),                               // 34: strategy_2.SyntheticScratch
	(*GoMarket)(nil),                                       // 35: strategy_2.GoMarket
	(*AlgoStrategyDefinition)(nil),                         // 36: strategy_definition_2.AlgoStrategyDefinition
	(*StrategyDefinition)(nil),                             // 37: strategy_definition_2.StrategyDefinition
	(*common.NamedValue)(nil),                              // 38: shared_1.NamedValue
	(*ContractMetadata)(nil),                               // 39: metadata_2.ContractMetadata
	(*common.Decimal)(nil),                                 // 40: cqg.Decimal
	(*timestamppb.Timestamp)(nil),                          // 41: google.protobuf.Timestamp
}
var file_protos_WebAPI_strategy_2_proto_depIdxs = []int32{
	36, // 0: strategy_2.AlgoStrategyDefinitionReport.algo_strategy_definitions:type_name -> strategy_definition_2.AlgoStrategyDefinition
	37, // 1: strategy_2.StrategyDefinitionRequest.strategy_definition:type_name -> strategy_definition_2.StrategyDefinition
	38, // 2: strategy_2.StrategyDefinitionRequest.exchange_extra_attributes:type_name -> shared_1.NamedValue
	39, // 3: strategy_2.StrategyDefinitionReport.contract_metadata:type_name -> metadata_2.ContractMetadata
	40, // 4: strategy_2.SyntheticHang.hung_qty:type_name -> cqg.Decimal
	16, // 5: strategy_2.SyntheticStrategyProperties.strategy_trading_parameters:type_name -> strategy_2.StrategyTradingParameters
	18, // 6: strategy_2.StrategyTradingParameters.market_order_parameters:type_name -> strategy_2.StrategyMarketOrderParameters
	19, // 7: strategy_2.StrategyTradingParameters.limit_order_parameters:type_name -> strategy_2.StrategyLimitOrderParameters
	20, // 8: strategy_2.StrategyTradingParameters.stop_order_parameters:type_name -> strategy_2.StrategyStopOrderParameters
	21, // 9: strategy_2.StrategyTradingParameters.aggregation_parameters:type_name -> strategy_2.StrategyAggregationParameters
	17, // 10: strategy_2.StrategyTradingParameters.leg_parameters:type_name -> strategy_2.StrategyOrderLegParameters
	23, // 11: strategy_2.StrategyLimitOrderParameters.price_shifting:type_name -> strategy_2.PriceShifting
	24, // 12: strategy_2.StrategyLimitOrderParameters.leg_descriptions:type_name -> strategy_2.LimitOrderLegDescription
	23, // 13: strategy_2.StrategyAggregationParameters.price_shifting:type_name -> strategy_2.PriceShifting
	22, // 14: strategy_2.StrategyAggregationParameters.pattern_legs:type_name -> strategy_2.AggregationLegDescription
	40, // 15: strategy_2.AggregationLegDescription.working_threshold:type_name -> cqg.Decimal
	31, // 16: strategy_2.AggregationLegDescription.market_taking_parameters:type_name -> strategy_2.MarketTakingParameters
	32, // 17: strategy_2.AggregationLegDescription.market_making_parameters:type_name -> strategy_2.MarketMakingParameters
	40, // 18: strategy_2.PriceShifting.filled_qty_delta:type_name -> cqg.Decimal
	25, // 19: strategy_2.LimitOrderLegDescription.primary_order_limit:type_name -> strategy_2.PrimaryOrdersLimit
	26, // 20: strategy_2.LimitOrderLegDescription.primary_order_sniper:type_name -> strategy_2.PrimaryOrdersSniper
	27, // 21: strategy_2.LimitOrderLegDescription.secondary_orders_limit:type_name -> strategy_2.SecondaryOrdersLimit
	28, // 22: strategy_2.LimitOrderLegDescription.secondary_orders_market:type_name -> strategy_2.SecondaryOrdersMarket
	29, // 23: strategy_2.LimitOrderLegDescription.secondary_orders_payup:type_name -> strategy_2.SecondaryOrdersPayUp
	30, // 24: strategy_2.LimitOrderLegDescription.secondary_orders_trailing:type_name -> strategy_2.SecondaryOrdersTrailing
	40, // 25: strategy_2.LimitOrderLegDescription.work_threshold:type_name -> cqg.Decimal
	40, // 26: strategy_2.PrimaryOrdersLimit.min_qty_increment:type_name -> cqg.Decimal
	40, // 27: strategy_2.PrimaryOrdersLimit.visible_qty:type_name -> cqg.Decimal
	40, // 28: strategy_2.PrimaryOrdersLimit.min_visible_qty:type_name -> cqg.Decimal
	40, // 29: strategy_2.SecondaryOrdersPayUp.condition_absolute_volume:type_name -> cqg.Decimal
	40, // 30: strategy_2.SecondaryOrdersTrailing.condition_absolute_volume:type_name -> cqg.Decimal
	40, // 31: strategy_2.MarketMakingParameters.visible_qty:type_name -> cqg.Decimal
	40, // 32: strategy_2.MarketMakingParameters.min_visible_qty:type_name -> cqg.Decimal
	40, // 33: strategy_2.MarketMakingParameters.native_visible_qty:type_name -> cqg.Decimal
	41, // 34: strategy_2.SyntheticLiquidate.when_utc_timestamp:type_name -> google.protobuf.Timestamp
	41, // 35: strategy_2.SyntheticScratch.when_utc_timestamp:type_name -> google.protobuf.Timestamp
	41, // 36: strategy_2.GoMarket.when_utc_timestamp:type_name -> google.protobuf.Timestamp
	37, // [37:37] is the sub-list for method output_type
	37, // [37:37] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_protos_WebAPI_strategy_2_proto_init() }
func file_protos_WebAPI_strategy_2_proto_init() {
	if File_protos_WebAPI_strategy_2_proto != nil {
		return
	}
	file_protos_WebAPI_metadata_2_proto_init()
	file_protos_WebAPI_strategy_definition_2_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_WebAPI_strategy_2_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_WebAPI_strategy_2_proto_goTypes,
		DependencyIndexes: file_protos_WebAPI_strategy_2_proto_depIdxs,
		EnumInfos:         file_protos_WebAPI_strategy_2_proto_enumTypes,
		MessageInfos:      file_protos_WebAPI_strategy_2_proto_msgTypes,
	}.Build()
	File_protos_WebAPI_strategy_2_proto = out.File
	file_protos_WebAPI_strategy_2_proto_rawDesc = nil
	file_protos_WebAPI_strategy_2_proto_goTypes = nil
	file_protos_WebAPI_strategy_2_proto_depIdxs = nil
}
