// Symbol browsing related messages.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: protos/WebAPI/symbol_browsing_2.proto

package WebAPI

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Instrument client type.
// Values of this type are known to be stable in contrast to symbol category ids
// and so they can be hard-coded in client code.
// Only spread-related types are supported so far.
type InstrumentClientType int32

const (
	InstrumentClientType_INSTRUMENT_CLIENT_TYPE_UNKNOWN                        InstrumentClientType = 0
	InstrumentClientType_INSTRUMENT_CLIENT_TYPE_SPREAD_BUNDLE                  InstrumentClientType = 1
	InstrumentClientType_INSTRUMENT_CLIENT_TYPE_SPREAD_CONDOR                  InstrumentClientType = 2
	InstrumentClientType_INSTRUMENT_CLIENT_TYPE_SPREAD_DOUBLE_BUTTERFLY        InstrumentClientType = 3
	InstrumentClientType_INSTRUMENT_CLIENT_TYPE_SPREAD_FUTURES_INTER_COMMODITY InstrumentClientType = 4
	InstrumentClientType_INSTRUMENT_CLIENT_TYPE_SPREAD_BUTTERFLY               InstrumentClientType = 5
	InstrumentClientType_INSTRUMENT_CLIENT_TYPE_SPREAD_PACK                    InstrumentClientType = 6
	InstrumentClientType_INSTRUMENT_CLIENT_TYPE_SPREAD_PACK_BUTTERFLY          InstrumentClientType = 7
	InstrumentClientType_INSTRUMENT_CLIENT_TYPE_SPREAD_REDUCED_TICK_CALENDAR   InstrumentClientType = 8
	InstrumentClientType_INSTRUMENT_CLIENT_TYPE_SPREAD_CALENDAR                InstrumentClientType = 9
	InstrumentClientType_INSTRUMENT_CLIENT_TYPE_SPREAD_STRIP                   InstrumentClientType = 11
	InstrumentClientType_INSTRUMENT_CLIENT_TYPE_SPREAD_REVERSE_CALENDAR        InstrumentClientType = 12
	InstrumentClientType_INSTRUMENT_CLIENT_TYPE_SPREAD_MONTH_VS_PACK           InstrumentClientType = 14
)

// Enum value maps for InstrumentClientType.
var (
	InstrumentClientType_name = map[int32]string{
		0:  "INSTRUMENT_CLIENT_TYPE_UNKNOWN",
		1:  "INSTRUMENT_CLIENT_TYPE_SPREAD_BUNDLE",
		2:  "INSTRUMENT_CLIENT_TYPE_SPREAD_CONDOR",
		3:  "INSTRUMENT_CLIENT_TYPE_SPREAD_DOUBLE_BUTTERFLY",
		4:  "INSTRUMENT_CLIENT_TYPE_SPREAD_FUTURES_INTER_COMMODITY",
		5:  "INSTRUMENT_CLIENT_TYPE_SPREAD_BUTTERFLY",
		6:  "INSTRUMENT_CLIENT_TYPE_SPREAD_PACK",
		7:  "INSTRUMENT_CLIENT_TYPE_SPREAD_PACK_BUTTERFLY",
		8:  "INSTRUMENT_CLIENT_TYPE_SPREAD_REDUCED_TICK_CALENDAR",
		9:  "INSTRUMENT_CLIENT_TYPE_SPREAD_CALENDAR",
		11: "INSTRUMENT_CLIENT_TYPE_SPREAD_STRIP",
		12: "INSTRUMENT_CLIENT_TYPE_SPREAD_REVERSE_CALENDAR",
		14: "INSTRUMENT_CLIENT_TYPE_SPREAD_MONTH_VS_PACK",
	}
	InstrumentClientType_value = map[string]int32{
		"INSTRUMENT_CLIENT_TYPE_UNKNOWN":                        0,
		"INSTRUMENT_CLIENT_TYPE_SPREAD_BUNDLE":                  1,
		"INSTRUMENT_CLIENT_TYPE_SPREAD_CONDOR":                  2,
		"INSTRUMENT_CLIENT_TYPE_SPREAD_DOUBLE_BUTTERFLY":        3,
		"INSTRUMENT_CLIENT_TYPE_SPREAD_FUTURES_INTER_COMMODITY": 4,
		"INSTRUMENT_CLIENT_TYPE_SPREAD_BUTTERFLY":               5,
		"INSTRUMENT_CLIENT_TYPE_SPREAD_PACK":                    6,
		"INSTRUMENT_CLIENT_TYPE_SPREAD_PACK_BUTTERFLY":          7,
		"INSTRUMENT_CLIENT_TYPE_SPREAD_REDUCED_TICK_CALENDAR":   8,
		"INSTRUMENT_CLIENT_TYPE_SPREAD_CALENDAR":                9,
		"INSTRUMENT_CLIENT_TYPE_SPREAD_STRIP":                   11,
		"INSTRUMENT_CLIENT_TYPE_SPREAD_REVERSE_CALENDAR":        12,
		"INSTRUMENT_CLIENT_TYPE_SPREAD_MONTH_VS_PACK":           14,
	}
)

func (x InstrumentClientType) Enum() *InstrumentClientType {
	p := new(InstrumentClientType)
	*p = x
	return p
}

func (x InstrumentClientType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstrumentClientType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_symbol_browsing_2_proto_enumTypes[0].Descriptor()
}

func (InstrumentClientType) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_symbol_browsing_2_proto_enumTypes[0]
}

func (x InstrumentClientType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *InstrumentClientType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = InstrumentClientType(num)
	return nil
}

// Deprecated: Use InstrumentClientType.Descriptor instead.
func (InstrumentClientType) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_symbol_browsing_2_proto_rawDescGZIP(), []int{0}
}

// Symbol structure.
// It can represent either a product (root symbol), a security,
// an option maturity or a contract (leaf symbol).
// Only one of corresponding *_metadata fields can be specified.
// Each symbol except product ones has a link to its parent
// (see Symbol.parent_symbol_id field):
// parent symbol for a security symbol is a product symbol,
// parent symbol for a contract symbol (non-option) is a security symbol,
// parent symbol of an option strike contract symbol is an option maturity symbol,
// parent symbol for an option maturity symbol is a security symbol.
type Symbol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Symbol Identifier.
	Id *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	// Symbol readable name.
	Name *string `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	// Symbol description.
	Description *string `protobuf:"bytes,3,req,name=description" json:"description,omitempty"`
	// CFI code (Classification of Financial Instruments, ISO 10962) if appropriate.
	// Deprecated and should not be used. Use nested metadata messages.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/symbol_browsing_2.proto.
	CfiCode *string `protobuf:"bytes,4,opt,name=cfi_code,json=cfiCode" json:"cfi_code,omitempty"`
	// True if this symbol has child symbols (false for leafs of the symbol tree).
	HasChildSymbols *bool `protobuf:"varint,5,opt,name=has_child_symbols,json=hasChildSymbols" json:"has_child_symbols,omitempty"`
	// Deleted flag is used in updates when the symbol is either removed (e.g. expired) or
	// no longer meets request filtering criterias (e.g. SymbolListRequest.category_id filter).
	// Note: list of categories in category_id field (see below) may be cleared when symbol is removed.
	Deleted *bool `protobuf:"varint,7,opt,name=deleted" json:"deleted,omitempty"`
	// Last trading date for derivatives if applicable.
	// (local exchange date in time format, use date part only).
	// Deprecated and should not be used. Use nested metadata messages.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/symbol_browsing_2.proto.
	LastTradingDate *int64 `protobuf:"zigzag64,8,opt,name=last_trading_date,json=lastTradingDate" json:"last_trading_date,omitempty"`
	// Month letter and 2-digit year identifying the maturity month of the symbol.
	// Note: look at comment for maturity_month_year from ContractMetadata for further info.
	// Deprecated and should not be used. Use nested metadata messages.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/symbol_browsing_2.proto.
	MaturityMonthYear *string `protobuf:"bytes,9,opt,name=maturity_month_year,json=maturityMonthYear" json:"maturity_month_year,omitempty"`
	// Name of a group of symbols that share the same properties (e.g. commodity name for futures and options).
	// Deprecated and should not be used. Use nested metadata messages.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/symbol_browsing_2.proto.
	InstrumentGroupName *string `protobuf:"bytes,10,opt,name=instrument_group_name,json=instrumentGroupName" json:"instrument_group_name,omitempty"`
	// ID (Symbol.id) of the parent symbol (if this is not the root symbol - product).
	// If this field is empty, product_metadata field is set.
	ParentSymbolId *string `protobuf:"bytes,11,opt,name=parent_symbol_id,json=parentSymbolId" json:"parent_symbol_id,omitempty"`
	// List of categories (SymbolCategory.id) of this symbol, if any.
	// See SymbolCategory and SymbolCategoryRequest messages.
	CategoryIds []string `protobuf:"bytes,12,rep,name=category_ids,json=categoryIds" json:"category_ids,omitempty"`
	// Deprecated and should not be used. Use metadata_2.SecurityMetadata.source_instrument_group_name or
	// ContractMetadata.source_contract_id instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/symbol_browsing_2.proto.
	SourceSymbolId *string `protobuf:"bytes,13,opt,name=source_symbol_id,json=sourceSymbolId" json:"source_symbol_id,omitempty"`
	// Rank value of the symbol for sorting peer symbols in user interfaces. Higher value means greater priority.
	Rank *uint32 `protobuf:"varint,17,opt,name=rank" json:"rank,omitempty"`
	// Meta-data of a product if this symbol describes one (aka Symbol Root Key).
	// If this field is set, this symbol doesn't have a parent symbol.
	ProductMetadata *ProductMetadata `protobuf:"bytes,14,opt,name=product_metadata,json=productMetadata" json:"product_metadata,omitempty"`
	// Meta-data of a security if this symbol describes one (aka Symbol Prefix Key).
	SecurityMetadata *SecurityMetadata `protobuf:"bytes,15,opt,name=security_metadata,json=securityMetadata" json:"security_metadata,omitempty"`
	// Meta-data of options maturity group if this symbol describes one (aka Option Lead Key).
	OptionMaturityMetadata *OptionMaturityMetadata `protobuf:"bytes,16,opt,name=option_maturity_metadata,json=optionMaturityMetadata" json:"option_maturity_metadata,omitempty"`
	// Contract meta-data if a symbol is a specific contract (leaf of the symbol tree).
	ContractMetadata *ContractMetadata `protobuf:"bytes,6,opt,name=contract_metadata,json=contractMetadata" json:"contract_metadata,omitempty"`
}

func (x *Symbol) Reset() {
	*x = Symbol{}
	mi := &file_protos_WebAPI_symbol_browsing_2_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Symbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Symbol) ProtoMessage() {}

func (x *Symbol) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_symbol_browsing_2_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Symbol.ProtoReflect.Descriptor instead.
func (*Symbol) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_symbol_browsing_2_proto_rawDescGZIP(), []int{0}
}

func (x *Symbol) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Symbol) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Symbol) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

// Deprecated: Marked as deprecated in protos/WebAPI/symbol_browsing_2.proto.
func (x *Symbol) GetCfiCode() string {
	if x != nil && x.CfiCode != nil {
		return *x.CfiCode
	}
	return ""
}

func (x *Symbol) GetHasChildSymbols() bool {
	if x != nil && x.HasChildSymbols != nil {
		return *x.HasChildSymbols
	}
	return false
}

func (x *Symbol) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

// Deprecated: Marked as deprecated in protos/WebAPI/symbol_browsing_2.proto.
func (x *Symbol) GetLastTradingDate() int64 {
	if x != nil && x.LastTradingDate != nil {
		return *x.LastTradingDate
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/symbol_browsing_2.proto.
func (x *Symbol) GetMaturityMonthYear() string {
	if x != nil && x.MaturityMonthYear != nil {
		return *x.MaturityMonthYear
	}
	return ""
}

// Deprecated: Marked as deprecated in protos/WebAPI/symbol_browsing_2.proto.
func (x *Symbol) GetInstrumentGroupName() string {
	if x != nil && x.InstrumentGroupName != nil {
		return *x.InstrumentGroupName
	}
	return ""
}

func (x *Symbol) GetParentSymbolId() string {
	if x != nil && x.ParentSymbolId != nil {
		return *x.ParentSymbolId
	}
	return ""
}

func (x *Symbol) GetCategoryIds() []string {
	if x != nil {
		return x.CategoryIds
	}
	return nil
}

// Deprecated: Marked as deprecated in protos/WebAPI/symbol_browsing_2.proto.
func (x *Symbol) GetSourceSymbolId() string {
	if x != nil && x.SourceSymbolId != nil {
		return *x.SourceSymbolId
	}
	return ""
}

func (x *Symbol) GetRank() uint32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *Symbol) GetProductMetadata() *ProductMetadata {
	if x != nil {
		return x.ProductMetadata
	}
	return nil
}

func (x *Symbol) GetSecurityMetadata() *SecurityMetadata {
	if x != nil {
		return x.SecurityMetadata
	}
	return nil
}

func (x *Symbol) GetOptionMaturityMetadata() *OptionMaturityMetadata {
	if x != nil {
		return x.OptionMaturityMetadata
	}
	return nil
}

func (x *Symbol) GetContractMetadata() *ContractMetadata {
	if x != nil {
		return x.ContractMetadata
	}
	return nil
}

// Symbol category.
type SymbolCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Category identifier.
	// Note: this identifier is not guaranteed to be stable, so categories should be
	// obtained e.g. via SymbolCategoryListRequest or SymbolCategoryListByInstrumentTypeRequest
	// instead of being saved using this id between sessions.
	Id *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	// Category name.
	Name *string `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	// Category description.
	Description *string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// Category parent identifier (SymbolCategory.id). Omitted for root categories.
	ParentId *string `protobuf:"bytes,4,opt,name=parent_id,json=parentId" json:"parent_id,omitempty"`
	// Indicates whether this category can be used as a filter for getting a list of symbols.
	CanFilter *bool `protobuf:"varint,5,req,name=can_filter,json=canFilter" json:"can_filter,omitempty"`
	// If the category is an exchange then this field defines exchange id.
	// See ExchangeMetadata.exchange_id.
	ExchangeId *int32 `protobuf:"zigzag32,6,opt,name=exchange_id,json=exchangeId" json:"exchange_id,omitempty"`
	// If the category is a OTC contributor then this field defines contributor ID.
	ContributorId *string `protobuf:"bytes,7,opt,name=contributor_id,json=contributorId" json:"contributor_id,omitempty"`
	// If the category is an Asset Class then this field defines instrument business type id.
	// To get a list of all instrument business type id values, send a SymbolCategoryListRequest
	// with category_id corresponding to Asset Class, then for each id from SymbolCategoryListReport's
	// symbol_categories field, send SymbolCategoryListRequest with this id as the value of category_id
	// or send SymbolCategoryListRequest with a big enough depth parameter value (see SymbolCategoryListRequest.depth)
	// in order to get all symbol categories.
	InstrumentBusinessTypeId *uint32 `protobuf:"varint,9,opt,name=instrument_business_type_id,json=instrumentBusinessTypeId" json:"instrument_business_type_id,omitempty"`
	// Deleted flag is used in updates when the category is removed.
	Deleted *bool `protobuf:"varint,8,opt,name=deleted" json:"deleted,omitempty"`
}

func (x *SymbolCategory) Reset() {
	*x = SymbolCategory{}
	mi := &file_protos_WebAPI_symbol_browsing_2_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SymbolCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolCategory) ProtoMessage() {}

func (x *SymbolCategory) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_symbol_browsing_2_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolCategory.ProtoReflect.Descriptor instead.
func (*SymbolCategory) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_symbol_browsing_2_proto_rawDescGZIP(), []int{1}
}

func (x *SymbolCategory) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *SymbolCategory) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SymbolCategory) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *SymbolCategory) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *SymbolCategory) GetCanFilter() bool {
	if x != nil && x.CanFilter != nil {
		return *x.CanFilter
	}
	return false
}

func (x *SymbolCategory) GetExchangeId() int32 {
	if x != nil && x.ExchangeId != nil {
		return *x.ExchangeId
	}
	return 0
}

func (x *SymbolCategory) GetContributorId() string {
	if x != nil && x.ContributorId != nil {
		return *x.ContributorId
	}
	return ""
}

func (x *SymbolCategory) GetInstrumentBusinessTypeId() uint32 {
	if x != nil && x.InstrumentBusinessTypeId != nil {
		return *x.InstrumentBusinessTypeId
	}
	return 0
}

func (x *SymbolCategory) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

// Request for a symbol category [sub-]tree for a particular root. each category can have a list of sub-categories.
// A list of roots can be requested using an empty list of category IDs.
type SymbolCategoryListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Category Identifier (SymbolCategory.id) to request corresponding sub-tree.
	// Do not specify category ID to get categories from roots.
	CategoryId *string `protobuf:"bytes,1,opt,name=category_id,json=categoryId" json:"category_id,omitempty"`
	// Optional depth. One level is returned if not specified.
	Depth *uint32 `protobuf:"varint,2,opt,name=depth" json:"depth,omitempty"`
}

func (x *SymbolCategoryListRequest) Reset() {
	*x = SymbolCategoryListRequest{}
	mi := &file_protos_WebAPI_symbol_browsing_2_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SymbolCategoryListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolCategoryListRequest) ProtoMessage() {}

func (x *SymbolCategoryListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_symbol_browsing_2_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolCategoryListRequest.ProtoReflect.Descriptor instead.
func (*SymbolCategoryListRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_symbol_browsing_2_proto_rawDescGZIP(), []int{2}
}

func (x *SymbolCategoryListRequest) GetCategoryId() string {
	if x != nil && x.CategoryId != nil {
		return *x.CategoryId
	}
	return ""
}

func (x *SymbolCategoryListRequest) GetDepth() uint32 {
	if x != nil && x.Depth != nil {
		return *x.Depth
	}
	return 0
}

// Report with a symbol category tree for a particular root.
type SymbolCategoryListReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of categories linked to their parents.
	SymbolCategories []*SymbolCategory `protobuf:"bytes,1,rep,name=symbol_categories,json=symbolCategories" json:"symbol_categories,omitempty"`
}

func (x *SymbolCategoryListReport) Reset() {
	*x = SymbolCategoryListReport{}
	mi := &file_protos_WebAPI_symbol_browsing_2_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SymbolCategoryListReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolCategoryListReport) ProtoMessage() {}

func (x *SymbolCategoryListReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_symbol_browsing_2_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolCategoryListReport.ProtoReflect.Descriptor instead.
func (*SymbolCategoryListReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_symbol_browsing_2_proto_rawDescGZIP(), []int{3}
}

func (x *SymbolCategoryListReport) GetSymbolCategories() []*SymbolCategory {
	if x != nil {
		return x.SymbolCategories
	}
	return nil
}

// Request for a specific category by ID.
type SymbolCategoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Category Identifier (SymbolCategory.id) to request corresponding category.
	CategoryId *string `protobuf:"bytes,1,opt,name=category_id,json=categoryId" json:"category_id,omitempty"`
}

func (x *SymbolCategoryRequest) Reset() {
	*x = SymbolCategoryRequest{}
	mi := &file_protos_WebAPI_symbol_browsing_2_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SymbolCategoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolCategoryRequest) ProtoMessage() {}

func (x *SymbolCategoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_symbol_browsing_2_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolCategoryRequest.ProtoReflect.Descriptor instead.
func (*SymbolCategoryRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_symbol_browsing_2_proto_rawDescGZIP(), []int{4}
}

func (x *SymbolCategoryRequest) GetCategoryId() string {
	if x != nil && x.CategoryId != nil {
		return *x.CategoryId
	}
	return ""
}

// Report with a category.
type SymbolCategoryReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolCategory *SymbolCategory `protobuf:"bytes,1,opt,name=symbol_category,json=symbolCategory" json:"symbol_category,omitempty"`
}

func (x *SymbolCategoryReport) Reset() {
	*x = SymbolCategoryReport{}
	mi := &file_protos_WebAPI_symbol_browsing_2_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SymbolCategoryReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolCategoryReport) ProtoMessage() {}

func (x *SymbolCategoryReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_symbol_browsing_2_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolCategoryReport.ProtoReflect.Descriptor instead.
func (*SymbolCategoryReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_symbol_browsing_2_proto_rawDescGZIP(), []int{5}
}

func (x *SymbolCategoryReport) GetSymbolCategory() *SymbolCategory {
	if x != nil {
		return x.SymbolCategory
	}
	return nil
}

// Request for a list of category symbols matching input instrument client type.
type SymbolCategoryListByInstrumentTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Instrument client type.
	// This field is associated with InstrumentClientType.Type enum.
	// INSTRUMENT_CLIENT_TYPE_UNKNOWN is used if this field is empty.
	InstrumentClientType *uint32 `protobuf:"varint,1,opt,name=instrument_client_type,json=instrumentClientType" json:"instrument_client_type,omitempty"`
}

func (x *SymbolCategoryListByInstrumentTypeRequest) Reset() {
	*x = SymbolCategoryListByInstrumentTypeRequest{}
	mi := &file_protos_WebAPI_symbol_browsing_2_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SymbolCategoryListByInstrumentTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolCategoryListByInstrumentTypeRequest) ProtoMessage() {}

func (x *SymbolCategoryListByInstrumentTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_symbol_browsing_2_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolCategoryListByInstrumentTypeRequest.ProtoReflect.Descriptor instead.
func (*SymbolCategoryListByInstrumentTypeRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_symbol_browsing_2_proto_rawDescGZIP(), []int{6}
}

func (x *SymbolCategoryListByInstrumentTypeRequest) GetInstrumentClientType() uint32 {
	if x != nil && x.InstrumentClientType != nil {
		return *x.InstrumentClientType
	}
	return 0
}

// Report with a list of category symbols matching input instrument client type.
type SymbolCategoryListByInstrumentTypeReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolCategories []*SymbolCategory `protobuf:"bytes,1,rep,name=symbol_categories,json=symbolCategories" json:"symbol_categories,omitempty"`
}

func (x *SymbolCategoryListByInstrumentTypeReport) Reset() {
	*x = SymbolCategoryListByInstrumentTypeReport{}
	mi := &file_protos_WebAPI_symbol_browsing_2_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SymbolCategoryListByInstrumentTypeReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolCategoryListByInstrumentTypeReport) ProtoMessage() {}

func (x *SymbolCategoryListByInstrumentTypeReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_symbol_browsing_2_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolCategoryListByInstrumentTypeReport.ProtoReflect.Descriptor instead.
func (*SymbolCategoryListByInstrumentTypeReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_symbol_browsing_2_proto_rawDescGZIP(), []int{7}
}

func (x *SymbolCategoryListByInstrumentTypeReport) GetSymbolCategories() []*SymbolCategory {
	if x != nil {
		return x.SymbolCategories
	}
	return nil
}

// Request for a list of symbols according to a filter.
// At least one filter field has to be specified.
// Number of symbols in response is limited (default is 10000).
// Note: Symbols related to option strikes are not returned unless symbol id of
// corresponding option maturity symbol is specified as a parent_symbol_id in the request.
type SymbolListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional category filter (SymbolCategory.id) controlling how multiple
	// symbol categories are applied in the filter.
	// Categories within the same tree (having the same root) are applied by "OR" in the category filter
	// (e.g. two exchanges, either matches). Otherwise categories are applied by "AND" (e.g. exchange and asset).
	// See SymbolCategory and SymbolCategoryListRequest messages.
	CategoryIds []string `protobuf:"bytes,1,rep,name=category_ids,json=categoryIds" json:"category_ids,omitempty"`
	// Number of levels in the symbol tree to return from the top of the symbol tree
	// (i.e. from product level) or from the parent symbol (if specified).
	// Symbols from deeper levels are excluded from the results.
	// One level is returned if the field is omitted.
	Depth *uint32 `protobuf:"varint,2,opt,name=depth" json:"depth,omitempty"`
	// Parent symbol id (Symbol.id) filter to return only child symbols of this parent.
	// If this field is specified, depth must be one or omitted.
	ParentSymbolId *string `protobuf:"bytes,3,opt,name=parent_symbol_id,json=parentSymbolId" json:"parent_symbol_id,omitempty"`
}

func (x *SymbolListRequest) Reset() {
	*x = SymbolListRequest{}
	mi := &file_protos_WebAPI_symbol_browsing_2_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SymbolListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolListRequest) ProtoMessage() {}

func (x *SymbolListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_symbol_browsing_2_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolListRequest.ProtoReflect.Descriptor instead.
func (*SymbolListRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_symbol_browsing_2_proto_rawDescGZIP(), []int{8}
}

func (x *SymbolListRequest) GetCategoryIds() []string {
	if x != nil {
		return x.CategoryIds
	}
	return nil
}

func (x *SymbolListRequest) GetDepth() uint32 {
	if x != nil && x.Depth != nil {
		return *x.Depth
	}
	return 0
}

func (x *SymbolListRequest) GetParentSymbolId() string {
	if x != nil && x.ParentSymbolId != nil {
		return *x.ParentSymbolId
	}
	return ""
}

// Report with a list of found symbols.
type SymbolListReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of symbols.
	Symbols []*Symbol `protobuf:"bytes,1,rep,name=symbols" json:"symbols,omitempty"`
}

func (x *SymbolListReport) Reset() {
	*x = SymbolListReport{}
	mi := &file_protos_WebAPI_symbol_browsing_2_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SymbolListReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolListReport) ProtoMessage() {}

func (x *SymbolListReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_symbol_browsing_2_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolListReport.ProtoReflect.Descriptor instead.
func (*SymbolListReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_symbol_browsing_2_proto_rawDescGZIP(), []int{9}
}

func (x *SymbolListReport) GetSymbols() []*Symbol {
	if x != nil {
		return x.Symbols
	}
	return nil
}

// Request for a specific symbol by ID.
type SymbolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID (Symbol.id) of a symbol to request.
	SymbolId *string `protobuf:"bytes,1,req,name=symbol_id,json=symbolId" json:"symbol_id,omitempty"`
	// True if deleted symbols should also be reported.
	// Note that symbol marked as deleted will be available for 30 days (by default) from its last trading date.
	IncludeDeleted *bool `protobuf:"varint,2,opt,name=include_deleted,json=includeDeleted" json:"include_deleted,omitempty"`
}

func (x *SymbolRequest) Reset() {
	*x = SymbolRequest{}
	mi := &file_protos_WebAPI_symbol_browsing_2_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SymbolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolRequest) ProtoMessage() {}

func (x *SymbolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_symbol_browsing_2_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolRequest.ProtoReflect.Descriptor instead.
func (*SymbolRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_symbol_browsing_2_proto_rawDescGZIP(), []int{10}
}

func (x *SymbolRequest) GetSymbolId() string {
	if x != nil && x.SymbolId != nil {
		return *x.SymbolId
	}
	return ""
}

func (x *SymbolRequest) GetIncludeDeleted() bool {
	if x != nil && x.IncludeDeleted != nil {
		return *x.IncludeDeleted
	}
	return false
}

// Report with a symbol.
type SymbolReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol *Symbol `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
}

func (x *SymbolReport) Reset() {
	*x = SymbolReport{}
	mi := &file_protos_WebAPI_symbol_browsing_2_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SymbolReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolReport) ProtoMessage() {}

func (x *SymbolReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_symbol_browsing_2_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolReport.ProtoReflect.Descriptor instead.
func (*SymbolReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_symbol_browsing_2_proto_rawDescGZIP(), []int{11}
}

func (x *SymbolReport) GetSymbol() *Symbol {
	if x != nil {
		return x.Symbol
	}
	return nil
}

type ProductMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId *string `protobuf:"bytes,1,opt,name=product_id,json=productId" json:"product_id,omitempty"`
}

func (x *ProductMetadata) Reset() {
	*x = ProductMetadata{}
	mi := &file_protos_WebAPI_symbol_browsing_2_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductMetadata) ProtoMessage() {}

func (x *ProductMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_symbol_browsing_2_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductMetadata.ProtoReflect.Descriptor instead.
func (*ProductMetadata) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_symbol_browsing_2_proto_rawDescGZIP(), []int{12}
}

func (x *ProductMetadata) GetProductId() string {
	if x != nil && x.ProductId != nil {
		return *x.ProductId
	}
	return ""
}

// Request for a list of product symbols matching a search criteria (see Symbol.product_metadata).
type ProductSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Term to search matched product symbols on.
	// Search term needs to be filled and its length must be greater than 3 (by default) if category_id filter is empty.
	// Searching is done on the text associated to the being searched product symbols.
	// Matching is supported only by "starts with" pattern.
	// Multi-word input (whitespace delimited) is applied by "or".
	// I.e. it matches a symbol if any word from the search term matches.
	SearchTerm *string `protobuf:"bytes,1,opt,name=search_term,json=searchTerm" json:"search_term,omitempty"`
	// Optional category (SymbolCategory.id) filter controlling how multiple
	// symbol categories are applied in the filter.
	// Categories within the same tree (having the same root) are applied by "OR" in the category filter
	// (e.g. two exchanges, either matches). Otherwise categories are applied by "AND" (e.g. exchange and asset).
	// See SymbolCategory and SymbolCategoryListRequest messages.
	CategoryIds []string `protobuf:"bytes,2,rep,name=category_ids,json=categoryIds" json:"category_ids,omitempty"`
}

func (x *ProductSearchRequest) Reset() {
	*x = ProductSearchRequest{}
	mi := &file_protos_WebAPI_symbol_browsing_2_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductSearchRequest) ProtoMessage() {}

func (x *ProductSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_symbol_browsing_2_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductSearchRequest.ProtoReflect.Descriptor instead.
func (*ProductSearchRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_symbol_browsing_2_proto_rawDescGZIP(), []int{13}
}

func (x *ProductSearchRequest) GetSearchTerm() string {
	if x != nil && x.SearchTerm != nil {
		return *x.SearchTerm
	}
	return ""
}

func (x *ProductSearchRequest) GetCategoryIds() []string {
	if x != nil {
		return x.CategoryIds
	}
	return nil
}

// Report with a list of found product symbols.
type ProductSearchReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of product symbols.
	Symbols []*Symbol `protobuf:"bytes,1,rep,name=symbols" json:"symbols,omitempty"`
}

func (x *ProductSearchReport) Reset() {
	*x = ProductSearchReport{}
	mi := &file_protos_WebAPI_symbol_browsing_2_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductSearchReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductSearchReport) ProtoMessage() {}

func (x *ProductSearchReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_symbol_browsing_2_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductSearchReport.ProtoReflect.Descriptor instead.
func (*ProductSearchReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_symbol_browsing_2_proto_rawDescGZIP(), []int{14}
}

func (x *ProductSearchReport) GetSymbols() []*Symbol {
	if x != nil {
		return x.Symbols
	}
	return nil
}

var File_protos_WebAPI_symbol_browsing_2_proto protoreflect.FileDescriptor

var file_protos_WebAPI_symbol_browsing_2_proto_rawDesc = []byte{
	0x0a, 0x25, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49, 0x2f,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x69, 0x6e, 0x67, 0x5f,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f,
	0x62, 0x72, 0x6f, 0x77, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x32, 0x1a, 0x1e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa1, 0x06, 0x0a, 0x06, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x08, 0x63,
	0x66, 0x69, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x07, 0x63, 0x66, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x61,
	0x73, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x61, 0x73, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x12, 0x2e, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x12, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x0f, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x32, 0x0a, 0x13, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x11, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x59, 0x65, 0x61, 0x72, 0x12, 0x36, 0x0a, 0x15, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x13, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x10, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x4d, 0x0a, 0x10, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x62,
	0x72, 0x6f, 0x77, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x49, 0x0a, 0x11, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x32, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x10, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x5c, 0x0a, 0x18, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x32, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x16, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x49, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x10, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb3,
	0x02, 0x0a, 0x0e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x02, 0x28, 0x08, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x18, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x22, 0x52, 0x0a, 0x19, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x22, 0x6a, 0x0a, 0x18, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x4e, 0x0a, 0x11, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x69, 0x6e,
	0x67, 0x5f, 0x32, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x52, 0x10, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x22, 0x38, 0x0a, 0x15, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0x62,
	0x0a, 0x14, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x4a, 0x0a, 0x0f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x69, 0x6e,
	0x67, 0x5f, 0x32, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x52, 0x0e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x22, 0x61, 0x0a, 0x29, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x34, 0x0a, 0x16, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x7a, 0x0a, 0x28, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x4e, 0x0a, 0x11, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x32,
	0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52,
	0x10, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x22, 0x76, 0x0a, 0x11, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12,
	0x28, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x10, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x33, 0x0a,
	0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x69, 0x6e, 0x67,
	0x5f, 0x32, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x73, 0x22, 0x55, 0x0a, 0x0d, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x41, 0x0a, 0x0c, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x5f, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x32, 0x2e, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x30, 0x0a, 0x0f,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x22, 0x60,
	0x0a, 0x14, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x73, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04,
	0x22, 0x4a, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x5f, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x32, 0x2e, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x52, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x2a, 0xf7, 0x04, 0x0a,
	0x14, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x49, 0x4e, 0x53,
	0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x42, 0x55, 0x4e, 0x44, 0x4c,
	0x45, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x50,
	0x52, 0x45, 0x41, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x32, 0x0a,
	0x2e, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x49, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x44,
	0x4f, 0x55, 0x42, 0x4c, 0x45, 0x5f, 0x42, 0x55, 0x54, 0x54, 0x45, 0x52, 0x46, 0x4c, 0x59, 0x10,
	0x03, 0x12, 0x39, 0x0a, 0x35, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x52, 0x45,
	0x41, 0x44, 0x5f, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x44, 0x49, 0x54, 0x59, 0x10, 0x04, 0x12, 0x2b, 0x0a, 0x27,
	0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x42, 0x55,
	0x54, 0x54, 0x45, 0x52, 0x46, 0x4c, 0x59, 0x10, 0x05, 0x12, 0x26, 0x0a, 0x22, 0x49, 0x4e, 0x53,
	0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x10,
	0x06, 0x12, 0x30, 0x0a, 0x2c, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x52, 0x45,
	0x41, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x5f, 0x42, 0x55, 0x54, 0x54, 0x45, 0x52, 0x46, 0x4c,
	0x59, 0x10, 0x07, 0x12, 0x37, 0x0a, 0x33, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x50,
	0x52, 0x45, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x44, 0x55, 0x43, 0x45, 0x44, 0x5f, 0x54, 0x49, 0x43,
	0x4b, 0x5f, 0x43, 0x41, 0x4c, 0x45, 0x4e, 0x44, 0x41, 0x52, 0x10, 0x08, 0x12, 0x2a, 0x0a, 0x26,
	0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x43, 0x41,
	0x4c, 0x45, 0x4e, 0x44, 0x41, 0x52, 0x10, 0x09, 0x12, 0x27, 0x0a, 0x23, 0x49, 0x4e, 0x53, 0x54,
	0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x50, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x50, 0x10,
	0x0b, 0x12, 0x32, 0x0a, 0x2e, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x52, 0x45,
	0x41, 0x44, 0x5f, 0x52, 0x45, 0x56, 0x45, 0x52, 0x53, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x45, 0x4e,
	0x44, 0x41, 0x52, 0x10, 0x0c, 0x12, 0x2f, 0x0a, 0x2b, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x50, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x5f, 0x56, 0x53, 0x5f,
	0x50, 0x41, 0x43, 0x4b, 0x10, 0x0e, 0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49,
}

var (
	file_protos_WebAPI_symbol_browsing_2_proto_rawDescOnce sync.Once
	file_protos_WebAPI_symbol_browsing_2_proto_rawDescData = file_protos_WebAPI_symbol_browsing_2_proto_rawDesc
)

func file_protos_WebAPI_symbol_browsing_2_proto_rawDescGZIP() []byte {
	file_protos_WebAPI_symbol_browsing_2_proto_rawDescOnce.Do(func() {
		file_protos_WebAPI_symbol_browsing_2_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_WebAPI_symbol_browsing_2_proto_rawDescData)
	})
	return file_protos_WebAPI_symbol_browsing_2_proto_rawDescData
}

var file_protos_WebAPI_symbol_browsing_2_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_protos_WebAPI_symbol_browsing_2_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_protos_WebAPI_symbol_browsing_2_proto_goTypes = []any{
	(InstrumentClientType)(0),                         // 0: symbol_browsing_2.InstrumentClientType
	(*Symbol)(nil),                                    // 1: symbol_browsing_2.Symbol
	(*SymbolCategory)(nil),                            // 2: symbol_browsing_2.SymbolCategory
	(*SymbolCategoryListRequest)(nil),                 // 3: symbol_browsing_2.SymbolCategoryListRequest
	(*SymbolCategoryListReport)(nil),                  // 4: symbol_browsing_2.SymbolCategoryListReport
	(*SymbolCategoryRequest)(nil),                     // 5: symbol_browsing_2.SymbolCategoryRequest
	(*SymbolCategoryReport)(nil),                      // 6: symbol_browsing_2.SymbolCategoryReport
	(*SymbolCategoryListByInstrumentTypeRequest)(nil), // 7: symbol_browsing_2.SymbolCategoryListByInstrumentTypeRequest
	(*SymbolCategoryListByInstrumentTypeReport)(nil),  // 8: symbol_browsing_2.SymbolCategoryListByInstrumentTypeReport
	(*SymbolListRequest)(nil),                         // 9: symbol_browsing_2.SymbolListRequest
	(*SymbolListReport)(nil),                          // 10: symbol_browsing_2.SymbolListReport
	(*SymbolRequest)(nil),                             // 11: symbol_browsing_2.SymbolRequest
	(*SymbolReport)(nil),                              // 12: symbol_browsing_2.SymbolReport
	(*ProductMetadata)(nil),                           // 13: symbol_browsing_2.ProductMetadata
	(*ProductSearchRequest)(nil),                      // 14: symbol_browsing_2.ProductSearchRequest
	(*ProductSearchReport)(nil),                       // 15: symbol_browsing_2.ProductSearchReport
	(*SecurityMetadata)(nil),                          // 16: metadata_2.SecurityMetadata
	(*OptionMaturityMetadata)(nil),                    // 17: metadata_2.OptionMaturityMetadata
	(*ContractMetadata)(nil),                          // 18: metadata_2.ContractMetadata
}
var file_protos_WebAPI_symbol_browsing_2_proto_depIdxs = []int32{
	13, // 0: symbol_browsing_2.Symbol.product_metadata:type_name -> symbol_browsing_2.ProductMetadata
	16, // 1: symbol_browsing_2.Symbol.security_metadata:type_name -> metadata_2.SecurityMetadata
	17, // 2: symbol_browsing_2.Symbol.option_maturity_metadata:type_name -> metadata_2.OptionMaturityMetadata
	18, // 3: symbol_browsing_2.Symbol.contract_metadata:type_name -> metadata_2.ContractMetadata
	2,  // 4: symbol_browsing_2.SymbolCategoryListReport.symbol_categories:type_name -> symbol_browsing_2.SymbolCategory
	2,  // 5: symbol_browsing_2.SymbolCategoryReport.symbol_category:type_name -> symbol_browsing_2.SymbolCategory
	2,  // 6: symbol_browsing_2.SymbolCategoryListByInstrumentTypeReport.symbol_categories:type_name -> symbol_browsing_2.SymbolCategory
	1,  // 7: symbol_browsing_2.SymbolListReport.symbols:type_name -> symbol_browsing_2.Symbol
	1,  // 8: symbol_browsing_2.SymbolReport.symbol:type_name -> symbol_browsing_2.Symbol
	1,  // 9: symbol_browsing_2.ProductSearchReport.symbols:type_name -> symbol_browsing_2.Symbol
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_protos_WebAPI_symbol_browsing_2_proto_init() }
func file_protos_WebAPI_symbol_browsing_2_proto_init() {
	if File_protos_WebAPI_symbol_browsing_2_proto != nil {
		return
	}
	file_protos_WebAPI_metadata_2_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_WebAPI_symbol_browsing_2_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_WebAPI_symbol_browsing_2_proto_goTypes,
		DependencyIndexes: file_protos_WebAPI_symbol_browsing_2_proto_depIdxs,
		EnumInfos:         file_protos_WebAPI_symbol_browsing_2_proto_enumTypes,
		MessageInfos:      file_protos_WebAPI_symbol_browsing_2_proto_msgTypes,
	}.Build()
	File_protos_WebAPI_symbol_browsing_2_proto = out.File
	file_protos_WebAPI_symbol_browsing_2_proto_rawDesc = nil
	file_protos_WebAPI_symbol_browsing_2_proto_goTypes = nil
	file_protos_WebAPI_symbol_browsing_2_proto_depIdxs = nil
}
