// Market Data messaging

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: protos/WebAPI/market_data_2.proto

package WebAPI

import (
	common "cqg-api/protos/WebAPI/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Level or subscription.
type MarketDataSubscription_Level int32

const (
	// Unsubscribe.
	MarketDataSubscription_LEVEL_NONE MarketDataSubscription_Level = 0
	// Get only settlement quotes.
	// NOTE: MarketValues will contain only settlements.
	MarketDataSubscription_LEVEL_SETTLEMENTS MarketDataSubscription_Level = 5
	// Get only market values.
	// Supported only for contracts with filled field ContractMetadata::end_of_day_delay.
	// NOTE: Array of quotes, requests for quotation, corrections, detailed DOM,
	// market state in RealTimeMarketData message will be always empty.
	// NOTE: If current trading day is not yet available (see commentary to field 'end_of_day_delay' in message
	// ContractMetadata), then MarketValues for today are provided the same way as if trading day was just started:
	// only required fields and yesterday prices are filled.
	MarketDataSubscription_LEVEL_END_OF_DAY MarketDataSubscription_Level = 6
	// Get trade and settlement with volumes (if volumes are known).
	MarketDataSubscription_LEVEL_TRADES MarketDataSubscription_Level = 1
	// Get trades and settlements with volumes (if volumes are known), best asks and best bids without volumes.
	MarketDataSubscription_LEVEL_TRADES_BBA MarketDataSubscription_Level = 2
	// Get trades, settlements, best asks and best bids with volumes (if volumes are known).
	MarketDataSubscription_LEVEL_TRADES_BBA_VOLUMES MarketDataSubscription_Level = 3
	// All price data including DOM (Implied and/or Combined, depending on dom_subscription_type
	// and MarketDataSubscriptionStatus.actual_dom_subscription_type).
	MarketDataSubscription_LEVEL_TRADES_BBA_DOM MarketDataSubscription_Level = 4
	// LEVEL_TRADES_BBA_DOM + Order Details.
	// Note: Includes information for all orders (both implied and outright).
	MarketDataSubscription_LEVEL_TRADES_BBA_DETAILED_DOM MarketDataSubscription_Level = 7
)

// Enum value maps for MarketDataSubscription_Level.
var (
	MarketDataSubscription_Level_name = map[int32]string{
		0: "LEVEL_NONE",
		5: "LEVEL_SETTLEMENTS",
		6: "LEVEL_END_OF_DAY",
		1: "LEVEL_TRADES",
		2: "LEVEL_TRADES_BBA",
		3: "LEVEL_TRADES_BBA_VOLUMES",
		4: "LEVEL_TRADES_BBA_DOM",
		7: "LEVEL_TRADES_BBA_DETAILED_DOM",
	}
	MarketDataSubscription_Level_value = map[string]int32{
		"LEVEL_NONE":                    0,
		"LEVEL_SETTLEMENTS":             5,
		"LEVEL_END_OF_DAY":              6,
		"LEVEL_TRADES":                  1,
		"LEVEL_TRADES_BBA":              2,
		"LEVEL_TRADES_BBA_VOLUMES":      3,
		"LEVEL_TRADES_BBA_DOM":          4,
		"LEVEL_TRADES_BBA_DETAILED_DOM": 7,
	}
)

func (x MarketDataSubscription_Level) Enum() *MarketDataSubscription_Level {
	p := new(MarketDataSubscription_Level)
	*p = x
	return p
}

func (x MarketDataSubscription_Level) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MarketDataSubscription_Level) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_market_data_2_proto_enumTypes[0].Descriptor()
}

func (MarketDataSubscription_Level) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_market_data_2_proto_enumTypes[0]
}

func (x MarketDataSubscription_Level) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MarketDataSubscription_Level) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MarketDataSubscription_Level(num)
	return nil
}

// Deprecated: Use MarketDataSubscription_Level.Descriptor instead.
func (MarketDataSubscription_Level) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_market_data_2_proto_rawDescGZIP(), []int{0, 0}
}

type MarketDataSubscription_DomType int32

const (
	// Real-time data shall contain Combined DOM only: a sum of Outright DOM and Implied DOM.
	// Implied DOM is based on spread orders, Outright DOM is based on outright orders.
	MarketDataSubscription_DOM_TYPE_COMBINED MarketDataSubscription_DomType = 0
	// Real-time data shall contain only Implied DOM.
	MarketDataSubscription_DOM_TYPE_IMPLIED MarketDataSubscription_DomType = 1
	// Real-time data shall contain both Combined and Implied DOM.
	MarketDataSubscription_DOM_TYPE_IMPLIED_AND_COMBINED MarketDataSubscription_DomType = 2
)

// Enum value maps for MarketDataSubscription_DomType.
var (
	MarketDataSubscription_DomType_name = map[int32]string{
		0: "DOM_TYPE_COMBINED",
		1: "DOM_TYPE_IMPLIED",
		2: "DOM_TYPE_IMPLIED_AND_COMBINED",
	}
	MarketDataSubscription_DomType_value = map[string]int32{
		"DOM_TYPE_COMBINED":             0,
		"DOM_TYPE_IMPLIED":              1,
		"DOM_TYPE_IMPLIED_AND_COMBINED": 2,
	}
)

func (x MarketDataSubscription_DomType) Enum() *MarketDataSubscription_DomType {
	p := new(MarketDataSubscription_DomType)
	*p = x
	return p
}

func (x MarketDataSubscription_DomType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MarketDataSubscription_DomType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_market_data_2_proto_enumTypes[1].Descriptor()
}

func (MarketDataSubscription_DomType) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_market_data_2_proto_enumTypes[1]
}

func (x MarketDataSubscription_DomType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MarketDataSubscription_DomType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MarketDataSubscription_DomType(num)
	return nil
}

// Deprecated: Use MarketDataSubscription_DomType.Descriptor instead.
func (MarketDataSubscription_DomType) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_market_data_2_proto_rawDescGZIP(), []int{0, 1}
}

type MarketDataSubscriptionStatus_StatusCode int32

const (
	// / success codes (0 - 99)
	MarketDataSubscriptionStatus_STATUS_CODE_SUCCESS MarketDataSubscriptionStatus_StatusCode = 0
	// Currently subscription is disconnected.
	// Possible reasons: communication issues, metadata update, subscription parameters change.
	// NOTE: Clients should not resubscribe in this case, the server will restore subscription with
	// sending STATUS_CODE_SUCCESS status. If subscription can't be restored for some reason
	// one of the failure codes will be sent.
	MarketDataSubscriptionStatus_STATUS_CODE_DISCONNECTED MarketDataSubscriptionStatus_StatusCode = 1
	// / failure codes (100+)
	// General failure.
	MarketDataSubscriptionStatus_STATUS_CODE_FAILURE MarketDataSubscriptionStatus_StatusCode = 101
	// Subscription parameters are invalid.
	MarketDataSubscriptionStatus_STATUS_CODE_INVALID_PARAMS MarketDataSubscriptionStatus_StatusCode = 102
	// The user is not allowed to be subscribed to this Instrument.
	MarketDataSubscriptionStatus_STATUS_CODE_ACCESS_DENIED MarketDataSubscriptionStatus_StatusCode = 103
	// Market data source was deleted because of expiration or by another reason.
	MarketDataSubscriptionStatus_STATUS_CODE_DELETED MarketDataSubscriptionStatus_StatusCode = 104
	// The subscription count limit has been violated.
	MarketDataSubscriptionStatus_STATUS_CODE_SUBSCRIPTION_LIMIT_VIOLATION MarketDataSubscriptionStatus_StatusCode = 105
	// OTC Contributor ID is required for this subscription but was not provided or not authorized.
	MarketDataSubscriptionStatus_STATUS_CODE_CONTRIBUTOR_REQUIRED MarketDataSubscriptionStatus_StatusCode = 106
	// The subscription rate limit has been violated.
	MarketDataSubscriptionStatus_STATUS_CODE_SUBSCRIPTION_RATE_LIMIT_VIOLATION MarketDataSubscriptionStatus_StatusCode = 107
	// Market data subscription is not supported for specified contract.
	MarketDataSubscriptionStatus_STATUS_CODE_NOT_SUPPORTED MarketDataSubscriptionStatus_StatusCode = 110
)

// Enum value maps for MarketDataSubscriptionStatus_StatusCode.
var (
	MarketDataSubscriptionStatus_StatusCode_name = map[int32]string{
		0:   "STATUS_CODE_SUCCESS",
		1:   "STATUS_CODE_DISCONNECTED",
		101: "STATUS_CODE_FAILURE",
		102: "STATUS_CODE_INVALID_PARAMS",
		103: "STATUS_CODE_ACCESS_DENIED",
		104: "STATUS_CODE_DELETED",
		105: "STATUS_CODE_SUBSCRIPTION_LIMIT_VIOLATION",
		106: "STATUS_CODE_CONTRIBUTOR_REQUIRED",
		107: "STATUS_CODE_SUBSCRIPTION_RATE_LIMIT_VIOLATION",
		110: "STATUS_CODE_NOT_SUPPORTED",
	}
	MarketDataSubscriptionStatus_StatusCode_value = map[string]int32{
		"STATUS_CODE_SUCCESS":                           0,
		"STATUS_CODE_DISCONNECTED":                      1,
		"STATUS_CODE_FAILURE":                           101,
		"STATUS_CODE_INVALID_PARAMS":                    102,
		"STATUS_CODE_ACCESS_DENIED":                     103,
		"STATUS_CODE_DELETED":                           104,
		"STATUS_CODE_SUBSCRIPTION_LIMIT_VIOLATION":      105,
		"STATUS_CODE_CONTRIBUTOR_REQUIRED":              106,
		"STATUS_CODE_SUBSCRIPTION_RATE_LIMIT_VIOLATION": 107,
		"STATUS_CODE_NOT_SUPPORTED":                     110,
	}
)

func (x MarketDataSubscriptionStatus_StatusCode) Enum() *MarketDataSubscriptionStatus_StatusCode {
	p := new(MarketDataSubscriptionStatus_StatusCode)
	*p = x
	return p
}

func (x MarketDataSubscriptionStatus_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MarketDataSubscriptionStatus_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_market_data_2_proto_enumTypes[2].Descriptor()
}

func (MarketDataSubscriptionStatus_StatusCode) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_market_data_2_proto_enumTypes[2]
}

func (x MarketDataSubscriptionStatus_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MarketDataSubscriptionStatus_StatusCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MarketDataSubscriptionStatus_StatusCode(num)
	return nil
}

// Deprecated: Use MarketDataSubscriptionStatus_StatusCode.Descriptor instead.
func (MarketDataSubscriptionStatus_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_market_data_2_proto_rawDescGZIP(), []int{1, 0}
}

// Type of the quote.
type Quote_Type int32

const (
	// Trade quote.
	Quote_TYPE_TRADE Quote_Type = 0
	// Combined DOM Best bid quote.
	// Note that best bid/ask quotes are not guaranteed to be consistent with bid/ask quotes in the short
	// term. Thus, best bid/ask quotes must not be used to update DOM.
	Quote_TYPE_BESTBID Quote_Type = 1
	// Combined DOM Best ask quote.
	// See the note for TYPE_BESTBID.
	Quote_TYPE_BESTASK Quote_Type = 2
	// Combined DOM Bid quote (DOM level).
	Quote_TYPE_BID Quote_Type = 3
	// Combined DOM Ask quote (DOM level).
	Quote_TYPE_ASK Quote_Type = 4
	// Settlement quote.
	Quote_TYPE_SETTLEMENT Quote_Type = 5
	// Implied Bid quote (For DOM and DetailedDOM level and DOM subscription type that includes Implied DOM).
	Quote_TYPE_IMPLIED_BID Quote_Type = 10
	// Implied Ask quote (For DOM and DetailedDOM level and DOM subscription type that includes Implied DOM).
	Quote_TYPE_IMPLIED_ASK Quote_Type = 11
)

// Enum value maps for Quote_Type.
var (
	Quote_Type_name = map[int32]string{
		0:  "TYPE_TRADE",
		1:  "TYPE_BESTBID",
		2:  "TYPE_BESTASK",
		3:  "TYPE_BID",
		4:  "TYPE_ASK",
		5:  "TYPE_SETTLEMENT",
		10: "TYPE_IMPLIED_BID",
		11: "TYPE_IMPLIED_ASK",
	}
	Quote_Type_value = map[string]int32{
		"TYPE_TRADE":       0,
		"TYPE_BESTBID":     1,
		"TYPE_BESTASK":     2,
		"TYPE_BID":         3,
		"TYPE_ASK":         4,
		"TYPE_SETTLEMENT":  5,
		"TYPE_IMPLIED_BID": 10,
		"TYPE_IMPLIED_ASK": 11,
	}
)

func (x Quote_Type) Enum() *Quote_Type {
	p := new(Quote_Type)
	*p = x
	return p
}

func (x Quote_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Quote_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_market_data_2_proto_enumTypes[3].Descriptor()
}

func (Quote_Type) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_market_data_2_proto_enumTypes[3]
}

func (x Quote_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Quote_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Quote_Type(num)
	return nil
}

// Deprecated: Use Quote_Type.Descriptor instead.
func (Quote_Type) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_market_data_2_proto_rawDescGZIP(), []int{3, 0}
}

// Optional indicator(s) (e.g. this quote also updates some of Open/High/Low/Last session prices).
type Quote_Indicator int32

const (
	// Price of this quote is a new open price of the contract session.
	Quote_INDICATOR_OPEN Quote_Indicator = 1
	// Price of this quote is a new high price of the contract session.
	Quote_INDICATOR_HIGH Quote_Indicator = 2
	// Price of this quote is a new low price of the contract session.
	Quote_INDICATOR_LOW Quote_Indicator = 3
	// Price of this quote is a new last price of the contract session
	// (corresponds to MarketValues.scaled_last_price_no_settlement).
	// Contains any last received price, excluding settlement price.
	Quote_INDICATOR_LAST Quote_Indicator = 4
	// Price of this quote is a new close price of the contract session.
	// Contains any last received price, including settlement price.
	Quote_INDICATOR_CLOSE Quote_Indicator = 11
	// This quote doesn't belong to current trading day.
	Quote_INDICATOR_PAST Quote_Indicator = 5
	// Quote is generated from another one.
	// E.g. for contracts with PricingFallBack OTC contributor parameter set to 1 if there is no best ask,
	// but there is a trade, trade price is sent as a best ask with this indicator along with the trade.
	Quote_INDICATOR_FALL_BACK_TO_TRADE_OR_SETTLEMENT Quote_Indicator = 6
	// Quote is non-settlement insertion correction.
	// Used only when Quote is a part of RealTimeMarketData.correction.
	Quote_INDICATOR_INSERTION Quote_Indicator = 7
	// Quote is deletion correction.
	// Used only when Quote is a part of RealTimeMarketData.correction.
	Quote_INDICATOR_DELETION Quote_Indicator = 8
	// This is an Off Market quote, it does not affect Open/High/Low/Last
	// session prices and is not used in bar updating.
	Quote_INDICATOR_OFF_MARKET Quote_Indicator = 9
	// Quote is caused by change in currency conversion price.
	// Applicable only for best bid and best ask quotes.
	Quote_INDICATOR_CURRENCY_RATE_CHANGED Quote_Indicator = 10
)

// Enum value maps for Quote_Indicator.
var (
	Quote_Indicator_name = map[int32]string{
		1:  "INDICATOR_OPEN",
		2:  "INDICATOR_HIGH",
		3:  "INDICATOR_LOW",
		4:  "INDICATOR_LAST",
		11: "INDICATOR_CLOSE",
		5:  "INDICATOR_PAST",
		6:  "INDICATOR_FALL_BACK_TO_TRADE_OR_SETTLEMENT",
		7:  "INDICATOR_INSERTION",
		8:  "INDICATOR_DELETION",
		9:  "INDICATOR_OFF_MARKET",
		10: "INDICATOR_CURRENCY_RATE_CHANGED",
	}
	Quote_Indicator_value = map[string]int32{
		"INDICATOR_OPEN":  1,
		"INDICATOR_HIGH":  2,
		"INDICATOR_LOW":   3,
		"INDICATOR_LAST":  4,
		"INDICATOR_CLOSE": 11,
		"INDICATOR_PAST":  5,
		"INDICATOR_FALL_BACK_TO_TRADE_OR_SETTLEMENT": 6,
		"INDICATOR_INSERTION":                        7,
		"INDICATOR_DELETION":                         8,
		"INDICATOR_OFF_MARKET":                       9,
		"INDICATOR_CURRENCY_RATE_CHANGED":            10,
	}
)

func (x Quote_Indicator) Enum() *Quote_Indicator {
	p := new(Quote_Indicator)
	*p = x
	return p
}

func (x Quote_Indicator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Quote_Indicator) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_market_data_2_proto_enumTypes[4].Descriptor()
}

func (Quote_Indicator) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_market_data_2_proto_enumTypes[4]
}

func (x Quote_Indicator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Quote_Indicator) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Quote_Indicator(num)
	return nil
}

// Deprecated: Use Quote_Indicator.Descriptor instead.
func (Quote_Indicator) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_market_data_2_proto_rawDescGZIP(), []int{3, 1}
}

// Optional sales condition of the quote.
type Quote_SalesCondition int32

const (
	// Hit trade.
	Quote_SALES_CONDITION_HIT Quote_SalesCondition = 1
	// Take trade.
	Quote_SALES_CONDITION_TAKE Quote_SalesCondition = 2
	// One leg of a spread.
	Quote_SALES_CONDITION_SPREAD_LEG Quote_SalesCondition = 3
	// The market participant was the originator of the transaction.
	// He completes trade on buy with price matched by latest Best Ask price.
	Quote_SALES_CONDITION_BUY_SIDE_AGGRESSOR Quote_SalesCondition = 4
	// The market participant was the originator of the transaction.
	// He completes trade on sell with price matched by latest Best Bid price.
	Quote_SALES_CONDITION_SELL_SIDE_AGGRESSOR Quote_SalesCondition = 5
)

// Enum value maps for Quote_SalesCondition.
var (
	Quote_SalesCondition_name = map[int32]string{
		1: "SALES_CONDITION_HIT",
		2: "SALES_CONDITION_TAKE",
		3: "SALES_CONDITION_SPREAD_LEG",
		4: "SALES_CONDITION_BUY_SIDE_AGGRESSOR",
		5: "SALES_CONDITION_SELL_SIDE_AGGRESSOR",
	}
	Quote_SalesCondition_value = map[string]int32{
		"SALES_CONDITION_HIT":                 1,
		"SALES_CONDITION_TAKE":                2,
		"SALES_CONDITION_SPREAD_LEG":          3,
		"SALES_CONDITION_BUY_SIDE_AGGRESSOR":  4,
		"SALES_CONDITION_SELL_SIDE_AGGRESSOR": 5,
	}
)

func (x Quote_SalesCondition) Enum() *Quote_SalesCondition {
	p := new(Quote_SalesCondition)
	*p = x
	return p
}

func (x Quote_SalesCondition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Quote_SalesCondition) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_market_data_2_proto_enumTypes[5].Descriptor()
}

func (Quote_SalesCondition) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_market_data_2_proto_enumTypes[5]
}

func (x Quote_SalesCondition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Quote_SalesCondition) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Quote_SalesCondition(num)
	return nil
}

// Deprecated: Use Quote_SalesCondition.Descriptor instead.
func (Quote_SalesCondition) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_market_data_2_proto_rawDescGZIP(), []int{3, 2}
}

type DetailedDOMOrder_Operation int32

const (
	// A new order is added.
	DetailedDOMOrder_OPERATION_INSERT DetailedDOMOrder_Operation = 0
	// An existing order is removed.
	DetailedDOMOrder_OPERATION_REMOVE DetailedDOMOrder_Operation = 1
	// An existing order is modified but remains at the same price level.
	DetailedDOMOrder_OPERATION_MODIFY DetailedDOMOrder_Operation = 2
	// An existing order is removed from its current price level to another one.
	DetailedDOMOrder_OPERATION_MOVE_FROM_PRICE DetailedDOMOrder_Operation = 3
	// An existing order is inserted into its new price level.
	// Note, some fields can also change.
	// Note, relative order of OPERATION_MOVE_FROM_PRICE and OPERATION_MOVE_TO_PRICE is not defined.
	DetailedDOMOrder_OPERATION_MOVE_TO_PRICE DetailedDOMOrder_Operation = 4
)

// Enum value maps for DetailedDOMOrder_Operation.
var (
	DetailedDOMOrder_Operation_name = map[int32]string{
		0: "OPERATION_INSERT",
		1: "OPERATION_REMOVE",
		2: "OPERATION_MODIFY",
		3: "OPERATION_MOVE_FROM_PRICE",
		4: "OPERATION_MOVE_TO_PRICE",
	}
	DetailedDOMOrder_Operation_value = map[string]int32{
		"OPERATION_INSERT":          0,
		"OPERATION_REMOVE":          1,
		"OPERATION_MODIFY":          2,
		"OPERATION_MOVE_FROM_PRICE": 3,
		"OPERATION_MOVE_TO_PRICE":   4,
	}
)

func (x DetailedDOMOrder_Operation) Enum() *DetailedDOMOrder_Operation {
	p := new(DetailedDOMOrder_Operation)
	*p = x
	return p
}

func (x DetailedDOMOrder_Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DetailedDOMOrder_Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_market_data_2_proto_enumTypes[6].Descriptor()
}

func (DetailedDOMOrder_Operation) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_market_data_2_proto_enumTypes[6]
}

func (x DetailedDOMOrder_Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DetailedDOMOrder_Operation) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DetailedDOMOrder_Operation(num)
	return nil
}

// Deprecated: Use DetailedDOMOrder_Operation.Descriptor instead.
func (DetailedDOMOrder_Operation) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_market_data_2_proto_rawDescGZIP(), []int{11, 0}
}

// Side of RFQ.
type RFQ_Side int32

const (
	// Any.
	RFQ_SIDE_ANY RFQ_Side = 0
	// Bid.
	RFQ_SIDE_BID RFQ_Side = 1
	// Ask.
	RFQ_SIDE_ASK RFQ_Side = 2
	// Cross.
	RFQ_SIDE_CROSS RFQ_Side = 3
)

// Enum value maps for RFQ_Side.
var (
	RFQ_Side_name = map[int32]string{
		0: "SIDE_ANY",
		1: "SIDE_BID",
		2: "SIDE_ASK",
		3: "SIDE_CROSS",
	}
	RFQ_Side_value = map[string]int32{
		"SIDE_ANY":   0,
		"SIDE_BID":   1,
		"SIDE_ASK":   2,
		"SIDE_CROSS": 3,
	}
)

func (x RFQ_Side) Enum() *RFQ_Side {
	p := new(RFQ_Side)
	*p = x
	return p
}

func (x RFQ_Side) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RFQ_Side) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_market_data_2_proto_enumTypes[7].Descriptor()
}

func (RFQ_Side) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_market_data_2_proto_enumTypes[7]
}

func (x RFQ_Side) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RFQ_Side) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RFQ_Side(num)
	return nil
}

// Deprecated: Use RFQ_Side.Descriptor instead.
func (RFQ_Side) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_market_data_2_proto_rawDescGZIP(), []int{12, 0}
}

type RFQReport_StatusCode int32

const (
	// / Success codes (0 - 99)
	RFQReport_STATUS_CODE_SUCCESS RFQReport_StatusCode = 0
	// / Failure codes (100+)
	// General failure.
	RFQReport_STATUS_CODE_FAILURE RFQReport_StatusCode = 101
	// Request parameters are invalid.
	RFQReport_STATUS_CODE_INVALID_PARAMS RFQReport_StatusCode = 102
	// RFQ is not supported for specified contract.
	RFQReport_STATUS_CODE_NOT_SUPPORTED_FOR_CONTRACT RFQReport_StatusCode = 103
)

// Enum value maps for RFQReport_StatusCode.
var (
	RFQReport_StatusCode_name = map[int32]string{
		0:   "STATUS_CODE_SUCCESS",
		101: "STATUS_CODE_FAILURE",
		102: "STATUS_CODE_INVALID_PARAMS",
		103: "STATUS_CODE_NOT_SUPPORTED_FOR_CONTRACT",
	}
	RFQReport_StatusCode_value = map[string]int32{
		"STATUS_CODE_SUCCESS":                    0,
		"STATUS_CODE_FAILURE":                    101,
		"STATUS_CODE_INVALID_PARAMS":             102,
		"STATUS_CODE_NOT_SUPPORTED_FOR_CONTRACT": 103,
	}
)

func (x RFQReport_StatusCode) Enum() *RFQReport_StatusCode {
	p := new(RFQReport_StatusCode)
	*p = x
	return p
}

func (x RFQReport_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RFQReport_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_market_data_2_proto_enumTypes[8].Descriptor()
}

func (RFQReport_StatusCode) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_market_data_2_proto_enumTypes[8]
}

func (x RFQReport_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RFQReport_StatusCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RFQReport_StatusCode(num)
	return nil
}

// Deprecated: Use RFQReport_StatusCode.Descriptor instead.
func (RFQReport_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_market_data_2_proto_rawDescGZIP(), []int{14, 0}
}

// Indicates CQG's normalized exchange trading session state.
// This is result of a best-effort mapping from each exchange's provided state information to a small set
// of generic states.
type TradingState_ExchangeState int32

const (
	// The state outside of continuous trading, can include uncrossing/auction periods where only certain order
	// actions are allowed. Note that CQG uses this state for pre-open, opening auction, and closing auction.
	// Clients should use ExchangeSpecificMarketState to get detailed information about exchange state
	// outside of continuous trading.
	TradingState_EXCHANGE_STATE_PRE_OPEN TradingState_ExchangeState = 1
	// The state indicating continuous trading.
	TradingState_EXCHANGE_STATE_OPEN TradingState_ExchangeState = 2
	// The state when continuous trading and all closing auctions have ended.
	TradingState_EXCHANGE_STATE_CLOSED TradingState_ExchangeState = 3
	// The state when continuous trading is halted, usually unscheduled.
	TradingState_EXCHANGE_STATE_HALTED TradingState_ExchangeState = 4
	// The state when trading is suspended, similar to halt but for an indeterminate period.
	TradingState_EXCHANGE_STATE_SUSPENDED TradingState_ExchangeState = 5
)

// Enum value maps for TradingState_ExchangeState.
var (
	TradingState_ExchangeState_name = map[int32]string{
		1: "EXCHANGE_STATE_PRE_OPEN",
		2: "EXCHANGE_STATE_OPEN",
		3: "EXCHANGE_STATE_CLOSED",
		4: "EXCHANGE_STATE_HALTED",
		5: "EXCHANGE_STATE_SUSPENDED",
	}
	TradingState_ExchangeState_value = map[string]int32{
		"EXCHANGE_STATE_PRE_OPEN":  1,
		"EXCHANGE_STATE_OPEN":      2,
		"EXCHANGE_STATE_CLOSED":    3,
		"EXCHANGE_STATE_HALTED":    4,
		"EXCHANGE_STATE_SUSPENDED": 5,
	}
)

func (x TradingState_ExchangeState) Enum() *TradingState_ExchangeState {
	p := new(TradingState_ExchangeState)
	*p = x
	return p
}

func (x TradingState_ExchangeState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradingState_ExchangeState) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_market_data_2_proto_enumTypes[9].Descriptor()
}

func (TradingState_ExchangeState) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_market_data_2_proto_enumTypes[9]
}

func (x TradingState_ExchangeState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TradingState_ExchangeState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TradingState_ExchangeState(num)
	return nil
}

// Deprecated: Use TradingState_ExchangeState.Descriptor instead.
func (TradingState_ExchangeState) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_market_data_2_proto_rawDescGZIP(), []int{16, 0}
}

// Type of request action.
type OptionCalculationRequest_RequestType int32

const (
	// Calculation request with subscription for updates.
	OptionCalculationRequest_REQUEST_TYPE_SUBSCRIBE OptionCalculationRequest_RequestType = 2
	// Drop subscription request and unsubscribe.
	OptionCalculationRequest_REQUEST_TYPE_DROP OptionCalculationRequest_RequestType = 3
)

// Enum value maps for OptionCalculationRequest_RequestType.
var (
	OptionCalculationRequest_RequestType_name = map[int32]string{
		2: "REQUEST_TYPE_SUBSCRIBE",
		3: "REQUEST_TYPE_DROP",
	}
	OptionCalculationRequest_RequestType_value = map[string]int32{
		"REQUEST_TYPE_SUBSCRIBE": 2,
		"REQUEST_TYPE_DROP":      3,
	}
)

func (x OptionCalculationRequest_RequestType) Enum() *OptionCalculationRequest_RequestType {
	p := new(OptionCalculationRequest_RequestType)
	*p = x
	return p
}

func (x OptionCalculationRequest_RequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OptionCalculationRequest_RequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_market_data_2_proto_enumTypes[10].Descriptor()
}

func (OptionCalculationRequest_RequestType) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_market_data_2_proto_enumTypes[10]
}

func (x OptionCalculationRequest_RequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OptionCalculationRequest_RequestType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OptionCalculationRequest_RequestType(num)
	return nil
}

// Deprecated: Use OptionCalculationRequest_RequestType.Descriptor instead.
func (OptionCalculationRequest_RequestType) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_market_data_2_proto_rawDescGZIP(), []int{19, 0}
}

type OptionCalculationReport_StatusCode int32

const (
	// / success codes (1 - 99)
	// Request is processed and subscription is established.
	OptionCalculationReport_STATUS_CODE_SUBSCRIBED OptionCalculationReport_StatusCode = 1
	// The subscription is dropped by the client.
	OptionCalculationReport_STATUS_CODE_DROPPED OptionCalculationReport_StatusCode = 2
	// Unsolicited information update because of subscription.
	OptionCalculationReport_STATUS_CODE_UPDATE OptionCalculationReport_StatusCode = 3
	// Currently subscription is disconnected. Possible reasons: communication issues, metadata update.
	// NOTE: Clients should not resubscribe in this case, the server will restore subscription with
	// sending STATUS_CODE_SUBSCRIBED status.
	OptionCalculationReport_STATUS_CODE_DISCONNECTED OptionCalculationReport_StatusCode = 4
	// / failure codes (100+)
	// general failure
	OptionCalculationReport_STATUS_CODE_FAILURE OptionCalculationReport_StatusCode = 101
	// Subscription parameters are invalid.
	OptionCalculationReport_STATUS_CODE_INVALID_PARAMS OptionCalculationReport_StatusCode = 102
	// The user is not allowed to be subscribed to this Instrument.
	OptionCalculationReport_STATUS_CODE_ACCESS_DENIED OptionCalculationReport_StatusCode = 103
	// The subscription count limit has been violated.
	OptionCalculationReport_STATUS_CODE_SUBSCRIPTION_LIMIT_VIOLATION OptionCalculationReport_StatusCode = 104
	// The request rate limit has been violated.
	OptionCalculationReport_STATUS_CODE_REQUEST_RATE_LIMIT_VIOLATION OptionCalculationReport_StatusCode = 105
	// Market data source was deleted because of expiration or for another reason.
	OptionCalculationReport_STATUS_CODE_DELETED OptionCalculationReport_StatusCode = 106
	// OTC Contributor ID is required for this subscription but was not provided or not authorized.
	OptionCalculationReport_STATUS_CODE_CONTRIBUTOR_REQUIRED OptionCalculationReport_StatusCode = 107
)

// Enum value maps for OptionCalculationReport_StatusCode.
var (
	OptionCalculationReport_StatusCode_name = map[int32]string{
		1:   "STATUS_CODE_SUBSCRIBED",
		2:   "STATUS_CODE_DROPPED",
		3:   "STATUS_CODE_UPDATE",
		4:   "STATUS_CODE_DISCONNECTED",
		101: "STATUS_CODE_FAILURE",
		102: "STATUS_CODE_INVALID_PARAMS",
		103: "STATUS_CODE_ACCESS_DENIED",
		104: "STATUS_CODE_SUBSCRIPTION_LIMIT_VIOLATION",
		105: "STATUS_CODE_REQUEST_RATE_LIMIT_VIOLATION",
		106: "STATUS_CODE_DELETED",
		107: "STATUS_CODE_CONTRIBUTOR_REQUIRED",
	}
	OptionCalculationReport_StatusCode_value = map[string]int32{
		"STATUS_CODE_SUBSCRIBED":                   1,
		"STATUS_CODE_DROPPED":                      2,
		"STATUS_CODE_UPDATE":                       3,
		"STATUS_CODE_DISCONNECTED":                 4,
		"STATUS_CODE_FAILURE":                      101,
		"STATUS_CODE_INVALID_PARAMS":               102,
		"STATUS_CODE_ACCESS_DENIED":                103,
		"STATUS_CODE_SUBSCRIPTION_LIMIT_VIOLATION": 104,
		"STATUS_CODE_REQUEST_RATE_LIMIT_VIOLATION": 105,
		"STATUS_CODE_DELETED":                      106,
		"STATUS_CODE_CONTRIBUTOR_REQUIRED":         107,
	}
)

func (x OptionCalculationReport_StatusCode) Enum() *OptionCalculationReport_StatusCode {
	p := new(OptionCalculationReport_StatusCode)
	*p = x
	return p
}

func (x OptionCalculationReport_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OptionCalculationReport_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_market_data_2_proto_enumTypes[11].Descriptor()
}

func (OptionCalculationReport_StatusCode) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_market_data_2_proto_enumTypes[11]
}

func (x OptionCalculationReport_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OptionCalculationReport_StatusCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OptionCalculationReport_StatusCode(num)
	return nil
}

// Deprecated: Use OptionCalculationReport_StatusCode.Descriptor instead.
func (OptionCalculationReport_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_market_data_2_proto_rawDescGZIP(), []int{21, 0}
}

// Type of RFQ subscription request.
type RFQSubscriptionRequest_RequestType int32

const (
	// Subscribe on RFQs.
	RFQSubscriptionRequest_REQUEST_TYPE_SUBSCRIBE RFQSubscriptionRequest_RequestType = 1
	// Drop subscription on RFQs.
	RFQSubscriptionRequest_REQUEST_TYPE_DROP RFQSubscriptionRequest_RequestType = 2
)

// Enum value maps for RFQSubscriptionRequest_RequestType.
var (
	RFQSubscriptionRequest_RequestType_name = map[int32]string{
		1: "REQUEST_TYPE_SUBSCRIBE",
		2: "REQUEST_TYPE_DROP",
	}
	RFQSubscriptionRequest_RequestType_value = map[string]int32{
		"REQUEST_TYPE_SUBSCRIBE": 1,
		"REQUEST_TYPE_DROP":      2,
	}
)

func (x RFQSubscriptionRequest_RequestType) Enum() *RFQSubscriptionRequest_RequestType {
	p := new(RFQSubscriptionRequest_RequestType)
	*p = x
	return p
}

func (x RFQSubscriptionRequest_RequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RFQSubscriptionRequest_RequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_market_data_2_proto_enumTypes[12].Descriptor()
}

func (RFQSubscriptionRequest_RequestType) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_market_data_2_proto_enumTypes[12]
}

func (x RFQSubscriptionRequest_RequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RFQSubscriptionRequest_RequestType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RFQSubscriptionRequest_RequestType(num)
	return nil
}

// Deprecated: Use RFQSubscriptionRequest_RequestType.Descriptor instead.
func (RFQSubscriptionRequest_RequestType) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_market_data_2_proto_rawDescGZIP(), []int{22, 0}
}

// Status code.
type RFQSubscriptionReport_StatusCode int32

const (
	// / Success codes (0 - 99)
	// Request is processed and subscription is established or restored after disconnection.
	RFQSubscriptionReport_STATUS_CODE_SUBSCRIBED RFQSubscriptionReport_StatusCode = 1
	// The subscription is dropped by the client.
	RFQSubscriptionReport_STATUS_CODE_DROPPED RFQSubscriptionReport_StatusCode = 2
	// Unsolicited information update because of subscription.
	RFQSubscriptionReport_STATUS_CODE_UPDATE RFQSubscriptionReport_StatusCode = 3
	// Currently subscription is disconnected.
	// Possible reasons: communication issues, metadata update, subscription parameters change.
	// NOTE: Clients should not resubscribe in this case, the server will restore subscription with
	// sending STATUS_CODE_SUBSCRIBED status.
	RFQSubscriptionReport_STATUS_CODE_DISCONNECTED RFQSubscriptionReport_StatusCode = 4
	// / Failure codes (100+)
	// General failure.
	RFQSubscriptionReport_STATUS_CODE_FAILURE RFQSubscriptionReport_StatusCode = 101
	// Subscription parameters are invalid.
	RFQSubscriptionReport_STATUS_CODE_INVALID_PARAMS RFQSubscriptionReport_StatusCode = 102
	// The request rate limit has been violated.
	RFQSubscriptionReport_STATUS_CODE_REQUEST_RATE_LIMIT_VIOLATION RFQSubscriptionReport_StatusCode = 103
	// The limit of subscriptions has been violated.
	RFQSubscriptionReport_STATUS_CODE_SUBSCRIPTION_LIMIT_VIOLATION RFQSubscriptionReport_StatusCode = 105
	// Requested information is not found.
	RFQSubscriptionReport_STATUS_CODE_NOT_FOUND RFQSubscriptionReport_StatusCode = 104
	// The user is not allowed to be subscribed to exchange RFQs.
	RFQSubscriptionReport_STATUS_CODE_ACCESS_DENIED RFQSubscriptionReport_StatusCode = 106
)

// Enum value maps for RFQSubscriptionReport_StatusCode.
var (
	RFQSubscriptionReport_StatusCode_name = map[int32]string{
		1:   "STATUS_CODE_SUBSCRIBED",
		2:   "STATUS_CODE_DROPPED",
		3:   "STATUS_CODE_UPDATE",
		4:   "STATUS_CODE_DISCONNECTED",
		101: "STATUS_CODE_FAILURE",
		102: "STATUS_CODE_INVALID_PARAMS",
		103: "STATUS_CODE_REQUEST_RATE_LIMIT_VIOLATION",
		105: "STATUS_CODE_SUBSCRIPTION_LIMIT_VIOLATION",
		104: "STATUS_CODE_NOT_FOUND",
		106: "STATUS_CODE_ACCESS_DENIED",
	}
	RFQSubscriptionReport_StatusCode_value = map[string]int32{
		"STATUS_CODE_SUBSCRIBED":                   1,
		"STATUS_CODE_DROPPED":                      2,
		"STATUS_CODE_UPDATE":                       3,
		"STATUS_CODE_DISCONNECTED":                 4,
		"STATUS_CODE_FAILURE":                      101,
		"STATUS_CODE_INVALID_PARAMS":               102,
		"STATUS_CODE_REQUEST_RATE_LIMIT_VIOLATION": 103,
		"STATUS_CODE_SUBSCRIPTION_LIMIT_VIOLATION": 105,
		"STATUS_CODE_NOT_FOUND":                    104,
		"STATUS_CODE_ACCESS_DENIED":                106,
	}
)

func (x RFQSubscriptionReport_StatusCode) Enum() *RFQSubscriptionReport_StatusCode {
	p := new(RFQSubscriptionReport_StatusCode)
	*p = x
	return p
}

func (x RFQSubscriptionReport_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RFQSubscriptionReport_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_market_data_2_proto_enumTypes[13].Descriptor()
}

func (RFQSubscriptionReport_StatusCode) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_market_data_2_proto_enumTypes[13]
}

func (x RFQSubscriptionReport_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RFQSubscriptionReport_StatusCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RFQSubscriptionReport_StatusCode(num)
	return nil
}

// Deprecated: Use RFQSubscriptionReport_StatusCode.Descriptor instead.
func (RFQSubscriptionReport_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_market_data_2_proto_rawDescGZIP(), []int{23, 0}
}

// Subscription to market data.
// If it is necessary to change subscription level client should send a new subscription request
// with the same contract ID but a new subscription level.
type MarketDataSubscription struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Contract ID to subscribe (see symbol resolution report).
	// This is client's responsibility to re-subscribe in case of symbol resolution update.
	ContractId *uint32 `protobuf:"varint,1,req,name=contract_id,json=contractId" json:"contract_id,omitempty"`
	// Subscription request id. Should be unique among currently processed requests.
	// It is a required field.
	RequestId *uint32 `protobuf:"varint,14,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	// Subscription level.
	// This field is associated with Level enum type.
	// Result level will be available in MarketDataSubscriptionStatus.
	Level *uint32 `protobuf:"varint,2,req,name=level" json:"level,omitempty"`
	// Defines market values array in real-time market data snapshot.
	// False or omitted means that snapshots will contain market values for most recent trading day only (if available).
	// True means that snapshots may contain market values for several (up to 3) past trading days.
	IncludePastMarketValues *bool `protobuf:"varint,3,opt,name=include_past_market_values,json=includePastMarketValues" json:"include_past_market_values,omitempty"`
	// Defines quotes array in real-time market data snapshot.
	// See details in commentary for field RealTimeMarketData.quotes.
	// Note: subscription with include_past_quotes=True may take longer.
	IncludePastQuotes *bool `protobuf:"varint,5,opt,name=include_past_quotes,json=includePastQuotes" json:"include_past_quotes,omitempty"`
	// Defines session market values array in real-time market data snapshot.
	// False or omitted means that snapshots will not contain session market values.
	// True means that snapshots may contain session market values for several sessions.
	IncludeSessionMarketValues *bool `protobuf:"varint,9,opt,name=include_session_market_values,json=includeSessionMarketValues" json:"include_session_market_values,omitempty"`
	// Specifies that quotes and market values need to include yields.
	// Result value will be available in MarketDataSubscriptionStatus.
	// Re-subscription with the changed value of this parameter may lead to temporary disconnection
	// of real-time market data (STATUS_CODE_DISCONNECTED).
	IncludeYields *bool `protobuf:"varint,8,opt,name=include_yields,json=includeYields" json:"include_yields,omitempty"`
	// Defines source contract quote price in real-time market data.
	// scaled_source_price is provided only for best ask and best bid.
	// Other quote types either have the same values as scaled_price for the contract or not supported.
	// Note: Flag is ignored (considered as False) if the contract does not have a source contract.
	// Re-subscription with the changed value of this parameter may lead to temporary disconnection
	// of real-time market data (STATUS_CODE_DISCONNECTED).
	IncludeSourcePrices *bool `protobuf:"varint,10,opt,name=include_source_prices,json=includeSourcePrices" json:"include_source_prices,omitempty"`
	// Whether need to include RFQ in real-time market data. By default server don't provide them.
	// Result value will be available in MarketDataSubscriptionStatus.
	IncludeRequestsForQuotation *bool `protobuf:"varint,11,opt,name=include_requests_for_quotation,json=includeRequestsForQuotation" json:"include_requests_for_quotation,omitempty"`
	// Specifies that quotes need to include trade attributes.
	IncludeTradeAttributes *bool `protobuf:"varint,12,opt,name=include_trade_attributes,json=includeTradeAttributes" json:"include_trade_attributes,omitempty"`
	// Specifies to include market state in real-time market data.
	IncludeMarketState *bool `protobuf:"varint,13,opt,name=include_market_state,json=includeMarketState" json:"include_market_state,omitempty"`
	// Specifies to include Off Market trade quotes in real-time market data.
	IncludeOffMarketTrades *bool `protobuf:"varint,15,opt,name=include_off_market_trades,json=includeOffMarketTrades" json:"include_off_market_trades,omitempty"`
	// Optional OTC contributor ID for contributor specific data subscriptions.
	ContributorId *string `protobuf:"bytes,7,opt,name=contributor_id,json=contributorId" json:"contributor_id,omitempty"`
	// Specifies that quotes and market values need to include currency prices used for price conversion.
	// Note: Flag is ignored (considered as False) if the contract does not have a source contract.
	// Re-subscription with the changed value of this parameter may lead to temporary disconnection
	// of real-time market data (STATUS_CODE_DISCONNECTED).
	IncludeCurrencyRate *bool `protobuf:"varint,16,opt,name=include_currency_rate,json=includeCurrencyRate" json:"include_currency_rate,omitempty"`
	// DOM data subscription type for level LEVEL_TRADES_BBA_DOM or LEVEL_TRADES_BBA_DETAILED_DOM.
	// This field is associated with DomType enum type.
	// Default value is DOM_TYPE_COMBINED
	DomSubscriptionType *uint32 `protobuf:"varint,17,opt,name=dom_subscription_type,json=domSubscriptionType" json:"dom_subscription_type,omitempty"`
	// Specifies whether to include scaled premium price added to quote price.
	IncludePremium *bool `protobuf:"varint,18,opt,name=include_premium,json=includePremium" json:"include_premium,omitempty"`
}

func (x *MarketDataSubscription) Reset() {
	*x = MarketDataSubscription{}
	mi := &file_protos_WebAPI_market_data_2_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarketDataSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDataSubscription) ProtoMessage() {}

func (x *MarketDataSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_market_data_2_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDataSubscription.ProtoReflect.Descriptor instead.
func (*MarketDataSubscription) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_market_data_2_proto_rawDescGZIP(), []int{0}
}

func (x *MarketDataSubscription) GetContractId() uint32 {
	if x != nil && x.ContractId != nil {
		return *x.ContractId
	}
	return 0
}

func (x *MarketDataSubscription) GetRequestId() uint32 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *MarketDataSubscription) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *MarketDataSubscription) GetIncludePastMarketValues() bool {
	if x != nil && x.IncludePastMarketValues != nil {
		return *x.IncludePastMarketValues
	}
	return false
}

func (x *MarketDataSubscription) GetIncludePastQuotes() bool {
	if x != nil && x.IncludePastQuotes != nil {
		return *x.IncludePastQuotes
	}
	return false
}

func (x *MarketDataSubscription) GetIncludeSessionMarketValues() bool {
	if x != nil && x.IncludeSessionMarketValues != nil {
		return *x.IncludeSessionMarketValues
	}
	return false
}

func (x *MarketDataSubscription) GetIncludeYields() bool {
	if x != nil && x.IncludeYields != nil {
		return *x.IncludeYields
	}
	return false
}

func (x *MarketDataSubscription) GetIncludeSourcePrices() bool {
	if x != nil && x.IncludeSourcePrices != nil {
		return *x.IncludeSourcePrices
	}
	return false
}

func (x *MarketDataSubscription) GetIncludeRequestsForQuotation() bool {
	if x != nil && x.IncludeRequestsForQuotation != nil {
		return *x.IncludeRequestsForQuotation
	}
	return false
}

func (x *MarketDataSubscription) GetIncludeTradeAttributes() bool {
	if x != nil && x.IncludeTradeAttributes != nil {
		return *x.IncludeTradeAttributes
	}
	return false
}

func (x *MarketDataSubscription) GetIncludeMarketState() bool {
	if x != nil && x.IncludeMarketState != nil {
		return *x.IncludeMarketState
	}
	return false
}

func (x *MarketDataSubscription) GetIncludeOffMarketTrades() bool {
	if x != nil && x.IncludeOffMarketTrades != nil {
		return *x.IncludeOffMarketTrades
	}
	return false
}

func (x *MarketDataSubscription) GetContributorId() string {
	if x != nil && x.ContributorId != nil {
		return *x.ContributorId
	}
	return ""
}

func (x *MarketDataSubscription) GetIncludeCurrencyRate() bool {
	if x != nil && x.IncludeCurrencyRate != nil {
		return *x.IncludeCurrencyRate
	}
	return false
}

func (x *MarketDataSubscription) GetDomSubscriptionType() uint32 {
	if x != nil && x.DomSubscriptionType != nil {
		return *x.DomSubscriptionType
	}
	return 0
}

func (x *MarketDataSubscription) GetIncludePremium() bool {
	if x != nil && x.IncludePremium != nil {
		return *x.IncludePremium
	}
	return false
}

// Subscription status
type MarketDataSubscriptionStatus struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Subscription contract ID.
	ContractId *uint32 `protobuf:"varint,1,req,name=contract_id,json=contractId" json:"contract_id,omitempty"`
	// Subscription result.
	// This field is associated with StatusCode enum type.
	StatusCode *uint32 `protobuf:"varint,2,req,name=status_code,json=statusCode" json:"status_code,omitempty"`
	// Effective subscription level.
	// This field is associated with MarketDataSubscription.Level enum type.
	// Note: when successfully subscribed to delayed DOM data, the reported level is LEVEL_TRADES_BBA_DOM,
	// but actual DOM data may not yet be available and will be available later.
	// Level can be decreased if:
	//  1. the client is prohibited to get requested data;
	//  2. Implied DOM is unavailable for an instrument and level LEVEL_TRADES_BBA_DOM or LEVEL_TRADES_BBA_DETAILED_DOM
	//     was selected with DOM_TYPE_IMPLIED - it will be lowered to LEVEL_TRADES_BBA_VOLUMES;
	Level *uint32 `protobuf:"varint,3,req,name=level" json:"level,omitempty"`
	// Possible details of subscription failure.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/market_data_2.proto.
	TextMessage *string `protobuf:"bytes,4,opt,name=text_message,json=textMessage" json:"text_message,omitempty"`
	// Possible details of subscription failure.
	Details *common.Text `protobuf:"bytes,18,opt,name=details" json:"details,omitempty"`
	// Specifies whether past quotes are included into real-time market data snapshot or not.
	// Always False if user didn't request past quotes.
	PastQuotesIncluded *bool `protobuf:"varint,6,opt,name=past_quotes_included,json=pastQuotesIncluded" json:"past_quotes_included,omitempty"`
	// Specifies whether intraday session market values are included into real-time market data or not.
	SessionMarketValuesIncluded *bool `protobuf:"varint,10,opt,name=session_market_values_included,json=sessionMarketValuesIncluded" json:"session_market_values_included,omitempty"`
	// Specifies whether yields are included into real-time market data or not.
	YieldsIncluded *bool `protobuf:"varint,9,opt,name=yields_included,json=yieldsIncluded" json:"yields_included,omitempty"`
	// Specifies whether source contract prices are include into real-time market data or not.
	// Always False if user didn't request source contract quotes.
	SourcePriceIncluded *bool `protobuf:"varint,11,opt,name=source_price_included,json=sourcePriceIncluded" json:"source_price_included,omitempty"`
	// Specifies whether RFQs are included into real-time market data or not.
	// Always False if user didn't request RFQs.
	RequestsForQuotationIncluded *bool `protobuf:"varint,12,opt,name=requests_for_quotation_included,json=requestsForQuotationIncluded" json:"requests_for_quotation_included,omitempty"`
	// Specifies whether trade attributes included into real-time market data.
	// Always False if user didn't request trade attributes.
	TradeAttributesIncluded *bool `protobuf:"varint,13,opt,name=trade_attributes_included,json=tradeAttributesIncluded" json:"trade_attributes_included,omitempty"`
	// Specifies whether market state included into real-time market data.
	// Always False if user didn't request market state.
	MarketStateIncluded *bool `protobuf:"varint,14,opt,name=market_state_included,json=marketStateIncluded" json:"market_state_included,omitempty"`
	// Specifies whether Off Market trade quotes included into real-time market data.
	// Always False if user didn't request Off Market trades.
	OffMarketTradesIncluded *bool `protobuf:"varint,16,opt,name=off_market_trades_included,json=offMarketTradesIncluded" json:"off_market_trades_included,omitempty"`
	// Specifies whether currency prices are included into real-time market data.
	// Always False if user did not request currency prices or contract does not use currency conversion.
	CurrencyRateIncluded *bool `protobuf:"varint,17,opt,name=currency_rate_included,json=currencyRateIncluded" json:"currency_rate_included,omitempty"`
	// Request ID of a corresponding request.
	RequestId *uint32 `protobuf:"varint,15,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	// OTC contributor ID for contributor specific data subscriptions.
	ContributorId *string `protobuf:"bytes,8,opt,name=contributor_id,json=contributorId" json:"contributor_id,omitempty"`
	// Effective DOM data subscription type.
	// This field is associated with MarketDataSubscription.DomType enum type.
	ActualDomSubscriptionType *uint32 `protobuf:"varint,19,opt,name=actual_dom_subscription_type,json=actualDomSubscriptionType" json:"actual_dom_subscription_type,omitempty"`
	// Specifies whether the scaled premium price is included in quotes.
	PremiumIncluded *bool `protobuf:"varint,20,opt,name=premium_included,json=premiumIncluded" json:"premium_included,omitempty"`
}

func (x *MarketDataSubscriptionStatus) Reset() {
	*x = MarketDataSubscriptionStatus{}
	mi := &file_protos_WebAPI_market_data_2_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarketDataSubscriptionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDataSubscriptionStatus) ProtoMessage() {}

func (x *MarketDataSubscriptionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_market_data_2_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDataSubscriptionStatus.ProtoReflect.Descriptor instead.
func (*MarketDataSubscriptionStatus) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_market_data_2_proto_rawDescGZIP(), []int{1}
}

func (x *MarketDataSubscriptionStatus) GetContractId() uint32 {
	if x != nil && x.ContractId != nil {
		return *x.ContractId
	}
	return 0
}

func (x *MarketDataSubscriptionStatus) GetStatusCode() uint32 {
	if x != nil && x.StatusCode != nil {
		return *x.StatusCode
	}
	return 0
}

func (x *MarketDataSubscriptionStatus) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/market_data_2.proto.
func (x *MarketDataSubscriptionStatus) GetTextMessage() string {
	if x != nil && x.TextMessage != nil {
		return *x.TextMessage
	}
	return ""
}

func (x *MarketDataSubscriptionStatus) GetDetails() *common.Text {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *MarketDataSubscriptionStatus) GetPastQuotesIncluded() bool {
	if x != nil && x.PastQuotesIncluded != nil {
		return *x.PastQuotesIncluded
	}
	return false
}

func (x *MarketDataSubscriptionStatus) GetSessionMarketValuesIncluded() bool {
	if x != nil && x.SessionMarketValuesIncluded != nil {
		return *x.SessionMarketValuesIncluded
	}
	return false
}

func (x *MarketDataSubscriptionStatus) GetYieldsIncluded() bool {
	if x != nil && x.YieldsIncluded != nil {
		return *x.YieldsIncluded
	}
	return false
}

func (x *MarketDataSubscriptionStatus) GetSourcePriceIncluded() bool {
	if x != nil && x.SourcePriceIncluded != nil {
		return *x.SourcePriceIncluded
	}
	return false
}

func (x *MarketDataSubscriptionStatus) GetRequestsForQuotationIncluded() bool {
	if x != nil && x.RequestsForQuotationIncluded != nil {
		return *x.RequestsForQuotationIncluded
	}
	return false
}

func (x *MarketDataSubscriptionStatus) GetTradeAttributesIncluded() bool {
	if x != nil && x.TradeAttributesIncluded != nil {
		return *x.TradeAttributesIncluded
	}
	return false
}

func (x *MarketDataSubscriptionStatus) GetMarketStateIncluded() bool {
	if x != nil && x.MarketStateIncluded != nil {
		return *x.MarketStateIncluded
	}
	return false
}

func (x *MarketDataSubscriptionStatus) GetOffMarketTradesIncluded() bool {
	if x != nil && x.OffMarketTradesIncluded != nil {
		return *x.OffMarketTradesIncluded
	}
	return false
}

func (x *MarketDataSubscriptionStatus) GetCurrencyRateIncluded() bool {
	if x != nil && x.CurrencyRateIncluded != nil {
		return *x.CurrencyRateIncluded
	}
	return false
}

func (x *MarketDataSubscriptionStatus) GetRequestId() uint32 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *MarketDataSubscriptionStatus) GetContributorId() string {
	if x != nil && x.ContributorId != nil {
		return *x.ContributorId
	}
	return ""
}

func (x *MarketDataSubscriptionStatus) GetActualDomSubscriptionType() uint32 {
	if x != nil && x.ActualDomSubscriptionType != nil {
		return *x.ActualDomSubscriptionType
	}
	return 0
}

func (x *MarketDataSubscriptionStatus) GetPremiumIncluded() bool {
	if x != nil && x.PremiumIncluded != nil {
		return *x.PremiumIncluded
	}
	return false
}

// Real time data delivery.
// Snapshot is sent as the first message after subscription and may appear periodically when subscribed.
type RealTimeMarketData struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Contract ID assigned by server.
	ContractId *uint32 `protobuf:"varint,1,req,name=contract_id,json=contractId" json:"contract_id,omitempty"`
	// Contract quotes. DOM is updated by new volumes per price. Zero volume is used to clean this price record from DOM.
	// Snapshot quotes have no indicators and no trade attributes.
	// If is_snapshot=False, contains new quotes for the contract.
	// If is_snapshot=True, contains one last quote of each type (best ask, best bid, trade and settlement).
	// If MarketDataSubscription.include_past_quote=False, includes last quotes for most recent trading day
	// or new day in pre-open.
	// If MarketDataSubscription.include_past_quote=True, includes last quotes for last N trading days
	// or new day in pre-open. N by default equals to 7 and can't be changed by client. Contact customer support
	// if you want to increase this value.
	// If you need to get last settlement, prefer to use message MarketValues because it contains trade_date.
	Quotes []*Quote `protobuf:"bytes,2,rep,name=quotes" json:"quotes,omitempty"`
	// Trading day the quotes belong to.
	QuotesTradeDate *int64 `protobuf:"zigzag64,18,opt,name=quotes_trade_date,json=quotesTradeDate" json:"quotes_trade_date,omitempty"`
	// Contract correction quotes.
	// If correction affects fields of MarketValues, and MarketValues for affected trading day was sent in the snapshot
	// (see MarketDataSubscription.include_past_market_values), then a separate update for MarketValues will be sent.
	Corrections []*Quote `protobuf:"bytes,7,rep,name=corrections" json:"corrections,omitempty"`
	// True if this is a snapshot (all previously known quotes, market values, detailed DOM, market state for
	// this contract should be cleaned).
	IsSnapshot *bool `protobuf:"varint,3,opt,name=is_snapshot,json=isSnapshot" json:"is_snapshot,omitempty"`
	// Collapsing level that was applied by server.
	// NONE if the field is omitted.
	// This field is associated with RealTimeCollapsingLevel enum type.
	CollapsingLevel *uint32 `protobuf:"varint,4,opt,name=collapsing_level,json=collapsingLevel" json:"collapsing_level,omitempty"`
	// Market values of a contract (e.g. Open/High/Low/Last) for several past trading days.
	// Present in snapshots and in updates if some values are changed (only changed values are included in updates).
	MarketValues []*MarketValues `protobuf:"bytes,5,rep,name=market_values,json=marketValues" json:"market_values,omitempty"`
	// Detailed Combined DOM for LEVEL_TRADES_BBA_DETAILED_DOM subscription level.
	DetailedDom *DetailedDOM `protobuf:"bytes,16,opt,name=detailed_dom,json=detailedDom" json:"detailed_dom,omitempty"`
	// List of RFQs.
	// Never presents in snapshots, can be provided in updates only.
	RequestsForQuotation []*RFQ `protobuf:"bytes,6,rep,name=requests_for_quotation,json=requestsForQuotation" json:"requests_for_quotation,omitempty"`
	// Specifies the current market state. Not all contracts provide such data.
	// Received on subscription and in updates if the state is changed.
	MarketState *MarketState `protobuf:"bytes,17,opt,name=market_state,json=marketState" json:"market_state,omitempty"`
	// Scale to convert scaled_* prices of RealTimeMarketData and its submessages to correct prices,
	// most of the time same as ContractMetadata.correct_price_scale
	// with possible exception of short periods between metadata change notifications and
	// real-time data snapshots. Set in snapshots only, if missing, use the previous one.
	CorrectPriceScale *float64 `protobuf:"fixed64,19,opt,name=correct_price_scale,json=correctPriceScale" json:"correct_price_scale,omitempty"`
}

func (x *RealTimeMarketData) Reset() {
	*x = RealTimeMarketData{}
	mi := &file_protos_WebAPI_market_data_2_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RealTimeMarketData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealTimeMarketData) ProtoMessage() {}

func (x *RealTimeMarketData) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_market_data_2_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealTimeMarketData.ProtoReflect.Descriptor instead.
func (*RealTimeMarketData) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_market_data_2_proto_rawDescGZIP(), []int{2}
}

func (x *RealTimeMarketData) GetContractId() uint32 {
	if x != nil && x.ContractId != nil {
		return *x.ContractId
	}
	return 0
}

func (x *RealTimeMarketData) GetQuotes() []*Quote {
	if x != nil {
		return x.Quotes
	}
	return nil
}

func (x *RealTimeMarketData) GetQuotesTradeDate() int64 {
	if x != nil && x.QuotesTradeDate != nil {
		return *x.QuotesTradeDate
	}
	return 0
}

func (x *RealTimeMarketData) GetCorrections() []*Quote {
	if x != nil {
		return x.Corrections
	}
	return nil
}

func (x *RealTimeMarketData) GetIsSnapshot() bool {
	if x != nil && x.IsSnapshot != nil {
		return *x.IsSnapshot
	}
	return false
}

func (x *RealTimeMarketData) GetCollapsingLevel() uint32 {
	if x != nil && x.CollapsingLevel != nil {
		return *x.CollapsingLevel
	}
	return 0
}

func (x *RealTimeMarketData) GetMarketValues() []*MarketValues {
	if x != nil {
		return x.MarketValues
	}
	return nil
}

func (x *RealTimeMarketData) GetDetailedDom() *DetailedDOM {
	if x != nil {
		return x.DetailedDom
	}
	return nil
}

func (x *RealTimeMarketData) GetRequestsForQuotation() []*RFQ {
	if x != nil {
		return x.RequestsForQuotation
	}
	return nil
}

func (x *RealTimeMarketData) GetMarketState() *MarketState {
	if x != nil {
		return x.MarketState
	}
	return nil
}

func (x *RealTimeMarketData) GetCorrectPriceScale() float64 {
	if x != nil && x.CorrectPriceScale != nil {
		return *x.CorrectPriceScale
	}
	return 0
}

// Specific quote information
type Quote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This field is associated with Type enum type.
	Type *uint32 `protobuf:"varint,1,req,name=type" json:"type,omitempty"`
	// Time of the quote (UTC).
	// If time of first quote is not specified quote_utc_times are unknown.
	// Settlement quotes may not have quote_utc_time(even if past_quotes_included=True).
	// If time of snapshot quotes is required, subscribe with include_past_quotes(subscription may be slower).
	// If MarketDataSubscriptionStatus returned with flag past_quotes_included, quotes shall contain valid quote_utc_time.
	// quote_utc_time is set if the time of this quote is different from the previous one in the list of quotes.
	// Several RealTimeMarketData messages can be sent with the same quote_utc_time.
	QuoteUtcTime *int64 `protobuf:"zigzag64,2,opt,name=quote_utc_time,json=quoteUtcTime" json:"quote_utc_time,omitempty"`
	// Quote price.
	ScaledPrice *int64 `protobuf:"zigzag64,3,req,name=scaled_price,json=scaledPrice" json:"scaled_price,omitempty"`
	// Source contract quote price. See MarketDataSubscription.include_source_prices.
	// correct_price_scale from source contract metadata should be used
	// to convert scaled_source_price to correct source price.
	//
	// For Flat and Basis contracts there is no source contract.
	// In this case, use correct_price_scale from this contract metadata
	// to convert scaled_source_price to correct source price.
	// However, scaled_source_price may be imprecise with error up to half a tick due to rounding.
	// Use Price or NetBasis contributor parameters in contract metadata to get precise correct source price.
	ScaledSourcePrice *int64 `protobuf:"zigzag64,8,opt,name=scaled_source_price,json=scaledSourcePrice" json:"scaled_source_price,omitempty"`
	// Yield
	// Included if subscribed and the contract support yields.
	PriceYield *float64 `protobuf:"fixed64,6,opt,name=price_yield,json=priceYield" json:"price_yield,omitempty"`
	// Note: use 'volume' instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/market_data_2.proto.
	ScaledVolume *uint64 `protobuf:"varint,4,opt,name=scaled_volume,json=scaledVolume" json:"scaled_volume,omitempty"`
	// Quote volume.
	// Not set if volume is unknown or if volumes were not requested (see LEVEL_TRADES_BBA for example).
	// Zero volume indicates that the quote has been cleared. It is included even if volumes were not requested.
	Volume *common.Decimal `protobuf:"bytes,11,opt,name=volume" json:"volume,omitempty"`
	// This field is associated with Indicator enum type.
	Indicators []uint32 `protobuf:"varint,5,rep,name=indicators" json:"indicators,omitempty"`
	// This field is associated with SalesCondition enum type.
	SalesCondition *uint32 `protobuf:"varint,7,opt,name=sales_condition,json=salesCondition" json:"sales_condition,omitempty"`
	// Trade attributes.
	TradeAttributes *TradeAttributes `protobuf:"bytes,9,opt,name=trade_attributes,json=tradeAttributes" json:"trade_attributes,omitempty"`
	// Currency price used to calculate scaled prices in this message.
	// correct_price_scale from currency rate contract should be used to get correct price.
	ScaledCurrencyRatePrice *int64 `protobuf:"zigzag64,10,opt,name=scaled_currency_rate_price,json=scaledCurrencyRatePrice" json:"scaled_currency_rate_price,omitempty"`
	// Premium that was added to the quote price. It is rounded to the tick size.
	// correct_price_scale should be used to get premium in correct price format.
	// Premium is calculated as a percent of quote price for bid and ask quotes.
	// Note that scaled_price already includes premium!
	ScaledPremium *int64 `protobuf:"zigzag64,12,opt,name=scaled_premium,json=scaledPremium" json:"scaled_premium,omitempty"`
}

func (x *Quote) Reset() {
	*x = Quote{}
	mi := &file_protos_WebAPI_market_data_2_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Quote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quote) ProtoMessage() {}

func (x *Quote) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_market_data_2_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quote.ProtoReflect.Descriptor instead.
func (*Quote) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_market_data_2_proto_rawDescGZIP(), []int{3}
}

func (x *Quote) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *Quote) GetQuoteUtcTime() int64 {
	if x != nil && x.QuoteUtcTime != nil {
		return *x.QuoteUtcTime
	}
	return 0
}

func (x *Quote) GetScaledPrice() int64 {
	if x != nil && x.ScaledPrice != nil {
		return *x.ScaledPrice
	}
	return 0
}

func (x *Quote) GetScaledSourcePrice() int64 {
	if x != nil && x.ScaledSourcePrice != nil {
		return *x.ScaledSourcePrice
	}
	return 0
}

func (x *Quote) GetPriceYield() float64 {
	if x != nil && x.PriceYield != nil {
		return *x.PriceYield
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/market_data_2.proto.
func (x *Quote) GetScaledVolume() uint64 {
	if x != nil && x.ScaledVolume != nil {
		return *x.ScaledVolume
	}
	return 0
}

func (x *Quote) GetVolume() *common.Decimal {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *Quote) GetIndicators() []uint32 {
	if x != nil {
		return x.Indicators
	}
	return nil
}

func (x *Quote) GetSalesCondition() uint32 {
	if x != nil && x.SalesCondition != nil {
		return *x.SalesCondition
	}
	return 0
}

func (x *Quote) GetTradeAttributes() *TradeAttributes {
	if x != nil {
		return x.TradeAttributes
	}
	return nil
}

func (x *Quote) GetScaledCurrencyRatePrice() int64 {
	if x != nil && x.ScaledCurrencyRatePrice != nil {
		return *x.ScaledCurrencyRatePrice
	}
	return 0
}

func (x *Quote) GetScaledPremium() int64 {
	if x != nil && x.ScaledPremium != nil {
		return *x.ScaledPremium
	}
	return 0
}

// Quote trade attributes.
type TradeAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Buyer contributor id from ContributorMetadata.
	Buyer *int32 `protobuf:"zigzag32,1,opt,name=buyer" json:"buyer,omitempty"`
	// Seller contributor id from ContributorMetadata.
	Seller *int32 `protobuf:"zigzag32,2,opt,name=seller" json:"seller,omitempty"`
	// Quote trade type.
	TradeType *string `protobuf:"bytes,3,opt,name=trade_type,json=tradeType" json:"trade_type,omitempty"`
	// Match ID.
	MatchId *string `protobuf:"bytes,4,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	// UTC agreement time.
	AgreementTimeUtc *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=agreement_time_utc,json=agreementTimeUtc" json:"agreement_time_utc,omitempty"`
}

func (x *TradeAttributes) Reset() {
	*x = TradeAttributes{}
	mi := &file_protos_WebAPI_market_data_2_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradeAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeAttributes) ProtoMessage() {}

func (x *TradeAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_market_data_2_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeAttributes.ProtoReflect.Descriptor instead.
func (*TradeAttributes) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_market_data_2_proto_rawDescGZIP(), []int{4}
}

func (x *TradeAttributes) GetBuyer() int32 {
	if x != nil && x.Buyer != nil {
		return *x.Buyer
	}
	return 0
}

func (x *TradeAttributes) GetSeller() int32 {
	if x != nil && x.Seller != nil {
		return *x.Seller
	}
	return 0
}

func (x *TradeAttributes) GetTradeType() string {
	if x != nil && x.TradeType != nil {
		return *x.TradeType
	}
	return ""
}

func (x *TradeAttributes) GetMatchId() string {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return ""
}

func (x *TradeAttributes) GetAgreementTimeUtc() *timestamppb.Timestamp {
	if x != nil {
		return x.AgreementTimeUtc
	}
	return nil
}

// Market data values of a contract.
// The market values are sent after subscription and when there are changes not reflected in quotes.
// Note that market values do not duplicate the updates sent as quotes. E.g. customers are expected
// to maintain total_volume, tick_volume and OHLC based on quotes and quote indicators.
// If both quotes and market_values are sent in a single RealTimeMarketData update (is_snapshot=False),
// then the order of applying quotes and market_values to a user snapshot doesn't matter.
type MarketValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// First price among all tick types from ContractMetadata.bar_building_tick_types.
	ScaledOpenPrice *int64 `protobuf:"zigzag64,1,opt,name=scaled_open_price,json=scaledOpenPrice" json:"scaled_open_price,omitempty"`
	// Highest price among all tick types from ContractMetadata.bar_building_tick_types.
	ScaledHighPrice *int64 `protobuf:"zigzag64,2,opt,name=scaled_high_price,json=scaledHighPrice" json:"scaled_high_price,omitempty"`
	// Lowest price among all tick types from ContractMetadata.bar_building_tick_types.
	ScaledLowPrice *int64 `protobuf:"zigzag64,3,opt,name=scaled_low_price,json=scaledLowPrice" json:"scaled_low_price,omitempty"`
	// Left for backward compatibility. Sometimes we provide in this field 'scaled_close_price',
	// sometimes - 'scaled_last_price_no_settlement'.
	// Note: use 'scaled_last_price_no_settlement'/'scaled_close_price' instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/market_data_2.proto.
	ScaledLastPrice *int64 `protobuf:"zigzag64,4,opt,name=scaled_last_price,json=scaledLastPrice" json:"scaled_last_price,omitempty"`
	// Close price.
	// Details can be found in enum CloseSource and field ContractMetadata.close_sources from metadata_2.proto file.
	// Contains any last received price, including settlement price.
	ScaledClosePrice *int64 `protobuf:"zigzag64,25,opt,name=scaled_close_price,json=scaledClosePrice" json:"scaled_close_price,omitempty"`
	// Latest price among all tick types from metadata_2.ContractMetadata.bar_building_tick_types,
	// except for BAR_BUILDING_TICK_TYPE_SETTLEMENT. Settlements don't affect last_price.
	// Contains any last received price, excluding settlement price.
	// May not be available for delayed data.
	ScaledLastPriceNoSettlement *int64 `protobuf:"zigzag64,26,opt,name=scaled_last_price_no_settlement,json=scaledLastPriceNoSettlement" json:"scaled_last_price_no_settlement,omitempty"`
	// Exchange close price.
	// May not be available for delayed data.
	ScaledExchangeClosePrice *int64 `protobuf:"zigzag64,27,opt,name=scaled_exchange_close_price,json=scaledExchangeClosePrice" json:"scaled_exchange_close_price,omitempty"`
	// Yesterday settlement price.
	// NOTE: Available for current trading day only.
	ScaledYesterdaySettlement *int64 `protobuf:"zigzag64,5,opt,name=scaled_yesterday_settlement,json=scaledYesterdaySettlement" json:"scaled_yesterday_settlement,omitempty"`
	// Note: use 'total_volume' instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/market_data_2.proto.
	ScaledTotalVolume *uint64 `protobuf:"varint,6,opt,name=scaled_total_volume,json=scaledTotalVolume" json:"scaled_total_volume,omitempty"`
	// Contract total volume.
	TotalVolume *common.Decimal `protobuf:"bytes,21,opt,name=total_volume,json=totalVolume" json:"total_volume,omitempty"`
	// Yesterday last price.
	// Available for current trading day only.
	// Note: Left for backward compatibility.
	// Sometimes this field contains scaled yesterday close price, sometimes - scaled yesterday last.
	// Use MarketValues with day_index=-1 and 'scaled_last_price_no_settlement'/'scaled_close_price' instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/market_data_2.proto.
	ScaledYesterdayLast *int64 `protobuf:"zigzag64,7,opt,name=scaled_yesterday_last,json=scaledYesterdayLast" json:"scaled_yesterday_last,omitempty"`
	// Indicative open price.
	// May not be available for delayed data.
	ScaledIndicativeOpen *int64 `protobuf:"zigzag64,8,opt,name=scaled_indicative_open,json=scaledIndicativeOpen" json:"scaled_indicative_open,omitempty"`
	// Note: use 'indicative_open_volume' instead.
	// May not be available for delayed data.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/market_data_2.proto.
	ScaledIndicativeOpenVolume *uint64 `protobuf:"varint,15,opt,name=scaled_indicative_open_volume,json=scaledIndicativeOpenVolume" json:"scaled_indicative_open_volume,omitempty"`
	// Indicative open volume.
	// May not be available for delayed data.
	IndicativeOpenVolume *common.Decimal `protobuf:"bytes,22,opt,name=indicative_open_volume,json=indicativeOpenVolume" json:"indicative_open_volume,omitempty"`
	// Day index the market values are related to.
	// 0 - most recent trading day, -1 - trading day before most recent trading day, etc.
	// When new trading day starts, WebAPI sends real-time market data snapshot.
	DayIndex *int32 `protobuf:"zigzag32,9,req,name=day_index,json=dayIndex" json:"day_index,omitempty"`
	// Note: use 'open_interest' instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/market_data_2.proto.
	ScaledOpenInterest *int64 `protobuf:"zigzag64,10,opt,name=scaled_open_interest,json=scaledOpenInterest" json:"scaled_open_interest,omitempty"`
	// Open interest.
	OpenInterest *common.Decimal `protobuf:"bytes,23,opt,name=open_interest,json=openInterest" json:"open_interest,omitempty"`
	// Contract tick volume.
	TickVolume *uint32 `protobuf:"varint,11,opt,name=tick_volume,json=tickVolume" json:"tick_volume,omitempty"`
	// Settlement price.
	ScaledSettlement *int64 `protobuf:"zigzag64,12,opt,name=scaled_settlement,json=scaledSettlement" json:"scaled_settlement,omitempty"`
	// Marker price. Also known as PTMMM, Pre-Trade Mid-Market Mark.
	// For cryptocurrency contracts it contains mark price.
	// May not be available for delayed data.
	ScaledMarkerPrice *int64 `protobuf:"zigzag64,18,opt,name=scaled_marker_price,json=scaledMarkerPrice" json:"scaled_marker_price,omitempty"`
	// Last trade price.
	ScaledLastTradePrice *int64 `protobuf:"zigzag64,19,opt,name=scaled_last_trade_price,json=scaledLastTradePrice" json:"scaled_last_trade_price,omitempty"`
	// Last trade volume.
	LastTradeVolume *common.Decimal `protobuf:"bytes,24,opt,name=last_trade_volume,json=lastTradeVolume" json:"last_trade_volume,omitempty"`
	// Time of the last trade (UTC).
	// Has accuracy of a minute or higher.
	LastTradeUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,28,opt,name=last_trade_utc_timestamp,json=lastTradeUtcTimestamp" json:"last_trade_utc_timestamp,omitempty"`
	// Identifiers of fields being cleared.
	// It also specifies to clear corresponding yield values in market_yields.
	ClearedFields []uint32 `protobuf:"varint,13,rep,name=cleared_fields,json=clearedFields" json:"cleared_fields,omitempty"`
	// Trading date the market values belong to.
	TradeDate *int64 `protobuf:"zigzag64,14,req,name=trade_date,json=tradeDate" json:"trade_date,omitempty"`
	// Session index the market values are related to.
	// 0 - first session of the day, 1 - second session of the day, etc.
	SessionIndex *uint32 `protobuf:"varint,17,opt,name=session_index,json=sessionIndex" json:"session_index,omitempty"`
	// Market yields.
	// Included if subscribed and the contract support yields.
	MarketYields *MarketYields `protobuf:"bytes,16,opt,name=market_yields,json=marketYields" json:"market_yields,omitempty"`
	// Currency price used to calculate scaled prices in this message.
	// correct_price_scale from currency rate contract should be used to get correct price.
	ScaledCurrencyRatePrice *int64 `protobuf:"zigzag64,20,opt,name=scaled_currency_rate_price,json=scaledCurrencyRatePrice" json:"scaled_currency_rate_price,omitempty"`
}

func (x *MarketValues) Reset() {
	*x = MarketValues{}
	mi := &file_protos_WebAPI_market_data_2_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarketValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketValues) ProtoMessage() {}

func (x *MarketValues) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_market_data_2_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketValues.ProtoReflect.Descriptor instead.
func (*MarketValues) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_market_data_2_proto_rawDescGZIP(), []int{5}
}

func (x *MarketValues) GetScaledOpenPrice() int64 {
	if x != nil && x.ScaledOpenPrice != nil {
		return *x.ScaledOpenPrice
	}
	return 0
}

func (x *MarketValues) GetScaledHighPrice() int64 {
	if x != nil && x.ScaledHighPrice != nil {
		return *x.ScaledHighPrice
	}
	return 0
}

func (x *MarketValues) GetScaledLowPrice() int64 {
	if x != nil && x.ScaledLowPrice != nil {
		return *x.ScaledLowPrice
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/market_data_2.proto.
func (x *MarketValues) GetScaledLastPrice() int64 {
	if x != nil && x.ScaledLastPrice != nil {
		return *x.ScaledLastPrice
	}
	return 0
}

func (x *MarketValues) GetScaledClosePrice() int64 {
	if x != nil && x.ScaledClosePrice != nil {
		return *x.ScaledClosePrice
	}
	return 0
}

func (x *MarketValues) GetScaledLastPriceNoSettlement() int64 {
	if x != nil && x.ScaledLastPriceNoSettlement != nil {
		return *x.ScaledLastPriceNoSettlement
	}
	return 0
}

func (x *MarketValues) GetScaledExchangeClosePrice() int64 {
	if x != nil && x.ScaledExchangeClosePrice != nil {
		return *x.ScaledExchangeClosePrice
	}
	return 0
}

func (x *MarketValues) GetScaledYesterdaySettlement() int64 {
	if x != nil && x.ScaledYesterdaySettlement != nil {
		return *x.ScaledYesterdaySettlement
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/market_data_2.proto.
func (x *MarketValues) GetScaledTotalVolume() uint64 {
	if x != nil && x.ScaledTotalVolume != nil {
		return *x.ScaledTotalVolume
	}
	return 0
}

func (x *MarketValues) GetTotalVolume() *common.Decimal {
	if x != nil {
		return x.TotalVolume
	}
	return nil
}

// Deprecated: Marked as deprecated in protos/WebAPI/market_data_2.proto.
func (x *MarketValues) GetScaledYesterdayLast() int64 {
	if x != nil && x.ScaledYesterdayLast != nil {
		return *x.ScaledYesterdayLast
	}
	return 0
}

func (x *MarketValues) GetScaledIndicativeOpen() int64 {
	if x != nil && x.ScaledIndicativeOpen != nil {
		return *x.ScaledIndicativeOpen
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/market_data_2.proto.
func (x *MarketValues) GetScaledIndicativeOpenVolume() uint64 {
	if x != nil && x.ScaledIndicativeOpenVolume != nil {
		return *x.ScaledIndicativeOpenVolume
	}
	return 0
}

func (x *MarketValues) GetIndicativeOpenVolume() *common.Decimal {
	if x != nil {
		return x.IndicativeOpenVolume
	}
	return nil
}

func (x *MarketValues) GetDayIndex() int32 {
	if x != nil && x.DayIndex != nil {
		return *x.DayIndex
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/market_data_2.proto.
func (x *MarketValues) GetScaledOpenInterest() int64 {
	if x != nil && x.ScaledOpenInterest != nil {
		return *x.ScaledOpenInterest
	}
	return 0
}

func (x *MarketValues) GetOpenInterest() *common.Decimal {
	if x != nil {
		return x.OpenInterest
	}
	return nil
}

func (x *MarketValues) GetTickVolume() uint32 {
	if x != nil && x.TickVolume != nil {
		return *x.TickVolume
	}
	return 0
}

func (x *MarketValues) GetScaledSettlement() int64 {
	if x != nil && x.ScaledSettlement != nil {
		return *x.ScaledSettlement
	}
	return 0
}

func (x *MarketValues) GetScaledMarkerPrice() int64 {
	if x != nil && x.ScaledMarkerPrice != nil {
		return *x.ScaledMarkerPrice
	}
	return 0
}

func (x *MarketValues) GetScaledLastTradePrice() int64 {
	if x != nil && x.ScaledLastTradePrice != nil {
		return *x.ScaledLastTradePrice
	}
	return 0
}

func (x *MarketValues) GetLastTradeVolume() *common.Decimal {
	if x != nil {
		return x.LastTradeVolume
	}
	return nil
}

func (x *MarketValues) GetLastTradeUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LastTradeUtcTimestamp
	}
	return nil
}

func (x *MarketValues) GetClearedFields() []uint32 {
	if x != nil {
		return x.ClearedFields
	}
	return nil
}

func (x *MarketValues) GetTradeDate() int64 {
	if x != nil && x.TradeDate != nil {
		return *x.TradeDate
	}
	return 0
}

func (x *MarketValues) GetSessionIndex() uint32 {
	if x != nil && x.SessionIndex != nil {
		return *x.SessionIndex
	}
	return 0
}

func (x *MarketValues) GetMarketYields() *MarketYields {
	if x != nil {
		return x.MarketYields
	}
	return nil
}

func (x *MarketValues) GetScaledCurrencyRatePrice() int64 {
	if x != nil && x.ScaledCurrencyRatePrice != nil {
		return *x.ScaledCurrencyRatePrice
	}
	return 0
}

// Market yields of a contract.
type MarketYields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Yield corresponding to open price.
	YieldOfOpenPrice *float64 `protobuf:"fixed64,1,opt,name=yield_of_open_price,json=yieldOfOpenPrice" json:"yield_of_open_price,omitempty"`
	// Yield corresponding to high price.
	YieldOfHighPrice *float64 `protobuf:"fixed64,2,opt,name=yield_of_high_price,json=yieldOfHighPrice" json:"yield_of_high_price,omitempty"`
	// Yield corresponding to low price.
	YieldOfLowPrice *float64 `protobuf:"fixed64,3,opt,name=yield_of_low_price,json=yieldOfLowPrice" json:"yield_of_low_price,omitempty"`
	// Yield corresponding to last price.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/market_data_2.proto.
	YieldOfLastPrice *float64 `protobuf:"fixed64,4,opt,name=yield_of_last_price,json=yieldOfLastPrice" json:"yield_of_last_price,omitempty"`
	// Yield corresponding to close price.
	YieldOfClosePrice *float64 `protobuf:"fixed64,9,opt,name=yield_of_close_price,json=yieldOfClosePrice" json:"yield_of_close_price,omitempty"`
	// Yield corresponding to last price without settlement.
	YieldOfLastPriceNoSettlement *float64 `protobuf:"fixed64,10,opt,name=yield_of_last_price_no_settlement,json=yieldOfLastPriceNoSettlement" json:"yield_of_last_price_no_settlement,omitempty"`
	// Yield corresponding to exchange close price.
	YieldOfExchangeClosePrice *float64 `protobuf:"fixed64,11,opt,name=yield_of_exchange_close_price,json=yieldOfExchangeClosePrice" json:"yield_of_exchange_close_price,omitempty"`
	// Yesterday settlement yield.
	// NOTE: Available for current trading day only.
	YieldOfYesterdaySettlement *float64 `protobuf:"fixed64,5,opt,name=yield_of_yesterday_settlement,json=yieldOfYesterdaySettlement" json:"yield_of_yesterday_settlement,omitempty"`
	// Yesterday last yield.
	// NOTE: Available for current trading day only.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/market_data_2.proto.
	YieldOfYesterdayLast *float64 `protobuf:"fixed64,6,opt,name=yield_of_yesterday_last,json=yieldOfYesterdayLast" json:"yield_of_yesterday_last,omitempty"`
	// Indicative open yield.
	YieldOfIndicativeOpen *float64 `protobuf:"fixed64,7,opt,name=yield_of_indicative_open,json=yieldOfIndicativeOpen" json:"yield_of_indicative_open,omitempty"`
	// Settlement yield.
	YieldOfSettlement *float64 `protobuf:"fixed64,8,opt,name=yield_of_settlement,json=yieldOfSettlement" json:"yield_of_settlement,omitempty"`
}

func (x *MarketYields) Reset() {
	*x = MarketYields{}
	mi := &file_protos_WebAPI_market_data_2_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarketYields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketYields) ProtoMessage() {}

func (x *MarketYields) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_market_data_2_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketYields.ProtoReflect.Descriptor instead.
func (*MarketYields) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_market_data_2_proto_rawDescGZIP(), []int{6}
}

func (x *MarketYields) GetYieldOfOpenPrice() float64 {
	if x != nil && x.YieldOfOpenPrice != nil {
		return *x.YieldOfOpenPrice
	}
	return 0
}

func (x *MarketYields) GetYieldOfHighPrice() float64 {
	if x != nil && x.YieldOfHighPrice != nil {
		return *x.YieldOfHighPrice
	}
	return 0
}

func (x *MarketYields) GetYieldOfLowPrice() float64 {
	if x != nil && x.YieldOfLowPrice != nil {
		return *x.YieldOfLowPrice
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/market_data_2.proto.
func (x *MarketYields) GetYieldOfLastPrice() float64 {
	if x != nil && x.YieldOfLastPrice != nil {
		return *x.YieldOfLastPrice
	}
	return 0
}

func (x *MarketYields) GetYieldOfClosePrice() float64 {
	if x != nil && x.YieldOfClosePrice != nil {
		return *x.YieldOfClosePrice
	}
	return 0
}

func (x *MarketYields) GetYieldOfLastPriceNoSettlement() float64 {
	if x != nil && x.YieldOfLastPriceNoSettlement != nil {
		return *x.YieldOfLastPriceNoSettlement
	}
	return 0
}

func (x *MarketYields) GetYieldOfExchangeClosePrice() float64 {
	if x != nil && x.YieldOfExchangeClosePrice != nil {
		return *x.YieldOfExchangeClosePrice
	}
	return 0
}

func (x *MarketYields) GetYieldOfYesterdaySettlement() float64 {
	if x != nil && x.YieldOfYesterdaySettlement != nil {
		return *x.YieldOfYesterdaySettlement
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/market_data_2.proto.
func (x *MarketYields) GetYieldOfYesterdayLast() float64 {
	if x != nil && x.YieldOfYesterdayLast != nil {
		return *x.YieldOfYesterdayLast
	}
	return 0
}

func (x *MarketYields) GetYieldOfIndicativeOpen() float64 {
	if x != nil && x.YieldOfIndicativeOpen != nil {
		return *x.YieldOfIndicativeOpen
	}
	return 0
}

func (x *MarketYields) GetYieldOfSettlement() float64 {
	if x != nil && x.YieldOfSettlement != nil {
		return *x.YieldOfSettlement
	}
	return 0
}

// Request at-the-money strike for the option maturity.
type AtTheMoneyStrikeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the option maturity representing option strike list of the same underlying and maturity period
	// (see OptionMaturityMetadata.id).
	OptionMaturityId *string `protobuf:"bytes,1,req,name=option_maturity_id,json=optionMaturityId" json:"option_maturity_id,omitempty"`
}

func (x *AtTheMoneyStrikeRequest) Reset() {
	*x = AtTheMoneyStrikeRequest{}
	mi := &file_protos_WebAPI_market_data_2_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AtTheMoneyStrikeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AtTheMoneyStrikeRequest) ProtoMessage() {}

func (x *AtTheMoneyStrikeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_market_data_2_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AtTheMoneyStrikeRequest.ProtoReflect.Descriptor instead.
func (*AtTheMoneyStrikeRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_market_data_2_proto_rawDescGZIP(), []int{7}
}

func (x *AtTheMoneyStrikeRequest) GetOptionMaturityId() string {
	if x != nil && x.OptionMaturityId != nil {
		return *x.OptionMaturityId
	}
	return ""
}

// Report with at-the-money strikes.
type AtTheMoneyStrikeReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Option at-the-money strike.
	// It is omitted if at-the-money strike cannot be calculated at the moment (e.g. due to lack of real time data).
	Strike *int32 `protobuf:"zigzag32,1,opt,name=strike" json:"strike,omitempty"`
}

func (x *AtTheMoneyStrikeReport) Reset() {
	*x = AtTheMoneyStrikeReport{}
	mi := &file_protos_WebAPI_market_data_2_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AtTheMoneyStrikeReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AtTheMoneyStrikeReport) ProtoMessage() {}

func (x *AtTheMoneyStrikeReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_market_data_2_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AtTheMoneyStrikeReport.ProtoReflect.Descriptor instead.
func (*AtTheMoneyStrikeReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_market_data_2_proto_rawDescGZIP(), []int{8}
}

func (x *AtTheMoneyStrikeReport) GetStrike() int32 {
	if x != nil && x.Strike != nil {
		return *x.Strike
	}
	return 0
}

// Describes separate orders at price levels.
// Detailed DOM updates (snapshot or not) can come in several DetailedDOM messages. The first will have
// RealTimeMarketData.is_snapshot set, the rest will come as updates. The last will have
// DetailedDOM.is_detailed_dom_complete set.
// Update for a price level cannot be split into several messages.
// Updates must be applied in the order they listed in.
type DetailedDOM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if this message is the last in the series of DetailedDOM updates (snapshot or not) for a contract.
	IsDetailedDomComplete *bool `protobuf:"varint,1,opt,name=is_detailed_dom_complete,json=isDetailedDomComplete" json:"is_detailed_dom_complete,omitempty"`
	// True if the DOM is stale, i.e. has become obsolete and is not being updated at the moment.
	// A new DetailedDOM message with is_stale = false will be sent when data is fixed.
	IsStale *bool `protobuf:"varint,2,opt,name=is_stale,json=isStale" json:"is_stale,omitempty"`
	// If true, the data for this message should be entirely replaced with 'price_levels' contents.
	IsSnapshot *bool `protobuf:"varint,3,opt,name=is_snapshot,json=isSnapshot" json:"is_snapshot,omitempty"`
	// Price level updates.
	PriceLevels []*DetailedDOMAtPrice `protobuf:"bytes,4,rep,name=price_levels,json=priceLevels" json:"price_levels,omitempty"`
}

func (x *DetailedDOM) Reset() {
	*x = DetailedDOM{}
	mi := &file_protos_WebAPI_market_data_2_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DetailedDOM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailedDOM) ProtoMessage() {}

func (x *DetailedDOM) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_market_data_2_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailedDOM.ProtoReflect.Descriptor instead.
func (*DetailedDOM) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_market_data_2_proto_rawDescGZIP(), []int{9}
}

func (x *DetailedDOM) GetIsDetailedDomComplete() bool {
	if x != nil && x.IsDetailedDomComplete != nil {
		return *x.IsDetailedDomComplete
	}
	return false
}

func (x *DetailedDOM) GetIsStale() bool {
	if x != nil && x.IsStale != nil {
		return *x.IsStale
	}
	return false
}

func (x *DetailedDOM) GetIsSnapshot() bool {
	if x != nil && x.IsSnapshot != nil {
		return *x.IsSnapshot
	}
	return false
}

func (x *DetailedDOM) GetPriceLevels() []*DetailedDOMAtPrice {
	if x != nil {
		return x.PriceLevels
	}
	return nil
}

// Either snapshot of orders at a price level or incremental update.
type DetailedDOMAtPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Price level described by this message.
	// Price is absent for No-price Orders.
	ScaledPrice *int64 `protobuf:"zigzag64,1,opt,name=scaled_price,json=scaledPrice" json:"scaled_price,omitempty"`
	// Side of this price level. SIDE_BUY or SIDE_SELL.
	// This field is associated with Order.Side enum type.
	Side *uint32 `protobuf:"varint,2,req,name=side" json:"side,omitempty"`
	// If true, the data for this price level should be entirely replaced with 'orders' contents.
	IsSnapshot *bool `protobuf:"varint,3,opt,name=is_snapshot,json=isSnapshot" json:"is_snapshot,omitempty"`
	// All orders at the price level, if is_snapshot is true, or changes to the price level, otherwise.
	Orders []*DetailedDOMOrder `protobuf:"bytes,4,rep,name=orders" json:"orders,omitempty"`
}

func (x *DetailedDOMAtPrice) Reset() {
	*x = DetailedDOMAtPrice{}
	mi := &file_protos_WebAPI_market_data_2_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DetailedDOMAtPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailedDOMAtPrice) ProtoMessage() {}

func (x *DetailedDOMAtPrice) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_market_data_2_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailedDOMAtPrice.ProtoReflect.Descriptor instead.
func (*DetailedDOMAtPrice) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_market_data_2_proto_rawDescGZIP(), []int{10}
}

func (x *DetailedDOMAtPrice) GetScaledPrice() int64 {
	if x != nil && x.ScaledPrice != nil {
		return *x.ScaledPrice
	}
	return 0
}

func (x *DetailedDOMAtPrice) GetSide() uint32 {
	if x != nil && x.Side != nil {
		return *x.Side
	}
	return 0
}

func (x *DetailedDOMAtPrice) GetIsSnapshot() bool {
	if x != nil && x.IsSnapshot != nil {
		return *x.IsSnapshot
	}
	return false
}

func (x *DetailedDOMAtPrice) GetOrders() []*DetailedDOMOrder {
	if x != nil {
		return x.Orders
	}
	return nil
}

// A single order or change to an existing order (depending on DetailedDOMAtPrice.is_snapshot).
type DetailedDOMOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Same as OrderStatus.detailed_dom_order_id.
	// The field is also non-empty for other users' orders. So, to determine user's place in orders
	// queue user must check if this is his order using the contract_id and detailed_dom_order_id pair.
	DetailedDomOrderId *string `protobuf:"bytes,1,req,name=detailed_dom_order_id,json=detailedDomOrderId" json:"detailed_dom_order_id,omitempty"`
	// Associated with Operation enum.
	Operation *uint32 `protobuf:"varint,2,opt,name=operation" json:"operation,omitempty"`
	// Order Index at the price level.
	// It is the index after all updates up to this one have been applied.
	// The index is specified only if it cannot be deduced:
	//   - for INSERT operation it is omitted if equals order_index in previous DetailedDOMOrder plus 1;
	//   - for MODIFY operation it is specified if order place relative to other orders in a price level changed.
	OrderIndex *uint32 `protobuf:"varint,3,opt,name=order_index,json=orderIndex" json:"order_index,omitempty"`
	// Note: use 'volume' instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/market_data_2.proto.
	ScaledVolume *uint64 `protobuf:"varint,5,opt,name=scaled_volume,json=scaledVolume" json:"scaled_volume,omitempty"`
	// Order volume, if changed or new order.
	Volume *common.Decimal `protobuf:"bytes,7,opt,name=volume" json:"volume,omitempty"`
	// If True, then order is Implied.
	Implied *bool `protobuf:"varint,8,opt,name=implied" json:"implied,omitempty"`
	// Contributor id from ContributorMetadata.
	ContributorId *int32 `protobuf:"zigzag32,9,opt,name=contributor_id,json=contributorId" json:"contributor_id,omitempty"`
}

func (x *DetailedDOMOrder) Reset() {
	*x = DetailedDOMOrder{}
	mi := &file_protos_WebAPI_market_data_2_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DetailedDOMOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailedDOMOrder) ProtoMessage() {}

func (x *DetailedDOMOrder) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_market_data_2_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailedDOMOrder.ProtoReflect.Descriptor instead.
func (*DetailedDOMOrder) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_market_data_2_proto_rawDescGZIP(), []int{11}
}

func (x *DetailedDOMOrder) GetDetailedDomOrderId() string {
	if x != nil && x.DetailedDomOrderId != nil {
		return *x.DetailedDomOrderId
	}
	return ""
}

func (x *DetailedDOMOrder) GetOperation() uint32 {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return 0
}

func (x *DetailedDOMOrder) GetOrderIndex() uint32 {
	if x != nil && x.OrderIndex != nil {
		return *x.OrderIndex
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/market_data_2.proto.
func (x *DetailedDOMOrder) GetScaledVolume() uint64 {
	if x != nil && x.ScaledVolume != nil {
		return *x.ScaledVolume
	}
	return 0
}

func (x *DetailedDOMOrder) GetVolume() *common.Decimal {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *DetailedDOMOrder) GetImplied() bool {
	if x != nil && x.Implied != nil {
		return *x.Implied
	}
	return false
}

func (x *DetailedDOMOrder) GetContributorId() int32 {
	if x != nil && x.ContributorId != nil {
		return *x.ContributorId
	}
	return 0
}

// Request for quotation (RFQ).
type RFQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Exchange ID of the request.
	ExchangeRequestId *string `protobuf:"bytes,1,opt,name=exchange_request_id,json=exchangeRequestId" json:"exchange_request_id,omitempty"`
	// Timestamp provided by exchange (UTC).
	UtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=utc_timestamp,json=utcTimestamp" json:"utc_timestamp,omitempty"`
	// Specifies side of active RFQ.
	// This field is associated with Side enum type.
	Side *uint32 `protobuf:"varint,3,opt,name=side" json:"side,omitempty"`
	// RFQ volume.
	Volume *common.Decimal `protobuf:"bytes,4,opt,name=volume" json:"volume,omitempty"`
	// Expiration time provided by exchange (UTC).
	ExpirationUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=expiration_utc_timestamp,json=expirationUtcTimestamp" json:"expiration_utc_timestamp,omitempty"`
}

func (x *RFQ) Reset() {
	*x = RFQ{}
	mi := &file_protos_WebAPI_market_data_2_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RFQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RFQ) ProtoMessage() {}

func (x *RFQ) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_market_data_2_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RFQ.ProtoReflect.Descriptor instead.
func (*RFQ) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_market_data_2_proto_rawDescGZIP(), []int{12}
}

func (x *RFQ) GetExchangeRequestId() string {
	if x != nil && x.ExchangeRequestId != nil {
		return *x.ExchangeRequestId
	}
	return ""
}

func (x *RFQ) GetUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.UtcTimestamp
	}
	return nil
}

func (x *RFQ) GetSide() uint32 {
	if x != nil && x.Side != nil {
		return *x.Side
	}
	return 0
}

func (x *RFQ) GetVolume() *common.Decimal {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *RFQ) GetExpirationUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationUtcTimestamp
	}
	return nil
}

// RFQ request. Used to create RFQ on market.
type RFQRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Client ID of the request.
	// It is a required field.
	ClientRequestId *uint32 `protobuf:"varint,1,opt,name=client_request_id,json=clientRequestId" json:"client_request_id,omitempty"`
	// Id of an account that is used to request quote.
	// It is a required field.
	AccountId *int32 `protobuf:"zigzag32,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// Contract id.
	// It is a required field.
	ContractId *uint32 `protobuf:"varint,3,opt,name=contract_id,json=contractId" json:"contract_id,omitempty"`
	// Is the request entered manually.
	// False or omitted means that request is created by automated system.
	IsManual *bool `protobuf:"varint,4,opt,name=is_manual,json=isManual" json:"is_manual,omitempty"`
	// Specifies side of requested quote. Default value is RFQ.SIDE_ANY.
	// This field is associated with RFQ.Side enum type.
	Side *uint32 `protobuf:"varint,5,opt,name=side" json:"side,omitempty"`
	// Specifies size of requested quote. Unspecified value means "doesn't matter".
	Size *common.Decimal `protobuf:"bytes,6,opt,name=size" json:"size,omitempty"`
	// Time when RFQ should be created (UTC).
	ExecutionUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=execution_utc_timestamp,json=executionUtcTimestamp" json:"execution_utc_timestamp,omitempty"`
	// Regulatory Algorithm ID for client algorithm associated with this request, if any.
	// This field is applicable only for exchanges that use it, e.g. Eurex.
	ClientRegulatoryAlgorithmId *uint32 `protobuf:"varint,8,opt,name=client_regulatory_algorithm_id,json=clientRegulatoryAlgorithmId" json:"client_regulatory_algorithm_id,omitempty"`
	// Quote request expiration date/time (UTC).
	// Note: there is no way to cancel RFQ. The only way to manage its lifetime is to set expiration_utc_timestamp.
	ExpirationUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=expiration_utc_timestamp,json=expirationUtcTimestamp" json:"expiration_utc_timestamp,omitempty"`
}

func (x *RFQRequest) Reset() {
	*x = RFQRequest{}
	mi := &file_protos_WebAPI_market_data_2_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RFQRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RFQRequest) ProtoMessage() {}

func (x *RFQRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_market_data_2_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RFQRequest.ProtoReflect.Descriptor instead.
func (*RFQRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_market_data_2_proto_rawDescGZIP(), []int{13}
}

func (x *RFQRequest) GetClientRequestId() uint32 {
	if x != nil && x.ClientRequestId != nil {
		return *x.ClientRequestId
	}
	return 0
}

func (x *RFQRequest) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *RFQRequest) GetContractId() uint32 {
	if x != nil && x.ContractId != nil {
		return *x.ContractId
	}
	return 0
}

func (x *RFQRequest) GetIsManual() bool {
	if x != nil && x.IsManual != nil {
		return *x.IsManual
	}
	return false
}

func (x *RFQRequest) GetSide() uint32 {
	if x != nil && x.Side != nil {
		return *x.Side
	}
	return 0
}

func (x *RFQRequest) GetSize() *common.Decimal {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *RFQRequest) GetExecutionUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ExecutionUtcTimestamp
	}
	return nil
}

func (x *RFQRequest) GetClientRegulatoryAlgorithmId() uint32 {
	if x != nil && x.ClientRegulatoryAlgorithmId != nil {
		return *x.ClientRegulatoryAlgorithmId
	}
	return 0
}

func (x *RFQRequest) GetExpirationUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationUtcTimestamp
	}
	return nil
}

// Result of RFQ request.
type RFQReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Client ID of the request.
	// It is a required field.
	ClientRequestId *uint32 `protobuf:"varint,1,opt,name=client_request_id,json=clientRequestId" json:"client_request_id,omitempty"`
	// Exchange ID of the request.
	// It's set if status_code = STATUS_CODE_SUCCESS.
	ExchangeRequestId *string `protobuf:"bytes,2,opt,name=exchange_request_id,json=exchangeRequestId" json:"exchange_request_id,omitempty"`
	// Status code.
	// This field is associated with StatusCode enum type.
	StatusCode *uint32 `protobuf:"varint,3,opt,name=status_code,json=statusCode" json:"status_code,omitempty"`
	// Optional failure details.
	Details *common.Text `protobuf:"bytes,4,opt,name=details" json:"details,omitempty"`
	// Regulatory Algorithm ID actually sent to the exchange for this request, if any.
	// Will differ from client_regulatory_algorithm_id if any CQG algorithm was applied to the order.
	EffectiveRegulatoryAlgorithmId *uint32 `protobuf:"varint,5,opt,name=effective_regulatory_algorithm_id,json=effectiveRegulatoryAlgorithmId" json:"effective_regulatory_algorithm_id,omitempty"`
}

func (x *RFQReport) Reset() {
	*x = RFQReport{}
	mi := &file_protos_WebAPI_market_data_2_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RFQReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RFQReport) ProtoMessage() {}

func (x *RFQReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_market_data_2_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RFQReport.ProtoReflect.Descriptor instead.
func (*RFQReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_market_data_2_proto_rawDescGZIP(), []int{14}
}

func (x *RFQReport) GetClientRequestId() uint32 {
	if x != nil && x.ClientRequestId != nil {
		return *x.ClientRequestId
	}
	return 0
}

func (x *RFQReport) GetExchangeRequestId() string {
	if x != nil && x.ExchangeRequestId != nil {
		return *x.ExchangeRequestId
	}
	return ""
}

func (x *RFQReport) GetStatusCode() uint32 {
	if x != nil && x.StatusCode != nil {
		return *x.StatusCode
	}
	return 0
}

func (x *RFQReport) GetDetails() *common.Text {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *RFQReport) GetEffectiveRegulatoryAlgorithmId() uint32 {
	if x != nil && x.EffectiveRegulatoryAlgorithmId != nil {
		return *x.EffectiveRegulatoryAlgorithmId
	}
	return 0
}

// Specifies market state for placing orders.
// If empty then state is temporary unknown.
type MarketState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Current trading session state and allowed order actions.
	// If omitted then there are exchange specific market state changes that do not affect the trading state.
	TradingState *TradingState `protobuf:"bytes,1,opt,name=trading_state,json=tradingState" json:"trading_state,omitempty"`
	// Array of exchange specific market state elements.
	ExchangeSpecifics []*ExchangeSpecificMarketState `protobuf:"bytes,2,rep,name=exchange_specifics,json=exchangeSpecifics" json:"exchange_specifics,omitempty"`
	// True if this is a snapshot (previously known market state for this contract should be cleaned).
	IsSnapshot *bool `protobuf:"varint,3,opt,name=is_snapshot,json=isSnapshot" json:"is_snapshot,omitempty"`
}

func (x *MarketState) Reset() {
	*x = MarketState{}
	mi := &file_protos_WebAPI_market_data_2_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarketState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketState) ProtoMessage() {}

func (x *MarketState) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_market_data_2_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketState.ProtoReflect.Descriptor instead.
func (*MarketState) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_market_data_2_proto_rawDescGZIP(), []int{15}
}

func (x *MarketState) GetTradingState() *TradingState {
	if x != nil {
		return x.TradingState
	}
	return nil
}

func (x *MarketState) GetExchangeSpecifics() []*ExchangeSpecificMarketState {
	if x != nil {
		return x.ExchangeSpecifics
	}
	return nil
}

func (x *MarketState) GetIsSnapshot() bool {
	if x != nil && x.IsSnapshot != nil {
		return *x.IsSnapshot
	}
	return false
}

// Specifies trading session state and allowed order actions.
type TradingState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates the current exchange state.
	// This field is associated with ExchangeState enum type.
	// If omitted then exchange's provided state information is out of generic ExchangeState enum list.
	// Clients should use ExchangeSpecificMarketState to get detailed exchange state information.
	ExchangeState *uint32 `protobuf:"varint,1,opt,name=exchange_state,json=exchangeState" json:"exchange_state,omitempty"`
	// Indicates that order placing is allowed.
	// Note that exchanges may have more detailed rules limiting the type of order, duration, etc. that is allowed.
	// Clients should use ExchangeSpecificMarketState if they need to implement/display those detailed rules.
	AllowPlaceOrder *bool `protobuf:"varint,2,opt,name=allow_place_order,json=allowPlaceOrder" json:"allow_place_order,omitempty"`
	// Indicates that order canceling is allowed.
	// Note that exchanges may have more detailed rules limiting which orders may be canceled.
	// Clients should use ExchangeSpecificMarketState if they need to implement/display those detailed rules.
	AllowCancelOrder *bool `protobuf:"varint,3,opt,name=allow_cancel_order,json=allowCancelOrder" json:"allow_cancel_order,omitempty"`
	// Indicates that order modification is allowed.
	// Note that exchanges may have more detailed rules limiting which modifies are allowed.
	// Clients should use ExchangeSpecificMarketState if they need to implement/display those detailed rules.
	AllowModifyOrder *bool `protobuf:"varint,4,opt,name=allow_modify_order,json=allowModifyOrder" json:"allow_modify_order,omitempty"`
	// Indicates that continuous trading is occurring at the exchange.
	MatchingEnabled *bool `protobuf:"varint,5,opt,name=matching_enabled,json=matchingEnabled" json:"matching_enabled,omitempty"`
}

func (x *TradingState) Reset() {
	*x = TradingState{}
	mi := &file_protos_WebAPI_market_data_2_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradingState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingState) ProtoMessage() {}

func (x *TradingState) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_market_data_2_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingState.ProtoReflect.Descriptor instead.
func (*TradingState) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_market_data_2_proto_rawDescGZIP(), []int{16}
}

func (x *TradingState) GetExchangeState() uint32 {
	if x != nil && x.ExchangeState != nil {
		return *x.ExchangeState
	}
	return 0
}

func (x *TradingState) GetAllowPlaceOrder() bool {
	if x != nil && x.AllowPlaceOrder != nil {
		return *x.AllowPlaceOrder
	}
	return false
}

func (x *TradingState) GetAllowCancelOrder() bool {
	if x != nil && x.AllowCancelOrder != nil {
		return *x.AllowCancelOrder
	}
	return false
}

func (x *TradingState) GetAllowModifyOrder() bool {
	if x != nil && x.AllowModifyOrder != nil {
		return *x.AllowModifyOrder
	}
	return false
}

func (x *TradingState) GetMatchingEnabled() bool {
	if x != nil && x.MatchingEnabled != nil {
		return *x.MatchingEnabled
	}
	return false
}

// Exchange specific market state element represented by tag/value pair.
// Array of the elements describes entire market state.
type ExchangeSpecificMarketState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The market state element tag. Not all exchanges provide it.
	Tag *string `protobuf:"bytes,1,opt,name=tag" json:"tag,omitempty"`
	// The market state element value.
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *ExchangeSpecificMarketState) Reset() {
	*x = ExchangeSpecificMarketState{}
	mi := &file_protos_WebAPI_market_data_2_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExchangeSpecificMarketState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeSpecificMarketState) ProtoMessage() {}

func (x *ExchangeSpecificMarketState) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_market_data_2_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeSpecificMarketState.ProtoReflect.Descriptor instead.
func (*ExchangeSpecificMarketState) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_market_data_2_proto_rawDescGZIP(), []int{17}
}

func (x *ExchangeSpecificMarketState) GetTag() string {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return ""
}

func (x *ExchangeSpecificMarketState) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// Parameters of OptionCalculationRequest
type OptionCalculationParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the option maturity representing option strike list of the same underlying and maturity period
	// (see OptionMaturityMetadata.id).
	OptionMaturityId *string `protobuf:"bytes,1,opt,name=option_maturity_id,json=optionMaturityId" json:"option_maturity_id,omitempty"`
	// Server side contract identifiers. Leave it empty to request all strikes for the given maturity.
	StrikeContractIds []uint32 `protobuf:"varint,2,rep,name=strike_contract_ids,json=strikeContractIds" json:"strike_contract_ids,omitempty"`
	// Optional OTC contributor ID for contributor specific data subscriptions.
	ContributorId *string `protobuf:"bytes,3,opt,name=contributor_id,json=contributorId" json:"contributor_id,omitempty"`
}

func (x *OptionCalculationParameters) Reset() {
	*x = OptionCalculationParameters{}
	mi := &file_protos_WebAPI_market_data_2_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OptionCalculationParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionCalculationParameters) ProtoMessage() {}

func (x *OptionCalculationParameters) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_market_data_2_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionCalculationParameters.ProtoReflect.Descriptor instead.
func (*OptionCalculationParameters) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_market_data_2_proto_rawDescGZIP(), []int{18}
}

func (x *OptionCalculationParameters) GetOptionMaturityId() string {
	if x != nil && x.OptionMaturityId != nil {
		return *x.OptionMaturityId
	}
	return ""
}

func (x *OptionCalculationParameters) GetStrikeContractIds() []uint32 {
	if x != nil {
		return x.StrikeContractIds
	}
	return nil
}

func (x *OptionCalculationParameters) GetContributorId() string {
	if x != nil && x.ContributorId != nil {
		return *x.ContributorId
	}
	return ""
}

// Request for Greeks and other option calculations
type OptionCalculationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the request. Cannot be empty.
	RequestId *uint32 `protobuf:"varint,1,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	// Request parameters.
	OptionCalculationParameters *OptionCalculationParameters `protobuf:"bytes,2,opt,name=option_calculation_parameters,json=optionCalculationParameters" json:"option_calculation_parameters,omitempty"`
	// This field is associated with RequestType enum type.
	// REQUEST_TYPE_SUBSCRIBE operation is processed by default.
	RequestType *uint32 `protobuf:"varint,3,opt,name=request_type,json=requestType" json:"request_type,omitempty"`
}

func (x *OptionCalculationRequest) Reset() {
	*x = OptionCalculationRequest{}
	mi := &file_protos_WebAPI_market_data_2_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OptionCalculationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionCalculationRequest) ProtoMessage() {}

func (x *OptionCalculationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_market_data_2_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionCalculationRequest.ProtoReflect.Descriptor instead.
func (*OptionCalculationRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_market_data_2_proto_rawDescGZIP(), []int{19}
}

func (x *OptionCalculationRequest) GetRequestId() uint32 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *OptionCalculationRequest) GetOptionCalculationParameters() *OptionCalculationParameters {
	if x != nil {
		return x.OptionCalculationParameters
	}
	return nil
}

func (x *OptionCalculationRequest) GetRequestType() uint32 {
	if x != nil && x.RequestType != nil {
		return *x.RequestType
	}
	return 0
}

// Calculated values
type OptionCalculationValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Server side contract id.
	StrikeContractId *uint32 `protobuf:"varint,1,opt,name=strike_contract_id,json=strikeContractId" json:"strike_contract_id,omitempty"`
	// The most recent price of the underlying instrument at the time of the option contract price used in calculations.
	ScaledCoherentUnderlyingPrice *int64 `protobuf:"zigzag64,2,opt,name=scaled_coherent_underlying_price,json=scaledCoherentUnderlyingPrice" json:"scaled_coherent_underlying_price,omitempty"`
	// Calculated Implied Volatility in percents.
	ImpliedVolatility *float64 `protobuf:"fixed64,3,opt,name=implied_volatility,json=impliedVolatility" json:"implied_volatility,omitempty"`
	// Calculated Theoretical Price in correct price format.
	Theov *float64 `protobuf:"fixed64,4,opt,name=theov" json:"theov,omitempty"`
	// Calculated Delta Greek value in percents.
	// Represents the ratio of the change in the correct theoretical price
	// over the change in the correct underlying price.
	Delta *float64 `protobuf:"fixed64,5,opt,name=delta" json:"delta,omitempty"`
	// Calculated Gamma Greek value in percents.
	// Represents Delta Greek change which occurs if correct underlying price increases by 1.
	// Correct underlying price can be calculated by multiplying OptionCalculationReport.scaled_underlying_price
	// by correct_price_scale of the underlying contract.
	Gamma *float64 `protobuf:"fixed64,6,opt,name=gamma" json:"gamma,omitempty"`
	// Calculated Vega Greek value.
	// Represents correct theoretical price change which occurs if Implied Volatility increases by 1%.
	Vega *float64 `protobuf:"fixed64,7,opt,name=vega" json:"vega,omitempty"`
	// Calculated Theta Greek value.
	// Represents correct theoretical price change which occurs if number of days to expiration decreases by one day.
	Theta *float64 `protobuf:"fixed64,8,opt,name=theta" json:"theta,omitempty"`
	// Calculated Rho Greek value.
	// Represents correct theoretical price change which occurs if Interest Rate increases by 1%.
	Rho *float64 `protobuf:"fixed64,9,opt,name=rho" json:"rho,omitempty"`
	// Deleted flag is used in updates when entity is removed.
	// Only strike_contract_id will be provided in this case.
	Deleted *bool `protobuf:"varint,10,opt,name=deleted" json:"deleted,omitempty"`
}

func (x *OptionCalculationValues) Reset() {
	*x = OptionCalculationValues{}
	mi := &file_protos_WebAPI_market_data_2_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OptionCalculationValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionCalculationValues) ProtoMessage() {}

func (x *OptionCalculationValues) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_market_data_2_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionCalculationValues.ProtoReflect.Descriptor instead.
func (*OptionCalculationValues) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_market_data_2_proto_rawDescGZIP(), []int{20}
}

func (x *OptionCalculationValues) GetStrikeContractId() uint32 {
	if x != nil && x.StrikeContractId != nil {
		return *x.StrikeContractId
	}
	return 0
}

func (x *OptionCalculationValues) GetScaledCoherentUnderlyingPrice() int64 {
	if x != nil && x.ScaledCoherentUnderlyingPrice != nil {
		return *x.ScaledCoherentUnderlyingPrice
	}
	return 0
}

func (x *OptionCalculationValues) GetImpliedVolatility() float64 {
	if x != nil && x.ImpliedVolatility != nil {
		return *x.ImpliedVolatility
	}
	return 0
}

func (x *OptionCalculationValues) GetTheov() float64 {
	if x != nil && x.Theov != nil {
		return *x.Theov
	}
	return 0
}

func (x *OptionCalculationValues) GetDelta() float64 {
	if x != nil && x.Delta != nil {
		return *x.Delta
	}
	return 0
}

func (x *OptionCalculationValues) GetGamma() float64 {
	if x != nil && x.Gamma != nil {
		return *x.Gamma
	}
	return 0
}

func (x *OptionCalculationValues) GetVega() float64 {
	if x != nil && x.Vega != nil {
		return *x.Vega
	}
	return 0
}

func (x *OptionCalculationValues) GetTheta() float64 {
	if x != nil && x.Theta != nil {
		return *x.Theta
	}
	return 0
}

func (x *OptionCalculationValues) GetRho() float64 {
	if x != nil && x.Rho != nil {
		return *x.Rho
	}
	return 0
}

func (x *OptionCalculationValues) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

// Option calculation response
type OptionCalculationReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Request ID.
	RequestId *uint32 `protobuf:"varint,1,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	// Subscription result.
	// This field is associated with StatusCode enum type.
	StatusCode *uint32 `protobuf:"varint,2,opt,name=status_code,json=statusCode" json:"status_code,omitempty"`
	// Timestamp of the latest event that caused calculations included in this report.
	UpToUtcTime *int64 `protobuf:"varint,3,opt,name=up_to_utc_time,json=upToUtcTime" json:"up_to_utc_time,omitempty"`
	// Interest Rate is the latest price of the most active future contract determined
	// by the currency of the option contract. E.g. interest rate for options traded
	// in USD is the latest price of the most active Eurodollar Futures.
	// Interest Rate within a range (0;1], where 1 means 100%, 0.1 means 10%.
	InterestRate *float64 `protobuf:"fixed64,4,opt,name=interest_rate,json=interestRate" json:"interest_rate,omitempty"`
	// Latest quote price of the underlying instrument at the moment of calculations.
	ScaledUnderlyingPrice *int64 `protobuf:"zigzag64,5,opt,name=scaled_underlying_price,json=scaledUnderlyingPrice" json:"scaled_underlying_price,omitempty"`
	// Calculated values.
	Values []*OptionCalculationValues `protobuf:"bytes,6,rep,name=values" json:"values,omitempty"`
	// Optional failure details.
	Details *common.Text `protobuf:"bytes,7,opt,name=details" json:"details,omitempty"`
	// True means that requested data is complete at the moment,
	// false means more report messages are expected for completeness.
	IsReportComplete *bool `protobuf:"varint,8,opt,name=is_report_complete,json=isReportComplete,def=1" json:"is_report_complete,omitempty"`
}

// Default values for OptionCalculationReport fields.
const (
	Default_OptionCalculationReport_IsReportComplete = bool(true)
)

func (x *OptionCalculationReport) Reset() {
	*x = OptionCalculationReport{}
	mi := &file_protos_WebAPI_market_data_2_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OptionCalculationReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionCalculationReport) ProtoMessage() {}

func (x *OptionCalculationReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_market_data_2_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionCalculationReport.ProtoReflect.Descriptor instead.
func (*OptionCalculationReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_market_data_2_proto_rawDescGZIP(), []int{21}
}

func (x *OptionCalculationReport) GetRequestId() uint32 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *OptionCalculationReport) GetStatusCode() uint32 {
	if x != nil && x.StatusCode != nil {
		return *x.StatusCode
	}
	return 0
}

func (x *OptionCalculationReport) GetUpToUtcTime() int64 {
	if x != nil && x.UpToUtcTime != nil {
		return *x.UpToUtcTime
	}
	return 0
}

func (x *OptionCalculationReport) GetInterestRate() float64 {
	if x != nil && x.InterestRate != nil {
		return *x.InterestRate
	}
	return 0
}

func (x *OptionCalculationReport) GetScaledUnderlyingPrice() int64 {
	if x != nil && x.ScaledUnderlyingPrice != nil {
		return *x.ScaledUnderlyingPrice
	}
	return 0
}

func (x *OptionCalculationReport) GetValues() []*OptionCalculationValues {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *OptionCalculationReport) GetDetails() *common.Text {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *OptionCalculationReport) GetIsReportComplete() bool {
	if x != nil && x.IsReportComplete != nil {
		return *x.IsReportComplete
	}
	return Default_OptionCalculationReport_IsReportComplete
}

// Subscription to all RFQs from enabled exchanges.
type RFQSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Request ID, should be unique among currently processed requests.
	// It is a required field.
	RequestId *uint32 `protobuf:"varint,1,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	// This field is associated with RequestType enum type.
	// It is a required field.
	RequestType *uint32 `protobuf:"varint,2,opt,name=request_type,json=requestType" json:"request_type,omitempty"`
}

func (x *RFQSubscriptionRequest) Reset() {
	*x = RFQSubscriptionRequest{}
	mi := &file_protos_WebAPI_market_data_2_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RFQSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RFQSubscriptionRequest) ProtoMessage() {}

func (x *RFQSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_market_data_2_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RFQSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*RFQSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_market_data_2_proto_rawDescGZIP(), []int{22}
}

func (x *RFQSubscriptionRequest) GetRequestId() uint32 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *RFQSubscriptionRequest) GetRequestType() uint32 {
	if x != nil && x.RequestType != nil {
		return *x.RequestType
	}
	return 0
}

// RFQ subscription report.
type RFQSubscriptionReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of a corresponding request.
	// It is a required field.
	RequestId *uint32 `protobuf:"varint,1,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	// This field is associated with StatusCode enum type.
	// It is a required field.
	StatusCode *uint32 `protobuf:"varint,2,opt,name=status_code,json=statusCode" json:"status_code,omitempty"`
	// Optional failure details.
	Details *common.Text `protobuf:"bytes,3,opt,name=details" json:"details,omitempty"`
	// Contract ID assigned by server.
	// Note: in case of receiving unknown id the contract metadata can be obtained via ContractMetadataRequest.
	ContractId *uint32 `protobuf:"varint,4,opt,name=contract_id,json=contractId" json:"contract_id,omitempty"`
	// List of RFQs.
	// If it's not empty then contract_id is also filled.
	RequestsForQuotation []*RFQ `protobuf:"bytes,5,rep,name=requests_for_quotation,json=requestsForQuotation" json:"requests_for_quotation,omitempty"`
}

func (x *RFQSubscriptionReport) Reset() {
	*x = RFQSubscriptionReport{}
	mi := &file_protos_WebAPI_market_data_2_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RFQSubscriptionReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RFQSubscriptionReport) ProtoMessage() {}

func (x *RFQSubscriptionReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_market_data_2_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RFQSubscriptionReport.ProtoReflect.Descriptor instead.
func (*RFQSubscriptionReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_market_data_2_proto_rawDescGZIP(), []int{23}
}

func (x *RFQSubscriptionReport) GetRequestId() uint32 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *RFQSubscriptionReport) GetStatusCode() uint32 {
	if x != nil && x.StatusCode != nil {
		return *x.StatusCode
	}
	return 0
}

func (x *RFQSubscriptionReport) GetDetails() *common.Text {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *RFQSubscriptionReport) GetContractId() uint32 {
	if x != nil && x.ContractId != nil {
		return *x.ContractId
	}
	return 0
}

func (x *RFQSubscriptionReport) GetRequestsForQuotation() []*RFQ {
	if x != nil {
		return x.RequestsForQuotation
	}
	return nil
}

var File_protos_WebAPI_market_data_2_proto protoreflect.FileDescriptor

var file_protos_WebAPI_market_data_2_proto_rawDesc = []byte{
	0x0a, 0x21, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49, 0x2f,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x32, 0x1a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41, 0x50,
	0x49, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57,
	0x65, 0x62, 0x41, 0x50, 0x49, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x5f, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd5, 0x08, 0x0a,
	0x16, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3b, 0x0a,
	0x1a, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x17, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x61, 0x73, 0x74, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x74, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x50, 0x61, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x1d, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1a, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x59, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a,
	0x18, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x4f, 0x66, 0x66, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x32, 0x0a, 0x15, 0x64, 0x6f, 0x6d, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x64, 0x6f, 0x6d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70,
	0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x22, 0xc7, 0x01, 0x0a,
	0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f,
	0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x05, 0x12, 0x14, 0x0a,
	0x10, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x4f, 0x46, 0x5f, 0x44, 0x41,
	0x59, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x54, 0x52, 0x41,
	0x44, 0x45, 0x53, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x54,
	0x52, 0x41, 0x44, 0x45, 0x53, 0x5f, 0x42, 0x42, 0x41, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x53, 0x5f, 0x42, 0x42, 0x41, 0x5f,
	0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x53, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x53, 0x5f, 0x42, 0x42, 0x41, 0x5f, 0x44, 0x4f,
	0x4d, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x54, 0x52, 0x41,
	0x44, 0x45, 0x53, 0x5f, 0x42, 0x42, 0x41, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x5f, 0x44, 0x4f, 0x4d, 0x10, 0x07, 0x22, 0x59, 0x0a, 0x07, 0x44, 0x6f, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x4f, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f,
	0x4d, 0x42, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x4f, 0x4d, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x21,
	0x0a, 0x1d, 0x44, 0x4f, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x49,
	0x45, 0x44, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x49, 0x4e, 0x45, 0x44, 0x10,
	0x02, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x96, 0x01, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04,
	0x08, 0x06, 0x10, 0x07, 0x22, 0xe7, 0x09, 0x0a, 0x1c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x25, 0x0a,
	0x0c, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x31,
	0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x30,
	0x0a, 0x14, 0x70, 0x61, 0x73, 0x74, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x5f, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x70, 0x61,
	0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64,
	0x12, 0x43, 0x0a, 0x1e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x49, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x79, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x12, 0x32,
	0x0a, 0x15, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x64, 0x12, 0x45, 0x0a, 0x1f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x66,
	0x6f, 0x72, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x49, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x6f, 0x66, 0x66,
	0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x5f, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x6f,
	0x66, 0x66, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x49, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x64, 0x6f, 0x6d,
	0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x44, 0x6f, 0x6d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x5f, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70,
	0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x22, 0xda,
	0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a,
	0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x65, 0x12, 0x1e, 0x0a,
	0x1a, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x10, 0x66, 0x12, 0x1d, 0x0a,
	0x19, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x67, 0x12, 0x17, 0x0a, 0x13,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x44, 0x10, 0x68, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x56, 0x49, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x69, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x6a, 0x12, 0x31, 0x0a, 0x2d, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54,
	0x5f, 0x56, 0x49, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x6b, 0x12, 0x1d, 0x0a, 0x19,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x6e, 0x2a, 0x05, 0x08, 0x64, 0x10,
	0x96, 0x01, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0xd4,
	0x04, 0x0a, 0x12, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x06, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x5f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x12, 0x52,
	0x0f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x36, 0x0a, 0x0b, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6c,
	0x6c, 0x61, 0x70, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x69, 0x6e, 0x67, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x40, 0x0a, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x5f, 0x64, 0x6f, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x44, 0x4f, 0x4d, 0x52, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x44, 0x6f, 0x6d, 0x12, 0x48, 0x0a, 0x16, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x52, 0x46, 0x51, 0x52, 0x14, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3d, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x63, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x2a, 0x05,
	0x08, 0x64, 0x10, 0x96, 0x01, 0x22, 0xf9, 0x08, 0x0a, 0x05, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x75, 0x74, 0x63,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0c, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x12, 0x52,
	0x0b, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x12, 0x52, 0x11, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x27, 0x0a,
	0x0d, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52,
	0x0f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x3b, 0x0a, 0x1a, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x12, 0x52, 0x17, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x52, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0d, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x50, 0x72, 0x65,
	0x6d, 0x69, 0x75, 0x6d, 0x22, 0x9d, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a,
	0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a,
	0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x45, 0x53, 0x54, 0x42, 0x49, 0x44, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x45, 0x53, 0x54, 0x41, 0x53, 0x4b, 0x10,
	0x02, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x49, 0x44, 0x10, 0x03, 0x12,
	0x0c, 0x0a, 0x08, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x53, 0x4b, 0x10, 0x04, 0x12, 0x13, 0x0a,
	0x0f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x49,
	0x45, 0x44, 0x5f, 0x42, 0x49, 0x44, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x45, 0x44, 0x5f, 0x41, 0x53, 0x4b, 0x10, 0x0b, 0x22, 0x04,
	0x08, 0x06, 0x10, 0x09, 0x22, 0xa3, 0x02, 0x0a, 0x09, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x5f,
	0x4f, 0x50, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41,
	0x54, 0x4f, 0x52, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e,
	0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x03, 0x12, 0x12, 0x0a,
	0x0e, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10,
	0x04, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x43,
	0x4c, 0x4f, 0x53, 0x45, 0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41,
	0x54, 0x4f, 0x52, 0x5f, 0x50, 0x41, 0x53, 0x54, 0x10, 0x05, 0x12, 0x2e, 0x0a, 0x2a, 0x49, 0x4e,
	0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x4c, 0x4c, 0x5f, 0x42, 0x41, 0x43,
	0x4b, 0x5f, 0x54, 0x4f, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x4f, 0x52, 0x5f, 0x53, 0x45,
	0x54, 0x54, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e,
	0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x53, 0x45, 0x52, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x49,
	0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4f, 0x46, 0x46, 0x5f, 0x4d, 0x41, 0x52,
	0x4b, 0x45, 0x54, 0x10, 0x09, 0x12, 0x23, 0x0a, 0x1f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54,
	0x4f, 0x52, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x52, 0x41, 0x54, 0x45,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10, 0x0a, 0x22, 0xb4, 0x01, 0x0a, 0x0e, 0x53,
	0x61, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a,
	0x13, 0x53, 0x41, 0x4c, 0x45, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x48, 0x49, 0x54, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x41, 0x4c, 0x45, 0x53, 0x5f,
	0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x10, 0x02,
	0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x41, 0x4c, 0x45, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x50, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x4c, 0x45, 0x47, 0x10, 0x03,
	0x12, 0x26, 0x0a, 0x22, 0x53, 0x41, 0x4c, 0x45, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x59, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x41, 0x47, 0x47,
	0x52, 0x45, 0x53, 0x53, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x41, 0x4c, 0x45,
	0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x4c, 0x4c,
	0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x53, 0x53, 0x4f, 0x52, 0x10,
	0x05, 0x22, 0xc3, 0x01, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x79, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x62, 0x75, 0x79, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x06, 0x73, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x48, 0x0a,
	0x12, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x75, 0x74, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x55, 0x74, 0x63, 0x22, 0xc5, 0x0b, 0x0a, 0x0c, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x12, 0x52, 0x0f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x68,
	0x69, 0x67, 0x68, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x12, 0x52,
	0x0f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0e, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x64, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x11, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x12, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x64, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x12, 0x52, 0x10, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x64, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x12, 0x52, 0x1b, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x4e, 0x6f, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3d,
	0x0a, 0x1b, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x12, 0x52, 0x18, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a,
	0x1b, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x79, 0x65, 0x73, 0x74, 0x65, 0x72, 0x64, 0x61,
	0x79, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x19, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x59, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x64, 0x61, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a,
	0x13, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x18, 0x01, 0x52, 0x11,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x2f, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x36, 0x0a, 0x15, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x79, 0x65, 0x73,
	0x74, 0x65, 0x72, 0x64, 0x61, 0x79, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x12, 0x42, 0x02, 0x18, 0x01, 0x52, 0x13, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x59, 0x65, 0x73,
	0x74, 0x65, 0x72, 0x64, 0x61, 0x79, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x6f, 0x70, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x12, 0x52, 0x14, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x70, 0x65, 0x6e,
	0x12, 0x45, 0x0a, 0x1d, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x18, 0x01, 0x52, 0x1a, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x70, 0x65,
	0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x16, 0x69, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x14, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x4f, 0x70, 0x65, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x09, 0x20, 0x02, 0x28, 0x11, 0x52, 0x08,
	0x64, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x34, 0x0a, 0x14, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x12, 0x42, 0x02, 0x18, 0x01, 0x52, 0x12, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x31,
	0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x12, 0x52, 0x10, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x2e, 0x0a, 0x13, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x12, 0x52, 0x11, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x35, 0x0a, 0x17, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x12,
	0x52, 0x14, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52,
	0x0f, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x53, 0x0a, 0x18, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x75,
	0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15,
	0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x63,
	0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x02, 0x28, 0x12,
	0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x40, 0x0a, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x79, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x59, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x59, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x12, 0x52, 0x17, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22,
	0xef, 0x04, 0x0a, 0x0c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x2d, 0x0a, 0x13, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x79,
	0x69, 0x65, 0x6c, 0x64, 0x4f, 0x66, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x2d, 0x0a, 0x13, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x68, 0x69, 0x67, 0x68,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x79, 0x69,
	0x65, 0x6c, 0x64, 0x4f, 0x66, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2b,
	0x0a, 0x12, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x79, 0x69, 0x65, 0x6c,
	0x64, 0x4f, 0x66, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x13, 0x79,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x42, 0x02, 0x18, 0x01, 0x52, 0x10, 0x79, 0x69,
	0x65, 0x6c, 0x64, 0x4f, 0x66, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2f,
	0x0a, 0x14, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x79, 0x69,
	0x65, 0x6c, 0x64, 0x4f, 0x66, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x47, 0x0a, 0x21, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1c, 0x79, 0x69, 0x65, 0x6c,
	0x64, 0x4f, 0x66, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x1d, 0x79, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x19, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x66, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x79, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x79, 0x65, 0x73, 0x74, 0x65, 0x72, 0x64, 0x61, 0x79,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x1a, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x66, 0x59, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x64, 0x61, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a,
	0x17, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x79, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x64, 0x61, 0x79, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x14, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x66, 0x59, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x64, 0x61, 0x79, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x79, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x6f, 0x70, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x79, 0x69, 0x65, 0x6c,
	0x64, 0x4f, 0x66, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x70, 0x65,
	0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11,
	0x79, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x66, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x47, 0x0a, 0x17, 0x41, 0x74, 0x54, 0x68, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x53,
	0x74, 0x72, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x30, 0x0a, 0x16, 0x41, 0x74,
	0x54, 0x68, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x22, 0xc8, 0x01, 0x0a,
	0x0b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x44, 0x4f, 0x4d, 0x12, 0x37, 0x0a, 0x18,
	0x69, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x6d, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15,
	0x69, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x12, 0x44, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x44, 0x4f, 0x4d, 0x41, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x44, 0x4f, 0x4d, 0x41, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x12, 0x52, 0x0b, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x37, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x44,
	0x4f, 0x4d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22,
	0xa6, 0x03, 0x0a, 0x10, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x44, 0x4f, 0x4d, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x15, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x5f, 0x64, 0x6f, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x44, 0x6f, 0x6d,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x27, 0x0a, 0x0d, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64,
	0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x0c, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x06, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x4e, 0x53, 0x45, 0x52, 0x54, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x01,
	0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f,
	0x44, 0x49, 0x46, 0x59, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x50, 0x52,
	0x49, 0x43, 0x45, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45,
	0x10, 0x04, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x22, 0xc8, 0x02, 0x0a, 0x03, 0x52, 0x46, 0x51,
	0x12, 0x2e, 0x0a, 0x13, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x3f, 0x0a, 0x0d, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0c, 0x75, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x18, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x16, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0x40, 0x0a, 0x04, 0x53, 0x69, 0x64, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x49, 0x44,
	0x45, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x49, 0x44, 0x45, 0x5f,
	0x42, 0x49, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x41, 0x53,
	0x4b, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x43, 0x52, 0x4f, 0x53,
	0x53, 0x10, 0x03, 0x22, 0xba, 0x03, 0x0a, 0x0a, 0x52, 0x46, 0x51, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12,
	0x20, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x52, 0x0a, 0x17, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75,
	0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x43, 0x0a, 0x1e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x18, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x16, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x22, 0x8a, 0x03, 0x0a, 0x09, 0x52, 0x46, 0x51, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2a,
	0x0a, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x49, 0x0a, 0x21, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x49, 0x64,
	0x22, 0x8a, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10,
	0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x10,
	0x66, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x46,
	0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x10, 0x67, 0x22, 0xcb, 0x01,
	0x0a, 0x0b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a,
	0x0d, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x59, 0x0a, 0x12, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x11, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x84, 0x03, 0x0a, 0x0c,
	0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x2c, 0x0a, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a,
	0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x0d, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x58, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x5f, 0x4f,
	0x50, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x19,
	0x0a, 0x15, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x58, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x48, 0x41, 0x4c, 0x54,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44,
	0x10, 0x05, 0x22, 0x45, 0x0a, 0x1b, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x74, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x1b, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x74, 0x72, 0x69, 0x6b,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x8e,
	0x02, 0x0a, 0x18, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x6e, 0x0a, 0x1d, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x32, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x1b, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x40, 0x0a,
	0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x42,
	0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x10, 0x03, 0x22,
	0xd7, 0x02, 0x0a, 0x17, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73,
	0x74, 0x72, 0x69, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x20, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x68, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x12, 0x52, 0x1d, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x68, 0x65, 0x72,
	0x65, 0x6e, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x76, 0x6f,
	0x6c, 0x61, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x68, 0x65, 0x6f, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x74, 0x68, 0x65, 0x6f, 0x76, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x14, 0x0a,
	0x05, 0x67, 0x61, 0x6d, 0x6d, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x67, 0x61,
	0x6d, 0x6d, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x65, 0x67, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x04, 0x76, 0x65, 0x67, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x68, 0x65, 0x74, 0x61,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x74, 0x68, 0x65, 0x74, 0x61, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x68, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x72, 0x68, 0x6f, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0xe6, 0x05, 0x0a, 0x17, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0e, 0x75, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x75,
	0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x75,
	0x70, 0x54, 0x6f, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x36, 0x0a, 0x17, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x79, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x12,
	0x52, 0x15, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x5f, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x32, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74,
	0x72, 0x75, 0x65, 0x52, 0x10, 0x69, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x22, 0xea, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10,
	0x03, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12,
	0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x10, 0x66, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x44,
	0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x67, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x56, 0x49, 0x4f, 0x4c, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x68, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x41, 0x54,
	0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x56, 0x49, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x69, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x6a, 0x12, 0x24, 0x0a, 0x20,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x49, 0x42, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44,
	0x10, 0x6b, 0x22, 0x9c, 0x01, 0x0a, 0x16, 0x52, 0x46, 0x51, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x40, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x16, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x10,
	0x02, 0x22, 0xb5, 0x04, 0x0a, 0x15, 0x52, 0x46, 0x51, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x16, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x52, 0x46, 0x51, 0x52, 0x14, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xc6, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53,
	0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52,
	0x45, 0x10, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x53, 0x10, 0x66, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x56, 0x49, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x67, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x5f, 0x56, 0x49, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x69, 0x12,
	0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x68, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x6a, 0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49,
}

var (
	file_protos_WebAPI_market_data_2_proto_rawDescOnce sync.Once
	file_protos_WebAPI_market_data_2_proto_rawDescData = file_protos_WebAPI_market_data_2_proto_rawDesc
)

func file_protos_WebAPI_market_data_2_proto_rawDescGZIP() []byte {
	file_protos_WebAPI_market_data_2_proto_rawDescOnce.Do(func() {
		file_protos_WebAPI_market_data_2_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_WebAPI_market_data_2_proto_rawDescData)
	})
	return file_protos_WebAPI_market_data_2_proto_rawDescData
}

var file_protos_WebAPI_market_data_2_proto_enumTypes = make([]protoimpl.EnumInfo, 14)
var file_protos_WebAPI_market_data_2_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_protos_WebAPI_market_data_2_proto_goTypes = []any{
	(MarketDataSubscription_Level)(0),            // 0: market_data_2.MarketDataSubscription.Level
	(MarketDataSubscription_DomType)(0),          // 1: market_data_2.MarketDataSubscription.DomType
	(MarketDataSubscriptionStatus_StatusCode)(0), // 2: market_data_2.MarketDataSubscriptionStatus.StatusCode
	(Quote_Type)(0),                              // 3: market_data_2.Quote.Type
	(Quote_Indicator)(0),                         // 4: market_data_2.Quote.Indicator
	(Quote_SalesCondition)(0),                    // 5: market_data_2.Quote.SalesCondition
	(DetailedDOMOrder_Operation)(0),              // 6: market_data_2.DetailedDOMOrder.Operation
	(RFQ_Side)(0),                                // 7: market_data_2.RFQ.Side
	(RFQReport_StatusCode)(0),                    // 8: market_data_2.RFQReport.StatusCode
	(TradingState_ExchangeState)(0),              // 9: market_data_2.TradingState.ExchangeState
	(OptionCalculationRequest_RequestType)(0),    // 10: market_data_2.OptionCalculationRequest.RequestType
	(OptionCalculationReport_StatusCode)(0),      // 11: market_data_2.OptionCalculationReport.StatusCode
	(RFQSubscriptionRequest_RequestType)(0),      // 12: market_data_2.RFQSubscriptionRequest.RequestType
	(RFQSubscriptionReport_StatusCode)(0),        // 13: market_data_2.RFQSubscriptionReport.StatusCode
	(*MarketDataSubscription)(nil),               // 14: market_data_2.MarketDataSubscription
	(*MarketDataSubscriptionStatus)(nil),         // 15: market_data_2.MarketDataSubscriptionStatus
	(*RealTimeMarketData)(nil),                   // 16: market_data_2.RealTimeMarketData
	(*Quote)(nil),                                // 17: market_data_2.Quote
	(*TradeAttributes)(nil),                      // 18: market_data_2.TradeAttributes
	(*MarketValues)(nil),                         // 19: market_data_2.MarketValues
	(*MarketYields)(nil),                         // 20: market_data_2.MarketYields
	(*AtTheMoneyStrikeRequest)(nil),              // 21: market_data_2.AtTheMoneyStrikeRequest
	(*AtTheMoneyStrikeReport)(nil),               // 22: market_data_2.AtTheMoneyStrikeReport
	(*DetailedDOM)(nil),                          // 23: market_data_2.DetailedDOM
	(*DetailedDOMAtPrice)(nil),                   // 24: market_data_2.DetailedDOMAtPrice
	(*DetailedDOMOrder)(nil),                     // 25: market_data_2.DetailedDOMOrder
	(*RFQ)(nil),                                  // 26: market_data_2.RFQ
	(*RFQRequest)(nil),                           // 27: market_data_2.RFQRequest
	(*RFQReport)(nil),                            // 28: market_data_2.RFQReport
	(*MarketState)(nil),                          // 29: market_data_2.MarketState
	(*TradingState)(nil),                         // 30: market_data_2.TradingState
	(*ExchangeSpecificMarketState)(nil),          // 31: market_data_2.ExchangeSpecificMarketState
	(*OptionCalculationParameters)(nil),          // 32: market_data_2.OptionCalculationParameters
	(*OptionCalculationRequest)(nil),             // 33: market_data_2.OptionCalculationRequest
	(*OptionCalculationValues)(nil),              // 34: market_data_2.OptionCalculationValues
	(*OptionCalculationReport)(nil),              // 35: market_data_2.OptionCalculationReport
	(*RFQSubscriptionRequest)(nil),               // 36: market_data_2.RFQSubscriptionRequest
	(*RFQSubscriptionReport)(nil),                // 37: market_data_2.RFQSubscriptionReport
	(*common.Text)(nil),                          // 38: shared_1.Text
	(*common.Decimal)(nil),                       // 39: cqg.Decimal
	(*timestamppb.Timestamp)(nil),                // 40: google.protobuf.Timestamp
}
var file_protos_WebAPI_market_data_2_proto_depIdxs = []int32{
	38, // 0: market_data_2.MarketDataSubscriptionStatus.details:type_name -> shared_1.Text
	17, // 1: market_data_2.RealTimeMarketData.quotes:type_name -> market_data_2.Quote
	17, // 2: market_data_2.RealTimeMarketData.corrections:type_name -> market_data_2.Quote
	19, // 3: market_data_2.RealTimeMarketData.market_values:type_name -> market_data_2.MarketValues
	23, // 4: market_data_2.RealTimeMarketData.detailed_dom:type_name -> market_data_2.DetailedDOM
	26, // 5: market_data_2.RealTimeMarketData.requests_for_quotation:type_name -> market_data_2.RFQ
	29, // 6: market_data_2.RealTimeMarketData.market_state:type_name -> market_data_2.MarketState
	39, // 7: market_data_2.Quote.volume:type_name -> cqg.Decimal
	18, // 8: market_data_2.Quote.trade_attributes:type_name -> market_data_2.TradeAttributes
	40, // 9: market_data_2.TradeAttributes.agreement_time_utc:type_name -> google.protobuf.Timestamp
	39, // 10: market_data_2.MarketValues.total_volume:type_name -> cqg.Decimal
	39, // 11: market_data_2.MarketValues.indicative_open_volume:type_name -> cqg.Decimal
	39, // 12: market_data_2.MarketValues.open_interest:type_name -> cqg.Decimal
	39, // 13: market_data_2.MarketValues.last_trade_volume:type_name -> cqg.Decimal
	40, // 14: market_data_2.MarketValues.last_trade_utc_timestamp:type_name -> google.protobuf.Timestamp
	20, // 15: market_data_2.MarketValues.market_yields:type_name -> market_data_2.MarketYields
	24, // 16: market_data_2.DetailedDOM.price_levels:type_name -> market_data_2.DetailedDOMAtPrice
	25, // 17: market_data_2.DetailedDOMAtPrice.orders:type_name -> market_data_2.DetailedDOMOrder
	39, // 18: market_data_2.DetailedDOMOrder.volume:type_name -> cqg.Decimal
	40, // 19: market_data_2.RFQ.utc_timestamp:type_name -> google.protobuf.Timestamp
	39, // 20: market_data_2.RFQ.volume:type_name -> cqg.Decimal
	40, // 21: market_data_2.RFQ.expiration_utc_timestamp:type_name -> google.protobuf.Timestamp
	39, // 22: market_data_2.RFQRequest.size:type_name -> cqg.Decimal
	40, // 23: market_data_2.RFQRequest.execution_utc_timestamp:type_name -> google.protobuf.Timestamp
	40, // 24: market_data_2.RFQRequest.expiration_utc_timestamp:type_name -> google.protobuf.Timestamp
	38, // 25: market_data_2.RFQReport.details:type_name -> shared_1.Text
	30, // 26: market_data_2.MarketState.trading_state:type_name -> market_data_2.TradingState
	31, // 27: market_data_2.MarketState.exchange_specifics:type_name -> market_data_2.ExchangeSpecificMarketState
	32, // 28: market_data_2.OptionCalculationRequest.option_calculation_parameters:type_name -> market_data_2.OptionCalculationParameters
	34, // 29: market_data_2.OptionCalculationReport.values:type_name -> market_data_2.OptionCalculationValues
	38, // 30: market_data_2.OptionCalculationReport.details:type_name -> shared_1.Text
	38, // 31: market_data_2.RFQSubscriptionReport.details:type_name -> shared_1.Text
	26, // 32: market_data_2.RFQSubscriptionReport.requests_for_quotation:type_name -> market_data_2.RFQ
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_protos_WebAPI_market_data_2_proto_init() }
func file_protos_WebAPI_market_data_2_proto_init() {
	if File_protos_WebAPI_market_data_2_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_WebAPI_market_data_2_proto_rawDesc,
			NumEnums:      14,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_WebAPI_market_data_2_proto_goTypes,
		DependencyIndexes: file_protos_WebAPI_market_data_2_proto_depIdxs,
		EnumInfos:         file_protos_WebAPI_market_data_2_proto_enumTypes,
		MessageInfos:      file_protos_WebAPI_market_data_2_proto_msgTypes,
	}.Build()
	File_protos_WebAPI_market_data_2_proto = out.File
	file_protos_WebAPI_market_data_2_proto_rawDesc = nil
	file_protos_WebAPI_market_data_2_proto_goTypes = nil
	file_protos_WebAPI_market_data_2_proto_depIdxs = nil
}
