// Historical related messages

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: protos/WebAPI/historical_2.proto

package WebAPI

import (
	common "cqg-api/protos/WebAPI/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Bar building tick type enumeration.
type BarBuildingTickType int32

const (
	// Bid.
	BarBuildingTickType_BAR_BUILDING_TICK_TYPE_BID BarBuildingTickType = 1
	// Ask.
	BarBuildingTickType_BAR_BUILDING_TICK_TYPE_ASK BarBuildingTickType = 2
	// Trade.
	BarBuildingTickType_BAR_BUILDING_TICK_TYPE_TRADE BarBuildingTickType = 3
	// Settlement.
	BarBuildingTickType_BAR_BUILDING_TICK_TYPE_SETTLEMENT BarBuildingTickType = 4
)

// Enum value maps for BarBuildingTickType.
var (
	BarBuildingTickType_name = map[int32]string{
		1: "BAR_BUILDING_TICK_TYPE_BID",
		2: "BAR_BUILDING_TICK_TYPE_ASK",
		3: "BAR_BUILDING_TICK_TYPE_TRADE",
		4: "BAR_BUILDING_TICK_TYPE_SETTLEMENT",
	}
	BarBuildingTickType_value = map[string]int32{
		"BAR_BUILDING_TICK_TYPE_BID":        1,
		"BAR_BUILDING_TICK_TYPE_ASK":        2,
		"BAR_BUILDING_TICK_TYPE_TRADE":      3,
		"BAR_BUILDING_TICK_TYPE_SETTLEMENT": 4,
	}
)

func (x BarBuildingTickType) Enum() *BarBuildingTickType {
	p := new(BarBuildingTickType)
	*p = x
	return p
}

func (x BarBuildingTickType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BarBuildingTickType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_historical_2_proto_enumTypes[0].Descriptor()
}

func (BarBuildingTickType) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_historical_2_proto_enumTypes[0]
}

func (x BarBuildingTickType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BarBuildingTickType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BarBuildingTickType(num)
	return nil
}

// Deprecated: Use BarBuildingTickType.Descriptor instead.
func (BarBuildingTickType) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_historical_2_proto_rawDescGZIP(), []int{0}
}

// Bar unit type.
type BarUnit int32

const (
	// yearly bars.
	BarUnit_BAR_UNIT_YEAR BarUnit = 1
	// semi-annual bars.
	BarUnit_BAR_UNIT_SEMI_ANNUAL BarUnit = 2
	// quarterly bars.
	BarUnit_BAR_UNIT_QUARTER BarUnit = 3
	// monthly bars.
	BarUnit_BAR_UNIT_MONTH BarUnit = 4
	// weekly bars.
	BarUnit_BAR_UNIT_WEEK BarUnit = 5
	// daily bars.
	BarUnit_BAR_UNIT_DAY BarUnit = 6
	// hourly bars.
	BarUnit_BAR_UNIT_HOUR BarUnit = 7
	// minute bars.
	BarUnit_BAR_UNIT_MIN BarUnit = 8
)

// Enum value maps for BarUnit.
var (
	BarUnit_name = map[int32]string{
		1: "BAR_UNIT_YEAR",
		2: "BAR_UNIT_SEMI_ANNUAL",
		3: "BAR_UNIT_QUARTER",
		4: "BAR_UNIT_MONTH",
		5: "BAR_UNIT_WEEK",
		6: "BAR_UNIT_DAY",
		7: "BAR_UNIT_HOUR",
		8: "BAR_UNIT_MIN",
	}
	BarUnit_value = map[string]int32{
		"BAR_UNIT_YEAR":        1,
		"BAR_UNIT_SEMI_ANNUAL": 2,
		"BAR_UNIT_QUARTER":     3,
		"BAR_UNIT_MONTH":       4,
		"BAR_UNIT_WEEK":        5,
		"BAR_UNIT_DAY":         6,
		"BAR_UNIT_HOUR":        7,
		"BAR_UNIT_MIN":         8,
	}
)

func (x BarUnit) Enum() *BarUnit {
	p := new(BarUnit)
	*p = x
	return p
}

func (x BarUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BarUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_historical_2_proto_enumTypes[1].Descriptor()
}

func (BarUnit) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_historical_2_proto_enumTypes[1]
}

func (x BarUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BarUnit) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BarUnit(num)
	return nil
}

// Deprecated: Use BarUnit.Descriptor instead.
func (BarUnit) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_historical_2_proto_rawDescGZIP(), []int{1}
}

// Bar report status code enumeration.
type BarReportStatusCode int32

const (
	// / success codes  (0 - 99)
	// Request is processed without subscription (subscription was not requested).
	BarReportStatusCode_BAR_REPORT_STATUS_CODE_SUCCESS BarReportStatusCode = 0
	// Request is processed and subscription is established or restored after disconnection.
	// If the subscription is restored, the following data will be returned to the user:
	// 1. TimeBarRequest-s - all missed bars;
	// 2. NonTimedBarRequest-s - NonTimedBarRequest.bar_range.count last bars.
	BarReportStatusCode_BAR_REPORT_STATUS_CODE_SUBSCRIBED BarReportStatusCode = 1
	// The request or subscription is dropped by the client.
	BarReportStatusCode_BAR_REPORT_STATUS_CODE_DROPPED BarReportStatusCode = 2
	// Unsolicited information update because of subscription.
	BarReportStatusCode_BAR_REPORT_STATUS_CODE_UPDATE BarReportStatusCode = 3
	// Subscription or request processing status that indicates that currently processing is impossible
	// because of communication issues.
	// NOTE: Clients should not resubscribe or resend requests in this case, the server will restore processing with
	// sending BAR_REPORT_STATUS_CODE_SUCCESS or BAR_REPORT_STATUS_CODE_SUBSCRIBED status
	// once communication issues are resolved.
	// If client is not interested in this request or subscription any longer it should send REQUEST_TYPE_DROP request.
	BarReportStatusCode_BAR_REPORT_STATUS_CODE_DISCONNECTED BarReportStatusCode = 4
	// Bars are invalidated for specified time range due to data correction.
	// Re-request historical bars and/or re-subscribe to bar updates to receive valid bar data.
	// NOTE: Subscription is not dropped.
	BarReportStatusCode_BAR_REPORT_STATUS_CODE_INVALIDATED BarReportStatusCode = 5
	// / failure codes (100+), subscription (if any) is dropped in case of failure.
	// General failure.
	BarReportStatusCode_BAR_REPORT_STATUS_CODE_FAILURE BarReportStatusCode = 101
	// The user is not allowed to access this data.
	BarReportStatusCode_BAR_REPORT_STATUS_CODE_ACCESS_DENIED BarReportStatusCode = 103
	// Requested information is not found.
	BarReportStatusCode_BAR_REPORT_STATUS_CODE_NOT_FOUND BarReportStatusCode = 104
	// Requested data is outside of allowed range.
	BarReportStatusCode_BAR_REPORT_STATUS_CODE_OUTSIDE_ALLOWED_RANGE BarReportStatusCode = 105
	// Parameters of a bar request are invalid.
	BarReportStatusCode_BAR_REPORT_STATUS_CODE_INVALID_PARAMS BarReportStatusCode = 106
	// The limit of active requests has been violated.
	BarReportStatusCode_BAR_REPORT_STATUS_CODE_ACTIVE_REQUESTS_LIMIT_VIOLATION BarReportStatusCode = 107
	// The limit of simultaneous historical subscriptions has been violated.
	BarReportStatusCode_BAR_REPORT_STATUS_CODE_SUBSCRIPTION_LIMIT_VIOLATION BarReportStatusCode = 108
	// The request rate limit has been violated.
	BarReportStatusCode_BAR_REPORT_STATUS_CODE_REQUEST_RATE_LIMIT_VIOLATION BarReportStatusCode = 109
	// Bar request without subscription on updates is not supported for specified contract.
	BarReportStatusCode_BAR_REPORT_STATUS_CODE_NOT_SUPPORTED BarReportStatusCode = 110
	// Requested time bar update interval is outside of allowed range.
	BarReportStatusCode_BAR_REPORT_STATUS_CODE_UPDATE_INTERVAL_OUTSIDE_ALLOWED_RANGE BarReportStatusCode = 111
)

// Enum value maps for BarReportStatusCode.
var (
	BarReportStatusCode_name = map[int32]string{
		0:   "BAR_REPORT_STATUS_CODE_SUCCESS",
		1:   "BAR_REPORT_STATUS_CODE_SUBSCRIBED",
		2:   "BAR_REPORT_STATUS_CODE_DROPPED",
		3:   "BAR_REPORT_STATUS_CODE_UPDATE",
		4:   "BAR_REPORT_STATUS_CODE_DISCONNECTED",
		5:   "BAR_REPORT_STATUS_CODE_INVALIDATED",
		101: "BAR_REPORT_STATUS_CODE_FAILURE",
		103: "BAR_REPORT_STATUS_CODE_ACCESS_DENIED",
		104: "BAR_REPORT_STATUS_CODE_NOT_FOUND",
		105: "BAR_REPORT_STATUS_CODE_OUTSIDE_ALLOWED_RANGE",
		106: "BAR_REPORT_STATUS_CODE_INVALID_PARAMS",
		107: "BAR_REPORT_STATUS_CODE_ACTIVE_REQUESTS_LIMIT_VIOLATION",
		108: "BAR_REPORT_STATUS_CODE_SUBSCRIPTION_LIMIT_VIOLATION",
		109: "BAR_REPORT_STATUS_CODE_REQUEST_RATE_LIMIT_VIOLATION",
		110: "BAR_REPORT_STATUS_CODE_NOT_SUPPORTED",
		111: "BAR_REPORT_STATUS_CODE_UPDATE_INTERVAL_OUTSIDE_ALLOWED_RANGE",
	}
	BarReportStatusCode_value = map[string]int32{
		"BAR_REPORT_STATUS_CODE_SUCCESS":                               0,
		"BAR_REPORT_STATUS_CODE_SUBSCRIBED":                            1,
		"BAR_REPORT_STATUS_CODE_DROPPED":                               2,
		"BAR_REPORT_STATUS_CODE_UPDATE":                                3,
		"BAR_REPORT_STATUS_CODE_DISCONNECTED":                          4,
		"BAR_REPORT_STATUS_CODE_INVALIDATED":                           5,
		"BAR_REPORT_STATUS_CODE_FAILURE":                               101,
		"BAR_REPORT_STATUS_CODE_ACCESS_DENIED":                         103,
		"BAR_REPORT_STATUS_CODE_NOT_FOUND":                             104,
		"BAR_REPORT_STATUS_CODE_OUTSIDE_ALLOWED_RANGE":                 105,
		"BAR_REPORT_STATUS_CODE_INVALID_PARAMS":                        106,
		"BAR_REPORT_STATUS_CODE_ACTIVE_REQUESTS_LIMIT_VIOLATION":       107,
		"BAR_REPORT_STATUS_CODE_SUBSCRIPTION_LIMIT_VIOLATION":          108,
		"BAR_REPORT_STATUS_CODE_REQUEST_RATE_LIMIT_VIOLATION":          109,
		"BAR_REPORT_STATUS_CODE_NOT_SUPPORTED":                         110,
		"BAR_REPORT_STATUS_CODE_UPDATE_INTERVAL_OUTSIDE_ALLOWED_RANGE": 111,
	}
)

func (x BarReportStatusCode) Enum() *BarReportStatusCode {
	p := new(BarReportStatusCode)
	*p = x
	return p
}

func (x BarReportStatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BarReportStatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_historical_2_proto_enumTypes[2].Descriptor()
}

func (BarReportStatusCode) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_historical_2_proto_enumTypes[2]
}

func (x BarReportStatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BarReportStatusCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BarReportStatusCode(num)
	return nil
}

// Deprecated: Use BarReportStatusCode.Descriptor instead.
func (BarReportStatusCode) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_historical_2_proto_rawDescGZIP(), []int{2}
}

// Level or requested Time and Sales data.
type TimeAndSalesParameters_Level int32

const (
	// Get trades with volumes and settlement quotes.
	TimeAndSalesParameters_LEVEL_TRADES TimeAndSalesParameters_Level = 1
	// Get trades, settlement and best ask & bid quotes with volumes.
	TimeAndSalesParameters_LEVEL_TRADES_BBA_VOLUMES TimeAndSalesParameters_Level = 3
)

// Enum value maps for TimeAndSalesParameters_Level.
var (
	TimeAndSalesParameters_Level_name = map[int32]string{
		1: "LEVEL_TRADES",
		3: "LEVEL_TRADES_BBA_VOLUMES",
	}
	TimeAndSalesParameters_Level_value = map[string]int32{
		"LEVEL_TRADES":             1,
		"LEVEL_TRADES_BBA_VOLUMES": 3,
	}
)

func (x TimeAndSalesParameters_Level) Enum() *TimeAndSalesParameters_Level {
	p := new(TimeAndSalesParameters_Level)
	*p = x
	return p
}

func (x TimeAndSalesParameters_Level) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeAndSalesParameters_Level) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_historical_2_proto_enumTypes[3].Descriptor()
}

func (TimeAndSalesParameters_Level) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_historical_2_proto_enumTypes[3]
}

func (x TimeAndSalesParameters_Level) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TimeAndSalesParameters_Level) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TimeAndSalesParameters_Level(num)
	return nil
}

// Deprecated: Use TimeAndSalesParameters_Level.Descriptor instead.
func (TimeAndSalesParameters_Level) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_historical_2_proto_rawDescGZIP(), []int{0, 0}
}

// Type of request.
type TimeAndSalesRequest_RequestType int32

const (
	// Request data.
	TimeAndSalesRequest_REQUEST_TYPE_GET TimeAndSalesRequest_RequestType = 1
	// Drop request before server completes it.
	TimeAndSalesRequest_REQUEST_TYPE_DROP TimeAndSalesRequest_RequestType = 3
)

// Enum value maps for TimeAndSalesRequest_RequestType.
var (
	TimeAndSalesRequest_RequestType_name = map[int32]string{
		1: "REQUEST_TYPE_GET",
		3: "REQUEST_TYPE_DROP",
	}
	TimeAndSalesRequest_RequestType_value = map[string]int32{
		"REQUEST_TYPE_GET":  1,
		"REQUEST_TYPE_DROP": 3,
	}
)

func (x TimeAndSalesRequest_RequestType) Enum() *TimeAndSalesRequest_RequestType {
	p := new(TimeAndSalesRequest_RequestType)
	*p = x
	return p
}

func (x TimeAndSalesRequest_RequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeAndSalesRequest_RequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_historical_2_proto_enumTypes[4].Descriptor()
}

func (TimeAndSalesRequest_RequestType) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_historical_2_proto_enumTypes[4]
}

func (x TimeAndSalesRequest_RequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TimeAndSalesRequest_RequestType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TimeAndSalesRequest_RequestType(num)
	return nil
}

// Deprecated: Use TimeAndSalesRequest_RequestType.Descriptor instead.
func (TimeAndSalesRequest_RequestType) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_historical_2_proto_rawDescGZIP(), []int{1, 0}
}

// Result code.
type TimeAndSalesReport_ResultCode int32

const (
	// / success codes  (0 - 99)
	// Request is processed successfully.
	TimeAndSalesReport_RESULT_CODE_SUCCESS TimeAndSalesReport_ResultCode = 0
	// The request is dropped by the client.
	TimeAndSalesReport_RESULT_CODE_DROPPED TimeAndSalesReport_ResultCode = 2
	// Request processing status that indicates that currently processing is impossible because of communication issues.
	// NOTE: Clients should not resend requests in this case, the server will restore processing with
	// sending RESULT_CODE_SUCCESS status once communication issues are resolved.
	// If client is not interested in this request any longer it should send REQUEST_TYPE_DROP request.
	TimeAndSalesReport_RESULT_CODE_DISCONNECTED TimeAndSalesReport_ResultCode = 4
	// / failure codes (100+)
	// General failure.
	TimeAndSalesReport_RESULT_CODE_FAILURE TimeAndSalesReport_ResultCode = 101
	// The user is not allowed to access this instrument data.
	TimeAndSalesReport_RESULT_CODE_ACCESS_DENIED TimeAndSalesReport_ResultCode = 103
	// Requested information is not found.
	TimeAndSalesReport_RESULT_CODE_NOT_FOUND TimeAndSalesReport_ResultCode = 104
	// Requested data is outside of allowed range.
	TimeAndSalesReport_RESULT_CODE_OUTSIDE_ALLOWED_RANGE TimeAndSalesReport_ResultCode = 105
	// The limit of the active historical requests has been violated.
	TimeAndSalesReport_RESULT_CODE_ACTIVE_REQUESTS_LIMIT_VIOLATION TimeAndSalesReport_ResultCode = 106
	// The request rate limit has been violated.
	TimeAndSalesReport_RESULT_CODE_REQUEST_RATE_LIMIT_VIOLATION TimeAndSalesReport_ResultCode = 107
	// T&S request is not supported for specified contract.
	TimeAndSalesReport_RESULT_CODE_NOT_SUPPORTED TimeAndSalesReport_ResultCode = 110
	// Parameters of a T&S request are invalid.
	TimeAndSalesReport_RESULT_CODE_INVALID_PARAMS TimeAndSalesReport_ResultCode = 111
)

// Enum value maps for TimeAndSalesReport_ResultCode.
var (
	TimeAndSalesReport_ResultCode_name = map[int32]string{
		0:   "RESULT_CODE_SUCCESS",
		2:   "RESULT_CODE_DROPPED",
		4:   "RESULT_CODE_DISCONNECTED",
		101: "RESULT_CODE_FAILURE",
		103: "RESULT_CODE_ACCESS_DENIED",
		104: "RESULT_CODE_NOT_FOUND",
		105: "RESULT_CODE_OUTSIDE_ALLOWED_RANGE",
		106: "RESULT_CODE_ACTIVE_REQUESTS_LIMIT_VIOLATION",
		107: "RESULT_CODE_REQUEST_RATE_LIMIT_VIOLATION",
		110: "RESULT_CODE_NOT_SUPPORTED",
		111: "RESULT_CODE_INVALID_PARAMS",
	}
	TimeAndSalesReport_ResultCode_value = map[string]int32{
		"RESULT_CODE_SUCCESS":                         0,
		"RESULT_CODE_DROPPED":                         2,
		"RESULT_CODE_DISCONNECTED":                    4,
		"RESULT_CODE_FAILURE":                         101,
		"RESULT_CODE_ACCESS_DENIED":                   103,
		"RESULT_CODE_NOT_FOUND":                       104,
		"RESULT_CODE_OUTSIDE_ALLOWED_RANGE":           105,
		"RESULT_CODE_ACTIVE_REQUESTS_LIMIT_VIOLATION": 106,
		"RESULT_CODE_REQUEST_RATE_LIMIT_VIOLATION":    107,
		"RESULT_CODE_NOT_SUPPORTED":                   110,
		"RESULT_CODE_INVALID_PARAMS":                  111,
	}
)

func (x TimeAndSalesReport_ResultCode) Enum() *TimeAndSalesReport_ResultCode {
	p := new(TimeAndSalesReport_ResultCode)
	*p = x
	return p
}

func (x TimeAndSalesReport_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeAndSalesReport_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_historical_2_proto_enumTypes[5].Descriptor()
}

func (TimeAndSalesReport_ResultCode) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_historical_2_proto_enumTypes[5]
}

func (x TimeAndSalesReport_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TimeAndSalesReport_ResultCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TimeAndSalesReport_ResultCode(num)
	return nil
}

// Deprecated: Use TimeAndSalesReport_ResultCode.Descriptor instead.
func (TimeAndSalesReport_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_historical_2_proto_rawDescGZIP(), []int{2, 0}
}

type ContinuationParameters_ContinuationType int32

const (
	// Rollover with trading activity (corresponds with ContractMetadata.is_most_active).
	ContinuationParameters_CONTINUATION_TYPE_ACTIVE ContinuationParameters_ContinuationType = 1
	// Rollover at expiration (non-Delayed and non-EOD contracts only).
	ContinuationParameters_CONTINUATION_TYPE_STANDARD ContinuationParameters_ContinuationType = 2
)

// Enum value maps for ContinuationParameters_ContinuationType.
var (
	ContinuationParameters_ContinuationType_name = map[int32]string{
		1: "CONTINUATION_TYPE_ACTIVE",
		2: "CONTINUATION_TYPE_STANDARD",
	}
	ContinuationParameters_ContinuationType_value = map[string]int32{
		"CONTINUATION_TYPE_ACTIVE":   1,
		"CONTINUATION_TYPE_STANDARD": 2,
	}
)

func (x ContinuationParameters_ContinuationType) Enum() *ContinuationParameters_ContinuationType {
	p := new(ContinuationParameters_ContinuationType)
	*p = x
	return p
}

func (x ContinuationParameters_ContinuationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContinuationParameters_ContinuationType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_historical_2_proto_enumTypes[6].Descriptor()
}

func (ContinuationParameters_ContinuationType) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_historical_2_proto_enumTypes[6]
}

func (x ContinuationParameters_ContinuationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ContinuationParameters_ContinuationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ContinuationParameters_ContinuationType(num)
	return nil
}

// Deprecated: Use ContinuationParameters_ContinuationType.Descriptor instead.
func (ContinuationParameters_ContinuationType) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_historical_2_proto_rawDescGZIP(), []int{3, 0}
}

// Type of a bar request.
type TimeBarRequest_RequestType int32

const (
	// Request bars without subscription.
	TimeBarRequest_REQUEST_TYPE_GET TimeBarRequest_RequestType = 1
	// Request bars with subscription for updates.
	// Note: to_utc_time parameter must not be specified to subscribe.
	// Note: subscription requests for deleted instruments (ContractMetadata.deleted=True) are rejected.
	TimeBarRequest_REQUEST_TYPE_SUBSCRIBE TimeBarRequest_RequestType = 2
	// Drop request before server completes it and/or unsubscribe if already subscribed for updates.
	TimeBarRequest_REQUEST_TYPE_DROP TimeBarRequest_RequestType = 3
)

// Enum value maps for TimeBarRequest_RequestType.
var (
	TimeBarRequest_RequestType_name = map[int32]string{
		1: "REQUEST_TYPE_GET",
		2: "REQUEST_TYPE_SUBSCRIBE",
		3: "REQUEST_TYPE_DROP",
	}
	TimeBarRequest_RequestType_value = map[string]int32{
		"REQUEST_TYPE_GET":       1,
		"REQUEST_TYPE_SUBSCRIBE": 2,
		"REQUEST_TYPE_DROP":      3,
	}
)

func (x TimeBarRequest_RequestType) Enum() *TimeBarRequest_RequestType {
	p := new(TimeBarRequest_RequestType)
	*p = x
	return p
}

func (x TimeBarRequest_RequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeBarRequest_RequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_historical_2_proto_enumTypes[7].Descriptor()
}

func (TimeBarRequest_RequestType) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_historical_2_proto_enumTypes[7]
}

func (x TimeBarRequest_RequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TimeBarRequest_RequestType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TimeBarRequest_RequestType(num)
	return nil
}

// Deprecated: Use TimeBarRequest_RequestType.Descriptor instead.
func (TimeBarRequest_RequestType) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_historical_2_proto_rawDescGZIP(), []int{5, 0}
}

// Time direction.
type BarRange_TimeDirection int32

const (
	// 'utc_time' and 'index' define the right bound of the requested range.
	// If 'utc_time' is not specified then latest allowed and available time is used.
	// The right bound is exclusive: the report will contain specified count of bars preceding the boundary.
	// Each report will contain set of bars sorted in descending order by (bar_utc_time, index).
	// Reports related to a specific request will be ordered chronologically from the most recent one to the past.
	BarRange_TIME_DIRECTION_BACKWARD BarRange_TimeDirection = 1
)

// Enum value maps for BarRange_TimeDirection.
var (
	BarRange_TimeDirection_name = map[int32]string{
		1: "TIME_DIRECTION_BACKWARD",
	}
	BarRange_TimeDirection_value = map[string]int32{
		"TIME_DIRECTION_BACKWARD": 1,
	}
)

func (x BarRange_TimeDirection) Enum() *BarRange_TimeDirection {
	p := new(BarRange_TimeDirection)
	*p = x
	return p
}

func (x BarRange_TimeDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BarRange_TimeDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_historical_2_proto_enumTypes[8].Descriptor()
}

func (BarRange_TimeDirection) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_historical_2_proto_enumTypes[8]
}

func (x BarRange_TimeDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BarRange_TimeDirection) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BarRange_TimeDirection(num)
	return nil
}

// Deprecated: Use BarRange_TimeDirection.Descriptor instead.
func (BarRange_TimeDirection) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_historical_2_proto_rawDescGZIP(), []int{9, 0}
}

// Type of request action.
type NonTimedBarRequest_RequestType int32

const (
	// Request bars without subscription.
	NonTimedBarRequest_REQUEST_TYPE_GET NonTimedBarRequest_RequestType = 1
	// Request bars with subscription for updates.
	// Note: utc_time parameter of BarRange must not be specified to subscribe.
	// Note: subscription requests for deleted instruments (ContractMetadata.deleted=True) are rejected.
	NonTimedBarRequest_REQUEST_TYPE_SUBSCRIBE NonTimedBarRequest_RequestType = 2
	// Drop request before server completes it and/or unsubscribe if already subscribed for updates.
	NonTimedBarRequest_REQUEST_TYPE_DROP NonTimedBarRequest_RequestType = 3
)

// Enum value maps for NonTimedBarRequest_RequestType.
var (
	NonTimedBarRequest_RequestType_name = map[int32]string{
		1: "REQUEST_TYPE_GET",
		2: "REQUEST_TYPE_SUBSCRIBE",
		3: "REQUEST_TYPE_DROP",
	}
	NonTimedBarRequest_RequestType_value = map[string]int32{
		"REQUEST_TYPE_GET":       1,
		"REQUEST_TYPE_SUBSCRIBE": 2,
		"REQUEST_TYPE_DROP":      3,
	}
)

func (x NonTimedBarRequest_RequestType) Enum() *NonTimedBarRequest_RequestType {
	p := new(NonTimedBarRequest_RequestType)
	*p = x
	return p
}

func (x NonTimedBarRequest_RequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NonTimedBarRequest_RequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_historical_2_proto_enumTypes[9].Descriptor()
}

func (NonTimedBarRequest_RequestType) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_historical_2_proto_enumTypes[9]
}

func (x NonTimedBarRequest_RequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *NonTimedBarRequest_RequestType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = NonTimedBarRequest_RequestType(num)
	return nil
}

// Deprecated: Use NonTimedBarRequest_RequestType.Descriptor instead.
func (NonTimedBarRequest_RequestType) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_historical_2_proto_rawDescGZIP(), []int{10, 0}
}

// Start point values.
type RenkoBarParameters_StartPoint int32

const (
	// Renko calculation resets at the beginning of session.
	RenkoBarParameters_START_POINT_SESSION RenkoBarParameters_StartPoint = 0
	// Renko calculation resets at the beginning of week (corresponds to start of weekly timed bar)
	RenkoBarParameters_START_POINT_WEEK RenkoBarParameters_StartPoint = 1
	// Renko calculation resets at the beginning of month (corresponds to start of monthly timed bar).
	RenkoBarParameters_START_POINT_MONTH RenkoBarParameters_StartPoint = 2
)

// Enum value maps for RenkoBarParameters_StartPoint.
var (
	RenkoBarParameters_StartPoint_name = map[int32]string{
		0: "START_POINT_SESSION",
		1: "START_POINT_WEEK",
		2: "START_POINT_MONTH",
	}
	RenkoBarParameters_StartPoint_value = map[string]int32{
		"START_POINT_SESSION": 0,
		"START_POINT_WEEK":    1,
		"START_POINT_MONTH":   2,
	}
)

func (x RenkoBarParameters_StartPoint) Enum() *RenkoBarParameters_StartPoint {
	p := new(RenkoBarParameters_StartPoint)
	*p = x
	return p
}

func (x RenkoBarParameters_StartPoint) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RenkoBarParameters_StartPoint) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_historical_2_proto_enumTypes[10].Descriptor()
}

func (RenkoBarParameters_StartPoint) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_historical_2_proto_enumTypes[10]
}

func (x RenkoBarParameters_StartPoint) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RenkoBarParameters_StartPoint) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RenkoBarParameters_StartPoint(num)
	return nil
}

// Deprecated: Use RenkoBarParameters_StartPoint.Descriptor instead.
func (RenkoBarParameters_StartPoint) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_historical_2_proto_rawDescGZIP(), []int{11, 0}
}

// Start point values.
type RangeBarParameters_StartPoint int32

const (
	// Range bar calculation resets at the beginning of session.
	RangeBarParameters_START_POINT_SESSION RangeBarParameters_StartPoint = 0
	// Range bar calculation resets at the beginning of week.
	RangeBarParameters_START_POINT_WEEK RangeBarParameters_StartPoint = 1
	// Range bar calculation resets at the beginning of month.
	RangeBarParameters_START_POINT_MONTH RangeBarParameters_StartPoint = 2
)

// Enum value maps for RangeBarParameters_StartPoint.
var (
	RangeBarParameters_StartPoint_name = map[int32]string{
		0: "START_POINT_SESSION",
		1: "START_POINT_WEEK",
		2: "START_POINT_MONTH",
	}
	RangeBarParameters_StartPoint_value = map[string]int32{
		"START_POINT_SESSION": 0,
		"START_POINT_WEEK":    1,
		"START_POINT_MONTH":   2,
	}
)

func (x RangeBarParameters_StartPoint) Enum() *RangeBarParameters_StartPoint {
	p := new(RangeBarParameters_StartPoint)
	*p = x
	return p
}

func (x RangeBarParameters_StartPoint) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RangeBarParameters_StartPoint) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_historical_2_proto_enumTypes[11].Descriptor()
}

func (RangeBarParameters_StartPoint) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_historical_2_proto_enumTypes[11]
}

func (x RangeBarParameters_StartPoint) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RangeBarParameters_StartPoint) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RangeBarParameters_StartPoint(num)
	return nil
}

// Deprecated: Use RangeBarParameters_StartPoint.Descriptor instead.
func (RangeBarParameters_StartPoint) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_historical_2_proto_rawDescGZIP(), []int{12, 0}
}

// Type of request action.
type VolumeProfileRequest_RequestType int32

const (
	// Request data.
	VolumeProfileRequest_REQUEST_TYPE_GET VolumeProfileRequest_RequestType = 1
	// Drop request before server completes it.
	VolumeProfileRequest_REQUEST_TYPE_DROP VolumeProfileRequest_RequestType = 3
)

// Enum value maps for VolumeProfileRequest_RequestType.
var (
	VolumeProfileRequest_RequestType_name = map[int32]string{
		1: "REQUEST_TYPE_GET",
		3: "REQUEST_TYPE_DROP",
	}
	VolumeProfileRequest_RequestType_value = map[string]int32{
		"REQUEST_TYPE_GET":  1,
		"REQUEST_TYPE_DROP": 3,
	}
)

func (x VolumeProfileRequest_RequestType) Enum() *VolumeProfileRequest_RequestType {
	p := new(VolumeProfileRequest_RequestType)
	*p = x
	return p
}

func (x VolumeProfileRequest_RequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VolumeProfileRequest_RequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_historical_2_proto_enumTypes[12].Descriptor()
}

func (VolumeProfileRequest_RequestType) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_historical_2_proto_enumTypes[12]
}

func (x VolumeProfileRequest_RequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *VolumeProfileRequest_RequestType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = VolumeProfileRequest_RequestType(num)
	return nil
}

// Deprecated: Use VolumeProfileRequest_RequestType.Descriptor instead.
func (VolumeProfileRequest_RequestType) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_historical_2_proto_rawDescGZIP(), []int{22, 0}
}

type VolumeProfileReport_ResultCode int32

const (
	// / success codes  (0 - 99)
	// Request is processed successfully.
	VolumeProfileReport_RESULT_CODE_SUCCESS VolumeProfileReport_ResultCode = 0
	// The request is dropped by the client.
	VolumeProfileReport_RESULT_CODE_DROPPED VolumeProfileReport_ResultCode = 2
	// Request processing status that indicates that currently
	// processing is impossible because of communication issues.
	// NOTE: Clients should not resend requests in this case,
	// the server will restore processing with sending RESULT_CODE_SUCCESS status
	// once communication issues are resolved. If client is not interested
	// in this request any longer it should send REQUEST_TYPE_DROP request.
	VolumeProfileReport_RESULT_CODE_DISCONNECTED VolumeProfileReport_ResultCode = 4
	// / failure codes (100+)
	// General failure.
	VolumeProfileReport_RESULT_CODE_FAILURE VolumeProfileReport_ResultCode = 101
	// The user is not allowed to access this instrument data.
	VolumeProfileReport_RESULT_CODE_ACCESS_DENIED VolumeProfileReport_ResultCode = 103
	// Requested information is not found.
	VolumeProfileReport_RESULT_CODE_NOT_FOUND VolumeProfileReport_ResultCode = 104
	// Requested data is outside of allowed range.
	VolumeProfileReport_RESULT_CODE_OUTSIDE_ALLOWED_RANGE VolumeProfileReport_ResultCode = 105
	// The limit of the active historical requests has been violated.
	VolumeProfileReport_RESULT_CODE_ACTIVE_REQUESTS_LIMIT_VIOLATION VolumeProfileReport_ResultCode = 106
	// VolumeProfile request is not supported for specified contract.
	VolumeProfileReport_RESULT_CODE_NOT_SUPPORTED VolumeProfileReport_ResultCode = 110
	// Parameters of a VolumeProfile request are invalid.
	VolumeProfileReport_RESULT_CODE_INVALID_PARAMS VolumeProfileReport_ResultCode = 111
)

// Enum value maps for VolumeProfileReport_ResultCode.
var (
	VolumeProfileReport_ResultCode_name = map[int32]string{
		0:   "RESULT_CODE_SUCCESS",
		2:   "RESULT_CODE_DROPPED",
		4:   "RESULT_CODE_DISCONNECTED",
		101: "RESULT_CODE_FAILURE",
		103: "RESULT_CODE_ACCESS_DENIED",
		104: "RESULT_CODE_NOT_FOUND",
		105: "RESULT_CODE_OUTSIDE_ALLOWED_RANGE",
		106: "RESULT_CODE_ACTIVE_REQUESTS_LIMIT_VIOLATION",
		110: "RESULT_CODE_NOT_SUPPORTED",
		111: "RESULT_CODE_INVALID_PARAMS",
	}
	VolumeProfileReport_ResultCode_value = map[string]int32{
		"RESULT_CODE_SUCCESS":                         0,
		"RESULT_CODE_DROPPED":                         2,
		"RESULT_CODE_DISCONNECTED":                    4,
		"RESULT_CODE_FAILURE":                         101,
		"RESULT_CODE_ACCESS_DENIED":                   103,
		"RESULT_CODE_NOT_FOUND":                       104,
		"RESULT_CODE_OUTSIDE_ALLOWED_RANGE":           105,
		"RESULT_CODE_ACTIVE_REQUESTS_LIMIT_VIOLATION": 106,
		"RESULT_CODE_NOT_SUPPORTED":                   110,
		"RESULT_CODE_INVALID_PARAMS":                  111,
	}
)

func (x VolumeProfileReport_ResultCode) Enum() *VolumeProfileReport_ResultCode {
	p := new(VolumeProfileReport_ResultCode)
	*p = x
	return p
}

func (x VolumeProfileReport_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VolumeProfileReport_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_historical_2_proto_enumTypes[13].Descriptor()
}

func (VolumeProfileReport_ResultCode) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_historical_2_proto_enumTypes[13]
}

func (x VolumeProfileReport_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *VolumeProfileReport_ResultCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = VolumeProfileReport_ResultCode(num)
	return nil
}

// Deprecated: Use VolumeProfileReport_ResultCode.Descriptor instead.
func (VolumeProfileReport_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_historical_2_proto_rawDescGZIP(), []int{24, 0}
}

// Parameters for Time and Sales request.
type TimeAndSalesParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// contract id for Time and Sales request.
	ContractId *uint32 `protobuf:"varint,1,req,name=contract_id,json=contractId" json:"contract_id,omitempty"`
	// This field is associated with Level enum type.
	Level *uint32 `protobuf:"varint,2,req,name=level" json:"level,omitempty"`
	// Time and Sales period time to start from.
	FromUtcTime *int64 `protobuf:"zigzag64,3,req,name=from_utc_time,json=fromUtcTime" json:"from_utc_time,omitempty"`
	// Optional Time and Sales period finish time.
	// Latest allowed and available time is used if it is not specified.
	ToUtcTime *int64 `protobuf:"zigzag64,4,opt,name=to_utc_time,json=toUtcTime" json:"to_utc_time,omitempty"`
	// Includes Off Market trade quotes in report.
	IncludeOffMarketTrades *bool `protobuf:"varint,5,opt,name=include_off_market_trades,json=includeOffMarketTrades" json:"include_off_market_trades,omitempty"`
	// Quotes from report include trade attributes.
	IncludeTradeAttributes *bool `protobuf:"varint,6,opt,name=include_trade_attributes,json=includeTradeAttributes" json:"include_trade_attributes,omitempty"`
}

func (x *TimeAndSalesParameters) Reset() {
	*x = TimeAndSalesParameters{}
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeAndSalesParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeAndSalesParameters) ProtoMessage() {}

func (x *TimeAndSalesParameters) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeAndSalesParameters.ProtoReflect.Descriptor instead.
func (*TimeAndSalesParameters) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_historical_2_proto_rawDescGZIP(), []int{0}
}

func (x *TimeAndSalesParameters) GetContractId() uint32 {
	if x != nil && x.ContractId != nil {
		return *x.ContractId
	}
	return 0
}

func (x *TimeAndSalesParameters) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *TimeAndSalesParameters) GetFromUtcTime() int64 {
	if x != nil && x.FromUtcTime != nil {
		return *x.FromUtcTime
	}
	return 0
}

func (x *TimeAndSalesParameters) GetToUtcTime() int64 {
	if x != nil && x.ToUtcTime != nil {
		return *x.ToUtcTime
	}
	return 0
}

func (x *TimeAndSalesParameters) GetIncludeOffMarketTrades() bool {
	if x != nil && x.IncludeOffMarketTrades != nil {
		return *x.IncludeOffMarketTrades
	}
	return false
}

func (x *TimeAndSalesParameters) GetIncludeTradeAttributes() bool {
	if x != nil && x.IncludeTradeAttributes != nil {
		return *x.IncludeTradeAttributes
	}
	return false
}

// Time and sales request (30 days history limit).
type TimeAndSalesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Request ID, should be unique among currently processed requests.
	RequestId *uint32 `protobuf:"varint,1,req,name=request_id,json=requestId" json:"request_id,omitempty"`
	// parameters of a request, ignored for a REQUEST_TYPE_DROP operation.
	TimeAndSalesParameters *TimeAndSalesParameters `protobuf:"bytes,2,opt,name=time_and_sales_parameters,json=timeAndSalesParameters" json:"time_and_sales_parameters,omitempty"`
	// This field is associated with RequestType enum type. REQUEST_TYPE_GET operation is processed by default.
	RequestType *uint32 `protobuf:"varint,3,opt,name=request_type,json=requestType" json:"request_type,omitempty"`
}

func (x *TimeAndSalesRequest) Reset() {
	*x = TimeAndSalesRequest{}
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeAndSalesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeAndSalesRequest) ProtoMessage() {}

func (x *TimeAndSalesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeAndSalesRequest.ProtoReflect.Descriptor instead.
func (*TimeAndSalesRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_historical_2_proto_rawDescGZIP(), []int{1}
}

func (x *TimeAndSalesRequest) GetRequestId() uint32 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *TimeAndSalesRequest) GetTimeAndSalesParameters() *TimeAndSalesParameters {
	if x != nil {
		return x.TimeAndSalesParameters
	}
	return nil
}

func (x *TimeAndSalesRequest) GetRequestType() uint32 {
	if x != nil && x.RequestType != nil {
		return *x.RequestType
	}
	return 0
}

// Time and sales report
type TimeAndSalesReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of a corresponding request.
	RequestId *uint32 `protobuf:"varint,1,req,name=request_id,json=requestId" json:"request_id,omitempty"`
	// This field is associated with ResultCode enum type.
	ResultCode *uint32 `protobuf:"varint,2,req,name=result_code,json=resultCode" json:"result_code,omitempty"`
	// List of the requested Time and Sales as quotes.
	// Note that in order to simplify linking of T&S with real time quotes by a client server will atomically include
	// all quotes with the same time-stamp into T&S without splitting the group.
	Quotes []*Quote `protobuf:"bytes,3,rep,name=quotes" json:"quotes,omitempty"`
	// List of corrections.
	Corrections []*Quote `protobuf:"bytes,10,rep,name=corrections" json:"corrections,omitempty"`
	// Time up to which the quotes were included into this report,
	// if there were several with the same time-stamp equal to this time then all are included into the report (UTC).
	// This time is set only for 'up-to-current' requests.
	UpToUtcTime *int64 `protobuf:"varint,4,opt,name=up_to_utc_time,json=upToUtcTime" json:"up_to_utc_time,omitempty"`
	// True means that requested data is complete at the moment,
	// false means more report messages are expected for completeness.
	IsReportComplete *bool `protobuf:"varint,5,opt,name=is_report_complete,json=isReportComplete,def=1" json:"is_report_complete,omitempty"`
	// Optional failure details.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/historical_2.proto.
	TextMessage *string `protobuf:"bytes,6,opt,name=text_message,json=textMessage" json:"text_message,omitempty"`
	// Optional failure details.
	Details *common.Text `protobuf:"bytes,11,opt,name=details" json:"details,omitempty"`
	// Request contains dates partially outside of allowed historical data depth.
	Truncated *bool `protobuf:"varint,7,opt,name=truncated" json:"truncated,omitempty"`
	// Off Market trade quotes are included.
	// Always False if user didn't request Off Market trades.
	OffMarketTradesIncluded *bool `protobuf:"varint,8,opt,name=off_market_trades_included,json=offMarketTradesIncluded" json:"off_market_trades_included,omitempty"`
	// Trade attributes are included.
	// Always False if user didn't request trade attributes.
	TradeAttributesIncluded *bool `protobuf:"varint,9,opt,name=trade_attributes_included,json=tradeAttributesIncluded" json:"trade_attributes_included,omitempty"`
}

// Default values for TimeAndSalesReport fields.
const (
	Default_TimeAndSalesReport_IsReportComplete = bool(true)
)

func (x *TimeAndSalesReport) Reset() {
	*x = TimeAndSalesReport{}
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeAndSalesReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeAndSalesReport) ProtoMessage() {}

func (x *TimeAndSalesReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeAndSalesReport.ProtoReflect.Descriptor instead.
func (*TimeAndSalesReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_historical_2_proto_rawDescGZIP(), []int{2}
}

func (x *TimeAndSalesReport) GetRequestId() uint32 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *TimeAndSalesReport) GetResultCode() uint32 {
	if x != nil && x.ResultCode != nil {
		return *x.ResultCode
	}
	return 0
}

func (x *TimeAndSalesReport) GetQuotes() []*Quote {
	if x != nil {
		return x.Quotes
	}
	return nil
}

func (x *TimeAndSalesReport) GetCorrections() []*Quote {
	if x != nil {
		return x.Corrections
	}
	return nil
}

func (x *TimeAndSalesReport) GetUpToUtcTime() int64 {
	if x != nil && x.UpToUtcTime != nil {
		return *x.UpToUtcTime
	}
	return 0
}

func (x *TimeAndSalesReport) GetIsReportComplete() bool {
	if x != nil && x.IsReportComplete != nil {
		return *x.IsReportComplete
	}
	return Default_TimeAndSalesReport_IsReportComplete
}

// Deprecated: Marked as deprecated in protos/WebAPI/historical_2.proto.
func (x *TimeAndSalesReport) GetTextMessage() string {
	if x != nil && x.TextMessage != nil {
		return *x.TextMessage
	}
	return ""
}

func (x *TimeAndSalesReport) GetDetails() *common.Text {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *TimeAndSalesReport) GetTruncated() bool {
	if x != nil && x.Truncated != nil {
		return *x.Truncated
	}
	return false
}

func (x *TimeAndSalesReport) GetOffMarketTradesIncluded() bool {
	if x != nil && x.OffMarketTradesIncluded != nil {
		return *x.OffMarketTradesIncluded
	}
	return false
}

func (x *TimeAndSalesReport) GetTradeAttributesIncluded() bool {
	if x != nil && x.TradeAttributesIncluded != nil {
		return *x.TradeAttributesIncluded
	}
	return false
}

// Continuation parameters for TimeBarRequest.
type ContinuationParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This field is associated with ContinuationType enum type.
	ContinuationType *uint32 `protobuf:"varint,1,req,name=continuation_type,json=continuationType" json:"continuation_type,omitempty"`
	// Equalize closes (opens for bonds). Supported for CONTINUATION_TYPE_ACTIVE continuation only.
	Equalize *bool `protobuf:"varint,2,opt,name=equalize,def=0" json:"equalize,omitempty"`
}

// Default values for ContinuationParameters fields.
const (
	Default_ContinuationParameters_Equalize = bool(false)
)

func (x *ContinuationParameters) Reset() {
	*x = ContinuationParameters{}
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContinuationParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContinuationParameters) ProtoMessage() {}

func (x *ContinuationParameters) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContinuationParameters.ProtoReflect.Descriptor instead.
func (*ContinuationParameters) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_historical_2_proto_rawDescGZIP(), []int{3}
}

func (x *ContinuationParameters) GetContinuationType() uint32 {
	if x != nil && x.ContinuationType != nil {
		return *x.ContinuationType
	}
	return 0
}

func (x *ContinuationParameters) GetEqualize() bool {
	if x != nil && x.Equalize != nil {
		return *x.Equalize
	}
	return Default_ContinuationParameters_Equalize
}

// Parameters of a time bar request.
type TimeBarParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contract id for a bar request.
	ContractId *uint32 `protobuf:"varint,1,req,name=contract_id,json=contractId" json:"contract_id,omitempty"`
	// This field is associated with BarUnit enum type.
	BarUnit *uint32 `protobuf:"varint,2,req,name=bar_unit,json=barUnit" json:"bar_unit,omitempty"`
	// Number of units per a single bar for Intra-day bars (must be within 24 hours period).
	UnitNumber *uint32 `protobuf:"varint,3,opt,name=unit_number,json=unitNumber" json:"unit_number,omitempty"`
	// Bars period time to start from.
	//  1. For daily and multi-day bars represents starting trade date (time part is ignored), inclusive.
	//  2. For intra-day bars represents starting time, inclusive.
	//  3. Start time is automatically aligned to the closest starting time of selected unit.
	//     For example if bar_unit is BAR_UNIT_MONTH and from_utc_time is November 08
	//     bar starting time will be set the first working day of November.
	FromUtcTime *int64 `protobuf:"zigzag64,4,req,name=from_utc_time,json=fromUtcTime" json:"from_utc_time,omitempty"`
	// Optional bars period finish time.
	// Latest allowed and available time is used if it is not specified.
	//  1. For daily and multi-day bars represents trade date of the last returned bar (time part is ignored), inclusive.
	//  2. For intra-day bars represents finish time, exclusive.
	//  3. Finish time is automatically aligned to the closest finish time of selected unit.
	//     For example if bar_unit is BAR_UNIT_MONTH and to_utc_time is November 08
	//     bar finish time will be set to the last working day of November.
	ToUtcTime *int64 `protobuf:"zigzag64,5,opt,name=to_utc_time,json=toUtcTime" json:"to_utc_time,omitempty"`
	// Use close_sources instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/historical_2.proto.
	DeprecatedClosePricePreference *uint32 `protobuf:"varint,10,opt,name=deprecated_close_price_preference,json=deprecatedClosePricePreference" json:"deprecated_close_price_preference,omitempty"`
	// List of sources for closing price in bar building.
	// Order of sources defines what is used if several sources are available (from highest to lowest priority).
	// This field is associated with metadata_2.CloseSource enum type.
	// When list is empty, default close sources are used (ContractMetadata.close_sources).
	// If list is not empty, it must contain CLOSE_SOURCE_LAST_QUOTE, otherwise request is rejected.
	// Note: can be non-empty for requests with bar_unit equal to BAR_UNIT_DAY or greater, otherwise request is rejected.
	CloseSources []uint32 `protobuf:"varint,11,rep,name=close_sources,json=closeSources" json:"close_sources,omitempty"`
	// Continuation parameters.
	ContinuationParameters *ContinuationParameters `protobuf:"bytes,7,opt,name=continuation_parameters,json=continuationParameters" json:"continuation_parameters,omitempty"`
	// List of tick types to be used in bar building.
	// This field is associated with BarBuildingTickType enum type.
	// When list is empty, commodity default tick types are used.
	// Note: can be non-empty for intra-day bar requests only, otherwise request is rejected.
	// Note: BAR_BUILDING_TICK_TYPE_SETTLEMENT tick type can only be used in combination with other type(s),
	// otherwise request is rejected.
	TickTypes []uint32 `protobuf:"varint,8,rep,name=tick_types,json=tickTypes" json:"tick_types,omitempty"`
	// Update interval, in milliseconds, after which bar is reported, if changed.
	// Minimum is 1 second for Intra-day bars and 10 seconds for historical bars.
	// Maximum is 1 hour for both.
	// Maximum update interval for Intra-day bars is also limited by chosen bar_unit and bar_number values
	// (e.g. if bar_unit is MINUTE and bar_number is 10 update interval can't exceed 600 seconds).
	// Default is 1 second for Intra-day bars or 10 seconds for historical bars, if omitted.
	UpdateInterval *uint32 `protobuf:"varint,9,opt,name=update_interval,json=updateInterval" json:"update_interval,omitempty"`
}

func (x *TimeBarParameters) Reset() {
	*x = TimeBarParameters{}
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeBarParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeBarParameters) ProtoMessage() {}

func (x *TimeBarParameters) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeBarParameters.ProtoReflect.Descriptor instead.
func (*TimeBarParameters) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_historical_2_proto_rawDescGZIP(), []int{4}
}

func (x *TimeBarParameters) GetContractId() uint32 {
	if x != nil && x.ContractId != nil {
		return *x.ContractId
	}
	return 0
}

func (x *TimeBarParameters) GetBarUnit() uint32 {
	if x != nil && x.BarUnit != nil {
		return *x.BarUnit
	}
	return 0
}

func (x *TimeBarParameters) GetUnitNumber() uint32 {
	if x != nil && x.UnitNumber != nil {
		return *x.UnitNumber
	}
	return 0
}

func (x *TimeBarParameters) GetFromUtcTime() int64 {
	if x != nil && x.FromUtcTime != nil {
		return *x.FromUtcTime
	}
	return 0
}

func (x *TimeBarParameters) GetToUtcTime() int64 {
	if x != nil && x.ToUtcTime != nil {
		return *x.ToUtcTime
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/historical_2.proto.
func (x *TimeBarParameters) GetDeprecatedClosePricePreference() uint32 {
	if x != nil && x.DeprecatedClosePricePreference != nil {
		return *x.DeprecatedClosePricePreference
	}
	return 0
}

func (x *TimeBarParameters) GetCloseSources() []uint32 {
	if x != nil {
		return x.CloseSources
	}
	return nil
}

func (x *TimeBarParameters) GetContinuationParameters() *ContinuationParameters {
	if x != nil {
		return x.ContinuationParameters
	}
	return nil
}

func (x *TimeBarParameters) GetTickTypes() []uint32 {
	if x != nil {
		return x.TickTypes
	}
	return nil
}

func (x *TimeBarParameters) GetUpdateInterval() uint32 {
	if x != nil && x.UpdateInterval != nil {
		return *x.UpdateInterval
	}
	return 0
}

// Request for time bars with optional subscription.
// In case of subscription updates are sent when a bar opens, closes or when it is corrected.
// Corrected bars are sent even if they are outside of requested time bounds.
// Range can be expanded with another request if needed.
type TimeBarRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// request or subscription ID.
	RequestId *uint32 `protobuf:"varint,1,req,name=request_id,json=requestId" json:"request_id,omitempty"`
	// parameters of a request, ignored for a REQUEST_TYPE_DROP operation.
	TimeBarParameters *TimeBarParameters `protobuf:"bytes,2,opt,name=time_bar_parameters,json=timeBarParameters" json:"time_bar_parameters,omitempty"`
	// This field is associated with RequestType enum type. REQUEST_TYPE_GET operation is processed by default.
	RequestType *uint32 `protobuf:"varint,3,opt,name=request_type,json=requestType" json:"request_type,omitempty"`
}

func (x *TimeBarRequest) Reset() {
	*x = TimeBarRequest{}
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeBarRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeBarRequest) ProtoMessage() {}

func (x *TimeBarRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeBarRequest.ProtoReflect.Descriptor instead.
func (*TimeBarRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_historical_2_proto_rawDescGZIP(), []int{5}
}

func (x *TimeBarRequest) GetRequestId() uint32 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *TimeBarRequest) GetTimeBarParameters() *TimeBarParameters {
	if x != nil {
		return x.TimeBarParameters
	}
	return nil
}

func (x *TimeBarRequest) GetRequestType() uint32 {
	if x != nil && x.RequestType != nil {
		return *x.RequestType
	}
	return 0
}

// Continuation segment.
type ContinuationSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Short contract symbol in CQG dialect.
	CqgShortContractSymbol *string `protobuf:"bytes,1,opt,name=cqg_short_contract_symbol,json=cqgShortContractSymbol" json:"cqg_short_contract_symbol,omitempty"`
	// Contract id.
	// Note: in case of receiving an unknown id, the contract metadata can be obtained via ContractMetadataRequest.
	ContractId *uint32 `protobuf:"varint,2,opt,name=contract_id,json=contractId" json:"contract_id,omitempty"`
	// Full contract symbol in client dialect.
	ContractSymbol *string `protobuf:"bytes,3,opt,name=contract_symbol,json=contractSymbol" json:"contract_symbol,omitempty"`
}

func (x *ContinuationSegment) Reset() {
	*x = ContinuationSegment{}
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContinuationSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContinuationSegment) ProtoMessage() {}

func (x *ContinuationSegment) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContinuationSegment.ProtoReflect.Descriptor instead.
func (*ContinuationSegment) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_historical_2_proto_rawDescGZIP(), []int{6}
}

func (x *ContinuationSegment) GetCqgShortContractSymbol() string {
	if x != nil && x.CqgShortContractSymbol != nil {
		return *x.CqgShortContractSymbol
	}
	return ""
}

func (x *ContinuationSegment) GetContractId() uint32 {
	if x != nil && x.ContractId != nil {
		return *x.ContractId
	}
	return 0
}

func (x *ContinuationSegment) GetContractSymbol() string {
	if x != nil && x.ContractSymbol != nil {
		return *x.ContractSymbol
	}
	return ""
}

// Time bar.
type TimeBar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bar start time (UTC).
	BarUtcTime *int64 `protobuf:"zigzag64,1,req,name=bar_utc_time,json=barUtcTime" json:"bar_utc_time,omitempty"`
	// Open price.
	ScaledOpenPrice *int64 `protobuf:"zigzag64,2,opt,name=scaled_open_price,json=scaledOpenPrice" json:"scaled_open_price,omitempty"`
	// High price.
	ScaledHighPrice *int64 `protobuf:"zigzag64,3,opt,name=scaled_high_price,json=scaledHighPrice" json:"scaled_high_price,omitempty"`
	// Low price.
	ScaledLowPrice *int64 `protobuf:"zigzag64,4,opt,name=scaled_low_price,json=scaledLowPrice" json:"scaled_low_price,omitempty"`
	// Close or last price (if the bar is not closed yet).
	ScaledClosePrice *int64 `protobuf:"zigzag64,5,opt,name=scaled_close_price,json=scaledClosePrice" json:"scaled_close_price,omitempty"`
	// Note: use 'volume' instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/historical_2.proto.
	ScaledVolume *uint64 `protobuf:"varint,6,opt,name=scaled_volume,json=scaledVolume" json:"scaled_volume,omitempty"`
	// Bar volume.
	Volume *common.Decimal `protobuf:"bytes,15,opt,name=volume" json:"volume,omitempty"`
	// Trade date (in time format), it is set only for the first bar in a requested period
	// and for each first bar of the following trade dates for intra-day bars.
	// Trade date of the bar first day for daily and multi-day bars.
	TradeDate *int64 `protobuf:"zigzag64,7,opt,name=trade_date,json=tradeDate" json:"trade_date,omitempty"`
	// Note: use 'commodity_volume' instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/historical_2.proto.
	ScaledCommodityVolume *uint64 `protobuf:"varint,8,opt,name=scaled_commodity_volume,json=scaledCommodityVolume" json:"scaled_commodity_volume,omitempty"`
	// Commodity volume where available, for daily and multi-day bars only.
	CommodityVolume *common.Decimal `protobuf:"bytes,16,opt,name=commodity_volume,json=commodityVolume" json:"commodity_volume,omitempty"`
	// Note: use 'open_interest' instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/historical_2.proto.
	ScaledOpenInterest *uint64 `protobuf:"varint,9,opt,name=scaled_open_interest,json=scaledOpenInterest" json:"scaled_open_interest,omitempty"`
	// Open interest, for daily and multi-day bars only.
	OpenInterest *common.Decimal `protobuf:"bytes,17,opt,name=open_interest,json=openInterest" json:"open_interest,omitempty"`
	// Note: use 'commodity_open_interest' instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/historical_2.proto.
	ScaledCommodityOpenInterest *uint64 `protobuf:"varint,10,opt,name=scaled_commodity_open_interest,json=scaledCommodityOpenInterest" json:"scaled_commodity_open_interest,omitempty"`
	// Commodity open interest, for daily and multi-day bars only.
	CommodityOpenInterest *common.Decimal `protobuf:"bytes,18,opt,name=commodity_open_interest,json=commodityOpenInterest" json:"commodity_open_interest,omitempty"`
	// Settlement price, provided for daily bars only.
	ScaledSettlementPrice *int64 `protobuf:"zigzag64,11,opt,name=scaled_settlement_price,json=scaledSettlementPrice" json:"scaled_settlement_price,omitempty"`
	// Exchange close price, provided for daily bars only.
	ScaledExchangeClosePrice *int64 `protobuf:"zigzag64,19,opt,name=scaled_exchange_close_price,json=scaledExchangeClosePrice" json:"scaled_exchange_close_price,omitempty"`
	// Tick volume.
	TickVolume *uint64 `protobuf:"varint,12,opt,name=tick_volume,json=tickVolume" json:"tick_volume,omitempty"`
	// Commodity tick volume where available, for daily and multi-day bars only.
	CommodityTickVolume *uint64 `protobuf:"varint,13,opt,name=commodity_tick_volume,json=commodityTickVolume" json:"commodity_tick_volume,omitempty"`
	// Continuation segment the bar belongs to, it is set only for the first bar
	// and for each first bar from the next continuation segment.
	// Used only for continuation bars with BAR_UNIT_MONTH and smaller BarUnit.
	ContinuationSegment *ContinuationSegment `protobuf:"bytes,14,opt,name=continuation_segment,json=continuationSegment" json:"continuation_segment,omitempty"`
}

func (x *TimeBar) Reset() {
	*x = TimeBar{}
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeBar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeBar) ProtoMessage() {}

func (x *TimeBar) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeBar.ProtoReflect.Descriptor instead.
func (*TimeBar) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_historical_2_proto_rawDescGZIP(), []int{7}
}

func (x *TimeBar) GetBarUtcTime() int64 {
	if x != nil && x.BarUtcTime != nil {
		return *x.BarUtcTime
	}
	return 0
}

func (x *TimeBar) GetScaledOpenPrice() int64 {
	if x != nil && x.ScaledOpenPrice != nil {
		return *x.ScaledOpenPrice
	}
	return 0
}

func (x *TimeBar) GetScaledHighPrice() int64 {
	if x != nil && x.ScaledHighPrice != nil {
		return *x.ScaledHighPrice
	}
	return 0
}

func (x *TimeBar) GetScaledLowPrice() int64 {
	if x != nil && x.ScaledLowPrice != nil {
		return *x.ScaledLowPrice
	}
	return 0
}

func (x *TimeBar) GetScaledClosePrice() int64 {
	if x != nil && x.ScaledClosePrice != nil {
		return *x.ScaledClosePrice
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/historical_2.proto.
func (x *TimeBar) GetScaledVolume() uint64 {
	if x != nil && x.ScaledVolume != nil {
		return *x.ScaledVolume
	}
	return 0
}

func (x *TimeBar) GetVolume() *common.Decimal {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *TimeBar) GetTradeDate() int64 {
	if x != nil && x.TradeDate != nil {
		return *x.TradeDate
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/historical_2.proto.
func (x *TimeBar) GetScaledCommodityVolume() uint64 {
	if x != nil && x.ScaledCommodityVolume != nil {
		return *x.ScaledCommodityVolume
	}
	return 0
}

func (x *TimeBar) GetCommodityVolume() *common.Decimal {
	if x != nil {
		return x.CommodityVolume
	}
	return nil
}

// Deprecated: Marked as deprecated in protos/WebAPI/historical_2.proto.
func (x *TimeBar) GetScaledOpenInterest() uint64 {
	if x != nil && x.ScaledOpenInterest != nil {
		return *x.ScaledOpenInterest
	}
	return 0
}

func (x *TimeBar) GetOpenInterest() *common.Decimal {
	if x != nil {
		return x.OpenInterest
	}
	return nil
}

// Deprecated: Marked as deprecated in protos/WebAPI/historical_2.proto.
func (x *TimeBar) GetScaledCommodityOpenInterest() uint64 {
	if x != nil && x.ScaledCommodityOpenInterest != nil {
		return *x.ScaledCommodityOpenInterest
	}
	return 0
}

func (x *TimeBar) GetCommodityOpenInterest() *common.Decimal {
	if x != nil {
		return x.CommodityOpenInterest
	}
	return nil
}

func (x *TimeBar) GetScaledSettlementPrice() int64 {
	if x != nil && x.ScaledSettlementPrice != nil {
		return *x.ScaledSettlementPrice
	}
	return 0
}

func (x *TimeBar) GetScaledExchangeClosePrice() int64 {
	if x != nil && x.ScaledExchangeClosePrice != nil {
		return *x.ScaledExchangeClosePrice
	}
	return 0
}

func (x *TimeBar) GetTickVolume() uint64 {
	if x != nil && x.TickVolume != nil {
		return *x.TickVolume
	}
	return 0
}

func (x *TimeBar) GetCommodityTickVolume() uint64 {
	if x != nil && x.CommodityTickVolume != nil {
		return *x.CommodityTickVolume
	}
	return 0
}

func (x *TimeBar) GetContinuationSegment() *ContinuationSegment {
	if x != nil {
		return x.ContinuationSegment
	}
	return nil
}

// Time bar data response or update.
// Each report contains set of bars sorted in descending order by bar_utc_time.
// Reports related to a specific request ordered chronologically from the most recent one to the past.
// Warning: bar updates are not synchronized with real time data so a real time quote that is included into
// a bar might be received either before or after the bar update,
// use time of a quote for possible real-time bar updates.
type TimeBarReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of a corresponding request or subscription.
	RequestId *uint32 `protobuf:"varint,1,req,name=request_id,json=requestId" json:"request_id,omitempty"`
	// This field is associated with BarReportStatusCode enum type.
	StatusCode *uint32 `protobuf:"varint,2,req,name=status_code,json=statusCode" json:"status_code,omitempty"`
	// List of time bars.
	TimeBars []*TimeBar `protobuf:"bytes,3,rep,name=time_bars,json=timeBars" json:"time_bars,omitempty"`
	// Time up to which the quotes were included into bars,
	// if there were several with the same time-stamp equal to this time then all are included into the last bar (UTC).
	// This time is set for 'up-to-current' bar requests and only if report contains current (incomplete) bar.
	UpToUtcTime *int64 `protobuf:"varint,4,opt,name=up_to_utc_time,json=upToUtcTime" json:"up_to_utc_time,omitempty"`
	// True means that requested data is complete at the moment,
	// false means more report messages are expected for completeness.
	IsReportComplete *bool `protobuf:"varint,5,opt,name=is_report_complete,json=isReportComplete,def=1" json:"is_report_complete,omitempty"`
	// Optional failure details.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/historical_2.proto.
	TextMessage *string `protobuf:"bytes,6,opt,name=text_message,json=textMessage" json:"text_message,omitempty"`
	// Request contains dates partially outside of allowed historical data depth.
	Truncated *bool `protobuf:"varint,7,opt,name=truncated" json:"truncated,omitempty"`
	// Optional failure details.
	Details *common.Text `protobuf:"bytes,8,opt,name=details" json:"details,omitempty"`
	// True means that we reached start of data that we store for this contract. Earlier data is not available.
	// Note: can be True only for intra-day bar requests, for daily and multi-day bar requests it's not provided.
	ReachedStartOfData *bool `protobuf:"varint,9,opt,name=reached_start_of_data,json=reachedStartOfData" json:"reached_start_of_data,omitempty"`
}

// Default values for TimeBarReport fields.
const (
	Default_TimeBarReport_IsReportComplete = bool(true)
)

func (x *TimeBarReport) Reset() {
	*x = TimeBarReport{}
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeBarReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeBarReport) ProtoMessage() {}

func (x *TimeBarReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeBarReport.ProtoReflect.Descriptor instead.
func (*TimeBarReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_historical_2_proto_rawDescGZIP(), []int{8}
}

func (x *TimeBarReport) GetRequestId() uint32 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *TimeBarReport) GetStatusCode() uint32 {
	if x != nil && x.StatusCode != nil {
		return *x.StatusCode
	}
	return 0
}

func (x *TimeBarReport) GetTimeBars() []*TimeBar {
	if x != nil {
		return x.TimeBars
	}
	return nil
}

func (x *TimeBarReport) GetUpToUtcTime() int64 {
	if x != nil && x.UpToUtcTime != nil {
		return *x.UpToUtcTime
	}
	return 0
}

func (x *TimeBarReport) GetIsReportComplete() bool {
	if x != nil && x.IsReportComplete != nil {
		return *x.IsReportComplete
	}
	return Default_TimeBarReport_IsReportComplete
}

// Deprecated: Marked as deprecated in protos/WebAPI/historical_2.proto.
func (x *TimeBarReport) GetTextMessage() string {
	if x != nil && x.TextMessage != nil {
		return *x.TextMessage
	}
	return ""
}

func (x *TimeBarReport) GetTruncated() bool {
	if x != nil && x.Truncated != nil {
		return *x.Truncated
	}
	return false
}

func (x *TimeBarReport) GetDetails() *common.Text {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *TimeBarReport) GetReachedStartOfData() bool {
	if x != nil && x.ReachedStartOfData != nil {
		return *x.ReachedStartOfData
	}
	return false
}

// Range of bars.
type BarRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Boundary time of the requested range (see enum TimeDirection for the details).
	UtcTime *int64 `protobuf:"zigzag64,1,opt,name=utc_time,json=utcTime" json:"utc_time,omitempty"`
	// Number of requested bars.
	// Note: The maximal number of bars that can be requested in one message is limited, 100000 by default.
	Count *uint32 `protobuf:"varint,2,req,name=count" json:"count,omitempty"`
	// Boundary index of the requested range (see enum TimeDirection for the details).
	Index *int32 `protobuf:"zigzag32,3,opt,name=index" json:"index,omitempty"`
	// This field is associated with TimeDirection enum type.
	// TIME_DIRECTION_BACKWARD is used by default.
	TimeDirection *uint32 `protobuf:"varint,4,opt,name=time_direction,json=timeDirection" json:"time_direction,omitempty"`
}

func (x *BarRange) Reset() {
	*x = BarRange{}
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BarRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BarRange) ProtoMessage() {}

func (x *BarRange) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BarRange.ProtoReflect.Descriptor instead.
func (*BarRange) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_historical_2_proto_rawDescGZIP(), []int{9}
}

func (x *BarRange) GetUtcTime() int64 {
	if x != nil && x.UtcTime != nil {
		return *x.UtcTime
	}
	return 0
}

func (x *BarRange) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *BarRange) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *BarRange) GetTimeDirection() uint32 {
	if x != nil && x.TimeDirection != nil {
		return *x.TimeDirection
	}
	return 0
}

// Request for non-time based bars with optional subscription (3 month history limit).
type NonTimedBarRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Request ID.
	RequestId *uint32 `protobuf:"varint,1,req,name=request_id,json=requestId" json:"request_id,omitempty"`
	// This field is associated with RequestType enum type.
	// REQUEST_TYPE_GET operation is processed by default.
	RequestType *uint32 `protobuf:"varint,2,opt,name=request_type,json=requestType" json:"request_type,omitempty"`
	// Continuation parameters.
	ContinuationParameters *ContinuationParameters `protobuf:"bytes,3,opt,name=continuation_parameters,json=continuationParameters" json:"continuation_parameters,omitempty"`
	// Contract id.
	// Note: must be specified for REQUEST_TYPE_GET or REQUEST_TYPE_SUBSCRIBE types of request.
	ContractId *uint32 `protobuf:"varint,4,opt,name=contract_id,json=contractId" json:"contract_id,omitempty"`
	// Specifies bar range of a request.
	// Note: must be specified for REQUEST_TYPE_GET or REQUEST_TYPE_SUBSCRIBE types of request.
	BarRange *BarRange `protobuf:"bytes,5,opt,name=bar_range,json=barRange" json:"bar_range,omitempty"`
	// List of tick types to be used in bar building.
	// This field is associated with BarBuildingTickType enum type.
	// When list is empty, commodity default tick types are used.
	// Note: Requests with BAR_BUILDING_TICK_TYPE_SETTLEMENT tick type in a list are rejected.
	TickTypes []uint32 `protobuf:"varint,10,rep,name=tick_types,json=tickTypes" json:"tick_types,omitempty"`
	// / Only one of following optional fields has to be specified.
	// Constant volume bar request parameters.
	ConstantVolumeBarParameters *ConstantVolumeBarParameters `protobuf:"bytes,6,opt,name=constant_volume_bar_parameters,json=constantVolumeBarParameters" json:"constant_volume_bar_parameters,omitempty"`
	// P&F request parameters.
	PointAndFigureParameters *PointAndFigureParameters `protobuf:"bytes,7,opt,name=point_and_figure_parameters,json=pointAndFigureParameters" json:"point_and_figure_parameters,omitempty"`
	// Renko bar request parameters.
	RenkoBarParameters *RenkoBarParameters `protobuf:"bytes,8,opt,name=renko_bar_parameters,json=renkoBarParameters" json:"renko_bar_parameters,omitempty"`
	// Range bar request parameters.
	RangeBarParameters *RangeBarParameters `protobuf:"bytes,9,opt,name=range_bar_parameters,json=rangeBarParameters" json:"range_bar_parameters,omitempty"`
	// Tick bar request parameters.
	TickBarParameters *TickBarParameters `protobuf:"bytes,11,opt,name=tick_bar_parameters,json=tickBarParameters" json:"tick_bar_parameters,omitempty"`
}

func (x *NonTimedBarRequest) Reset() {
	*x = NonTimedBarRequest{}
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NonTimedBarRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonTimedBarRequest) ProtoMessage() {}

func (x *NonTimedBarRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NonTimedBarRequest.ProtoReflect.Descriptor instead.
func (*NonTimedBarRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_historical_2_proto_rawDescGZIP(), []int{10}
}

func (x *NonTimedBarRequest) GetRequestId() uint32 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *NonTimedBarRequest) GetRequestType() uint32 {
	if x != nil && x.RequestType != nil {
		return *x.RequestType
	}
	return 0
}

func (x *NonTimedBarRequest) GetContinuationParameters() *ContinuationParameters {
	if x != nil {
		return x.ContinuationParameters
	}
	return nil
}

func (x *NonTimedBarRequest) GetContractId() uint32 {
	if x != nil && x.ContractId != nil {
		return *x.ContractId
	}
	return 0
}

func (x *NonTimedBarRequest) GetBarRange() *BarRange {
	if x != nil {
		return x.BarRange
	}
	return nil
}

func (x *NonTimedBarRequest) GetTickTypes() []uint32 {
	if x != nil {
		return x.TickTypes
	}
	return nil
}

func (x *NonTimedBarRequest) GetConstantVolumeBarParameters() *ConstantVolumeBarParameters {
	if x != nil {
		return x.ConstantVolumeBarParameters
	}
	return nil
}

func (x *NonTimedBarRequest) GetPointAndFigureParameters() *PointAndFigureParameters {
	if x != nil {
		return x.PointAndFigureParameters
	}
	return nil
}

func (x *NonTimedBarRequest) GetRenkoBarParameters() *RenkoBarParameters {
	if x != nil {
		return x.RenkoBarParameters
	}
	return nil
}

func (x *NonTimedBarRequest) GetRangeBarParameters() *RangeBarParameters {
	if x != nil {
		return x.RangeBarParameters
	}
	return nil
}

func (x *NonTimedBarRequest) GetTickBarParameters() *TickBarParameters {
	if x != nil {
		return x.TickBarParameters
	}
	return nil
}

// Parameters of a Renko bar request.
type RenkoBarParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Size of single brick. Can take a value from 1 to 1000000000.
	BrickSize *uint32 `protobuf:"varint,1,req,name=brick_size,json=brickSize" json:"brick_size,omitempty"`
	// Maximum number of null bricks that can be generated as a single brick in the case of price gaps.
	// Can take a value from 0 to 200. Default values is 0.
	MaxNullBricks *uint32 `protobuf:"varint,2,opt,name=max_null_bricks,json=maxNullBricks" json:"max_null_bricks,omitempty"`
	// This field is associated with StartPoint enum type.
	// START_POINT_SESSION is processed by default.
	StartPoint *uint32 `protobuf:"varint,3,opt,name=start_point,json=startPoint" json:"start_point,omitempty"`
}

func (x *RenkoBarParameters) Reset() {
	*x = RenkoBarParameters{}
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RenkoBarParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenkoBarParameters) ProtoMessage() {}

func (x *RenkoBarParameters) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenkoBarParameters.ProtoReflect.Descriptor instead.
func (*RenkoBarParameters) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_historical_2_proto_rawDescGZIP(), []int{11}
}

func (x *RenkoBarParameters) GetBrickSize() uint32 {
	if x != nil && x.BrickSize != nil {
		return *x.BrickSize
	}
	return 0
}

func (x *RenkoBarParameters) GetMaxNullBricks() uint32 {
	if x != nil && x.MaxNullBricks != nil {
		return *x.MaxNullBricks
	}
	return 0
}

func (x *RenkoBarParameters) GetStartPoint() uint32 {
	if x != nil && x.StartPoint != nil {
		return *x.StartPoint
	}
	return 0
}

// Parameters of a Range bar request.
type RangeBarParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Size of single range bar. Can take a value from 1 to 1000000000.
	RangeSize *uint32 `protobuf:"varint,1,req,name=range_size,json=rangeSize" json:"range_size,omitempty"`
	// This field is associated with StartPoint enum type.
	// START_POINT_SESSION is processed by default.
	StartPoint *uint32 `protobuf:"varint,3,opt,name=start_point,json=startPoint" json:"start_point,omitempty"`
}

func (x *RangeBarParameters) Reset() {
	*x = RangeBarParameters{}
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RangeBarParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeBarParameters) ProtoMessage() {}

func (x *RangeBarParameters) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeBarParameters.ProtoReflect.Descriptor instead.
func (*RangeBarParameters) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_historical_2_proto_rawDescGZIP(), []int{12}
}

func (x *RangeBarParameters) GetRangeSize() uint32 {
	if x != nil && x.RangeSize != nil {
		return *x.RangeSize
	}
	return 0
}

func (x *RangeBarParameters) GetStartPoint() uint32 {
	if x != nil && x.StartPoint != nil {
		return *x.StartPoint
	}
	return 0
}

// Parameters of a Tick bar request.
type TickBarParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Use 0-plus and 0-minus ticks when building bars.
	UseFlatTicks *bool `protobuf:"varint,1,opt,name=use_flat_ticks,json=useFlatTicks" json:"use_flat_ticks,omitempty"`
}

func (x *TickBarParameters) Reset() {
	*x = TickBarParameters{}
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TickBarParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TickBarParameters) ProtoMessage() {}

func (x *TickBarParameters) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TickBarParameters.ProtoReflect.Descriptor instead.
func (*TickBarParameters) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_historical_2_proto_rawDescGZIP(), []int{13}
}

func (x *TickBarParameters) GetUseFlatTicks() bool {
	if x != nil && x.UseFlatTicks != nil {
		return *x.UseFlatTicks
	}
	return false
}

// Non-time based bar data response or update.
// Each report contains set of bars. The order of bars depends on BarRange.time_direction specified in the request.
// The order of reports related to a specific request depends on BarRange.time_direction specified in the request.
type NonTimedBarReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the request.
	RequestId *uint32 `protobuf:"varint,1,req,name=request_id,json=requestId" json:"request_id,omitempty"`
	// This field is associated with BarReportStatusCode enum type.
	StatusCode *uint32 `protobuf:"varint,2,req,name=status_code,json=statusCode" json:"status_code,omitempty"`
	// Optional failure details.
	Details *common.Text `protobuf:"bytes,3,opt,name=details" json:"details,omitempty"`
	// Time from which bars are invalidated.
	InvalidatedFromUtcTime *int64 `protobuf:"zigzag64,4,opt,name=invalidated_from_utc_time,json=invalidatedFromUtcTime" json:"invalidated_from_utc_time,omitempty"`
	// Time up to which bars are invalidated.
	// If 'invalidated_from_utc_time' is set and 'invalidated_to_utc_time' isn't set, then bars are invalidated
	// up to current time. In this case, bar updates stopped for this subscription.
	InvalidatedToUtcTime *int64 `protobuf:"zigzag64,5,opt,name=invalidated_to_utc_time,json=invalidatedToUtcTime" json:"invalidated_to_utc_time,omitempty"`
	// Time up to which the quotes were included into bars,
	// if there were several with the same time-stamp equal to this time
	// then all are included into the report (UTC).
	// This time is set only for requests with unspecified 'utc_time' parameter of message BarRange and only if report
	// contains current (incomplete) bar.
	UpToUtcTime *int64 `protobuf:"varint,6,opt,name=up_to_utc_time,json=upToUtcTime" json:"up_to_utc_time,omitempty"`
	// It is set only if the number of requested bars exceeded limit.
	TruncatedByBarCount *bool `protobuf:"varint,7,opt,name=truncated_by_bar_count,json=truncatedByBarCount" json:"truncated_by_bar_count,omitempty"`
	// True means that requested data is complete at the moment,
	// false means more report messages are expected for completeness.
	IsReportComplete *bool `protobuf:"varint,8,opt,name=is_report_complete,json=isReportComplete,def=1" json:"is_report_complete,omitempty"`
	// True means that we reached start of data that we store for this contract. Earlier data is not available.
	ReachedStartOfData *bool `protobuf:"varint,14,opt,name=reached_start_of_data,json=reachedStartOfData" json:"reached_start_of_data,omitempty"`
	// / Only one of the following repeated fields is specified.
	// Constant volume bars.
	ConstantVolumeBars []*ConstantVolumeBar `protobuf:"bytes,9,rep,name=constant_volume_bars,json=constantVolumeBars" json:"constant_volume_bars,omitempty"`
	// Point and figure bars.
	PointAndFigureBars []*PointAndFigureBar `protobuf:"bytes,10,rep,name=point_and_figure_bars,json=pointAndFigureBars" json:"point_and_figure_bars,omitempty"`
	// Renko bars.
	RenkoBars []*RenkoBar `protobuf:"bytes,11,rep,name=renko_bars,json=renkoBars" json:"renko_bars,omitempty"`
	// Range bars.
	RangeBars []*RangeBar `protobuf:"bytes,12,rep,name=range_bars,json=rangeBars" json:"range_bars,omitempty"`
	// Tick bars.
	TickBars []*TickBar `protobuf:"bytes,13,rep,name=tick_bars,json=tickBars" json:"tick_bars,omitempty"`
}

// Default values for NonTimedBarReport fields.
const (
	Default_NonTimedBarReport_IsReportComplete = bool(true)
)

func (x *NonTimedBarReport) Reset() {
	*x = NonTimedBarReport{}
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NonTimedBarReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonTimedBarReport) ProtoMessage() {}

func (x *NonTimedBarReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NonTimedBarReport.ProtoReflect.Descriptor instead.
func (*NonTimedBarReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_historical_2_proto_rawDescGZIP(), []int{14}
}

func (x *NonTimedBarReport) GetRequestId() uint32 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *NonTimedBarReport) GetStatusCode() uint32 {
	if x != nil && x.StatusCode != nil {
		return *x.StatusCode
	}
	return 0
}

func (x *NonTimedBarReport) GetDetails() *common.Text {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *NonTimedBarReport) GetInvalidatedFromUtcTime() int64 {
	if x != nil && x.InvalidatedFromUtcTime != nil {
		return *x.InvalidatedFromUtcTime
	}
	return 0
}

func (x *NonTimedBarReport) GetInvalidatedToUtcTime() int64 {
	if x != nil && x.InvalidatedToUtcTime != nil {
		return *x.InvalidatedToUtcTime
	}
	return 0
}

func (x *NonTimedBarReport) GetUpToUtcTime() int64 {
	if x != nil && x.UpToUtcTime != nil {
		return *x.UpToUtcTime
	}
	return 0
}

func (x *NonTimedBarReport) GetTruncatedByBarCount() bool {
	if x != nil && x.TruncatedByBarCount != nil {
		return *x.TruncatedByBarCount
	}
	return false
}

func (x *NonTimedBarReport) GetIsReportComplete() bool {
	if x != nil && x.IsReportComplete != nil {
		return *x.IsReportComplete
	}
	return Default_NonTimedBarReport_IsReportComplete
}

func (x *NonTimedBarReport) GetReachedStartOfData() bool {
	if x != nil && x.ReachedStartOfData != nil {
		return *x.ReachedStartOfData
	}
	return false
}

func (x *NonTimedBarReport) GetConstantVolumeBars() []*ConstantVolumeBar {
	if x != nil {
		return x.ConstantVolumeBars
	}
	return nil
}

func (x *NonTimedBarReport) GetPointAndFigureBars() []*PointAndFigureBar {
	if x != nil {
		return x.PointAndFigureBars
	}
	return nil
}

func (x *NonTimedBarReport) GetRenkoBars() []*RenkoBar {
	if x != nil {
		return x.RenkoBars
	}
	return nil
}

func (x *NonTimedBarReport) GetRangeBars() []*RangeBar {
	if x != nil {
		return x.RangeBars
	}
	return nil
}

func (x *NonTimedBarReport) GetTickBars() []*TickBar {
	if x != nil {
		return x.TickBars
	}
	return nil
}

// Parameters of a Constant Volume Bar request.
type ConstantVolumeBarParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Note: use volume_level instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/historical_2.proto.
	ObsoleteVolumeLevel *uint32 `protobuf:"varint,1,opt,name=obsolete_volume_level,json=obsoleteVolumeLevel" json:"obsolete_volume_level,omitempty"`
	// Volume covered by each bar. Cannot be less than ContractMetadata's trade_size_increment
	// and higher than trade_size_increment*1000000000.
	VolumeLevel *common.Decimal `protobuf:"bytes,4,opt,name=volume_level,json=volumeLevel" json:"volume_level,omitempty"`
	// Determines volume type. If false (default value) then bars are built based on exchange volume,
	// otherwise they are built based on ticks (number of inside price changes).
	// Note: if use_tick_volume is true, volume_level is rounded down.
	// Note: WebAPI server rejects requests for contracts without actual volume data (
	//
	//	ContractMetadata.has_exchange_volume=False).
	UseTickVolume *bool `protobuf:"varint,2,opt,name=use_tick_volume,json=useTickVolume" json:"use_tick_volume,omitempty"`
	// Use 0-plus and 0-minus ticks when building bars.
	// Note: applicable only to tick volume.
	UseFlatTicks *bool `protobuf:"varint,3,opt,name=use_flat_ticks,json=useFlatTicks" json:"use_flat_ticks,omitempty"`
}

func (x *ConstantVolumeBarParameters) Reset() {
	*x = ConstantVolumeBarParameters{}
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConstantVolumeBarParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstantVolumeBarParameters) ProtoMessage() {}

func (x *ConstantVolumeBarParameters) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstantVolumeBarParameters.ProtoReflect.Descriptor instead.
func (*ConstantVolumeBarParameters) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_historical_2_proto_rawDescGZIP(), []int{15}
}

// Deprecated: Marked as deprecated in protos/WebAPI/historical_2.proto.
func (x *ConstantVolumeBarParameters) GetObsoleteVolumeLevel() uint32 {
	if x != nil && x.ObsoleteVolumeLevel != nil {
		return *x.ObsoleteVolumeLevel
	}
	return 0
}

func (x *ConstantVolumeBarParameters) GetVolumeLevel() *common.Decimal {
	if x != nil {
		return x.VolumeLevel
	}
	return nil
}

func (x *ConstantVolumeBarParameters) GetUseTickVolume() bool {
	if x != nil && x.UseTickVolume != nil {
		return *x.UseTickVolume
	}
	return false
}

func (x *ConstantVolumeBarParameters) GetUseFlatTicks() bool {
	if x != nil && x.UseFlatTicks != nil {
		return *x.UseFlatTicks
	}
	return false
}

// Parameters of a Point and Figure request.
type PointAndFigureParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the number of tick units represented by each P&F. Can take a value from 1 to 1000.
	BoxSize *uint32 `protobuf:"varint,1,req,name=box_size,json=boxSize" json:"box_size,omitempty"`
	// Specifies the number of boxes for P&F direction reversal. Can take a value from 1 to 1000.
	Reversal *uint32 `protobuf:"varint,2,req,name=reversal" json:"reversal,omitempty"`
}

func (x *PointAndFigureParameters) Reset() {
	*x = PointAndFigureParameters{}
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PointAndFigureParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointAndFigureParameters) ProtoMessage() {}

func (x *PointAndFigureParameters) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointAndFigureParameters.ProtoReflect.Descriptor instead.
func (*PointAndFigureParameters) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_historical_2_proto_rawDescGZIP(), []int{16}
}

func (x *PointAndFigureParameters) GetBoxSize() uint32 {
	if x != nil && x.BoxSize != nil {
		return *x.BoxSize
	}
	return 0
}

func (x *PointAndFigureParameters) GetReversal() uint32 {
	if x != nil && x.Reversal != nil {
		return *x.Reversal
	}
	return 0
}

// Constant Volume Bar.
type ConstantVolumeBar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bar start time (UTC), it is set only for the first bar of the following bar start times.
	BarUtcTime *int64 `protobuf:"zigzag64,1,opt,name=bar_utc_time,json=barUtcTime" json:"bar_utc_time,omitempty"`
	// Bar index. Different bars with the same bar_utc_time always have different indexes.
	// Greater index means later bar.
	// It is set only if non-zero.
	Index *int32 `protobuf:"zigzag32,2,opt,name=index" json:"index,omitempty"`
	// Trade date (in time format), it is set only for the first bar of the following trade dates.
	TradeDate *int64 `protobuf:"zigzag64,3,opt,name=trade_date,json=tradeDate" json:"trade_date,omitempty"`
	// Open price.
	ScaledOpenPrice *int64 `protobuf:"zigzag64,4,opt,name=scaled_open_price,json=scaledOpenPrice" json:"scaled_open_price,omitempty"`
	// High price.
	ScaledHighPrice *int64 `protobuf:"zigzag64,5,opt,name=scaled_high_price,json=scaledHighPrice" json:"scaled_high_price,omitempty"`
	// Low price.
	ScaledLowPrice *int64 `protobuf:"zigzag64,6,opt,name=scaled_low_price,json=scaledLowPrice" json:"scaled_low_price,omitempty"`
	// Close or last price (if the bar is not closed yet).
	ScaledClosePrice *int64 `protobuf:"zigzag64,7,opt,name=scaled_close_price,json=scaledClosePrice" json:"scaled_close_price,omitempty"`
	// Note: use 'volume' instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/historical_2.proto.
	ScaledVolume *uint64 `protobuf:"varint,8,opt,name=scaled_volume,json=scaledVolume" json:"scaled_volume,omitempty"`
	// Exchange volume.
	Volume *common.Decimal `protobuf:"bytes,11,opt,name=volume" json:"volume,omitempty"`
	// Tick volume.
	TickVolume *uint64 `protobuf:"varint,9,opt,name=tick_volume,json=tickVolume" json:"tick_volume,omitempty"`
	// Continuation segment the bar belongs to, it is set only for the first bar
	// and for each first bar from the next continuation segment.
	ContinuationSegment *ContinuationSegment `protobuf:"bytes,10,opt,name=continuation_segment,json=continuationSegment" json:"continuation_segment,omitempty"`
}

func (x *ConstantVolumeBar) Reset() {
	*x = ConstantVolumeBar{}
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConstantVolumeBar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstantVolumeBar) ProtoMessage() {}

func (x *ConstantVolumeBar) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstantVolumeBar.ProtoReflect.Descriptor instead.
func (*ConstantVolumeBar) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_historical_2_proto_rawDescGZIP(), []int{17}
}

func (x *ConstantVolumeBar) GetBarUtcTime() int64 {
	if x != nil && x.BarUtcTime != nil {
		return *x.BarUtcTime
	}
	return 0
}

func (x *ConstantVolumeBar) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *ConstantVolumeBar) GetTradeDate() int64 {
	if x != nil && x.TradeDate != nil {
		return *x.TradeDate
	}
	return 0
}

func (x *ConstantVolumeBar) GetScaledOpenPrice() int64 {
	if x != nil && x.ScaledOpenPrice != nil {
		return *x.ScaledOpenPrice
	}
	return 0
}

func (x *ConstantVolumeBar) GetScaledHighPrice() int64 {
	if x != nil && x.ScaledHighPrice != nil {
		return *x.ScaledHighPrice
	}
	return 0
}

func (x *ConstantVolumeBar) GetScaledLowPrice() int64 {
	if x != nil && x.ScaledLowPrice != nil {
		return *x.ScaledLowPrice
	}
	return 0
}

func (x *ConstantVolumeBar) GetScaledClosePrice() int64 {
	if x != nil && x.ScaledClosePrice != nil {
		return *x.ScaledClosePrice
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/historical_2.proto.
func (x *ConstantVolumeBar) GetScaledVolume() uint64 {
	if x != nil && x.ScaledVolume != nil {
		return *x.ScaledVolume
	}
	return 0
}

func (x *ConstantVolumeBar) GetVolume() *common.Decimal {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *ConstantVolumeBar) GetTickVolume() uint64 {
	if x != nil && x.TickVolume != nil {
		return *x.TickVolume
	}
	return 0
}

func (x *ConstantVolumeBar) GetContinuationSegment() *ContinuationSegment {
	if x != nil {
		return x.ContinuationSegment
	}
	return nil
}

// Point and Figure bar.
type PointAndFigureBar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bar start time (UTC), it is set only for the first bar of the following bar start times.
	BarUtcTime *int64 `protobuf:"zigzag64,1,opt,name=bar_utc_time,json=barUtcTime" json:"bar_utc_time,omitempty"`
	// Bar index. Different bars with the same bar_utc_time always have different indexes.
	// Greater index means later bar.
	// It is set only if non-zero.
	Index *int32 `protobuf:"zigzag32,2,opt,name=index" json:"index,omitempty"`
	// Trade date (in time format), it is set only for the first bar of the following trade dates.
	TradeDate *int64 `protobuf:"zigzag64,3,opt,name=trade_date,json=tradeDate" json:"trade_date,omitempty"`
	// Open price.
	PfScaledOpenPrice *int64 `protobuf:"zigzag64,4,opt,name=pf_scaled_open_price,json=pfScaledOpenPrice" json:"pf_scaled_open_price,omitempty"`
	// High price (rounded to PF box).
	PfScaledHighPrice *int64 `protobuf:"zigzag64,5,opt,name=pf_scaled_high_price,json=pfScaledHighPrice" json:"pf_scaled_high_price,omitempty"`
	// Low price (rounded to PF box).
	PfScaledLowPrice *int64 `protobuf:"zigzag64,6,opt,name=pf_scaled_low_price,json=pfScaledLowPrice" json:"pf_scaled_low_price,omitempty"`
	// Close price.
	PfScaledClosePrice *int64 `protobuf:"zigzag64,7,opt,name=pf_scaled_close_price,json=pfScaledClosePrice" json:"pf_scaled_close_price,omitempty"`
	// High price (not rounded to PF box).
	ScaledHighPrice *int64 `protobuf:"zigzag64,8,opt,name=scaled_high_price,json=scaledHighPrice" json:"scaled_high_price,omitempty"`
	// Low price (not rounded to PF box).
	ScaledLowPrice *int64 `protobuf:"zigzag64,9,opt,name=scaled_low_price,json=scaledLowPrice" json:"scaled_low_price,omitempty"`
	// Note: use 'volume' instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/historical_2.proto.
	ScaledVolume *uint64 `protobuf:"varint,10,opt,name=scaled_volume,json=scaledVolume" json:"scaled_volume,omitempty"`
	// Exchange volume.
	Volume *common.Decimal `protobuf:"bytes,14,opt,name=volume" json:"volume,omitempty"`
	// Tick volume.
	TickVolume *uint64 `protobuf:"varint,11,opt,name=tick_volume,json=tickVolume" json:"tick_volume,omitempty"`
	// True if the P&F chart is plotting an X, False if the P&F chart is plotting an O.
	Up *bool `protobuf:"varint,12,opt,name=up" json:"up,omitempty"`
	// Continuation segment the bar belongs to, it is set only for the first bar
	// and for each first bar from the next continuation segment.
	ContinuationSegment *ContinuationSegment `protobuf:"bytes,13,opt,name=continuation_segment,json=continuationSegment" json:"continuation_segment,omitempty"`
}

func (x *PointAndFigureBar) Reset() {
	*x = PointAndFigureBar{}
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PointAndFigureBar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointAndFigureBar) ProtoMessage() {}

func (x *PointAndFigureBar) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointAndFigureBar.ProtoReflect.Descriptor instead.
func (*PointAndFigureBar) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_historical_2_proto_rawDescGZIP(), []int{18}
}

func (x *PointAndFigureBar) GetBarUtcTime() int64 {
	if x != nil && x.BarUtcTime != nil {
		return *x.BarUtcTime
	}
	return 0
}

func (x *PointAndFigureBar) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *PointAndFigureBar) GetTradeDate() int64 {
	if x != nil && x.TradeDate != nil {
		return *x.TradeDate
	}
	return 0
}

func (x *PointAndFigureBar) GetPfScaledOpenPrice() int64 {
	if x != nil && x.PfScaledOpenPrice != nil {
		return *x.PfScaledOpenPrice
	}
	return 0
}

func (x *PointAndFigureBar) GetPfScaledHighPrice() int64 {
	if x != nil && x.PfScaledHighPrice != nil {
		return *x.PfScaledHighPrice
	}
	return 0
}

func (x *PointAndFigureBar) GetPfScaledLowPrice() int64 {
	if x != nil && x.PfScaledLowPrice != nil {
		return *x.PfScaledLowPrice
	}
	return 0
}

func (x *PointAndFigureBar) GetPfScaledClosePrice() int64 {
	if x != nil && x.PfScaledClosePrice != nil {
		return *x.PfScaledClosePrice
	}
	return 0
}

func (x *PointAndFigureBar) GetScaledHighPrice() int64 {
	if x != nil && x.ScaledHighPrice != nil {
		return *x.ScaledHighPrice
	}
	return 0
}

func (x *PointAndFigureBar) GetScaledLowPrice() int64 {
	if x != nil && x.ScaledLowPrice != nil {
		return *x.ScaledLowPrice
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/historical_2.proto.
func (x *PointAndFigureBar) GetScaledVolume() uint64 {
	if x != nil && x.ScaledVolume != nil {
		return *x.ScaledVolume
	}
	return 0
}

func (x *PointAndFigureBar) GetVolume() *common.Decimal {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *PointAndFigureBar) GetTickVolume() uint64 {
	if x != nil && x.TickVolume != nil {
		return *x.TickVolume
	}
	return 0
}

func (x *PointAndFigureBar) GetUp() bool {
	if x != nil && x.Up != nil {
		return *x.Up
	}
	return false
}

func (x *PointAndFigureBar) GetContinuationSegment() *ContinuationSegment {
	if x != nil {
		return x.ContinuationSegment
	}
	return nil
}

// Renko bar.
type RenkoBar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bar start time (UTC), it is set only for the first bar of the following bar start times.
	BarUtcTime *int64 `protobuf:"zigzag64,1,opt,name=bar_utc_time,json=barUtcTime" json:"bar_utc_time,omitempty"`
	// Bar index. Different bars with the same bar_utc_time always have different indexes.
	// Greater index means later bar.
	// It is set only if non-zero.
	Index *int32 `protobuf:"zigzag32,2,opt,name=index" json:"index,omitempty"`
	// Trade date (in time format), it is set only for the first bar of the following trade dates.
	TradeDate *int64 `protobuf:"zigzag64,3,opt,name=trade_date,json=tradeDate" json:"trade_date,omitempty"`
	// Open price.
	ScaledOpenPrice *int64 `protobuf:"zigzag64,4,opt,name=scaled_open_price,json=scaledOpenPrice" json:"scaled_open_price,omitempty"`
	// High price.
	ScaledHighPrice *int64 `protobuf:"zigzag64,5,opt,name=scaled_high_price,json=scaledHighPrice" json:"scaled_high_price,omitempty"`
	// Low price.
	ScaledLowPrice *int64 `protobuf:"zigzag64,6,opt,name=scaled_low_price,json=scaledLowPrice" json:"scaled_low_price,omitempty"`
	// Close or last price (if the bar is not closed yet).
	ScaledClosePrice *int64 `protobuf:"zigzag64,7,opt,name=scaled_close_price,json=scaledClosePrice" json:"scaled_close_price,omitempty"`
	// Maximum of open and close prices.
	ScaledRenkoHighPrice *int64 `protobuf:"zigzag64,8,opt,name=scaled_renko_high_price,json=scaledRenkoHighPrice" json:"scaled_renko_high_price,omitempty"`
	// Minimum of open and close prices.
	ScaledRenkoLowPrice *int64 `protobuf:"zigzag64,9,opt,name=scaled_renko_low_price,json=scaledRenkoLowPrice" json:"scaled_renko_low_price,omitempty"`
	// Defines how renko bar is going to be closed (up or down).
	Up *bool `protobuf:"varint,10,opt,name=up" json:"up,omitempty"`
	// Note: use 'volume' instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/historical_2.proto.
	ScaledVolume *uint64 `protobuf:"varint,11,opt,name=scaled_volume,json=scaledVolume" json:"scaled_volume,omitempty"`
	// Exchange volume.
	Volume *common.Decimal `protobuf:"bytes,15,opt,name=volume" json:"volume,omitempty"`
	// Tick volume.
	TickVolume *uint64 `protobuf:"varint,12,opt,name=tick_volume,json=tickVolume" json:"tick_volume,omitempty"`
	// If this bar is the first bar after start point.
	FirstBarAfterStartPoint *bool `protobuf:"varint,13,opt,name=first_bar_after_start_point,json=firstBarAfterStartPoint" json:"first_bar_after_start_point,omitempty"`
	// Continuation segment the bar belongs to, it is set only for the first bar
	// and for each first bar from the next continuation segment.
	ContinuationSegment *ContinuationSegment `protobuf:"bytes,14,opt,name=continuation_segment,json=continuationSegment" json:"continuation_segment,omitempty"`
}

func (x *RenkoBar) Reset() {
	*x = RenkoBar{}
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RenkoBar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenkoBar) ProtoMessage() {}

func (x *RenkoBar) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenkoBar.ProtoReflect.Descriptor instead.
func (*RenkoBar) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_historical_2_proto_rawDescGZIP(), []int{19}
}

func (x *RenkoBar) GetBarUtcTime() int64 {
	if x != nil && x.BarUtcTime != nil {
		return *x.BarUtcTime
	}
	return 0
}

func (x *RenkoBar) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *RenkoBar) GetTradeDate() int64 {
	if x != nil && x.TradeDate != nil {
		return *x.TradeDate
	}
	return 0
}

func (x *RenkoBar) GetScaledOpenPrice() int64 {
	if x != nil && x.ScaledOpenPrice != nil {
		return *x.ScaledOpenPrice
	}
	return 0
}

func (x *RenkoBar) GetScaledHighPrice() int64 {
	if x != nil && x.ScaledHighPrice != nil {
		return *x.ScaledHighPrice
	}
	return 0
}

func (x *RenkoBar) GetScaledLowPrice() int64 {
	if x != nil && x.ScaledLowPrice != nil {
		return *x.ScaledLowPrice
	}
	return 0
}

func (x *RenkoBar) GetScaledClosePrice() int64 {
	if x != nil && x.ScaledClosePrice != nil {
		return *x.ScaledClosePrice
	}
	return 0
}

func (x *RenkoBar) GetScaledRenkoHighPrice() int64 {
	if x != nil && x.ScaledRenkoHighPrice != nil {
		return *x.ScaledRenkoHighPrice
	}
	return 0
}

func (x *RenkoBar) GetScaledRenkoLowPrice() int64 {
	if x != nil && x.ScaledRenkoLowPrice != nil {
		return *x.ScaledRenkoLowPrice
	}
	return 0
}

func (x *RenkoBar) GetUp() bool {
	if x != nil && x.Up != nil {
		return *x.Up
	}
	return false
}

// Deprecated: Marked as deprecated in protos/WebAPI/historical_2.proto.
func (x *RenkoBar) GetScaledVolume() uint64 {
	if x != nil && x.ScaledVolume != nil {
		return *x.ScaledVolume
	}
	return 0
}

func (x *RenkoBar) GetVolume() *common.Decimal {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *RenkoBar) GetTickVolume() uint64 {
	if x != nil && x.TickVolume != nil {
		return *x.TickVolume
	}
	return 0
}

func (x *RenkoBar) GetFirstBarAfterStartPoint() bool {
	if x != nil && x.FirstBarAfterStartPoint != nil {
		return *x.FirstBarAfterStartPoint
	}
	return false
}

func (x *RenkoBar) GetContinuationSegment() *ContinuationSegment {
	if x != nil {
		return x.ContinuationSegment
	}
	return nil
}

// Range bar.
type RangeBar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bar start time (UTC), it is set only for the first bar of the following bar start times.
	BarUtcTime *int64 `protobuf:"zigzag64,1,opt,name=bar_utc_time,json=barUtcTime" json:"bar_utc_time,omitempty"`
	// Bar index. Different bars with the same bar_utc_time always have different indexes.
	// Greater index means later bar.
	// It is set only if non-zero.
	Index *int32 `protobuf:"zigzag32,2,opt,name=index" json:"index,omitempty"`
	// Trade date (in time format), it is set only for the first bar of the following trade dates.
	TradeDate *int64 `protobuf:"zigzag64,3,opt,name=trade_date,json=tradeDate" json:"trade_date,omitempty"`
	// Open price.
	ScaledOpenPrice *int64 `protobuf:"zigzag64,4,opt,name=scaled_open_price,json=scaledOpenPrice" json:"scaled_open_price,omitempty"`
	// High price.
	ScaledHighPrice *int64 `protobuf:"zigzag64,5,opt,name=scaled_high_price,json=scaledHighPrice" json:"scaled_high_price,omitempty"`
	// Low price.
	ScaledLowPrice *int64 `protobuf:"zigzag64,6,opt,name=scaled_low_price,json=scaledLowPrice" json:"scaled_low_price,omitempty"`
	// Close or last price (if the bar is not closed yet).
	ScaledClosePrice *int64 `protobuf:"zigzag64,7,opt,name=scaled_close_price,json=scaledClosePrice" json:"scaled_close_price,omitempty"`
	// Note: use 'volume' instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/historical_2.proto.
	ScaledVolume *uint64 `protobuf:"varint,8,opt,name=scaled_volume,json=scaledVolume" json:"scaled_volume,omitempty"`
	// Exchange volume.
	Volume *common.Decimal `protobuf:"bytes,11,opt,name=volume" json:"volume,omitempty"`
	// Tick volume.
	TickVolume *uint64 `protobuf:"varint,9,opt,name=tick_volume,json=tickVolume" json:"tick_volume,omitempty"`
	// Continuation segment the bar belongs to, it is set only for the first bar
	// and for each first bar from the next continuation segment.
	ContinuationSegment *ContinuationSegment `protobuf:"bytes,10,opt,name=continuation_segment,json=continuationSegment" json:"continuation_segment,omitempty"`
}

func (x *RangeBar) Reset() {
	*x = RangeBar{}
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RangeBar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeBar) ProtoMessage() {}

func (x *RangeBar) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeBar.ProtoReflect.Descriptor instead.
func (*RangeBar) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_historical_2_proto_rawDescGZIP(), []int{20}
}

func (x *RangeBar) GetBarUtcTime() int64 {
	if x != nil && x.BarUtcTime != nil {
		return *x.BarUtcTime
	}
	return 0
}

func (x *RangeBar) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *RangeBar) GetTradeDate() int64 {
	if x != nil && x.TradeDate != nil {
		return *x.TradeDate
	}
	return 0
}

func (x *RangeBar) GetScaledOpenPrice() int64 {
	if x != nil && x.ScaledOpenPrice != nil {
		return *x.ScaledOpenPrice
	}
	return 0
}

func (x *RangeBar) GetScaledHighPrice() int64 {
	if x != nil && x.ScaledHighPrice != nil {
		return *x.ScaledHighPrice
	}
	return 0
}

func (x *RangeBar) GetScaledLowPrice() int64 {
	if x != nil && x.ScaledLowPrice != nil {
		return *x.ScaledLowPrice
	}
	return 0
}

func (x *RangeBar) GetScaledClosePrice() int64 {
	if x != nil && x.ScaledClosePrice != nil {
		return *x.ScaledClosePrice
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/historical_2.proto.
func (x *RangeBar) GetScaledVolume() uint64 {
	if x != nil && x.ScaledVolume != nil {
		return *x.ScaledVolume
	}
	return 0
}

func (x *RangeBar) GetVolume() *common.Decimal {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *RangeBar) GetTickVolume() uint64 {
	if x != nil && x.TickVolume != nil {
		return *x.TickVolume
	}
	return 0
}

func (x *RangeBar) GetContinuationSegment() *ContinuationSegment {
	if x != nil {
		return x.ContinuationSegment
	}
	return nil
}

// Tick bar.
type TickBar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bar start time (UTC), it is set only for the first bar of the following bar start times.
	BarUtcTime *int64 `protobuf:"zigzag64,1,opt,name=bar_utc_time,json=barUtcTime" json:"bar_utc_time,omitempty"`
	// Bar index. Different bars with the same bar_utc_time always have different indexes.
	// Greater index means later bar.
	// It is set only if non-zero.
	Index *int32 `protobuf:"zigzag32,2,opt,name=index" json:"index,omitempty"`
	// Trade date (in time format), it is set only for the first bar of the following trade dates.
	TradeDate *int64 `protobuf:"zigzag64,3,opt,name=trade_date,json=tradeDate" json:"trade_date,omitempty"`
	// Close price.
	ScaledClosePrice *int64 `protobuf:"zigzag64,4,opt,name=scaled_close_price,json=scaledClosePrice" json:"scaled_close_price,omitempty"`
	// Note: use 'volume' instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/historical_2.proto.
	ScaledVolume *uint64 `protobuf:"varint,5,opt,name=scaled_volume,json=scaledVolume" json:"scaled_volume,omitempty"`
	// Exchange volume.
	Volume *common.Decimal `protobuf:"bytes,7,opt,name=volume" json:"volume,omitempty"`
	// Continuation segment the bar belongs to, it is set only for the first bar
	// and for each first bar from the next continuation segment.
	ContinuationSegment *ContinuationSegment `protobuf:"bytes,6,opt,name=continuation_segment,json=continuationSegment" json:"continuation_segment,omitempty"`
}

func (x *TickBar) Reset() {
	*x = TickBar{}
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TickBar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TickBar) ProtoMessage() {}

func (x *TickBar) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TickBar.ProtoReflect.Descriptor instead.
func (*TickBar) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_historical_2_proto_rawDescGZIP(), []int{21}
}

func (x *TickBar) GetBarUtcTime() int64 {
	if x != nil && x.BarUtcTime != nil {
		return *x.BarUtcTime
	}
	return 0
}

func (x *TickBar) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *TickBar) GetTradeDate() int64 {
	if x != nil && x.TradeDate != nil {
		return *x.TradeDate
	}
	return 0
}

func (x *TickBar) GetScaledClosePrice() int64 {
	if x != nil && x.ScaledClosePrice != nil {
		return *x.ScaledClosePrice
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/historical_2.proto.
func (x *TickBar) GetScaledVolume() uint64 {
	if x != nil && x.ScaledVolume != nil {
		return *x.ScaledVolume
	}
	return 0
}

func (x *TickBar) GetVolume() *common.Decimal {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *TickBar) GetContinuationSegment() *ContinuationSegment {
	if x != nil {
		return x.ContinuationSegment
	}
	return nil
}

// VolumeProfile request, 3 month history limit.
// WebAPI rejects VolumeProfile requests with RESULT_CODE_FAILURE status code
// if they are sent less than 60 seconds after the previous
// request with the same parameters was completed.
type VolumeProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// request ID.
	RequestId *uint32 `protobuf:"varint,1,req,name=request_id,json=requestId" json:"request_id,omitempty"`
	// Request parameters.
	VolumeProfileParameters *VolumeProfileParameters `protobuf:"bytes,2,opt,name=volume_profile_parameters,json=volumeProfileParameters" json:"volume_profile_parameters,omitempty"`
	// This field is associated with RequestType enum type.
	// REQUEST_TYPE_GET operation is processed by default.
	RequestType *uint32 `protobuf:"varint,3,opt,name=request_type,json=requestType" json:"request_type,omitempty"`
}

func (x *VolumeProfileRequest) Reset() {
	*x = VolumeProfileRequest{}
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeProfileRequest) ProtoMessage() {}

func (x *VolumeProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeProfileRequest.ProtoReflect.Descriptor instead.
func (*VolumeProfileRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_historical_2_proto_rawDescGZIP(), []int{22}
}

func (x *VolumeProfileRequest) GetRequestId() uint32 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *VolumeProfileRequest) GetVolumeProfileParameters() *VolumeProfileParameters {
	if x != nil {
		return x.VolumeProfileParameters
	}
	return nil
}

func (x *VolumeProfileRequest) GetRequestType() uint32 {
	if x != nil && x.RequestType != nil {
		return *x.RequestType
	}
	return 0
}

// Parameters of a Volume Profile request.
type VolumeProfileParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contract id for the volume profile request.
	ContractId *uint32 `protobuf:"varint,1,req,name=contract_id,json=contractId" json:"contract_id,omitempty"`
	// Both of the next two fields have to be set, otherwise the request will return a failure
	// Start of the time range for volume profile to be calculated for.
	// It is rounded down to a whole minute.
	StartUtcTime *int64 `protobuf:"zigzag64,2,opt,name=start_utc_time,json=startUtcTime" json:"start_utc_time,omitempty"`
	// Exclusive end of the time range for volume profile to be calculated for.
	// It is rounded up to a whole minute.
	EndUtcTime *int64 `protobuf:"zigzag64,3,opt,name=end_utc_time,json=endUtcTime" json:"end_utc_time,omitempty"`
}

func (x *VolumeProfileParameters) Reset() {
	*x = VolumeProfileParameters{}
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeProfileParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeProfileParameters) ProtoMessage() {}

func (x *VolumeProfileParameters) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeProfileParameters.ProtoReflect.Descriptor instead.
func (*VolumeProfileParameters) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_historical_2_proto_rawDescGZIP(), []int{23}
}

func (x *VolumeProfileParameters) GetContractId() uint32 {
	if x != nil && x.ContractId != nil {
		return *x.ContractId
	}
	return 0
}

func (x *VolumeProfileParameters) GetStartUtcTime() int64 {
	if x != nil && x.StartUtcTime != nil {
		return *x.StartUtcTime
	}
	return 0
}

func (x *VolumeProfileParameters) GetEndUtcTime() int64 {
	if x != nil && x.EndUtcTime != nil {
		return *x.EndUtcTime
	}
	return 0
}

// VolumeProfile snapshot response.
type VolumeProfileReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the volume profile request.
	RequestId *uint32 `protobuf:"varint,1,req,name=request_id,json=requestId" json:"request_id,omitempty"`
	// This field is associated with ResultCode enum type.
	ResultCode *uint32 `protobuf:"varint,2,req,name=result_code,json=resultCode" json:"result_code,omitempty"`
	// Volume profile snapshot items.
	VolumeProfileItems []*VolumeProfileItem `protobuf:"bytes,3,rep,name=volume_profile_items,json=volumeProfileItems" json:"volume_profile_items,omitempty"`
	// Volume profile cumulative statistics for the last quotes.
	// This field is filled only for the first chunk of the report.
	LastQuotesCumulativeStatistics *VolumeProfileLastQuotesCumulativeStatistics `protobuf:"bytes,8,opt,name=last_quotes_cumulative_statistics,json=lastQuotesCumulativeStatistics" json:"last_quotes_cumulative_statistics,omitempty"`
	// Time up to which the quotes were included into this report,
	// if there were several with the same time-stamp equal to this time
	// then all are included into the report (UTC).
	// This time is set only for requests with unspecified 'end_utc_time' parameter
	// of message VolumeProfileParameters.
	UpToUtcTime *int64 `protobuf:"varint,4,opt,name=up_to_utc_time,json=upToUtcTime" json:"up_to_utc_time,omitempty"`
	// Optional failure details.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/historical_2.proto.
	TextMessage *string `protobuf:"bytes,5,opt,name=text_message,json=textMessage" json:"text_message,omitempty"`
	// Optional failure details.
	Details *common.Text `protobuf:"bytes,9,opt,name=details" json:"details,omitempty"`
	// Request contains dates partially outside of allowed historical data depth.
	Truncated *bool `protobuf:"varint,6,opt,name=truncated" json:"truncated,omitempty"`
	// True means that requested data is complete at the moment,
	// false means more report messages are expected for completeness.
	IsReportComplete *bool `protobuf:"varint,7,opt,name=is_report_complete,json=isReportComplete,def=1" json:"is_report_complete,omitempty"`
}

// Default values for VolumeProfileReport fields.
const (
	Default_VolumeProfileReport_IsReportComplete = bool(true)
)

func (x *VolumeProfileReport) Reset() {
	*x = VolumeProfileReport{}
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeProfileReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeProfileReport) ProtoMessage() {}

func (x *VolumeProfileReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeProfileReport.ProtoReflect.Descriptor instead.
func (*VolumeProfileReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_historical_2_proto_rawDescGZIP(), []int{24}
}

func (x *VolumeProfileReport) GetRequestId() uint32 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *VolumeProfileReport) GetResultCode() uint32 {
	if x != nil && x.ResultCode != nil {
		return *x.ResultCode
	}
	return 0
}

func (x *VolumeProfileReport) GetVolumeProfileItems() []*VolumeProfileItem {
	if x != nil {
		return x.VolumeProfileItems
	}
	return nil
}

func (x *VolumeProfileReport) GetLastQuotesCumulativeStatistics() *VolumeProfileLastQuotesCumulativeStatistics {
	if x != nil {
		return x.LastQuotesCumulativeStatistics
	}
	return nil
}

func (x *VolumeProfileReport) GetUpToUtcTime() int64 {
	if x != nil && x.UpToUtcTime != nil {
		return *x.UpToUtcTime
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/historical_2.proto.
func (x *VolumeProfileReport) GetTextMessage() string {
	if x != nil && x.TextMessage != nil {
		return *x.TextMessage
	}
	return ""
}

func (x *VolumeProfileReport) GetDetails() *common.Text {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *VolumeProfileReport) GetTruncated() bool {
	if x != nil && x.Truncated != nil {
		return *x.Truncated
	}
	return false
}

func (x *VolumeProfileReport) GetIsReportComplete() bool {
	if x != nil && x.IsReportComplete != nil {
		return *x.IsReportComplete
	}
	return Default_VolumeProfileReport_IsReportComplete
}

// Volume profile cumulative statistics for the last quotes.
type VolumeProfileLastQuotesCumulativeStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Price of the last best ask quote within Volume Profile range.
	ScaledLastAskPrice *int64 `protobuf:"zigzag64,1,opt,name=scaled_last_ask_price,json=scaledLastAskPrice" json:"scaled_last_ask_price,omitempty"`
	// Price of the last best bid quote within Volume Profile range.
	ScaledLastBidPrice *int64 `protobuf:"zigzag64,2,opt,name=scaled_last_bid_price,json=scaledLastBidPrice" json:"scaled_last_bid_price,omitempty"`
	// Note: use ask_trade_volume instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/historical_2.proto.
	ScaledAskTradeVolume *float64 `protobuf:"fixed64,3,opt,name=scaled_ask_trade_volume,json=scaledAskTradeVolume" json:"scaled_ask_trade_volume,omitempty"`
	// Cumulative sum of trade volumes on ask side since the last best bid or best ask price update
	// within Volume Profile range.
	AskTradeVolume *float64 `protobuf:"fixed64,5,opt,name=ask_trade_volume,json=askTradeVolume" json:"ask_trade_volume,omitempty"`
	// Note: use bid_trade_volume instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/historical_2.proto.
	ScaledBidTradeVolume *float64 `protobuf:"fixed64,4,opt,name=scaled_bid_trade_volume,json=scaledBidTradeVolume" json:"scaled_bid_trade_volume,omitempty"`
	// Cumulative sum of trade volumes on bid side since the last best bid or best ask price update
	// within Volume Profile range.
	BidTradeVolume *float64 `protobuf:"fixed64,6,opt,name=bid_trade_volume,json=bidTradeVolume" json:"bid_trade_volume,omitempty"`
}

func (x *VolumeProfileLastQuotesCumulativeStatistics) Reset() {
	*x = VolumeProfileLastQuotesCumulativeStatistics{}
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeProfileLastQuotesCumulativeStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeProfileLastQuotesCumulativeStatistics) ProtoMessage() {}

func (x *VolumeProfileLastQuotesCumulativeStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeProfileLastQuotesCumulativeStatistics.ProtoReflect.Descriptor instead.
func (*VolumeProfileLastQuotesCumulativeStatistics) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_historical_2_proto_rawDescGZIP(), []int{25}
}

func (x *VolumeProfileLastQuotesCumulativeStatistics) GetScaledLastAskPrice() int64 {
	if x != nil && x.ScaledLastAskPrice != nil {
		return *x.ScaledLastAskPrice
	}
	return 0
}

func (x *VolumeProfileLastQuotesCumulativeStatistics) GetScaledLastBidPrice() int64 {
	if x != nil && x.ScaledLastBidPrice != nil {
		return *x.ScaledLastBidPrice
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/historical_2.proto.
func (x *VolumeProfileLastQuotesCumulativeStatistics) GetScaledAskTradeVolume() float64 {
	if x != nil && x.ScaledAskTradeVolume != nil {
		return *x.ScaledAskTradeVolume
	}
	return 0
}

func (x *VolumeProfileLastQuotesCumulativeStatistics) GetAskTradeVolume() float64 {
	if x != nil && x.AskTradeVolume != nil {
		return *x.AskTradeVolume
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/historical_2.proto.
func (x *VolumeProfileLastQuotesCumulativeStatistics) GetScaledBidTradeVolume() float64 {
	if x != nil && x.ScaledBidTradeVolume != nil {
		return *x.ScaledBidTradeVolume
	}
	return 0
}

func (x *VolumeProfileLastQuotesCumulativeStatistics) GetBidTradeVolume() float64 {
	if x != nil && x.BidTradeVolume != nil {
		return *x.BidTradeVolume
	}
	return 0
}

// Volume profile snapshot item.
type VolumeProfileItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Price (unique for each volume profile snapshot reported).
	ScaledPrice *int64 `protobuf:"zigzag64,1,req,name=scaled_price,json=scaledPrice" json:"scaled_price,omitempty"`
	// Note: use 'volume' instead.
	//
	// Deprecated: Marked as deprecated in protos/WebAPI/historical_2.proto.
	ScaledVolume *uint64 `protobuf:"varint,2,opt,name=scaled_volume,json=scaledVolume" json:"scaled_volume,omitempty"`
	// Total volume of all trades with this price for the time range asked.
	// volume, ask_volume, bid_volume are omitted if volume is empty.
	// Trade volume is either associated with bid side or with ask side in the following manner:
	//  1. If best bid and best ask are equal or crossed and the trade has happened,
	//     half of its volume is associated with the bid and half - with the ask.
	//  2. If the trade is less than or equal to best bid, all of its volume is associated with bid.
	//  3. If the trade is greater than or equal to best ask, all of its volume is associated with ask.
	//  4. If the trade is less than best ask and greater than best bid, its volume shall be split
	//     among bid and ask inversely proportional to the distances to best bid/best ask
	//     (closer trade to best bid, more qty associated with bid).
	Volume *common.Decimal `protobuf:"bytes,3,opt,name=volume" json:"volume,omitempty"`
	// Ask part of total volume.
	AskVolume *common.Decimal `protobuf:"bytes,4,opt,name=ask_volume,json=askVolume" json:"ask_volume,omitempty"`
	// Bid part of total volume.
	BidVolume *common.Decimal `protobuf:"bytes,5,opt,name=bid_volume,json=bidVolume" json:"bid_volume,omitempty"`
	// Total tick volume of all trades with this price for the time range asked.
	// tick_volume, ask_tick_volume, bid_tick_volume are omitted if tick_volume is 0.
	TickVolume *uint32 `protobuf:"varint,6,opt,name=tick_volume,json=tickVolume" json:"tick_volume,omitempty"`
	// Ask part of tick volume.
	AskTickVolume *common.Decimal `protobuf:"bytes,7,opt,name=ask_tick_volume,json=askTickVolume" json:"ask_tick_volume,omitempty"`
	// Bid part of tick volume.
	BidTickVolume *common.Decimal `protobuf:"bytes,8,opt,name=bid_tick_volume,json=bidTickVolume" json:"bid_tick_volume,omitempty"`
}

func (x *VolumeProfileItem) Reset() {
	*x = VolumeProfileItem{}
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VolumeProfileItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeProfileItem) ProtoMessage() {}

func (x *VolumeProfileItem) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_historical_2_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeProfileItem.ProtoReflect.Descriptor instead.
func (*VolumeProfileItem) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_historical_2_proto_rawDescGZIP(), []int{26}
}

func (x *VolumeProfileItem) GetScaledPrice() int64 {
	if x != nil && x.ScaledPrice != nil {
		return *x.ScaledPrice
	}
	return 0
}

// Deprecated: Marked as deprecated in protos/WebAPI/historical_2.proto.
func (x *VolumeProfileItem) GetScaledVolume() uint64 {
	if x != nil && x.ScaledVolume != nil {
		return *x.ScaledVolume
	}
	return 0
}

func (x *VolumeProfileItem) GetVolume() *common.Decimal {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *VolumeProfileItem) GetAskVolume() *common.Decimal {
	if x != nil {
		return x.AskVolume
	}
	return nil
}

func (x *VolumeProfileItem) GetBidVolume() *common.Decimal {
	if x != nil {
		return x.BidVolume
	}
	return nil
}

func (x *VolumeProfileItem) GetTickVolume() uint32 {
	if x != nil && x.TickVolume != nil {
		return *x.TickVolume
	}
	return 0
}

func (x *VolumeProfileItem) GetAskTickVolume() *common.Decimal {
	if x != nil {
		return x.AskTickVolume
	}
	return nil
}

func (x *VolumeProfileItem) GetBidTickVolume() *common.Decimal {
	if x != nil {
		return x.BidTickVolume
	}
	return nil
}

var File_protos_WebAPI_historical_2_proto protoreflect.FileDescriptor

var file_protos_WebAPI_historical_2_proto_rawDesc = []byte{
	0x0a, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49, 0x2f,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0c, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x32,
	0x1a, 0x21, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49, 0x2f,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41,
	0x50, 0x49, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f,
	0x57, 0x65, 0x62, 0x41, 0x50, 0x49, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x5f, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc1, 0x02, 0x0a,
	0x16, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x22,
	0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x12, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x74, 0x63, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x6f, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x12, 0x52, 0x09, 0x74, 0x6f, 0x55, 0x74, 0x63, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6f, 0x66,
	0x66, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4f, 0x66,
	0x66, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x38, 0x0a,
	0x18, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x37, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x53,
	0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x44,
	0x45, 0x53, 0x5f, 0x42, 0x42, 0x41, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x53, 0x10, 0x03,
	0x22, 0xf4, 0x01, 0x0a, 0x13, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x61, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x5f, 0x0a, 0x19, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x61, 0x6e, 0x64, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x6e,
	0x64, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x16, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x0a, 0x0b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x01,
	0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x52, 0x4f, 0x50, 0x10, 0x03, 0x22, 0xf2, 0x06, 0x0a, 0x12, 0x54, 0x69, 0x6d, 0x65,
	0x41, 0x6e, 0x64, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2c,
	0x0a, 0x06, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x32, 0x2e, 0x51,
	0x75, 0x6f, 0x74, 0x65, 0x52, 0x06, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x0b,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x32, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0e, 0x75, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x74,
	0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x75, 0x70,
	0x54, 0x6f, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x12, 0x69, 0x73, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x10, 0x69, 0x73, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x25, 0x0a,
	0x0c, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x31,
	0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x1a,
	0x6f, 0x66, 0x66, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x17, 0x6f, 0x66, 0x66, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x49, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x64, 0x22, 0xf4, 0x02, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x17, 0x0a,
	0x13, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x52, 0x4f,
	0x50, 0x50, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x65, 0x12, 0x1d, 0x0a,
	0x19, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x67, 0x12, 0x19, 0x0a, 0x15,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x68, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x45, 0x53, 0x55, 0x4c,
	0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x41,
	0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x69, 0x12, 0x2f,
	0x0a, 0x2b, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x5f, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x5f, 0x56, 0x49, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x6a, 0x12,
	0x2c, 0x0a, 0x28, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49,
	0x54, 0x5f, 0x56, 0x49, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x6b, 0x12, 0x1d, 0x0a,
	0x19, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x6e, 0x12, 0x1e, 0x0a, 0x1a,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x10, 0x6f, 0x22, 0xba, 0x01, 0x0a,
	0x16, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x08, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x65,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x22, 0x50, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x43,
	0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4e,
	0x54, 0x49, 0x4e, 0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x02, 0x22, 0xd5, 0x03, 0x0a, 0x11, 0x54, 0x69,
	0x6d, 0x65, 0x42, 0x61, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x72, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x07, 0x62, 0x61, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x75,
	0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0d,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x02, 0x28, 0x12, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x6f, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x12, 0x52, 0x09, 0x74, 0x6f, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x4d, 0x0a, 0x21, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x1e, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x16, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4a, 0x04, 0x08, 0x06, 0x10,
	0x07, 0x22, 0xfb, 0x01, 0x0a, 0x0e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x61, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x13, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x62, 0x61, 0x72, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x32, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x42, 0x61, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x61, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x56, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x42,
	0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x10, 0x03, 0x22,
	0x9a, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x63, 0x71, 0x67, 0x5f, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x63, 0x71, 0x67, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0xd8, 0x07, 0x0a,
	0x07, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x61, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x61, 0x72, 0x5f,
	0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x12, 0x52, 0x0a,
	0x62, 0x61, 0x72, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x4f, 0x70, 0x65,
	0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64,
	0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x12, 0x52, 0x0f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x77,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0e, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x64, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x12, 0x52, 0x10, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0d, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x12, 0x52, 0x09, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x17, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x18, 0x01, 0x52, 0x15, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74,
	0x79, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x34, 0x0a,
	0x14, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x12, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x65, 0x73, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x1e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x1b, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64,
	0x69, 0x74, 0x79, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12,
	0x44, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x15,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x12, 0x52, 0x15, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3d, 0x0a,
	0x1b, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x18, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x69, 0x63, 0x6b, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x32, 0x0a,
	0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x5f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x54, 0x69, 0x63, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x54, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x32, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xfe, 0x02, 0x0a, 0x0d, 0x54, 0x69, 0x6d, 0x65,
	0x42, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x62, 0x61, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x42, 0x61, 0x72, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x61, 0x72, 0x73, 0x12, 0x23, 0x0a,
	0x0e, 0x75, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x75, 0x70, 0x54, 0x6f, 0x55, 0x74, 0x63, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x32, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04,
	0x74, 0x72, 0x75, 0x65, 0x52, 0x10, 0x69, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x0b, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x4f, 0x66, 0x44, 0x61, 0x74, 0x61, 0x22, 0xa6, 0x01, 0x0a, 0x08, 0x42, 0x61, 0x72,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x07, 0x75, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x25, 0x0a, 0x0e,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x2c, 0x0a, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x44, 0x49, 0x52,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x57, 0x41, 0x52, 0x44, 0x10,
	0x01, 0x22, 0xd2, 0x06, 0x0a, 0x12, 0x4e, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x42, 0x61,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5d, 0x0a, 0x17, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x62, 0x61,
	0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x32, 0x2e, 0x42, 0x61, 0x72,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x62, 0x61, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x6e,
	0x0a, 0x1e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x5f, 0x62, 0x61, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x42, 0x61, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x1b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x42, 0x61, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x65,
	0x0a, 0x1b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c,
	0x5f, 0x32, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x46, 0x69, 0x67, 0x75, 0x72,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x18, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x41, 0x6e, 0x64, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x52, 0x0a, 0x14, 0x72, 0x65, 0x6e, 0x6b, 0x6f, 0x5f, 0x62,
	0x61, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c,
	0x5f, 0x32, 0x2e, 0x52, 0x65, 0x6e, 0x6b, 0x6f, 0x42, 0x61, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x12, 0x72, 0x65, 0x6e, 0x6b, 0x6f, 0x42, 0x61, 0x72, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x52, 0x0a, 0x14, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x62, 0x61, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x32, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x61, 0x72, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x12, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x42, 0x61, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x4f, 0x0a,
	0x13, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x62, 0x61, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x32, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x42, 0x61,
	0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x11, 0x74, 0x69, 0x63,
	0x6b, 0x42, 0x61, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x56,
	0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x10, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45,
	0x54, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x10, 0x02, 0x12,
	0x15, 0x0a, 0x11, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x52, 0x4f, 0x50, 0x10, 0x03, 0x22, 0xd0, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x6e, 0x6b, 0x6f,
	0x42, 0x61, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x09, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6c, 0x6c, 0x42, 0x72,
	0x69, 0x63, 0x6b, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x52, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x50, 0x4f, 0x49,
	0x4e, 0x54, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x57, 0x45, 0x45, 0x4b,
	0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x50, 0x4f, 0x49, 0x4e,
	0x54, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x02, 0x22, 0xae, 0x01, 0x0a, 0x12, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x42, 0x61, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x22, 0x52, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x17,
	0x0a, 0x13, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x10, 0x01, 0x12, 0x15, 0x0a,
	0x11, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x4d, 0x4f, 0x4e,
	0x54, 0x48, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x39, 0x0a, 0x11, 0x54, 0x69,
	0x63, 0x6b, 0x42, 0x61, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x46, 0x6c, 0x61, 0x74,
	0x54, 0x69, 0x63, 0x6b, 0x73, 0x22, 0xf9, 0x05, 0x0a, 0x11, 0x4e, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x64, 0x42, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x12, 0x52, 0x16, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x35, 0x0a, 0x17, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x74, 0x6f, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x12, 0x52, 0x14, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x6f,
	0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0e, 0x75, 0x70, 0x5f, 0x74, 0x6f,
	0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x75, 0x70, 0x54, 0x6f, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x16,
	0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x62, 0x61, 0x72,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x74, 0x72,
	0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x42, 0x61, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x32, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74,
	0x72, 0x75, 0x65, 0x52, 0x10, 0x69, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x4f, 0x66, 0x44, 0x61, 0x74, 0x61, 0x12, 0x51, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x62, 0x61, 0x72, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x42, 0x61, 0x72, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x61, 0x72, 0x73, 0x12, 0x52, 0x0a, 0x15, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x5f,
	0x62, 0x61, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x32, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x41,
	0x6e, 0x64, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x42, 0x61, 0x72, 0x52, 0x12, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x41, 0x6e, 0x64, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x42, 0x61, 0x72, 0x73, 0x12,
	0x35, 0x0a, 0x0a, 0x72, 0x65, 0x6e, 0x6b, 0x6f, 0x5f, 0x62, 0x61, 0x72, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c,
	0x5f, 0x32, 0x2e, 0x52, 0x65, 0x6e, 0x6b, 0x6f, 0x42, 0x61, 0x72, 0x52, 0x09, 0x72, 0x65, 0x6e,
	0x6b, 0x6f, 0x42, 0x61, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x62, 0x61, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x32, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42,
	0x61, 0x72, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x61, 0x72, 0x73, 0x12, 0x32, 0x0a,
	0x09, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x62, 0x61, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x32, 0x2e,
	0x54, 0x69, 0x63, 0x6b, 0x42, 0x61, 0x72, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x42, 0x61, 0x72,
	0x73, 0x22, 0xd4, 0x01, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x42, 0x61, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x36, 0x0a, 0x15, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x13, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x0c, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0b, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73,
	0x65, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x74, 0x5f, 0x74,
	0x69, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x46,
	0x6c, 0x61, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x22, 0x51, 0x0a, 0x18, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x41, 0x6e, 0x64, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6f, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x6f, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x08, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x22, 0xe0, 0x03, 0x0a, 0x11,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x42, 0x61,
	0x72, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x61, 0x72, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0a, 0x62, 0x61, 0x72, 0x55, 0x74, 0x63, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x12, 0x52, 0x09, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x12, 0x52, 0x0f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x68,
	0x69, 0x67, 0x68, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x12, 0x52,
	0x0f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0e, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x64, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x12, 0x52, 0x10, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0d, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x0c, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x24, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52,
	0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x63, 0x6b, 0x5f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x69,
	0x63, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xda,
	0x04, 0x0a, 0x11, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x46, 0x69, 0x67, 0x75, 0x72,
	0x65, 0x42, 0x61, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x61, 0x72, 0x5f, 0x75, 0x74, 0x63, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0a, 0x62, 0x61, 0x72, 0x55,
	0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x12,
	0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x70,
	0x66, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x12, 0x52, 0x11, 0x70, 0x66, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x14,
	0x70, 0x66, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x12, 0x52, 0x11, 0x70, 0x66, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x64, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2d, 0x0a,
	0x13, 0x70, 0x66, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x12, 0x52, 0x10, 0x70, 0x66, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x64, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x15,
	0x70, 0x66, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x12, 0x52, 0x12, 0x70, 0x66, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0f, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x64, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x4c, 0x6f, 0x77,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0d, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x0c, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x75, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x02, 0x75, 0x70, 0x12, 0x54, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c,
	0x5f, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x91, 0x05, 0x0a, 0x08,
	0x52, 0x65, 0x6e, 0x6b, 0x6f, 0x42, 0x61, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x61, 0x72, 0x5f,
	0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0a,
	0x62, 0x61, 0x72, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x12, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0f, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x48, 0x69,
	0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x64, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x12, 0x52, 0x0e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x12, 0x52, 0x10, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x35, 0x0a, 0x17, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x6e, 0x6b, 0x6f, 0x5f,
	0x68, 0x69, 0x67, 0x68, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x12,
	0x52, 0x14, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x6e, 0x6b, 0x6f, 0x48, 0x69, 0x67,
	0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x6e, 0x6b, 0x6f, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x12, 0x52, 0x13, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x52, 0x65,
	0x6e, 0x6b, 0x6f, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x75,
	0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x75, 0x70, 0x12, 0x27, 0x0a, 0x0d, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69,
	0x63, 0x6b, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x74, 0x69, 0x63, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x1b, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x72, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x17, 0x66, 0x69, 0x72, 0x73, 0x74, 0x42, 0x61, 0x72, 0x41, 0x66, 0x74, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x54, 0x0a, 0x14, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0xd7, 0x03, 0x0a, 0x08, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x61, 0x72, 0x12, 0x20, 0x0a, 0x0c,
	0x62, 0x61, 0x72, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x0a, 0x62, 0x61, 0x72, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x12, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0f,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0f, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x64, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x4c, 0x6f, 0x77,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x12, 0x52, 0x10, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0d, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63,
	0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x32,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xb3, 0x02, 0x0a, 0x07, 0x54, 0x69,
	0x63, 0x6b, 0x42, 0x61, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x61, 0x72, 0x5f, 0x75, 0x74, 0x63,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0a, 0x62, 0x61, 0x72,
	0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x12, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x12, 0x52, 0x10, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0d, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x14, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0xf7, 0x01, 0x0a, 0x14, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x61, 0x0a, 0x19, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x32, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x17, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x0a,
	0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x54,
	0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x10, 0x03, 0x22, 0x82, 0x01, 0x0a, 0x17, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0c,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c,
	0x65, 0x6e, 0x64, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc0,
	0x06, 0x0a, 0x13, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x51, 0x0a, 0x14, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x32, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x12, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x84, 0x01, 0x0a, 0x21, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x32, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x43, 0x75, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x1e, 0x6c, 0x61, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x43, 0x75, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x12, 0x23, 0x0a, 0x0e, 0x75, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x75, 0x70, 0x54, 0x6f, 0x55, 0x74,
	0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x0b, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x74, 0x72, 0x75, 0x6e, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x10, 0x69, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x22, 0xc6, 0x02, 0x0a, 0x0a, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x55, 0x4c,
	0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00,
	0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x55, 0x4c,
	0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x65,
	0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x67, 0x12,
	0x19, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x68, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x45,
	0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x53, 0x49, 0x44,
	0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10,
	0x69, 0x12, 0x2f, 0x0a, 0x2b, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53,
	0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x56, 0x49, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x6a, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10,
	0x6e, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x10,
	0x6f, 0x22, 0xdd, 0x02, 0x0a, 0x2b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x43, 0x75, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12,
	0x52, 0x12, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x73, 0x6b, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x12, 0x52, 0x12, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x42,
	0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x17, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x64, 0x5f, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x42, 0x02, 0x18, 0x01, 0x52, 0x14, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x64, 0x41, 0x73, 0x6b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x61, 0x73,
	0x6b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x17,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x14, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x42, 0x69, 0x64, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x69, 0x64, 0x5f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0e, 0x62, 0x69, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x22, 0xec, 0x02, 0x0a, 0x11, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x12, 0x52, 0x0b, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0d, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x61, 0x73, 0x6b,
	0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x09, 0x61, 0x73, 0x6b,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x62, 0x69, 0x64, 0x5f, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x09, 0x62, 0x69, 0x64, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0f, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x69, 0x63, 0x6b,
	0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0d, 0x61, 0x73, 0x6b,
	0x54, 0x69, 0x63, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0f, 0x62, 0x69,
	0x64, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x71, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x52, 0x0d, 0x62, 0x69, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x2a, 0x9e, 0x01, 0x0a, 0x13, 0x42, 0x61, 0x72, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x54, 0x69, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x41, 0x52, 0x5f,
	0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x42, 0x49, 0x44, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x41, 0x52, 0x5f,
	0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x53, 0x4b, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x41, 0x52, 0x5f,
	0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x42, 0x41,
	0x52, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10,
	0x04, 0x2a, 0xaa, 0x01, 0x0a, 0x07, 0x42, 0x61, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x11, 0x0a,
	0x0d, 0x42, 0x41, 0x52, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x59, 0x45, 0x41, 0x52, 0x10, 0x01,
	0x12, 0x18, 0x0a, 0x14, 0x42, 0x41, 0x52, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x53, 0x45, 0x4d,
	0x49, 0x5f, 0x41, 0x4e, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x41,
	0x52, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x54, 0x45, 0x52, 0x10, 0x03,
	0x12, 0x12, 0x0a, 0x0e, 0x42, 0x41, 0x52, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4d, 0x4f, 0x4e,
	0x54, 0x48, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x41, 0x52, 0x5f, 0x55, 0x4e, 0x49, 0x54,
	0x5f, 0x57, 0x45, 0x45, 0x4b, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x41, 0x52, 0x5f, 0x55,
	0x4e, 0x49, 0x54, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x41, 0x52,
	0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c,
	0x42, 0x41, 0x52, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x08, 0x2a, 0xe3,
	0x05, 0x0a, 0x13, 0x42, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x42, 0x41, 0x52, 0x5f, 0x52, 0x45,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x42, 0x41,
	0x52, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x22, 0x0a, 0x1e, 0x42, 0x41, 0x52, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x52, 0x4f, 0x50,
	0x50, 0x45, 0x44, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x41, 0x52, 0x5f, 0x52, 0x45, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x42, 0x41, 0x52, 0x5f,
	0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10,
	0x04, 0x12, 0x26, 0x0a, 0x22, 0x42, 0x41, 0x52, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x42, 0x41, 0x52,
	0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x65, 0x12, 0x28, 0x0a,
	0x24, 0x42, 0x41, 0x52, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x44,
	0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x67, 0x12, 0x24, 0x0a, 0x20, 0x42, 0x41, 0x52, 0x5f, 0x52,
	0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x68, 0x12, 0x30, 0x0a,
	0x2c, 0x42, 0x41, 0x52, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x53, 0x49, 0x44, 0x45, 0x5f,
	0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x69, 0x12,
	0x29, 0x0a, 0x25, 0x42, 0x41, 0x52, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x10, 0x6a, 0x12, 0x3a, 0x0a, 0x36, 0x42, 0x41,
	0x52, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x53, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x56, 0x49, 0x4f, 0x4c, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x6b, 0x12, 0x37, 0x0a, 0x33, 0x42, 0x41, 0x52, 0x5f, 0x52, 0x45,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x5f, 0x56, 0x49, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x6c, 0x12,
	0x37, 0x0a, 0x33, 0x42, 0x41, 0x52, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x56, 0x49, 0x4f,
	0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x6d, 0x12, 0x28, 0x0a, 0x24, 0x42, 0x41, 0x52, 0x5f,
	0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44,
	0x10, 0x6e, 0x12, 0x40, 0x0a, 0x3c, 0x42, 0x41, 0x52, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4f, 0x55, 0x54,
	0x53, 0x49, 0x44, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x5f, 0x52, 0x41, 0x4e,
	0x47, 0x45, 0x10, 0x6f, 0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49,
}

var (
	file_protos_WebAPI_historical_2_proto_rawDescOnce sync.Once
	file_protos_WebAPI_historical_2_proto_rawDescData = file_protos_WebAPI_historical_2_proto_rawDesc
)

func file_protos_WebAPI_historical_2_proto_rawDescGZIP() []byte {
	file_protos_WebAPI_historical_2_proto_rawDescOnce.Do(func() {
		file_protos_WebAPI_historical_2_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_WebAPI_historical_2_proto_rawDescData)
	})
	return file_protos_WebAPI_historical_2_proto_rawDescData
}

var file_protos_WebAPI_historical_2_proto_enumTypes = make([]protoimpl.EnumInfo, 14)
var file_protos_WebAPI_historical_2_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_protos_WebAPI_historical_2_proto_goTypes = []any{
	(BarBuildingTickType)(0),                            // 0: historical_2.BarBuildingTickType
	(BarUnit)(0),                                        // 1: historical_2.BarUnit
	(BarReportStatusCode)(0),                            // 2: historical_2.BarReportStatusCode
	(TimeAndSalesParameters_Level)(0),                   // 3: historical_2.TimeAndSalesParameters.Level
	(TimeAndSalesRequest_RequestType)(0),                // 4: historical_2.TimeAndSalesRequest.RequestType
	(TimeAndSalesReport_ResultCode)(0),                  // 5: historical_2.TimeAndSalesReport.ResultCode
	(ContinuationParameters_ContinuationType)(0),        // 6: historical_2.ContinuationParameters.ContinuationType
	(TimeBarRequest_RequestType)(0),                     // 7: historical_2.TimeBarRequest.RequestType
	(BarRange_TimeDirection)(0),                         // 8: historical_2.BarRange.TimeDirection
	(NonTimedBarRequest_RequestType)(0),                 // 9: historical_2.NonTimedBarRequest.RequestType
	(RenkoBarParameters_StartPoint)(0),                  // 10: historical_2.RenkoBarParameters.StartPoint
	(RangeBarParameters_StartPoint)(0),                  // 11: historical_2.RangeBarParameters.StartPoint
	(VolumeProfileRequest_RequestType)(0),               // 12: historical_2.VolumeProfileRequest.RequestType
	(VolumeProfileReport_ResultCode)(0),                 // 13: historical_2.VolumeProfileReport.ResultCode
	(*TimeAndSalesParameters)(nil),                      // 14: historical_2.TimeAndSalesParameters
	(*TimeAndSalesRequest)(nil),                         // 15: historical_2.TimeAndSalesRequest
	(*TimeAndSalesReport)(nil),                          // 16: historical_2.TimeAndSalesReport
	(*ContinuationParameters)(nil),                      // 17: historical_2.ContinuationParameters
	(*TimeBarParameters)(nil),                           // 18: historical_2.TimeBarParameters
	(*TimeBarRequest)(nil),                              // 19: historical_2.TimeBarRequest
	(*ContinuationSegment)(nil),                         // 20: historical_2.ContinuationSegment
	(*TimeBar)(nil),                                     // 21: historical_2.TimeBar
	(*TimeBarReport)(nil),                               // 22: historical_2.TimeBarReport
	(*BarRange)(nil),                                    // 23: historical_2.BarRange
	(*NonTimedBarRequest)(nil),                          // 24: historical_2.NonTimedBarRequest
	(*RenkoBarParameters)(nil),                          // 25: historical_2.RenkoBarParameters
	(*RangeBarParameters)(nil),                          // 26: historical_2.RangeBarParameters
	(*TickBarParameters)(nil),                           // 27: historical_2.TickBarParameters
	(*NonTimedBarReport)(nil),                           // 28: historical_2.NonTimedBarReport
	(*ConstantVolumeBarParameters)(nil),                 // 29: historical_2.ConstantVolumeBarParameters
	(*PointAndFigureParameters)(nil),                    // 30: historical_2.PointAndFigureParameters
	(*ConstantVolumeBar)(nil),                           // 31: historical_2.ConstantVolumeBar
	(*PointAndFigureBar)(nil),                           // 32: historical_2.PointAndFigureBar
	(*RenkoBar)(nil),                                    // 33: historical_2.RenkoBar
	(*RangeBar)(nil),                                    // 34: historical_2.RangeBar
	(*TickBar)(nil),                                     // 35: historical_2.TickBar
	(*VolumeProfileRequest)(nil),                        // 36: historical_2.VolumeProfileRequest
	(*VolumeProfileParameters)(nil),                     // 37: historical_2.VolumeProfileParameters
	(*VolumeProfileReport)(nil),                         // 38: historical_2.VolumeProfileReport
	(*VolumeProfileLastQuotesCumulativeStatistics)(nil), // 39: historical_2.VolumeProfileLastQuotesCumulativeStatistics
	(*VolumeProfileItem)(nil),                           // 40: historical_2.VolumeProfileItem
	(*Quote)(nil),                                       // 41: market_data_2.Quote
	(*common.Text)(nil),                                 // 42: shared_1.Text
	(*common.Decimal)(nil),                              // 43: cqg.Decimal
}
var file_protos_WebAPI_historical_2_proto_depIdxs = []int32{
	14, // 0: historical_2.TimeAndSalesRequest.time_and_sales_parameters:type_name -> historical_2.TimeAndSalesParameters
	41, // 1: historical_2.TimeAndSalesReport.quotes:type_name -> market_data_2.Quote
	41, // 2: historical_2.TimeAndSalesReport.corrections:type_name -> market_data_2.Quote
	42, // 3: historical_2.TimeAndSalesReport.details:type_name -> shared_1.Text
	17, // 4: historical_2.TimeBarParameters.continuation_parameters:type_name -> historical_2.ContinuationParameters
	18, // 5: historical_2.TimeBarRequest.time_bar_parameters:type_name -> historical_2.TimeBarParameters
	43, // 6: historical_2.TimeBar.volume:type_name -> cqg.Decimal
	43, // 7: historical_2.TimeBar.commodity_volume:type_name -> cqg.Decimal
	43, // 8: historical_2.TimeBar.open_interest:type_name -> cqg.Decimal
	43, // 9: historical_2.TimeBar.commodity_open_interest:type_name -> cqg.Decimal
	20, // 10: historical_2.TimeBar.continuation_segment:type_name -> historical_2.ContinuationSegment
	21, // 11: historical_2.TimeBarReport.time_bars:type_name -> historical_2.TimeBar
	42, // 12: historical_2.TimeBarReport.details:type_name -> shared_1.Text
	17, // 13: historical_2.NonTimedBarRequest.continuation_parameters:type_name -> historical_2.ContinuationParameters
	23, // 14: historical_2.NonTimedBarRequest.bar_range:type_name -> historical_2.BarRange
	29, // 15: historical_2.NonTimedBarRequest.constant_volume_bar_parameters:type_name -> historical_2.ConstantVolumeBarParameters
	30, // 16: historical_2.NonTimedBarRequest.point_and_figure_parameters:type_name -> historical_2.PointAndFigureParameters
	25, // 17: historical_2.NonTimedBarRequest.renko_bar_parameters:type_name -> historical_2.RenkoBarParameters
	26, // 18: historical_2.NonTimedBarRequest.range_bar_parameters:type_name -> historical_2.RangeBarParameters
	27, // 19: historical_2.NonTimedBarRequest.tick_bar_parameters:type_name -> historical_2.TickBarParameters
	42, // 20: historical_2.NonTimedBarReport.details:type_name -> shared_1.Text
	31, // 21: historical_2.NonTimedBarReport.constant_volume_bars:type_name -> historical_2.ConstantVolumeBar
	32, // 22: historical_2.NonTimedBarReport.point_and_figure_bars:type_name -> historical_2.PointAndFigureBar
	33, // 23: historical_2.NonTimedBarReport.renko_bars:type_name -> historical_2.RenkoBar
	34, // 24: historical_2.NonTimedBarReport.range_bars:type_name -> historical_2.RangeBar
	35, // 25: historical_2.NonTimedBarReport.tick_bars:type_name -> historical_2.TickBar
	43, // 26: historical_2.ConstantVolumeBarParameters.volume_level:type_name -> cqg.Decimal
	43, // 27: historical_2.ConstantVolumeBar.volume:type_name -> cqg.Decimal
	20, // 28: historical_2.ConstantVolumeBar.continuation_segment:type_name -> historical_2.ContinuationSegment
	43, // 29: historical_2.PointAndFigureBar.volume:type_name -> cqg.Decimal
	20, // 30: historical_2.PointAndFigureBar.continuation_segment:type_name -> historical_2.ContinuationSegment
	43, // 31: historical_2.RenkoBar.volume:type_name -> cqg.Decimal
	20, // 32: historical_2.RenkoBar.continuation_segment:type_name -> historical_2.ContinuationSegment
	43, // 33: historical_2.RangeBar.volume:type_name -> cqg.Decimal
	20, // 34: historical_2.RangeBar.continuation_segment:type_name -> historical_2.ContinuationSegment
	43, // 35: historical_2.TickBar.volume:type_name -> cqg.Decimal
	20, // 36: historical_2.TickBar.continuation_segment:type_name -> historical_2.ContinuationSegment
	37, // 37: historical_2.VolumeProfileRequest.volume_profile_parameters:type_name -> historical_2.VolumeProfileParameters
	40, // 38: historical_2.VolumeProfileReport.volume_profile_items:type_name -> historical_2.VolumeProfileItem
	39, // 39: historical_2.VolumeProfileReport.last_quotes_cumulative_statistics:type_name -> historical_2.VolumeProfileLastQuotesCumulativeStatistics
	42, // 40: historical_2.VolumeProfileReport.details:type_name -> shared_1.Text
	43, // 41: historical_2.VolumeProfileItem.volume:type_name -> cqg.Decimal
	43, // 42: historical_2.VolumeProfileItem.ask_volume:type_name -> cqg.Decimal
	43, // 43: historical_2.VolumeProfileItem.bid_volume:type_name -> cqg.Decimal
	43, // 44: historical_2.VolumeProfileItem.ask_tick_volume:type_name -> cqg.Decimal
	43, // 45: historical_2.VolumeProfileItem.bid_tick_volume:type_name -> cqg.Decimal
	46, // [46:46] is the sub-list for method output_type
	46, // [46:46] is the sub-list for method input_type
	46, // [46:46] is the sub-list for extension type_name
	46, // [46:46] is the sub-list for extension extendee
	0,  // [0:46] is the sub-list for field type_name
}

func init() { file_protos_WebAPI_historical_2_proto_init() }
func file_protos_WebAPI_historical_2_proto_init() {
	if File_protos_WebAPI_historical_2_proto != nil {
		return
	}
	file_protos_WebAPI_market_data_2_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_WebAPI_historical_2_proto_rawDesc,
			NumEnums:      14,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_WebAPI_historical_2_proto_goTypes,
		DependencyIndexes: file_protos_WebAPI_historical_2_proto_depIdxs,
		EnumInfos:         file_protos_WebAPI_historical_2_proto_enumTypes,
		MessageInfos:      file_protos_WebAPI_historical_2_proto_msgTypes,
	}.Build()
	File_protos_WebAPI_historical_2_proto = out.File
	file_protos_WebAPI_historical_2_proto_rawDesc = nil
	file_protos_WebAPI_historical_2_proto_goTypes = nil
	file_protos_WebAPI_historical_2_proto_depIdxs = nil
}
