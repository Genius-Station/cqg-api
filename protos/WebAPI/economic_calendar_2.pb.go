// Calendar events.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: protos/WebAPI/economic_calendar_2.proto

package WebAPI

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Value related to calendar event.
type CalendarEventValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Real (not scaled) value.
	Value *float64 `protobuf:"fixed64,1,opt,name=value" json:"value,omitempty"`
	// Unit in which the value has been reported.
	// Example of values:
	// 1. '%': percentages.
	// 2. 'K': 10^3
	// 3. 'M': 10^6
	// 4. 'B': 10^9
	// 5. 'T': 10^12
	Unit *string `protobuf:"bytes,2,opt,name=unit" json:"unit,omitempty"`
	// Full contract symbol in CQG dialect.
	CqgContractSymbol *string `protobuf:"bytes,3,opt,name=cqg_contract_symbol,json=cqgContractSymbol" json:"cqg_contract_symbol,omitempty"`
	// Contract ID of instrument associated with this value.
	// Note: in case of receiving unknown id the contract metadata can be obtained via
	// metadata_2.ContractMetadataRequest.
	ContractId *uint32 `protobuf:"varint,4,opt,name=contract_id,json=contractId" json:"contract_id,omitempty"`
	// Proposed bar unit for TimeBarRequest.
	// This field is associated with BarUnit enum type.
	TimeBarUnit *uint32 `protobuf:"varint,5,opt,name=time_bar_unit,json=timeBarUnit" json:"time_bar_unit,omitempty"`
}

func (x *CalendarEventValue) Reset() {
	*x = CalendarEventValue{}
	mi := &file_protos_WebAPI_economic_calendar_2_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CalendarEventValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalendarEventValue) ProtoMessage() {}

func (x *CalendarEventValue) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_economic_calendar_2_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalendarEventValue.ProtoReflect.Descriptor instead.
func (*CalendarEventValue) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_economic_calendar_2_proto_rawDescGZIP(), []int{0}
}

func (x *CalendarEventValue) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *CalendarEventValue) GetUnit() string {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return ""
}

func (x *CalendarEventValue) GetCqgContractSymbol() string {
	if x != nil && x.CqgContractSymbol != nil {
		return *x.CqgContractSymbol
	}
	return ""
}

func (x *CalendarEventValue) GetContractId() uint32 {
	if x != nil && x.ContractId != nil {
		return *x.ContractId
	}
	return 0
}

func (x *CalendarEventValue) GetTimeBarUnit() uint32 {
	if x != nil && x.TimeBarUnit != nil {
		return *x.TimeBarUnit
	}
	return 0
}

// Detail of calendar event.
type CalendarEventDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Provider event detail ID.
	// Note: The tuple of {country_id, provider_id, provider_event_category_id, provider_event_detail_id} can be used
	// for filtering of similar detail of calendar event.
	ProviderEventDetailId *string `protobuf:"bytes,1,opt,name=provider_event_detail_id,json=providerEventDetailId" json:"provider_event_detail_id,omitempty"`
	// Description.
	Description *string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	// Expected value of the event.
	ExpectedValue *CalendarEventValue `protobuf:"bytes,3,opt,name=expected_value,json=expectedValue" json:"expected_value,omitempty"`
	// Actual value of the event.
	ActualValue *CalendarEventValue `protobuf:"bytes,4,opt,name=actual_value,json=actualValue" json:"actual_value,omitempty"`
	// Previous value of the Event.
	PreviousValue *CalendarEventValue `protobuf:"bytes,5,opt,name=previous_value,json=previousValue" json:"previous_value,omitempty"`
	// Previous Revised value of the Event.
	PreviousRevisedValue *CalendarEventValue `protobuf:"bytes,6,opt,name=previous_revised_value,json=previousRevisedValue" json:"previous_revised_value,omitempty"`
}

func (x *CalendarEventDetail) Reset() {
	*x = CalendarEventDetail{}
	mi := &file_protos_WebAPI_economic_calendar_2_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CalendarEventDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalendarEventDetail) ProtoMessage() {}

func (x *CalendarEventDetail) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_economic_calendar_2_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalendarEventDetail.ProtoReflect.Descriptor instead.
func (*CalendarEventDetail) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_economic_calendar_2_proto_rawDescGZIP(), []int{1}
}

func (x *CalendarEventDetail) GetProviderEventDetailId() string {
	if x != nil && x.ProviderEventDetailId != nil {
		return *x.ProviderEventDetailId
	}
	return ""
}

func (x *CalendarEventDetail) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CalendarEventDetail) GetExpectedValue() *CalendarEventValue {
	if x != nil {
		return x.ExpectedValue
	}
	return nil
}

func (x *CalendarEventDetail) GetActualValue() *CalendarEventValue {
	if x != nil {
		return x.ActualValue
	}
	return nil
}

func (x *CalendarEventDetail) GetPreviousValue() *CalendarEventValue {
	if x != nil {
		return x.PreviousValue
	}
	return nil
}

func (x *CalendarEventDetail) GetPreviousRevisedValue() *CalendarEventValue {
	if x != nil {
		return x.PreviousRevisedValue
	}
	return nil
}

// Description of calendar event.
type CalendarEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Provider ID.
	// Metadata can be obtained via CalendarEventProviderListRequest.
	ProviderId *int32 `protobuf:"zigzag32,1,opt,name=provider_id,json=providerId" json:"provider_id,omitempty"`
	// Unique identifier of the calendar event.
	// This is a required field.
	ProviderEventId *string `protobuf:"bytes,2,opt,name=provider_event_id,json=providerEventId" json:"provider_event_id,omitempty"`
	// Time of this event (can be in the future).
	EventUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=event_utc_timestamp,json=eventUtcTimestamp" json:"event_utc_timestamp,omitempty"`
	// True means that event_utc_time is an exact time of the event,
	// False means that only a date of the event is provided.
	EventHasTime *bool `protobuf:"varint,4,opt,name=event_has_time,json=eventHasTime" json:"event_has_time,omitempty"`
	// Period for which the event was published. For example 'Q4'.
	Period *string `protobuf:"bytes,5,opt,name=period" json:"period,omitempty"`
	// Description.
	Description *string `protobuf:"bytes,6,opt,name=description" json:"description,omitempty"`
	// The Venue where the event will occur.
	Venue *string `protobuf:"bytes,7,opt,name=venue" json:"venue,omitempty"`
	// A URL link to more information about the event.
	EventUrl *string `protobuf:"bytes,8,opt,name=event_url,json=eventUrl" json:"event_url,omitempty"`
	// The name of the company/organization the event refers to.
	OrganizationName *string `protobuf:"bytes,9,opt,name=organization_name,json=organizationName" json:"organization_name,omitempty"`
	// The ticker symbol for the company if it's a company related event.
	OrganizationIsin *string `protobuf:"bytes,10,opt,name=organization_isin,json=organizationIsin" json:"organization_isin,omitempty"`
	// A URL with information about the company/organization.
	OrganizationUrl *string `protobuf:"bytes,11,opt,name=organization_url,json=organizationUrl" json:"organization_url,omitempty"`
	// Collection of event details.
	Details []*CalendarEventDetail `protobuf:"bytes,12,rep,name=details" json:"details,omitempty"`
	// True if it's key event.
	// This is a required field.
	IsKeyEvent *bool `protobuf:"varint,13,opt,name=is_key_event,json=isKeyEvent" json:"is_key_event,omitempty"`
	// Country ID.
	// Metadata can be obtained via CountryListRequest.
	CountryId *int32 `protobuf:"zigzag32,14,opt,name=country_id,json=countryId" json:"country_id,omitempty"`
	// True means that an actual update is expected when the event occurs.
	ActualExpected *bool `protobuf:"varint,15,opt,name=actual_expected,json=actualExpected" json:"actual_expected,omitempty"`
	// Provider event category ID.
	// Note: The tuple of {country_id, provider_id, provider_event_category_id} can be used for filtering
	// of similar events.
	ProviderEventCategoryId *string `protobuf:"bytes,16,opt,name=provider_event_category_id,json=providerEventCategoryId" json:"provider_event_category_id,omitempty"`
}

func (x *CalendarEvent) Reset() {
	*x = CalendarEvent{}
	mi := &file_protos_WebAPI_economic_calendar_2_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CalendarEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalendarEvent) ProtoMessage() {}

func (x *CalendarEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_economic_calendar_2_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalendarEvent.ProtoReflect.Descriptor instead.
func (*CalendarEvent) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_economic_calendar_2_proto_rawDescGZIP(), []int{2}
}

func (x *CalendarEvent) GetProviderId() int32 {
	if x != nil && x.ProviderId != nil {
		return *x.ProviderId
	}
	return 0
}

func (x *CalendarEvent) GetProviderEventId() string {
	if x != nil && x.ProviderEventId != nil {
		return *x.ProviderEventId
	}
	return ""
}

func (x *CalendarEvent) GetEventUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.EventUtcTimestamp
	}
	return nil
}

func (x *CalendarEvent) GetEventHasTime() bool {
	if x != nil && x.EventHasTime != nil {
		return *x.EventHasTime
	}
	return false
}

func (x *CalendarEvent) GetPeriod() string {
	if x != nil && x.Period != nil {
		return *x.Period
	}
	return ""
}

func (x *CalendarEvent) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CalendarEvent) GetVenue() string {
	if x != nil && x.Venue != nil {
		return *x.Venue
	}
	return ""
}

func (x *CalendarEvent) GetEventUrl() string {
	if x != nil && x.EventUrl != nil {
		return *x.EventUrl
	}
	return ""
}

func (x *CalendarEvent) GetOrganizationName() string {
	if x != nil && x.OrganizationName != nil {
		return *x.OrganizationName
	}
	return ""
}

func (x *CalendarEvent) GetOrganizationIsin() string {
	if x != nil && x.OrganizationIsin != nil {
		return *x.OrganizationIsin
	}
	return ""
}

func (x *CalendarEvent) GetOrganizationUrl() string {
	if x != nil && x.OrganizationUrl != nil {
		return *x.OrganizationUrl
	}
	return ""
}

func (x *CalendarEvent) GetDetails() []*CalendarEventDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *CalendarEvent) GetIsKeyEvent() bool {
	if x != nil && x.IsKeyEvent != nil {
		return *x.IsKeyEvent
	}
	return false
}

func (x *CalendarEvent) GetCountryId() int32 {
	if x != nil && x.CountryId != nil {
		return *x.CountryId
	}
	return 0
}

func (x *CalendarEvent) GetActualExpected() bool {
	if x != nil && x.ActualExpected != nil {
		return *x.ActualExpected
	}
	return false
}

func (x *CalendarEvent) GetProviderEventCategoryId() string {
	if x != nil && x.ProviderEventCategoryId != nil {
		return *x.ProviderEventCategoryId
	}
	return ""
}

// Request for calendar events.
// The server maintains a limited number of full calendar days (in UTC) of past events. The default is 65 days,
// the actual limit is returned in the oldest available timestamp of the report.
// Requested event time range is truncated to the oldest available timestamp.
// For subscriptions, new or updated events are delivered if they are within the available range,
// regardless of the from_ and to_utc_timestamp in the request.
// Tip: to subscribe on new / updated events only (without receiving events for specified time range),
// you can omit both 'from_utc_timestamp' and 'to_utc_timestamp' in the request.
type CalendarEventListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time to start from.
	// If not specified, then current time is used.
	FromUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=from_utc_timestamp,json=fromUtcTimestamp" json:"from_utc_timestamp,omitempty"`
	// Time to end with.
	// If not specified, then current time is used.
	ToUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=to_utc_timestamp,json=toUtcTimestamp" json:"to_utc_timestamp,omitempty"`
	// / Filtering options
	// If True, skip calendar events without field 'provider_event_category_id'.
	SkipEventsWithoutProviderEventCategoryId *bool `protobuf:"varint,3,opt,name=skip_events_without_provider_event_category_id,json=skipEventsWithoutProviderEventCategoryId" json:"skip_events_without_provider_event_category_id,omitempty"`
	// If True, skip calendar events without `details`.
	SkipEventsWithoutDetails *bool `protobuf:"varint,4,opt,name=skip_events_without_details,json=skipEventsWithoutDetails" json:"skip_events_without_details,omitempty"`
}

func (x *CalendarEventListRequest) Reset() {
	*x = CalendarEventListRequest{}
	mi := &file_protos_WebAPI_economic_calendar_2_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CalendarEventListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalendarEventListRequest) ProtoMessage() {}

func (x *CalendarEventListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_economic_calendar_2_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalendarEventListRequest.ProtoReflect.Descriptor instead.
func (*CalendarEventListRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_economic_calendar_2_proto_rawDescGZIP(), []int{3}
}

func (x *CalendarEventListRequest) GetFromUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.FromUtcTimestamp
	}
	return nil
}

func (x *CalendarEventListRequest) GetToUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ToUtcTimestamp
	}
	return nil
}

func (x *CalendarEventListRequest) GetSkipEventsWithoutProviderEventCategoryId() bool {
	if x != nil && x.SkipEventsWithoutProviderEventCategoryId != nil {
		return *x.SkipEventsWithoutProviderEventCategoryId
	}
	return false
}

func (x *CalendarEventListRequest) GetSkipEventsWithoutDetails() bool {
	if x != nil && x.SkipEventsWithoutDetails != nil {
		return *x.SkipEventsWithoutDetails
	}
	return false
}

// Report with calendar events.
type CalendarEventListReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of calendar events.
	CalendarEvents []*CalendarEvent `protobuf:"bytes,1,rep,name=calendar_events,json=calendarEvents" json:"calendar_events,omitempty"`
	// Oldest available and allowed UTC time.
	// Always provided in first response, provided in updates only if changed.
	OldestAvailableUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=oldest_available_utc_timestamp,json=oldestAvailableUtcTimestamp" json:"oldest_available_utc_timestamp,omitempty"`
	// Latest available and allowed UTC time.
	// Always provided in first response, provided in updates only if changed.
	LatestAvailableUtcTimestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=latest_available_utc_timestamp,json=latestAvailableUtcTimestamp" json:"latest_available_utc_timestamp,omitempty"`
}

func (x *CalendarEventListReport) Reset() {
	*x = CalendarEventListReport{}
	mi := &file_protos_WebAPI_economic_calendar_2_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CalendarEventListReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalendarEventListReport) ProtoMessage() {}

func (x *CalendarEventListReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_economic_calendar_2_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalendarEventListReport.ProtoReflect.Descriptor instead.
func (*CalendarEventListReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_economic_calendar_2_proto_rawDescGZIP(), []int{4}
}

func (x *CalendarEventListReport) GetCalendarEvents() []*CalendarEvent {
	if x != nil {
		return x.CalendarEvents
	}
	return nil
}

func (x *CalendarEventListReport) GetOldestAvailableUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.OldestAvailableUtcTimestamp
	}
	return nil
}

func (x *CalendarEventListReport) GetLatestAvailableUtcTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LatestAvailableUtcTimestamp
	}
	return nil
}

// Provider of calendar events.
type CalendarEventProvider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Provider ID.
	// This is a required field.
	Id *int32 `protobuf:"zigzag32,1,opt,name=id" json:"id,omitempty"`
	// Name.
	// This is a required field.
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Description.
	// This is a required field.
	Description *string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// Calendar event provider is deleted (used for updates).
	Deleted *bool `protobuf:"varint,4,opt,name=deleted" json:"deleted,omitempty"`
}

func (x *CalendarEventProvider) Reset() {
	*x = CalendarEventProvider{}
	mi := &file_protos_WebAPI_economic_calendar_2_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CalendarEventProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalendarEventProvider) ProtoMessage() {}

func (x *CalendarEventProvider) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_economic_calendar_2_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalendarEventProvider.ProtoReflect.Descriptor instead.
func (*CalendarEventProvider) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_economic_calendar_2_proto_rawDescGZIP(), []int{5}
}

func (x *CalendarEventProvider) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CalendarEventProvider) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CalendarEventProvider) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CalendarEventProvider) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

// Request list of calendar event providers.
type CalendarEventProviderListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CalendarEventProviderListRequest) Reset() {
	*x = CalendarEventProviderListRequest{}
	mi := &file_protos_WebAPI_economic_calendar_2_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CalendarEventProviderListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalendarEventProviderListRequest) ProtoMessage() {}

func (x *CalendarEventProviderListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_economic_calendar_2_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalendarEventProviderListRequest.ProtoReflect.Descriptor instead.
func (*CalendarEventProviderListRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_economic_calendar_2_proto_rawDescGZIP(), []int{6}
}

// Report with a list of calendar event providers.
type CalendarEventProviderListReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Providers []*CalendarEventProvider `protobuf:"bytes,1,rep,name=providers" json:"providers,omitempty"`
}

func (x *CalendarEventProviderListReport) Reset() {
	*x = CalendarEventProviderListReport{}
	mi := &file_protos_WebAPI_economic_calendar_2_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CalendarEventProviderListReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalendarEventProviderListReport) ProtoMessage() {}

func (x *CalendarEventProviderListReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_economic_calendar_2_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalendarEventProviderListReport.ProtoReflect.Descriptor instead.
func (*CalendarEventProviderListReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_economic_calendar_2_proto_rawDescGZIP(), []int{7}
}

func (x *CalendarEventProviderListReport) GetProviders() []*CalendarEventProvider {
	if x != nil {
		return x.Providers
	}
	return nil
}

// Calendar event type.
type CalendarEventType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Country ID.
	// Metadata can be obtained via CountryListRequest.
	CountryId *int32 `protobuf:"zigzag32,1,opt,name=country_id,json=countryId" json:"country_id,omitempty"`
	// Provider ID.
	ProviderId *int32 `protobuf:"zigzag32,2,opt,name=provider_id,json=providerId" json:"provider_id,omitempty"`
	// Provider event category ID.
	ProviderEventCategoryId *string `protobuf:"bytes,3,opt,name=provider_event_category_id,json=providerEventCategoryId" json:"provider_event_category_id,omitempty"`
	// Provider event detail ID.
	ProviderEventDetailId *string `protobuf:"bytes,4,opt,name=provider_event_detail_id,json=providerEventDetailId" json:"provider_event_detail_id,omitempty"`
	// Description of an event type category.
	// This is a required field.
	CategoryDescription *string `protobuf:"bytes,5,opt,name=category_description,json=categoryDescription" json:"category_description,omitempty"`
	// Description of an event type detail.
	// This is a required field.
	DetailDescription *string `protobuf:"bytes,6,opt,name=detail_description,json=detailDescription" json:"detail_description,omitempty"`
	// Calendar event type is deleted (used for updates).
	Deleted *bool `protobuf:"varint,7,opt,name=deleted" json:"deleted,omitempty"`
}

func (x *CalendarEventType) Reset() {
	*x = CalendarEventType{}
	mi := &file_protos_WebAPI_economic_calendar_2_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CalendarEventType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalendarEventType) ProtoMessage() {}

func (x *CalendarEventType) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_economic_calendar_2_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalendarEventType.ProtoReflect.Descriptor instead.
func (*CalendarEventType) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_economic_calendar_2_proto_rawDescGZIP(), []int{8}
}

func (x *CalendarEventType) GetCountryId() int32 {
	if x != nil && x.CountryId != nil {
		return *x.CountryId
	}
	return 0
}

func (x *CalendarEventType) GetProviderId() int32 {
	if x != nil && x.ProviderId != nil {
		return *x.ProviderId
	}
	return 0
}

func (x *CalendarEventType) GetProviderEventCategoryId() string {
	if x != nil && x.ProviderEventCategoryId != nil {
		return *x.ProviderEventCategoryId
	}
	return ""
}

func (x *CalendarEventType) GetProviderEventDetailId() string {
	if x != nil && x.ProviderEventDetailId != nil {
		return *x.ProviderEventDetailId
	}
	return ""
}

func (x *CalendarEventType) GetCategoryDescription() string {
	if x != nil && x.CategoryDescription != nil {
		return *x.CategoryDescription
	}
	return ""
}

func (x *CalendarEventType) GetDetailDescription() string {
	if x != nil && x.DetailDescription != nil {
		return *x.DetailDescription
	}
	return ""
}

func (x *CalendarEventType) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

// Request list of calendar event types.
type CalendarEventTypeListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CalendarEventTypeListRequest) Reset() {
	*x = CalendarEventTypeListRequest{}
	mi := &file_protos_WebAPI_economic_calendar_2_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CalendarEventTypeListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalendarEventTypeListRequest) ProtoMessage() {}

func (x *CalendarEventTypeListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_economic_calendar_2_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalendarEventTypeListRequest.ProtoReflect.Descriptor instead.
func (*CalendarEventTypeListRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_economic_calendar_2_proto_rawDescGZIP(), []int{9}
}

// Report with a list of calendar event types.
type CalendarEventTypeListReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Types []*CalendarEventType `protobuf:"bytes,1,rep,name=types" json:"types,omitempty"`
}

func (x *CalendarEventTypeListReport) Reset() {
	*x = CalendarEventTypeListReport{}
	mi := &file_protos_WebAPI_economic_calendar_2_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CalendarEventTypeListReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalendarEventTypeListReport) ProtoMessage() {}

func (x *CalendarEventTypeListReport) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_economic_calendar_2_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalendarEventTypeListReport.ProtoReflect.Descriptor instead.
func (*CalendarEventTypeListReport) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_economic_calendar_2_proto_rawDescGZIP(), []int{10}
}

func (x *CalendarEventTypeListReport) GetTypes() []*CalendarEventType {
	if x != nil {
		return x.Types
	}
	return nil
}

var File_protos_WebAPI_economic_calendar_2_proto protoreflect.FileDescriptor

var file_protos_WebAPI_economic_calendar_2_proto_rawDesc = []byte{
	0x0a, 0x27, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49, 0x2f,
	0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61,
	0x72, 0x5f, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x65, 0x63, 0x6f, 0x6e, 0x6f,
	0x6d, 0x69, 0x63, 0x5f, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x5f, 0x32, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xb3, 0x01, 0x0a, 0x12, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x12, 0x2e, 0x0a, 0x13, 0x63, 0x71, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63,
	0x71, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x62, 0x61, 0x72, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x61,
	0x72, 0x55, 0x6e, 0x69, 0x74, 0x22, 0xbb, 0x03, 0x0a, 0x13, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64,
	0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x37, 0x0a,
	0x18, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x63, 0x61, 0x6c, 0x65,
	0x6e, 0x64, 0x61, 0x72, 0x5f, 0x32, 0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4a, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64,
	0x61, 0x72, 0x5f, 0x32, 0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x4e, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x5f, 0x32, 0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x5d, 0x0a, 0x16, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x5f,
	0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x5f, 0x32, 0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e,
	0x64, 0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x65, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xab, 0x05, 0x0a, 0x0d, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x4a, 0x0a, 0x13, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x74, 0x63, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x24,
	0x0a, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x72,
	0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b,
	0x0a, 0x11, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x73, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x73, 0x69, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x42, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d,
	0x69, 0x63, 0x5f, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x5f, 0x32, 0x2e, 0x43, 0x61,
	0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x69, 0x73, 0x4b, 0x65, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x61,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x22, 0xcb, 0x02, 0x0a, 0x18, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48,
	0x0a, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x74, 0x63, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x44, 0x0a, 0x10, 0x74, 0x6f, 0x5f, 0x75,
	0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e,
	0x74, 0x6f, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x60,
	0x0a, 0x2e, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x28, 0x73, 0x6b, 0x69, 0x70, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x12, 0x3d, 0x0a, 0x1b, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x73, 0x6b, 0x69, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22,
	0xa8, 0x02, 0x0a, 0x17, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x4b, 0x0a, 0x0f, 0x63,
	0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x5f,
	0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x5f, 0x32, 0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e,
	0x64, 0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64,
	0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x5f, 0x0a, 0x1e, 0x6f, 0x6c, 0x64, 0x65,
	0x73, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x74, 0x63,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1b, 0x6f, 0x6c,
	0x64, 0x65, 0x73, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x74, 0x63,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x5f, 0x0a, 0x1e, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x74,
	0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1b, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x74,
	0x63, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x77, 0x0a, 0x15, 0x43, 0x61,
	0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x22, 0x22, 0x0a, 0x20, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6b, 0x0a, 0x1f, 0x43, 0x61, 0x6c, 0x65, 0x6e,
	0x64, 0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61,
	0x72, 0x5f, 0x32, 0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x22, 0xc5, 0x02, 0x0a, 0x11, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64,
	0x12, 0x31, 0x0a, 0x14, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x1e, 0x0a, 0x1c,
	0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5b, 0x0a, 0x1b,
	0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x63, 0x6f,
	0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x5f, 0x32,
	0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49,
}

var (
	file_protos_WebAPI_economic_calendar_2_proto_rawDescOnce sync.Once
	file_protos_WebAPI_economic_calendar_2_proto_rawDescData = file_protos_WebAPI_economic_calendar_2_proto_rawDesc
)

func file_protos_WebAPI_economic_calendar_2_proto_rawDescGZIP() []byte {
	file_protos_WebAPI_economic_calendar_2_proto_rawDescOnce.Do(func() {
		file_protos_WebAPI_economic_calendar_2_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_WebAPI_economic_calendar_2_proto_rawDescData)
	})
	return file_protos_WebAPI_economic_calendar_2_proto_rawDescData
}

var file_protos_WebAPI_economic_calendar_2_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_protos_WebAPI_economic_calendar_2_proto_goTypes = []any{
	(*CalendarEventValue)(nil),               // 0: economic_calendar_2.CalendarEventValue
	(*CalendarEventDetail)(nil),              // 1: economic_calendar_2.CalendarEventDetail
	(*CalendarEvent)(nil),                    // 2: economic_calendar_2.CalendarEvent
	(*CalendarEventListRequest)(nil),         // 3: economic_calendar_2.CalendarEventListRequest
	(*CalendarEventListReport)(nil),          // 4: economic_calendar_2.CalendarEventListReport
	(*CalendarEventProvider)(nil),            // 5: economic_calendar_2.CalendarEventProvider
	(*CalendarEventProviderListRequest)(nil), // 6: economic_calendar_2.CalendarEventProviderListRequest
	(*CalendarEventProviderListReport)(nil),  // 7: economic_calendar_2.CalendarEventProviderListReport
	(*CalendarEventType)(nil),                // 8: economic_calendar_2.CalendarEventType
	(*CalendarEventTypeListRequest)(nil),     // 9: economic_calendar_2.CalendarEventTypeListRequest
	(*CalendarEventTypeListReport)(nil),      // 10: economic_calendar_2.CalendarEventTypeListReport
	(*timestamppb.Timestamp)(nil),            // 11: google.protobuf.Timestamp
}
var file_protos_WebAPI_economic_calendar_2_proto_depIdxs = []int32{
	0,  // 0: economic_calendar_2.CalendarEventDetail.expected_value:type_name -> economic_calendar_2.CalendarEventValue
	0,  // 1: economic_calendar_2.CalendarEventDetail.actual_value:type_name -> economic_calendar_2.CalendarEventValue
	0,  // 2: economic_calendar_2.CalendarEventDetail.previous_value:type_name -> economic_calendar_2.CalendarEventValue
	0,  // 3: economic_calendar_2.CalendarEventDetail.previous_revised_value:type_name -> economic_calendar_2.CalendarEventValue
	11, // 4: economic_calendar_2.CalendarEvent.event_utc_timestamp:type_name -> google.protobuf.Timestamp
	1,  // 5: economic_calendar_2.CalendarEvent.details:type_name -> economic_calendar_2.CalendarEventDetail
	11, // 6: economic_calendar_2.CalendarEventListRequest.from_utc_timestamp:type_name -> google.protobuf.Timestamp
	11, // 7: economic_calendar_2.CalendarEventListRequest.to_utc_timestamp:type_name -> google.protobuf.Timestamp
	2,  // 8: economic_calendar_2.CalendarEventListReport.calendar_events:type_name -> economic_calendar_2.CalendarEvent
	11, // 9: economic_calendar_2.CalendarEventListReport.oldest_available_utc_timestamp:type_name -> google.protobuf.Timestamp
	11, // 10: economic_calendar_2.CalendarEventListReport.latest_available_utc_timestamp:type_name -> google.protobuf.Timestamp
	5,  // 11: economic_calendar_2.CalendarEventProviderListReport.providers:type_name -> economic_calendar_2.CalendarEventProvider
	8,  // 12: economic_calendar_2.CalendarEventTypeListReport.types:type_name -> economic_calendar_2.CalendarEventType
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_protos_WebAPI_economic_calendar_2_proto_init() }
func file_protos_WebAPI_economic_calendar_2_proto_init() {
	if File_protos_WebAPI_economic_calendar_2_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_WebAPI_economic_calendar_2_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_WebAPI_economic_calendar_2_proto_goTypes,
		DependencyIndexes: file_protos_WebAPI_economic_calendar_2_proto_depIdxs,
		MessageInfos:      file_protos_WebAPI_economic_calendar_2_proto_msgTypes,
	}.Build()
	File_protos_WebAPI_economic_calendar_2_proto = out.File
	file_protos_WebAPI_economic_calendar_2_proto_rawDesc = nil
	file_protos_WebAPI_economic_calendar_2_proto_goTypes = nil
	file_protos_WebAPI_economic_calendar_2_proto_depIdxs = nil
}
