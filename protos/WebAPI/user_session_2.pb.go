// User session level messages

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: protos/WebAPI/user_session_2.proto

package WebAPI

import (
	common "cqg-api/protos/WebAPI/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Real-time Collapsing level enumeration.
// Collapsing is a mechanism of eliminating some intermediate quotes to present more up-to-date market data
// instead of falling behind.
// It is started dynamically by server if client is not able to consume all requested feed timely
// e.g. because of a narrow network channel or client side hardware/ software issues.
//
//   - When real time price data in a session queue becomes >=1 seconds old (configurable) DOM collapsing is applied
//     so per contract snapshot is sent at the end of the contract data messages.
//   - When real time price data in a session queue is >=4 seconds old (configurable) BBA collapsing is done
//     so only last per contract BBA quotes are delivered.
//   - When real time price data in a session queue is >=8 seconds old (configurable) Trade collapsing is done
//     so only last per contract Trade quotes are delivered.
//   - Quote representing Open, High or Low is always sent to the client regardless of current collapsing level.
//   - Quote representing Settlement is always sent to the client regardless of current collapsing level.
//   - If the difference between first and last quote in the queue reaches 60 (current setting) seconds
//
// (configurable with per user overrides for VIP access) the connection is closed with sending a special user message.
//
// The user can specify maximum allowed collapsing level,
// see Logon/RestoreOrJoinSession message's max_collapsing_level field, or SetCollapsingLevelRequest message.
// Server will honor the setting, but still disconnect the user
// if the data in outgoing queue becomes 60 sec(current setting) old.
//
// CONCLUSION: In case of bad network conditions, the client has a choice:
//
// a) To receive more complete realtime data but risk being disconnected:
//
//	the lower chosen max_collapsing_level - the higher risk of disconnections.
//
// b) To receive collapsed but up-to-date realtime data and stay connected:
//
//	it is advised to leave field max_collapsing_level out, or set it to REAL_TIME_COLLAPSING_LEVEL_DOM_BBA_TRADES.
type RealTimeCollapsingLevel int32

const (
	// Collapsing is not not preferred.
	RealTimeCollapsingLevel_REAL_TIME_COLLAPSING_LEVEL_NONE RealTimeCollapsingLevel = 0
	// DOM data is collapsed.
	RealTimeCollapsingLevel_REAL_TIME_COLLAPSING_LEVEL_DOM RealTimeCollapsingLevel = 1
	// DOM and best bid/ ask quotes are collapsed delivering only last BBA but all trades.
	RealTimeCollapsingLevel_REAL_TIME_COLLAPSING_LEVEL_DOM_BBA RealTimeCollapsingLevel = 2
	// DOM, best bid/ ask and trades quotes are collapsed delivering only last values.
	RealTimeCollapsingLevel_REAL_TIME_COLLAPSING_LEVEL_DOM_BBA_TRADES RealTimeCollapsingLevel = 3
)

// Enum value maps for RealTimeCollapsingLevel.
var (
	RealTimeCollapsingLevel_name = map[int32]string{
		0: "REAL_TIME_COLLAPSING_LEVEL_NONE",
		1: "REAL_TIME_COLLAPSING_LEVEL_DOM",
		2: "REAL_TIME_COLLAPSING_LEVEL_DOM_BBA",
		3: "REAL_TIME_COLLAPSING_LEVEL_DOM_BBA_TRADES",
	}
	RealTimeCollapsingLevel_value = map[string]int32{
		"REAL_TIME_COLLAPSING_LEVEL_NONE":           0,
		"REAL_TIME_COLLAPSING_LEVEL_DOM":            1,
		"REAL_TIME_COLLAPSING_LEVEL_DOM_BBA":        2,
		"REAL_TIME_COLLAPSING_LEVEL_DOM_BBA_TRADES": 3,
	}
)

func (x RealTimeCollapsingLevel) Enum() *RealTimeCollapsingLevel {
	p := new(RealTimeCollapsingLevel)
	*p = x
	return p
}

func (x RealTimeCollapsingLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RealTimeCollapsingLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_user_session_2_proto_enumTypes[0].Descriptor()
}

func (RealTimeCollapsingLevel) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_user_session_2_proto_enumTypes[0]
}

func (x RealTimeCollapsingLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RealTimeCollapsingLevel) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RealTimeCollapsingLevel(num)
	return nil
}

// Deprecated: Use RealTimeCollapsingLevel.Descriptor instead.
func (RealTimeCollapsingLevel) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_user_session_2_proto_rawDescGZIP(), []int{0}
}

type Logon_SessionSetting int32

const (
	// Allows restoring session in case of an accidental disconnect (see RestoreOrJoinSession message).
	// If the setting is not specified then termination of the last connection
	// also terminates the session without ability to restore it.
	// For security reasons clients should not specify this setting without using the restore session functionality.
	Logon_SESSION_SETTING_ALLOW_SESSION_RESTORE Logon_SessionSetting = 1
	// Allows other new connections to join the session (see RestoreOrJoinSession message) and work concurrently.
	// If the setting is not specified then the session can have only one connection at each moment
	// and a new connection pushes the old one out (if the session restore is allowed).
	// For security reasons clients should not specify this setting without using join session functionality.
	Logon_SESSION_SETTING_ALLOW_SESSION_JOIN Logon_SessionSetting = 2
)

// Enum value maps for Logon_SessionSetting.
var (
	Logon_SessionSetting_name = map[int32]string{
		1: "SESSION_SETTING_ALLOW_SESSION_RESTORE",
		2: "SESSION_SETTING_ALLOW_SESSION_JOIN",
	}
	Logon_SessionSetting_value = map[string]int32{
		"SESSION_SETTING_ALLOW_SESSION_RESTORE": 1,
		"SESSION_SETTING_ALLOW_SESSION_JOIN":    2,
	}
)

func (x Logon_SessionSetting) Enum() *Logon_SessionSetting {
	p := new(Logon_SessionSetting)
	*p = x
	return p
}

func (x Logon_SessionSetting) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Logon_SessionSetting) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_user_session_2_proto_enumTypes[1].Descriptor()
}

func (Logon_SessionSetting) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_user_session_2_proto_enumTypes[1]
}

func (x Logon_SessionSetting) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Logon_SessionSetting) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Logon_SessionSetting(num)
	return nil
}

// Deprecated: Use Logon_SessionSetting.Descriptor instead.
func (Logon_SessionSetting) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_user_session_2_proto_rawDescGZIP(), []int{0, 0}
}

type LogonResult_ResultCode int32

const (
	// // success codes
	// User is logged in to the system.
	LogonResult_RESULT_CODE_SUCCESS LogonResult_ResultCode = 0
	// // failure codes (100+)
	// General failure.
	LogonResult_RESULT_CODE_FAILURE LogonResult_ResultCode = 101
	// One-time password is required for this user but it was not sent, repeat logon
	// with one-time password.
	LogonResult_RESULT_CODE_NO_ONETIME_PASSWORD LogonResult_ResultCode = 103
	// User password is expired, only change password operation is allowed.
	LogonResult_RESULT_CODE_PASSWORD_EXPIRED LogonResult_ResultCode = 104
	// Failed because this user has a concurrent session that is
	// not allowed for this application and drop was not requested.
	LogonResult_RESULT_CODE_CONCURRENT_SESSION LogonResult_ResultCode = 105
	// Client is redirected to a different server, new server is specified in redirectUrl.
	LogonResult_RESULT_CODE_REDIRECTED LogonResult_ResultCode = 106
	// The negotiation rules for LogonRoutineClient have been violated,
	// e.g. user has specified several fields at once in one message.
	LogonResult_RESULT_CODE_ROUTINE_ERROR LogonResult_ResultCode = 107
	// Access token is expired already.
	LogonResult_RESULT_CODE_ACCESS_TOKEN_EXPIRED LogonResult_ResultCode = 108
)

// Enum value maps for LogonResult_ResultCode.
var (
	LogonResult_ResultCode_name = map[int32]string{
		0:   "RESULT_CODE_SUCCESS",
		101: "RESULT_CODE_FAILURE",
		103: "RESULT_CODE_NO_ONETIME_PASSWORD",
		104: "RESULT_CODE_PASSWORD_EXPIRED",
		105: "RESULT_CODE_CONCURRENT_SESSION",
		106: "RESULT_CODE_REDIRECTED",
		107: "RESULT_CODE_ROUTINE_ERROR",
		108: "RESULT_CODE_ACCESS_TOKEN_EXPIRED",
	}
	LogonResult_ResultCode_value = map[string]int32{
		"RESULT_CODE_SUCCESS":              0,
		"RESULT_CODE_FAILURE":              101,
		"RESULT_CODE_NO_ONETIME_PASSWORD":  103,
		"RESULT_CODE_PASSWORD_EXPIRED":     104,
		"RESULT_CODE_CONCURRENT_SESSION":   105,
		"RESULT_CODE_REDIRECTED":           106,
		"RESULT_CODE_ROUTINE_ERROR":        107,
		"RESULT_CODE_ACCESS_TOKEN_EXPIRED": 108,
	}
)

func (x LogonResult_ResultCode) Enum() *LogonResult_ResultCode {
	p := new(LogonResult_ResultCode)
	*p = x
	return p
}

func (x LogonResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogonResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_user_session_2_proto_enumTypes[2].Descriptor()
}

func (LogonResult_ResultCode) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_user_session_2_proto_enumTypes[2]
}

func (x LogonResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LogonResult_ResultCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LogonResult_ResultCode(num)
	return nil
}

// Deprecated: Use LogonResult_ResultCode.Descriptor instead.
func (LogonResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_user_session_2_proto_rawDescGZIP(), []int{1, 0}
}

type PasswordRequest_PasswordType int32

const (
	// Currently used password.
	PasswordRequest_PASSWORD_TYPE_STATIC PasswordRequest_PasswordType = 1
	// One-time password.
	PasswordRequest_PASSWORD_TYPE_ONE_TIME PasswordRequest_PasswordType = 2
	// New password that user wants to use. Can be specified only in result of PasswordChangeRoutineClient.
	PasswordRequest_PASSWORD_TYPE_NEW_STATIC PasswordRequest_PasswordType = 3
	// Currently used password and new password that user wants to use.
	// Can be specified only in result of PasswordChangeRoutineClient.
	PasswordRequest_PASSWORD_TYPE_CUR_AND_NEW_STATIC PasswordRequest_PasswordType = 4
	// Non-password request with question e.g. "What is your favorite pet?".
	PasswordRequest_PASSWORD_TYPE_TEXT PasswordRequest_PasswordType = 5
)

// Enum value maps for PasswordRequest_PasswordType.
var (
	PasswordRequest_PasswordType_name = map[int32]string{
		1: "PASSWORD_TYPE_STATIC",
		2: "PASSWORD_TYPE_ONE_TIME",
		3: "PASSWORD_TYPE_NEW_STATIC",
		4: "PASSWORD_TYPE_CUR_AND_NEW_STATIC",
		5: "PASSWORD_TYPE_TEXT",
	}
	PasswordRequest_PasswordType_value = map[string]int32{
		"PASSWORD_TYPE_STATIC":             1,
		"PASSWORD_TYPE_ONE_TIME":           2,
		"PASSWORD_TYPE_NEW_STATIC":         3,
		"PASSWORD_TYPE_CUR_AND_NEW_STATIC": 4,
		"PASSWORD_TYPE_TEXT":               5,
	}
)

func (x PasswordRequest_PasswordType) Enum() *PasswordRequest_PasswordType {
	p := new(PasswordRequest_PasswordType)
	*p = x
	return p
}

func (x PasswordRequest_PasswordType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PasswordRequest_PasswordType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_user_session_2_proto_enumTypes[3].Descriptor()
}

func (PasswordRequest_PasswordType) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_user_session_2_proto_enumTypes[3]
}

func (x PasswordRequest_PasswordType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PasswordRequest_PasswordType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PasswordRequest_PasswordType(num)
	return nil
}

// Deprecated: Use PasswordRequest_PasswordType.Descriptor instead.
func (PasswordRequest_PasswordType) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_user_session_2_proto_rawDescGZIP(), []int{8, 0}
}

type RestoreOrJoinSessionResult_ResultCode int32

const (
	// // success codes
	// User is logged in to the system.
	RestoreOrJoinSessionResult_RESULT_CODE_SUCCESS RestoreOrJoinSessionResult_ResultCode = 0
	// // failure codes (100+)
	// General failure.
	RestoreOrJoinSessionResult_RESULT_CODE_FAILURE RestoreOrJoinSessionResult_ResultCode = 104
	// Session is unknown to a server, client must perform standard logon procedure.
	RestoreOrJoinSessionResult_RESULT_CODE_UNKNOWN_SESSION RestoreOrJoinSessionResult_ResultCode = 101
	// User is not allowed to perform session restore/join or the maximum connection number has been exceeded.
	RestoreOrJoinSessionResult_RESULT_CODE_ACCESS_DENIED RestoreOrJoinSessionResult_ResultCode = 102
	// Some RestoreOrJoinSession message fields were not filled.
	RestoreOrJoinSessionResult_RESULT_CODE_INVALID_PARAMS RestoreOrJoinSessionResult_ResultCode = 103
)

// Enum value maps for RestoreOrJoinSessionResult_ResultCode.
var (
	RestoreOrJoinSessionResult_ResultCode_name = map[int32]string{
		0:   "RESULT_CODE_SUCCESS",
		104: "RESULT_CODE_FAILURE",
		101: "RESULT_CODE_UNKNOWN_SESSION",
		102: "RESULT_CODE_ACCESS_DENIED",
		103: "RESULT_CODE_INVALID_PARAMS",
	}
	RestoreOrJoinSessionResult_ResultCode_value = map[string]int32{
		"RESULT_CODE_SUCCESS":         0,
		"RESULT_CODE_FAILURE":         104,
		"RESULT_CODE_UNKNOWN_SESSION": 101,
		"RESULT_CODE_ACCESS_DENIED":   102,
		"RESULT_CODE_INVALID_PARAMS":  103,
	}
)

func (x RestoreOrJoinSessionResult_ResultCode) Enum() *RestoreOrJoinSessionResult_ResultCode {
	p := new(RestoreOrJoinSessionResult_ResultCode)
	*p = x
	return p
}

func (x RestoreOrJoinSessionResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RestoreOrJoinSessionResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_user_session_2_proto_enumTypes[4].Descriptor()
}

func (RestoreOrJoinSessionResult_ResultCode) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_user_session_2_proto_enumTypes[4]
}

func (x RestoreOrJoinSessionResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RestoreOrJoinSessionResult_ResultCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RestoreOrJoinSessionResult_ResultCode(num)
	return nil
}

// Deprecated: Use RestoreOrJoinSessionResult_ResultCode.Descriptor instead.
func (RestoreOrJoinSessionResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_user_session_2_proto_rawDescGZIP(), []int{13, 0}
}

type LoggedOff_LogoffReason int32

const (
	// User is logged off by client request.
	LoggedOff_LOGOFF_REASON_BY_REQUEST LoggedOff_LogoffReason = 1
	// User is redirected to another URL.
	LoggedOff_LOGOFF_REASON_REDIRECTED LoggedOff_LogoffReason = 2
	// System logged off the user because of some server side reason.
	LoggedOff_LOGOFF_REASON_FORCED LoggedOff_LogoffReason = 3
	// System logged off the user because this session was re-assigned to another connection
	// that took it over by 'restore session' operation.
	LoggedOff_LOGOFF_REASON_REASSIGNED LoggedOff_LogoffReason = 4
)

// Enum value maps for LoggedOff_LogoffReason.
var (
	LoggedOff_LogoffReason_name = map[int32]string{
		1: "LOGOFF_REASON_BY_REQUEST",
		2: "LOGOFF_REASON_REDIRECTED",
		3: "LOGOFF_REASON_FORCED",
		4: "LOGOFF_REASON_REASSIGNED",
	}
	LoggedOff_LogoffReason_value = map[string]int32{
		"LOGOFF_REASON_BY_REQUEST": 1,
		"LOGOFF_REASON_REDIRECTED": 2,
		"LOGOFF_REASON_FORCED":     3,
		"LOGOFF_REASON_REASSIGNED": 4,
	}
)

func (x LoggedOff_LogoffReason) Enum() *LoggedOff_LogoffReason {
	p := new(LoggedOff_LogoffReason)
	*p = x
	return p
}

func (x LoggedOff_LogoffReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoggedOff_LogoffReason) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_user_session_2_proto_enumTypes[5].Descriptor()
}

func (LoggedOff_LogoffReason) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_user_session_2_proto_enumTypes[5]
}

func (x LoggedOff_LogoffReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LoggedOff_LogoffReason) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LoggedOff_LogoffReason(num)
	return nil
}

// Deprecated: Use LoggedOff_LogoffReason.Descriptor instead.
func (LoggedOff_LogoffReason) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_user_session_2_proto_rawDescGZIP(), []int{16, 0}
}

// Password change result.
type PasswordChangeResult_ResultCode int32

const (
	// / success codes
	// User password is changed successfully.
	PasswordChangeResult_RESULT_CODE_SUCCESS PasswordChangeResult_ResultCode = 0
	// / failure codes (100+)
	// Incorrect user name or password.
	PasswordChangeResult_RESULT_CODE_FAILURE PasswordChangeResult_ResultCode = 101
	// The negotiation rules for PasswordChangeRoutineClient have been violated,
	// e.g. user has specified several fields at once in one message.
	PasswordChangeResult_RESULT_CODE_ROUTINE_ERROR PasswordChangeResult_ResultCode = 102
)

// Enum value maps for PasswordChangeResult_ResultCode.
var (
	PasswordChangeResult_ResultCode_name = map[int32]string{
		0:   "RESULT_CODE_SUCCESS",
		101: "RESULT_CODE_FAILURE",
		102: "RESULT_CODE_ROUTINE_ERROR",
	}
	PasswordChangeResult_ResultCode_value = map[string]int32{
		"RESULT_CODE_SUCCESS":       0,
		"RESULT_CODE_FAILURE":       101,
		"RESULT_CODE_ROUTINE_ERROR": 102,
	}
)

func (x PasswordChangeResult_ResultCode) Enum() *PasswordChangeResult_ResultCode {
	p := new(PasswordChangeResult_ResultCode)
	*p = x
	return p
}

func (x PasswordChangeResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PasswordChangeResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_user_session_2_proto_enumTypes[6].Descriptor()
}

func (PasswordChangeResult_ResultCode) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_user_session_2_proto_enumTypes[6]
}

func (x PasswordChangeResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PasswordChangeResult_ResultCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PasswordChangeResult_ResultCode(num)
	return nil
}

// Deprecated: Use PasswordChangeResult_ResultCode.Descriptor instead.
func (PasswordChangeResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_user_session_2_proto_rawDescGZIP(), []int{18, 0}
}

// Password change result.
type ObtainDemoCredentialsResult_ResultCode int32

const (
	// / success codes (0 - 100)
	ObtainDemoCredentialsResult_RESULT_CODE_SUCCESS ObtainDemoCredentialsResult_ResultCode = 0
	// / failure codes (100+)
	ObtainDemoCredentialsResult_RESULT_CODE_FAILURE ObtainDemoCredentialsResult_ResultCode = 101
)

// Enum value maps for ObtainDemoCredentialsResult_ResultCode.
var (
	ObtainDemoCredentialsResult_ResultCode_name = map[int32]string{
		0:   "RESULT_CODE_SUCCESS",
		101: "RESULT_CODE_FAILURE",
	}
	ObtainDemoCredentialsResult_ResultCode_value = map[string]int32{
		"RESULT_CODE_SUCCESS": 0,
		"RESULT_CODE_FAILURE": 101,
	}
)

func (x ObtainDemoCredentialsResult_ResultCode) Enum() *ObtainDemoCredentialsResult_ResultCode {
	p := new(ObtainDemoCredentialsResult_ResultCode)
	*p = x
	return p
}

func (x ObtainDemoCredentialsResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObtainDemoCredentialsResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_user_session_2_proto_enumTypes[7].Descriptor()
}

func (ObtainDemoCredentialsResult_ResultCode) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_user_session_2_proto_enumTypes[7]
}

func (x ObtainDemoCredentialsResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ObtainDemoCredentialsResult_ResultCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ObtainDemoCredentialsResult_ResultCode(num)
	return nil
}

// Deprecated: Use ObtainDemoCredentialsResult_ResultCode.Descriptor instead.
func (ObtainDemoCredentialsResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_user_session_2_proto_rawDescGZIP(), []int{20, 0}
}

// Type of the message.
type UserMessage_MessageType int32

const (
	// Critical error message. Informs the user of a significant problem on an exchange or within CQG infrastructure.
	// Possible problems: incomplete order or position information; a critical message from CQG Customer support;
	// technical problems or news from an exchange; a critical message from exchange; do not logoff when this occurs.
	// a critical problem loading trading or data enablements; protocol violation.
	UserMessage_MESSAGE_TYPE_CRITICAL_ERROR UserMessage_MessageType = 1
	// Warning. Informs the user of an unexpected situation that does not affect the correctness of data, or a warning
	// message from CQG Customer support.
	UserMessage_MESSAGE_TYPE_WARNING UserMessage_MessageType = 2
	// General information. Informs the user of an intermittent problem with the realtime data,
	// or an informational message from CQG Customer support.
	UserMessage_MESSAGE_TYPE_INFO UserMessage_MessageType = 3
	// This message shouldn't be visible for users, only dumped into a log file.
	UserMessage_MESSAGE_TYPE_LOG UserMessage_MessageType = 4
)

// Enum value maps for UserMessage_MessageType.
var (
	UserMessage_MessageType_name = map[int32]string{
		1: "MESSAGE_TYPE_CRITICAL_ERROR",
		2: "MESSAGE_TYPE_WARNING",
		3: "MESSAGE_TYPE_INFO",
		4: "MESSAGE_TYPE_LOG",
	}
	UserMessage_MessageType_value = map[string]int32{
		"MESSAGE_TYPE_CRITICAL_ERROR": 1,
		"MESSAGE_TYPE_WARNING":        2,
		"MESSAGE_TYPE_INFO":           3,
		"MESSAGE_TYPE_LOG":            4,
	}
)

func (x UserMessage_MessageType) Enum() *UserMessage_MessageType {
	p := new(UserMessage_MessageType)
	*p = x
	return p
}

func (x UserMessage_MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserMessage_MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_user_session_2_proto_enumTypes[8].Descriptor()
}

func (UserMessage_MessageType) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_user_session_2_proto_enumTypes[8]
}

func (x UserMessage_MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *UserMessage_MessageType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = UserMessage_MessageType(num)
	return nil
}

// Deprecated: Use UserMessage_MessageType.Descriptor instead.
func (UserMessage_MessageType) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_user_session_2_proto_rawDescGZIP(), []int{21, 0}
}

type UserSessionStateResult_ResultCode int32

const (
	// // success codes
	// Data for requested session is found.
	UserSessionStateResult_RESULT_CODE_SUCCESS UserSessionStateResult_ResultCode = 0
	// // failure codes (100+)
	// General failure.
	UserSessionStateResult_RESULT_CODE_FAILURE UserSessionStateResult_ResultCode = 101
	// Session is unknown to a server.
	UserSessionStateResult_RESULT_CODE_UNKNOWN_SESSION UserSessionStateResult_ResultCode = 102
	// The user is not allowed to access this data.
	UserSessionStateResult_RESULT_CODE_ACCESS_DENIED UserSessionStateResult_ResultCode = 103
)

// Enum value maps for UserSessionStateResult_ResultCode.
var (
	UserSessionStateResult_ResultCode_name = map[int32]string{
		0:   "RESULT_CODE_SUCCESS",
		101: "RESULT_CODE_FAILURE",
		102: "RESULT_CODE_UNKNOWN_SESSION",
		103: "RESULT_CODE_ACCESS_DENIED",
	}
	UserSessionStateResult_ResultCode_value = map[string]int32{
		"RESULT_CODE_SUCCESS":         0,
		"RESULT_CODE_FAILURE":         101,
		"RESULT_CODE_UNKNOWN_SESSION": 102,
		"RESULT_CODE_ACCESS_DENIED":   103,
	}
)

func (x UserSessionStateResult_ResultCode) Enum() *UserSessionStateResult_ResultCode {
	p := new(UserSessionStateResult_ResultCode)
	*p = x
	return p
}

func (x UserSessionStateResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserSessionStateResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_user_session_2_proto_enumTypes[9].Descriptor()
}

func (UserSessionStateResult_ResultCode) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_user_session_2_proto_enumTypes[9]
}

func (x UserSessionStateResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *UserSessionStateResult_ResultCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = UserSessionStateResult_ResultCode(num)
	return nil
}

// Deprecated: Use UserSessionStateResult_ResultCode.Descriptor instead.
func (UserSessionStateResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_user_session_2_proto_rawDescGZIP(), []int{23, 0}
}

type SetCollapsingLevelResult_ResultCode int32

const (
	// // success codes
	// Maximum collapsing level has been successfully changed.
	SetCollapsingLevelResult_RESULT_CODE_SUCCESS SetCollapsingLevelResult_ResultCode = 0
	// // failure codes (100+)
	// General failure.
	SetCollapsingLevelResult_RESULT_CODE_FAILURE SetCollapsingLevelResult_ResultCode = 101
	// market_data_bandwidth was set for the session in Logon or RestoreOrJoinSession message.
	// Collapsing level cannot be set when market_data_bandwidth is set in Logon or RestoreOrJoinSession message.
	SetCollapsingLevelResult_RESULT_CODE_BANDWIDTH_IS_SET SetCollapsingLevelResult_ResultCode = 102
)

// Enum value maps for SetCollapsingLevelResult_ResultCode.
var (
	SetCollapsingLevelResult_ResultCode_name = map[int32]string{
		0:   "RESULT_CODE_SUCCESS",
		101: "RESULT_CODE_FAILURE",
		102: "RESULT_CODE_BANDWIDTH_IS_SET",
	}
	SetCollapsingLevelResult_ResultCode_value = map[string]int32{
		"RESULT_CODE_SUCCESS":          0,
		"RESULT_CODE_FAILURE":          101,
		"RESULT_CODE_BANDWIDTH_IS_SET": 102,
	}
)

func (x SetCollapsingLevelResult_ResultCode) Enum() *SetCollapsingLevelResult_ResultCode {
	p := new(SetCollapsingLevelResult_ResultCode)
	*p = x
	return p
}

func (x SetCollapsingLevelResult_ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetCollapsingLevelResult_ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_WebAPI_user_session_2_proto_enumTypes[10].Descriptor()
}

func (SetCollapsingLevelResult_ResultCode) Type() protoreflect.EnumType {
	return &file_protos_WebAPI_user_session_2_proto_enumTypes[10]
}

func (x SetCollapsingLevelResult_ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SetCollapsingLevelResult_ResultCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SetCollapsingLevelResult_ResultCode(num)
	return nil
}

// Deprecated: Use SetCollapsingLevelResult_ResultCode.Descriptor instead.
func (SetCollapsingLevelResult_ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_protos_WebAPI_user_session_2_proto_rawDescGZIP(), []int{27, 0}
}

// Logon into the system and opening a new session.
// Clients should either use user_name/password or access_token to enter the system.
type Logon struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// User login name.
	// It is not used along with access_token.
	UserName *string `protobuf:"bytes,1,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	// User's password.
	// It is not used along with access_token.
	Password *string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	// Access token.
	// It is not used along with user_name, password and one_time_password.
	AccessToken *string `protobuf:"bytes,14,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
	// Token of the user externally authenticated by CQG partner.
	// It is not used along with user_name, password and one_time_password.
	// Mutually exclusive with access_token.
	PartnerToken *string `protobuf:"bytes,19,opt,name=partner_token,json=partnerToken" json:"partner_token,omitempty"`
	// User's one time password, might be required according to the user's settings.
	OneTimePassword *string `protobuf:"bytes,3,opt,name=one_time_password,json=oneTimePassword" json:"one_time_password,omitempty"`
	// Private label identifies the Firm or Vendor that connects to the server. The value is ignored and taken from
	// access_token if it's specified. If neither access_token nor private_label is specified, the private_label is set
	// equal to client_app_id field value.
	PrivateLabel *string `protobuf:"bytes,4,opt,name=private_label,json=privateLabel" json:"private_label,omitempty"`
	// Identifier of the client application as assigned by CQG. The value is ignored and taken from access_token
	// if it's specified; otherwise the field value is required to be provided.
	ClientAppId *string `protobuf:"bytes,5,opt,name=client_app_id,json=clientAppId" json:"client_app_id,omitempty"`
	// Version of a client application.
	ClientVersion *string `protobuf:"bytes,6,req,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	// Optional field that indicates if possible concurrent sessions for this user should be forcedly dropped.
	// If it is set to false then Logon may fail with CONCURRENT_SESSION code.
	// If it is omitted or set to true then concurrent sessions for this user will be dropped.
	DropConcurrentSession *bool `protobuf:"varint,7,opt,name=drop_concurrent_session,json=dropConcurrentSession" json:"drop_concurrent_session,omitempty"`
	// Maximum allowed real-time market data collapsing level.
	// REAL_TIME_COLLAPSING_LEVEL_DOM_BBA_TRADES is the default allowed collapsing level.
	// This field is associated with RealTimeCollapsingLevel enum type.
	// Only one of max_collapsing_level and market_data_bandwidth can be specified.
	MaxCollapsingLevel *uint32 `protobuf:"varint,8,opt,name=max_collapsing_level,json=maxCollapsingLevel" json:"max_collapsing_level,omitempty"`
	// Current protocol version that is used by the client application.
	// It is strongly recommended for client applications
	// to put PROTOCOL_VERSION_MAJOR and PROTOCOL_VERSION_MINOR values from a used protocol file.
	// If version information is not provided then Server assumes client uses 0.x version of the protocol
	// and may disable some new protocol features.
	ProtocolVersionMinor *uint32 `protobuf:"varint,9,opt,name=protocol_version_minor,json=protocolVersionMinor" json:"protocol_version_minor,omitempty"`
	ProtocolVersionMajor *uint32 `protobuf:"varint,10,opt,name=protocol_version_major,json=protocolVersionMajor" json:"protocol_version_major,omitempty"`
	// List of settings for a new session.
	// This field is associated with SessionSetting enum type.
	SessionSettings []uint32 `protobuf:"varint,11,rep,name=session_settings,json=sessionSettings" json:"session_settings,omitempty"`
	// Real-time market data bandwidth limit (in KB per second).
	// Only one of max_collapsing_level and market_data_bandwidth can be specified.
	MarketDataBandwidth *uint32 `protobuf:"varint,12,opt,name=market_data_bandwidth,json=marketDataBandwidth" json:"market_data_bandwidth,omitempty"`
	// Dialect ID for used symbols.
	// CQG dialect is used if omitted.
	// Id for CQG dialect is 0.
	// Please contact CQG to get the list of supported dialects.
	DialectId *string `protobuf:"bytes,13,opt,name=dialect_id,json=dialectId" json:"dialect_id,omitempty"`
	// Fingerprint of a client application installation on a particular device.
	// This is just a string from the server perspective. Clients should make
	// sure it stays the same across runs of the application installation on
	// a specific device or Web application in a specific browser on this
	// device. Possible approaches to get the value on the client side:
	// http://clientjs.org/
	// https://developer.android.com/training/articles/user-data-ids.html
	Fingerprint *string `protobuf:"bytes,15,opt,name=fingerprint" json:"fingerprint,omitempty"`
	// Client's operating system (with version, e.g. "Windows 7" or "Android").
	OperatingSystem *string `protobuf:"bytes,16,opt,name=operating_system,json=operatingSystem" json:"operating_system,omitempty"`
	// Client's browser name (if applicable, without version, e.g. "Chrome" or "Firefox").
	Browser *string `protobuf:"bytes,17,opt,name=browser" json:"browser,omitempty"`
	// Client's device model (specific names for mobile, like "iPhone 7", or "PC" if not mobile/tablet).
	DeviceModel *string `protobuf:"bytes,18,opt,name=device_model,json=deviceModel" json:"device_model,omitempty"`
}

func (x *Logon) Reset() {
	*x = Logon{}
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Logon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Logon) ProtoMessage() {}

func (x *Logon) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Logon.ProtoReflect.Descriptor instead.
func (*Logon) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_user_session_2_proto_rawDescGZIP(), []int{0}
}

func (x *Logon) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *Logon) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *Logon) GetAccessToken() string {
	if x != nil && x.AccessToken != nil {
		return *x.AccessToken
	}
	return ""
}

func (x *Logon) GetPartnerToken() string {
	if x != nil && x.PartnerToken != nil {
		return *x.PartnerToken
	}
	return ""
}

func (x *Logon) GetOneTimePassword() string {
	if x != nil && x.OneTimePassword != nil {
		return *x.OneTimePassword
	}
	return ""
}

func (x *Logon) GetPrivateLabel() string {
	if x != nil && x.PrivateLabel != nil {
		return *x.PrivateLabel
	}
	return ""
}

func (x *Logon) GetClientAppId() string {
	if x != nil && x.ClientAppId != nil {
		return *x.ClientAppId
	}
	return ""
}

func (x *Logon) GetClientVersion() string {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return ""
}

func (x *Logon) GetDropConcurrentSession() bool {
	if x != nil && x.DropConcurrentSession != nil {
		return *x.DropConcurrentSession
	}
	return false
}

func (x *Logon) GetMaxCollapsingLevel() uint32 {
	if x != nil && x.MaxCollapsingLevel != nil {
		return *x.MaxCollapsingLevel
	}
	return 0
}

func (x *Logon) GetProtocolVersionMinor() uint32 {
	if x != nil && x.ProtocolVersionMinor != nil {
		return *x.ProtocolVersionMinor
	}
	return 0
}

func (x *Logon) GetProtocolVersionMajor() uint32 {
	if x != nil && x.ProtocolVersionMajor != nil {
		return *x.ProtocolVersionMajor
	}
	return 0
}

func (x *Logon) GetSessionSettings() []uint32 {
	if x != nil {
		return x.SessionSettings
	}
	return nil
}

func (x *Logon) GetMarketDataBandwidth() uint32 {
	if x != nil && x.MarketDataBandwidth != nil {
		return *x.MarketDataBandwidth
	}
	return 0
}

func (x *Logon) GetDialectId() string {
	if x != nil && x.DialectId != nil {
		return *x.DialectId
	}
	return ""
}

func (x *Logon) GetFingerprint() string {
	if x != nil && x.Fingerprint != nil {
		return *x.Fingerprint
	}
	return ""
}

func (x *Logon) GetOperatingSystem() string {
	if x != nil && x.OperatingSystem != nil {
		return *x.OperatingSystem
	}
	return ""
}

func (x *Logon) GetBrowser() string {
	if x != nil && x.Browser != nil {
		return *x.Browser
	}
	return ""
}

func (x *Logon) GetDeviceModel() string {
	if x != nil && x.DeviceModel != nil {
		return *x.DeviceModel
	}
	return ""
}

// Result of the logon operation.
// This is a common message used in both trader-level (LogonRoutineServer) and
// account-level (AccountLogonRoutineServer) multi-step logon sequences as well
// as in the single step logon.
type LogonResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One of the logon result codes.
	// This field is associated with ResultCode enum type.
	ResultCode *uint32 `protobuf:"varint,1,req,name=result_code,json=resultCode" json:"result_code,omitempty"`
	// Base time as ISO 8601 string (e.g. '2013-04-03T14:23:20')
	// all other times are number of milliseconds from this base time.
	BaseTime *string `protobuf:"bytes,2,req,name=base_time,json=baseTime" json:"base_time,omitempty"`
	// Token of a new session if logon succeeded.
	// Filled only for trader level logon procedure.
	SessionToken *string `protobuf:"bytes,3,opt,name=session_token,json=sessionToken" json:"session_token,omitempty"`
	// Optional logon result message for failure details.
	TextMessage *string `protobuf:"bytes,4,opt,name=text_message,json=textMessage" json:"text_message,omitempty"`
	// URL for a client to reconnect in case of redirection.
	RedirectUrl *string `protobuf:"bytes,5,opt,name=redirect_url,json=redirectUrl" json:"redirect_url,omitempty"`
	// Current protocol version of server. Normally client application need nothing to do with it.
	ProtocolVersionMinor *uint32 `protobuf:"varint,6,req,name=protocol_version_minor,json=protocolVersionMinor" json:"protocol_version_minor,omitempty"`
	ProtocolVersionMajor *uint32 `protobuf:"varint,7,req,name=protocol_version_major,json=protocolVersionMajor" json:"protocol_version_major,omitempty"`
	// Unique user identification.
	UserId *int32 `protobuf:"zigzag32,8,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// Time when the message was sent.
	ServerTime *int64 `protobuf:"zigzag64,9,req,name=server_time,json=serverTime" json:"server_time,omitempty"`
	// Timeout of session inactivity, number of minutes. This is clients'
	// responsibility to track activity and disable/close the session after
	// the timeout.
	InactivityTimeout *uint32 `protobuf:"varint,10,opt,name=inactivity_timeout,json=inactivityTimeout" json:"inactivity_timeout,omitempty"`
}

func (x *LogonResult) Reset() {
	*x = LogonResult{}
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogonResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogonResult) ProtoMessage() {}

func (x *LogonResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogonResult.ProtoReflect.Descriptor instead.
func (*LogonResult) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_user_session_2_proto_rawDescGZIP(), []int{1}
}

func (x *LogonResult) GetResultCode() uint32 {
	if x != nil && x.ResultCode != nil {
		return *x.ResultCode
	}
	return 0
}

func (x *LogonResult) GetBaseTime() string {
	if x != nil && x.BaseTime != nil {
		return *x.BaseTime
	}
	return ""
}

func (x *LogonResult) GetSessionToken() string {
	if x != nil && x.SessionToken != nil {
		return *x.SessionToken
	}
	return ""
}

func (x *LogonResult) GetTextMessage() string {
	if x != nil && x.TextMessage != nil {
		return *x.TextMessage
	}
	return ""
}

func (x *LogonResult) GetRedirectUrl() string {
	if x != nil && x.RedirectUrl != nil {
		return *x.RedirectUrl
	}
	return ""
}

func (x *LogonResult) GetProtocolVersionMinor() uint32 {
	if x != nil && x.ProtocolVersionMinor != nil {
		return *x.ProtocolVersionMinor
	}
	return 0
}

func (x *LogonResult) GetProtocolVersionMajor() uint32 {
	if x != nil && x.ProtocolVersionMajor != nil {
		return *x.ProtocolVersionMajor
	}
	return 0
}

func (x *LogonResult) GetUserId() int32 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *LogonResult) GetServerTime() int64 {
	if x != nil && x.ServerTime != nil {
		return *x.ServerTime
	}
	return 0
}

func (x *LogonResult) GetInactivityTimeout() uint32 {
	if x != nil && x.InactivityTimeout != nil {
		return *x.InactivityTimeout
	}
	return 0
}

// Message for multi-step logon which user should use in case if it is required to use encoded password.
// Multi-step logon sequence has the following steps:
//  1. Client initiates logon negotiation by sending LogonRoutineClient.logon_init message to the server.
//  2. Server sends one or more LogonRoutineServer.password_request messages (this step may repeat after step #3).
//  3. Client sends list of LogonRoutineClient.password_response back to the server.
//  4. Server optionally asks accept trader's agreement (LogonRoutineServer.trader_agreement_url).
//  5. Client responds with LogonRoutineClient.trader_agreement_accepted equal to True
//     if the user accepts agreement, False or LogonRoutineClient.abort_logon otherwise.
//  6. Server sends LogonRoutineServer.logon_result as the final message of the negotiation with the results.
//     Client may stop the negotiation by sending LogonRoutineClient.abort_logon message in response to any server
//     LogonRoutineServer.password_request or LogonRoutineServer.trader_agreement_url requests.
//
// NOTE: only one of fields has to be specified.
type LogonRoutineClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Initiating of multi-step logon process by client.
	LogonInit *LogonInit `protobuf:"bytes,1,opt,name=logon_init,json=logonInit" json:"logon_init,omitempty"`
	// List of passwords in response to request from server.
	// The number of passwords in response should be equal to the number of passwords in request from server.
	PasswordResponses []*PasswordResponse `protobuf:"bytes,2,rep,name=password_responses,json=passwordResponses" json:"password_responses,omitempty"`
	// True means user has accepted the trader agreement.
	TraderAgreementAccepted *bool `protobuf:"varint,3,opt,name=trader_agreement_accepted,json=traderAgreementAccepted" json:"trader_agreement_accepted,omitempty"`
	// Aborting of multi-step logon process by client.
	AbortLogon *AbortRoutine `protobuf:"bytes,4,opt,name=abort_logon,json=abortLogon" json:"abort_logon,omitempty"`
}

func (x *LogonRoutineClient) Reset() {
	*x = LogonRoutineClient{}
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogonRoutineClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogonRoutineClient) ProtoMessage() {}

func (x *LogonRoutineClient) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogonRoutineClient.ProtoReflect.Descriptor instead.
func (*LogonRoutineClient) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_user_session_2_proto_rawDescGZIP(), []int{2}
}

func (x *LogonRoutineClient) GetLogonInit() *LogonInit {
	if x != nil {
		return x.LogonInit
	}
	return nil
}

func (x *LogonRoutineClient) GetPasswordResponses() []*PasswordResponse {
	if x != nil {
		return x.PasswordResponses
	}
	return nil
}

func (x *LogonRoutineClient) GetTraderAgreementAccepted() bool {
	if x != nil && x.TraderAgreementAccepted != nil {
		return *x.TraderAgreementAccepted
	}
	return false
}

func (x *LogonRoutineClient) GetAbortLogon() *AbortRoutine {
	if x != nil {
		return x.AbortLogon
	}
	return nil
}

// Response to the LogonRoutineClient message. Only one of fields is specified.
type LogonRoutineServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Final message of the negotiation with the results.
	LogonResult *LogonResult `protobuf:"bytes,1,opt,name=logon_result,json=logonResult" json:"logon_result,omitempty"`
	// List of requested passwords.
	PasswordRequests []*PasswordRequest `protobuf:"bytes,2,rep,name=password_requests,json=passwordRequests" json:"password_requests,omitempty"`
	// URL pointing to the location of help information for this version of agreement.
	// Specified if user should accept trader's agreement in order to continue logon process.
	TraderAgreementUrl *string `protobuf:"bytes,3,opt,name=trader_agreement_url,json=traderAgreementUrl" json:"trader_agreement_url,omitempty"`
}

func (x *LogonRoutineServer) Reset() {
	*x = LogonRoutineServer{}
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogonRoutineServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogonRoutineServer) ProtoMessage() {}

func (x *LogonRoutineServer) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogonRoutineServer.ProtoReflect.Descriptor instead.
func (*LogonRoutineServer) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_user_session_2_proto_rawDescGZIP(), []int{3}
}

func (x *LogonRoutineServer) GetLogonResult() *LogonResult {
	if x != nil {
		return x.LogonResult
	}
	return nil
}

func (x *LogonRoutineServer) GetPasswordRequests() []*PasswordRequest {
	if x != nil {
		return x.PasswordRequests
	}
	return nil
}

func (x *LogonRoutineServer) GetTraderAgreementUrl() string {
	if x != nil && x.TraderAgreementUrl != nil {
		return *x.TraderAgreementUrl
	}
	return ""
}

// Message for multi-step password change which user should use in case if it is required to use encoded password.
// Multi-step password change sequence has the following steps:
//  1. Client initiates password change procedure by sending
//     PasswordChangeRoutineClient.init_password_change to the server.
//  2. Server sends one or more PasswordChangeRoutineServer.password_request messages
//     (this step may repeat after step #3).
//  3. Client sends list of PasswordChangeRoutineClient.password_response back to the server.
//  4. Server sends PasswordChangeRoutineServer.password_change_result
//     as the final message of the negotiation with the results.
//     Client may stop the negotiation by sending
//     PasswordChangeRoutineClient.abort_password_change message in response to any server
//     PasswordChangeRoutineServer.password_request message.
//
// NOTE: only one of fields has to be specified.
type PasswordChangeRoutineClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True means user has decided to initiate password changing procedure.
	InitPasswordChange *bool `protobuf:"varint,1,opt,name=init_password_change,json=initPasswordChange" json:"init_password_change,omitempty"`
	// List of passwords in response to request from server.
	// The number of passwords in response should be equal to the number of passwords in request from server.
	PasswordResponses []*PasswordResponse `protobuf:"bytes,2,rep,name=password_responses,json=passwordResponses" json:"password_responses,omitempty"`
	// Aborting of multi-step password change process by client.
	AbortPasswordChange *AbortRoutine `protobuf:"bytes,3,opt,name=abort_password_change,json=abortPasswordChange" json:"abort_password_change,omitempty"`
}

func (x *PasswordChangeRoutineClient) Reset() {
	*x = PasswordChangeRoutineClient{}
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PasswordChangeRoutineClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordChangeRoutineClient) ProtoMessage() {}

func (x *PasswordChangeRoutineClient) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordChangeRoutineClient.ProtoReflect.Descriptor instead.
func (*PasswordChangeRoutineClient) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_user_session_2_proto_rawDescGZIP(), []int{4}
}

func (x *PasswordChangeRoutineClient) GetInitPasswordChange() bool {
	if x != nil && x.InitPasswordChange != nil {
		return *x.InitPasswordChange
	}
	return false
}

func (x *PasswordChangeRoutineClient) GetPasswordResponses() []*PasswordResponse {
	if x != nil {
		return x.PasswordResponses
	}
	return nil
}

func (x *PasswordChangeRoutineClient) GetAbortPasswordChange() *AbortRoutine {
	if x != nil {
		return x.AbortPasswordChange
	}
	return nil
}

// Response to the PasswordChangeRoutineClient message. Only one of fields is specified.
type PasswordChangeRoutineServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of requested passwords.
	PasswordRequests []*PasswordRequest `protobuf:"bytes,1,rep,name=password_requests,json=passwordRequests" json:"password_requests,omitempty"`
	// Final message of the negotiation with the results.
	PasswordChangeResult *PasswordChangeResult `protobuf:"bytes,2,opt,name=password_change_result,json=passwordChangeResult" json:"password_change_result,omitempty"`
}

func (x *PasswordChangeRoutineServer) Reset() {
	*x = PasswordChangeRoutineServer{}
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PasswordChangeRoutineServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordChangeRoutineServer) ProtoMessage() {}

func (x *PasswordChangeRoutineServer) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordChangeRoutineServer.ProtoReflect.Descriptor instead.
func (*PasswordChangeRoutineServer) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_user_session_2_proto_rawDescGZIP(), []int{5}
}

func (x *PasswordChangeRoutineServer) GetPasswordRequests() []*PasswordRequest {
	if x != nil {
		return x.PasswordRequests
	}
	return nil
}

func (x *PasswordChangeRoutineServer) GetPasswordChangeResult() *PasswordChangeResult {
	if x != nil {
		return x.PasswordChangeResult
	}
	return nil
}

// This message indicates that user has decided to abort the logon or password change processes.
type AbortRoutine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reason of logon or password change routine abort.
	Comment *string `protobuf:"bytes,1,opt,name=comment" json:"comment,omitempty"`
}

func (x *AbortRoutine) Reset() {
	*x = AbortRoutine{}
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AbortRoutine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbortRoutine) ProtoMessage() {}

func (x *AbortRoutine) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbortRoutine.ProtoReflect.Descriptor instead.
func (*AbortRoutine) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_user_session_2_proto_rawDescGZIP(), []int{6}
}

func (x *AbortRoutine) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

// Initiating of multi-step logon process by client. See description of fields in Logon message.
type LogonInit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName              *string  `protobuf:"bytes,1,req,name=user_name,json=userName" json:"user_name,omitempty"`
	PrivateLabel          *string  `protobuf:"bytes,2,opt,name=private_label,json=privateLabel" json:"private_label,omitempty"`
	ClientAppId           *string  `protobuf:"bytes,3,req,name=client_app_id,json=clientAppId" json:"client_app_id,omitempty"`
	ClientVersion         *string  `protobuf:"bytes,4,req,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	DropConcurrentSession *bool    `protobuf:"varint,5,opt,name=drop_concurrent_session,json=dropConcurrentSession" json:"drop_concurrent_session,omitempty"`
	MaxCollapsingLevel    *uint32  `protobuf:"varint,6,opt,name=max_collapsing_level,json=maxCollapsingLevel" json:"max_collapsing_level,omitempty"`
	ProtocolVersionMinor  *uint32  `protobuf:"varint,7,opt,name=protocol_version_minor,json=protocolVersionMinor" json:"protocol_version_minor,omitempty"`
	ProtocolVersionMajor  *uint32  `protobuf:"varint,8,opt,name=protocol_version_major,json=protocolVersionMajor" json:"protocol_version_major,omitempty"`
	SessionSettings       []uint32 `protobuf:"varint,9,rep,name=session_settings,json=sessionSettings" json:"session_settings,omitempty"`
	MarketDataBandwidth   *uint32  `protobuf:"varint,10,opt,name=market_data_bandwidth,json=marketDataBandwidth" json:"market_data_bandwidth,omitempty"`
	DialectId             *string  `protobuf:"bytes,11,opt,name=dialect_id,json=dialectId" json:"dialect_id,omitempty"`
	Fingerprint           *string  `protobuf:"bytes,12,opt,name=fingerprint" json:"fingerprint,omitempty"`
	OperatingSystem       *string  `protobuf:"bytes,13,opt,name=operating_system,json=operatingSystem" json:"operating_system,omitempty"`
	Browser               *string  `protobuf:"bytes,14,opt,name=browser" json:"browser,omitempty"`
	DeviceModel           *string  `protobuf:"bytes,15,opt,name=device_model,json=deviceModel" json:"device_model,omitempty"`
}

func (x *LogonInit) Reset() {
	*x = LogonInit{}
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogonInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogonInit) ProtoMessage() {}

func (x *LogonInit) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogonInit.ProtoReflect.Descriptor instead.
func (*LogonInit) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_user_session_2_proto_rawDescGZIP(), []int{7}
}

func (x *LogonInit) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *LogonInit) GetPrivateLabel() string {
	if x != nil && x.PrivateLabel != nil {
		return *x.PrivateLabel
	}
	return ""
}

func (x *LogonInit) GetClientAppId() string {
	if x != nil && x.ClientAppId != nil {
		return *x.ClientAppId
	}
	return ""
}

func (x *LogonInit) GetClientVersion() string {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return ""
}

func (x *LogonInit) GetDropConcurrentSession() bool {
	if x != nil && x.DropConcurrentSession != nil {
		return *x.DropConcurrentSession
	}
	return false
}

func (x *LogonInit) GetMaxCollapsingLevel() uint32 {
	if x != nil && x.MaxCollapsingLevel != nil {
		return *x.MaxCollapsingLevel
	}
	return 0
}

func (x *LogonInit) GetProtocolVersionMinor() uint32 {
	if x != nil && x.ProtocolVersionMinor != nil {
		return *x.ProtocolVersionMinor
	}
	return 0
}

func (x *LogonInit) GetProtocolVersionMajor() uint32 {
	if x != nil && x.ProtocolVersionMajor != nil {
		return *x.ProtocolVersionMajor
	}
	return 0
}

func (x *LogonInit) GetSessionSettings() []uint32 {
	if x != nil {
		return x.SessionSettings
	}
	return nil
}

func (x *LogonInit) GetMarketDataBandwidth() uint32 {
	if x != nil && x.MarketDataBandwidth != nil {
		return *x.MarketDataBandwidth
	}
	return 0
}

func (x *LogonInit) GetDialectId() string {
	if x != nil && x.DialectId != nil {
		return *x.DialectId
	}
	return ""
}

func (x *LogonInit) GetFingerprint() string {
	if x != nil && x.Fingerprint != nil {
		return *x.Fingerprint
	}
	return ""
}

func (x *LogonInit) GetOperatingSystem() string {
	if x != nil && x.OperatingSystem != nil {
		return *x.OperatingSystem
	}
	return ""
}

func (x *LogonInit) GetBrowser() string {
	if x != nil && x.Browser != nil {
		return *x.Browser
	}
	return ""
}

func (x *LogonInit) GetDeviceModel() string {
	if x != nil && x.DeviceModel != nil {
		return *x.DeviceModel
	}
	return ""
}

// Parameters of requesting password from user.
// This is a common message used in both trader-level (LogonRoutineServer,
// PasswordChangeRoutineServer) and account-level
// (account_authorization_2.AccountLogonRoutineServer,
// AccountPasswordChangeRoutineServer) multi-step logon and password change sequences.
type PasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of a request.
	RequestId *uint32 `protobuf:"varint,1,req,name=request_id,json=requestId" json:"request_id,omitempty"`
	// Type of password which server requests from the user.
	// This field is associated with PasswordType enum type.
	PasswordType *uint32 `protobuf:"varint,2,req,name=password_type,json=passwordType" json:"password_type,omitempty"`
	// Commonly understood code that can be used to show an additional localized prompt for certain password types.
	UserPromptType *string `protobuf:"bytes,3,opt,name=user_prompt_type,json=userPromptType" json:"user_prompt_type,omitempty"`
	// Alternate English text for clients which do not recognize user_prompt_type.
	// This text can be displayed as-is to the user.
	// NOTE: user_prompt_type and user_prompt_type_alt are a pair (so either none or both are provided).
	UserPromptTypeAlt *string `protobuf:"bytes,4,opt,name=user_prompt_type_alt,json=userPromptTypeAlt" json:"user_prompt_type_alt,omitempty"`
	// Text that should be displayed to the user as-is along with the localized prompt implied by user_prompt_type.
	// If user_prompt_type_alt is used instead, this text should be displayed after it.
	// user_prompt will only be provided if user_prompt_type and user_prompt_type_alt are provided,
	// but it is optional even then.
	UserPrompt *string `protobuf:"bytes,5,opt,name=user_prompt,json=userPrompt" json:"user_prompt,omitempty"`
	// Set of supported encodings for this request.
	// Client should choose the encoding with highest priority from among those it implements.
	Encodings []*Encoding `protobuf:"bytes,6,rep,name=encodings" json:"encodings,omitempty"`
	// Tells client whether server supports client-controlled, optional storage of this
	// password value for use in future logons. If true, and client wants the value it
	// submits to be stored by the server (it can either prompt user to decide, or decide
	// automatically), then client should set corresponding PasswordResponse.store=true.
	// Only sent during logon sequence, not during password change sequence.
	CanStorePassword *bool `protobuf:"varint,7,opt,name=can_store_password,json=canStorePassword" json:"can_store_password,omitempty"`
	// Tells client whether server currently has a stored value for this password.
	// Can only be true if can_store_password is also true.
	// Only sent during logon sequence, not during password change sequence.
	PasswordIsStored *bool `protobuf:"varint,8,opt,name=password_is_stored,json=passwordIsStored" json:"password_is_stored,omitempty"`
}

func (x *PasswordRequest) Reset() {
	*x = PasswordRequest{}
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordRequest) ProtoMessage() {}

func (x *PasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordRequest.ProtoReflect.Descriptor instead.
func (*PasswordRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_user_session_2_proto_rawDescGZIP(), []int{8}
}

func (x *PasswordRequest) GetRequestId() uint32 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *PasswordRequest) GetPasswordType() uint32 {
	if x != nil && x.PasswordType != nil {
		return *x.PasswordType
	}
	return 0
}

func (x *PasswordRequest) GetUserPromptType() string {
	if x != nil && x.UserPromptType != nil {
		return *x.UserPromptType
	}
	return ""
}

func (x *PasswordRequest) GetUserPromptTypeAlt() string {
	if x != nil && x.UserPromptTypeAlt != nil {
		return *x.UserPromptTypeAlt
	}
	return ""
}

func (x *PasswordRequest) GetUserPrompt() string {
	if x != nil && x.UserPrompt != nil {
		return *x.UserPrompt
	}
	return ""
}

func (x *PasswordRequest) GetEncodings() []*Encoding {
	if x != nil {
		return x.Encodings
	}
	return nil
}

func (x *PasswordRequest) GetCanStorePassword() bool {
	if x != nil && x.CanStorePassword != nil {
		return *x.CanStorePassword
	}
	return false
}

func (x *PasswordRequest) GetPasswordIsStored() bool {
	if x != nil && x.PasswordIsStored != nil {
		return *x.PasswordIsStored
	}
	return false
}

// Response to the PasswordRequest message.
// This is a common message used in both trader-level (LogonRoutineClient,
// PasswordChangeRoutineClient) and account-level
// (account_authorization_2.AccountLogonRoutineClient,
// AccountPasswordChangeRoutineClient) multi-step logon and password change sequences.
type PasswordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of corresponding password request.
	RequestId *uint32 `protobuf:"varint,1,req,name=request_id,json=requestId" json:"request_id,omitempty"`
	// Commonly understood string that identifies the password encoding method.
	EncodingType *string `protobuf:"bytes,2,req,name=encoding_type,json=encodingType" json:"encoding_type,omitempty"`
	// User's password encoded with specified encoding method.
	// Note: server ignores this attribute when use_stored=true.
	Password *string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
	// True means ignore the value supplied in password and use the server's
	// stored value instead. Note: client should only send when corresponding
	// PasswordRequest.password_is_stored=true.
	UseStored *bool `protobuf:"varint,4,opt,name=use_stored,json=useStored" json:"use_stored,omitempty"`
	// True means client requests server to store this password value for use in future
	// logons, overwriting any existing stored value. False or empty means client requests
	// server to use this password value only for this login AND to clear any
	// existing stored value. Note: client should only send when corresponding
	// PasswordRequest.can_store_password=true.
	// Server ignores this attribute when use_stored=true.
	Store *bool `protobuf:"varint,5,opt,name=store" json:"store,omitempty"`
}

func (x *PasswordResponse) Reset() {
	*x = PasswordResponse{}
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PasswordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordResponse) ProtoMessage() {}

func (x *PasswordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordResponse.ProtoReflect.Descriptor instead.
func (*PasswordResponse) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_user_session_2_proto_rawDescGZIP(), []int{9}
}

func (x *PasswordResponse) GetRequestId() uint32 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *PasswordResponse) GetEncodingType() string {
	if x != nil && x.EncodingType != nil {
		return *x.EncodingType
	}
	return ""
}

func (x *PasswordResponse) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *PasswordResponse) GetUseStored() bool {
	if x != nil && x.UseStored != nil {
		return *x.UseStored
	}
	return false
}

func (x *PasswordResponse) GetStore() bool {
	if x != nil && x.Store != nil {
		return *x.Store
	}
	return false
}

// Description of the encoding method.
type Encoding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Commonly understood string that identifies the encoding method.
	// The following encodings are available: "none", "ds3_rsa", "isprint_e2ee".
	EncodingType *string `protobuf:"bytes,1,req,name=encoding_type,json=encodingType" json:"encoding_type,omitempty"`
	// The priority for this encoding, value 1 is highest priority, 2 is next priority, etc.
	PriorityRank *uint32 `protobuf:"varint,2,req,name=priority_rank,json=priorityRank" json:"priority_rank,omitempty"`
	// Encoding parameters for this encoding method.
	EncodingParameters []*EncodingParameter `protobuf:"bytes,3,rep,name=encoding_parameters,json=encodingParameters" json:"encoding_parameters,omitempty"`
}

func (x *Encoding) Reset() {
	*x = Encoding{}
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Encoding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Encoding) ProtoMessage() {}

func (x *Encoding) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Encoding.ProtoReflect.Descriptor instead.
func (*Encoding) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_user_session_2_proto_rawDescGZIP(), []int{10}
}

func (x *Encoding) GetEncodingType() string {
	if x != nil && x.EncodingType != nil {
		return *x.EncodingType
	}
	return ""
}

func (x *Encoding) GetPriorityRank() uint32 {
	if x != nil && x.PriorityRank != nil {
		return *x.PriorityRank
	}
	return 0
}

func (x *Encoding) GetEncodingParameters() []*EncodingParameter {
	if x != nil {
		return x.EncodingParameters
	}
	return nil
}

// The encoding parameter.
type EncodingParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Encoding parameter's name.
	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// Encoding parameter's value.
	Value *string `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
}

func (x *EncodingParameter) Reset() {
	*x = EncodingParameter{}
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncodingParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodingParameter) ProtoMessage() {}

func (x *EncodingParameter) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodingParameter.ProtoReflect.Descriptor instead.
func (*EncodingParameter) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_user_session_2_proto_rawDescGZIP(), []int{11}
}

func (x *EncodingParameter) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *EncodingParameter) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// Client request to restore session because of accidental disconnect
// or to join additional concurrent connection to existing session.
// This message allows to avoid prompting user for [one-time] password.
// In case of session restore client application has to [re-]subscribe and [re-]request necessary data.
// Permissions to use this functionality is regulated
// by ALLOW_SESSION_RESTORE/ALLOW_SESSION_JOIN session settings which are specified in Logon or LogonInit message.
type RestoreOrJoinSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token of the session to restore/join, it has limited lifetime after disconnect of the last connection.
	SessionToken *string `protobuf:"bytes,1,req,name=session_token,json=sessionToken" json:"session_token,omitempty"`
	// Private label identifies the Firm or Vendor that connects to the server,
	// client_app_id field value is taken by default.
	PrivateLabel *string `protobuf:"bytes,2,opt,name=private_label,json=privateLabel" json:"private_label,omitempty"`
	// Identifier of the client application as assigned by CQG.
	// This field is required to be specified and left optional only for backward compatibility.
	ClientAppId *string `protobuf:"bytes,3,opt,name=client_app_id,json=clientAppId" json:"client_app_id,omitempty"`
	// Maximum allowed real-time market data collapsing level.
	// REAL_TIME_COLLAPSING_LEVEL_DOM_BBA_TRADES is the default allowed collapsing level.
	// This field is associated with RealTimeCollapsingLevel enum type.
	// Only one of max_collapsing_level and market_data_bandwidth can be specified.
	MaxCollapsingLevel *uint32 `protobuf:"varint,4,opt,name=max_collapsing_level,json=maxCollapsingLevel" json:"max_collapsing_level,omitempty"`
	// Current protocol version that is used by the client application.
	// It is strongly recommended for client applications
	// to put PROTOCOL_VERSION_MAJOR and PROTOCOL_VERSION_MINOR values from a used protocol file.
	// If version information is not provided
	// then Server assumes client uses 0.x version of the protocol and may disable some new protocol features.
	ProtocolVersionMinor *uint32 `protobuf:"varint,5,opt,name=protocol_version_minor,json=protocolVersionMinor" json:"protocol_version_minor,omitempty"`
	ProtocolVersionMajor *uint32 `protobuf:"varint,6,opt,name=protocol_version_major,json=protocolVersionMajor" json:"protocol_version_major,omitempty"`
	// Real-time market data bandwidth limit (in KB per second).
	// Only one of max_collapsing_level and market_data_bandwidth can be specified.
	MarketDataBandwidth *uint32 `protobuf:"varint,7,opt,name=market_data_bandwidth,json=marketDataBandwidth" json:"market_data_bandwidth,omitempty"`
}

func (x *RestoreOrJoinSession) Reset() {
	*x = RestoreOrJoinSession{}
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestoreOrJoinSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreOrJoinSession) ProtoMessage() {}

func (x *RestoreOrJoinSession) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreOrJoinSession.ProtoReflect.Descriptor instead.
func (*RestoreOrJoinSession) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_user_session_2_proto_rawDescGZIP(), []int{12}
}

func (x *RestoreOrJoinSession) GetSessionToken() string {
	if x != nil && x.SessionToken != nil {
		return *x.SessionToken
	}
	return ""
}

func (x *RestoreOrJoinSession) GetPrivateLabel() string {
	if x != nil && x.PrivateLabel != nil {
		return *x.PrivateLabel
	}
	return ""
}

func (x *RestoreOrJoinSession) GetClientAppId() string {
	if x != nil && x.ClientAppId != nil {
		return *x.ClientAppId
	}
	return ""
}

func (x *RestoreOrJoinSession) GetMaxCollapsingLevel() uint32 {
	if x != nil && x.MaxCollapsingLevel != nil {
		return *x.MaxCollapsingLevel
	}
	return 0
}

func (x *RestoreOrJoinSession) GetProtocolVersionMinor() uint32 {
	if x != nil && x.ProtocolVersionMinor != nil {
		return *x.ProtocolVersionMinor
	}
	return 0
}

func (x *RestoreOrJoinSession) GetProtocolVersionMajor() uint32 {
	if x != nil && x.ProtocolVersionMajor != nil {
		return *x.ProtocolVersionMajor
	}
	return 0
}

func (x *RestoreOrJoinSession) GetMarketDataBandwidth() uint32 {
	if x != nil && x.MarketDataBandwidth != nil {
		return *x.MarketDataBandwidth
	}
	return 0
}

// Result of session restore or join attempt.
type RestoreOrJoinSessionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Session restore/join result.
	// This field is associated with ResultCode enum type.
	ResultCode *uint32 `protobuf:"varint,1,req,name=result_code,json=resultCode" json:"result_code,omitempty"`
	// Session base time (see LogonResult.base_time).
	BaseTime *string `protobuf:"bytes,2,req,name=base_time,json=baseTime" json:"base_time,omitempty"`
	// Optional failure details.
	TextMessage *string `protobuf:"bytes,3,opt,name=text_message,json=textMessage" json:"text_message,omitempty"`
	// Time when the message was sent.
	ServerTime *int64 `protobuf:"zigzag64,4,req,name=server_time,json=serverTime" json:"server_time,omitempty"`
	// Session default dialect ID for used symbols (see Logon.dialect_id).
	DialectId *string `protobuf:"bytes,5,opt,name=dialect_id,json=dialectId" json:"dialect_id,omitempty"`
	// Timeout of session inactivity, number of minutes. This is clients'
	// responsibility to track activity and disable/close the session after
	// the timeout (see LogonResult.inactivity_timeout).
	InactivityTimeout *uint32 `protobuf:"varint,6,opt,name=inactivity_timeout,json=inactivityTimeout" json:"inactivity_timeout,omitempty"`
}

func (x *RestoreOrJoinSessionResult) Reset() {
	*x = RestoreOrJoinSessionResult{}
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestoreOrJoinSessionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreOrJoinSessionResult) ProtoMessage() {}

func (x *RestoreOrJoinSessionResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreOrJoinSessionResult.ProtoReflect.Descriptor instead.
func (*RestoreOrJoinSessionResult) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_user_session_2_proto_rawDescGZIP(), []int{13}
}

func (x *RestoreOrJoinSessionResult) GetResultCode() uint32 {
	if x != nil && x.ResultCode != nil {
		return *x.ResultCode
	}
	return 0
}

func (x *RestoreOrJoinSessionResult) GetBaseTime() string {
	if x != nil && x.BaseTime != nil {
		return *x.BaseTime
	}
	return ""
}

func (x *RestoreOrJoinSessionResult) GetTextMessage() string {
	if x != nil && x.TextMessage != nil {
		return *x.TextMessage
	}
	return ""
}

func (x *RestoreOrJoinSessionResult) GetServerTime() int64 {
	if x != nil && x.ServerTime != nil {
		return *x.ServerTime
	}
	return 0
}

func (x *RestoreOrJoinSessionResult) GetDialectId() string {
	if x != nil && x.DialectId != nil {
		return *x.DialectId
	}
	return ""
}

func (x *RestoreOrJoinSessionResult) GetInactivityTimeout() uint32 {
	if x != nil && x.InactivityTimeout != nil {
		return *x.InactivityTimeout
	}
	return 0
}

// Notifies about joining of a concurrent connection to the session (see RestoreOrJoinSession).
type ConcurrentConnectionJoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Shows if new connection has been initiated by an application of the same type
	// (with the same private_label and client_app_id fields).
	IsSameAppType *bool `protobuf:"varint,1,req,name=is_same_app_type,json=isSameAppType" json:"is_same_app_type,omitempty"`
}

func (x *ConcurrentConnectionJoin) Reset() {
	*x = ConcurrentConnectionJoin{}
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConcurrentConnectionJoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConcurrentConnectionJoin) ProtoMessage() {}

func (x *ConcurrentConnectionJoin) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConcurrentConnectionJoin.ProtoReflect.Descriptor instead.
func (*ConcurrentConnectionJoin) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_user_session_2_proto_rawDescGZIP(), []int{14}
}

func (x *ConcurrentConnectionJoin) GetIsSameAppType() bool {
	if x != nil && x.IsSameAppType != nil {
		return *x.IsSameAppType
	}
	return false
}

// Client request to logoff from the system and close the session.
type Logoff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional logoff reason.
	TextMessage *string `protobuf:"bytes,1,opt,name=text_message,json=textMessage" json:"text_message,omitempty"`
}

func (x *Logoff) Reset() {
	*x = Logoff{}
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Logoff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Logoff) ProtoMessage() {}

func (x *Logoff) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Logoff.ProtoReflect.Descriptor instead.
func (*Logoff) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_user_session_2_proto_rawDescGZIP(), []int{15}
}

func (x *Logoff) GetTextMessage() string {
	if x != nil && x.TextMessage != nil {
		return *x.TextMessage
	}
	return ""
}

// Server notification about closing user's session,
// server closes connection after this message.
type LoggedOff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One of the logoff reasons.
	// This field is associated with LogoffReason enum type.
	LogoffReason *uint32 `protobuf:"varint,1,req,name=logoff_reason,json=logoffReason" json:"logoff_reason,omitempty"`
	// Optional logoff details.
	TextMessage *string `protobuf:"bytes,2,opt,name=text_message,json=textMessage" json:"text_message,omitempty"`
	// URL for redirection.
	RedirectUrl *string `protobuf:"bytes,3,opt,name=redirect_url,json=redirectUrl" json:"redirect_url,omitempty"`
}

func (x *LoggedOff) Reset() {
	*x = LoggedOff{}
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoggedOff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggedOff) ProtoMessage() {}

func (x *LoggedOff) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggedOff.ProtoReflect.Descriptor instead.
func (*LoggedOff) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_user_session_2_proto_rawDescGZIP(), []int{16}
}

func (x *LoggedOff) GetLogoffReason() uint32 {
	if x != nil && x.LogoffReason != nil {
		return *x.LogoffReason
	}
	return 0
}

func (x *LoggedOff) GetTextMessage() string {
	if x != nil && x.TextMessage != nil {
		return *x.TextMessage
	}
	return ""
}

func (x *LoggedOff) GetRedirectUrl() string {
	if x != nil && x.RedirectUrl != nil {
		return *x.RedirectUrl
	}
	return ""
}

// Message to change user's password.
type PasswordChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Currently used password.
	OldPassword *string `protobuf:"bytes,1,req,name=old_password,json=oldPassword" json:"old_password,omitempty"`
	// New password that user wants to use.
	NewPassword *string `protobuf:"bytes,2,req,name=new_password,json=newPassword" json:"new_password,omitempty"`
}

func (x *PasswordChange) Reset() {
	*x = PasswordChange{}
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PasswordChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordChange) ProtoMessage() {}

func (x *PasswordChange) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordChange.ProtoReflect.Descriptor instead.
func (*PasswordChange) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_user_session_2_proto_rawDescGZIP(), []int{17}
}

func (x *PasswordChange) GetOldPassword() string {
	if x != nil && x.OldPassword != nil {
		return *x.OldPassword
	}
	return ""
}

func (x *PasswordChange) GetNewPassword() string {
	if x != nil && x.NewPassword != nil {
		return *x.NewPassword
	}
	return ""
}

// Result of user password change (for PasswordChange and PasswordChangeRoutineClient messages).
type PasswordChangeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This field is associated with ResultCode enum type.
	ResultCode *uint32 `protobuf:"varint,1,req,name=result_code,json=resultCode" json:"result_code,omitempty"`
	// Optional failure details.
	TextMessage *string `protobuf:"bytes,2,opt,name=text_message,json=textMessage" json:"text_message,omitempty"`
}

func (x *PasswordChangeResult) Reset() {
	*x = PasswordChangeResult{}
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PasswordChangeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordChangeResult) ProtoMessage() {}

func (x *PasswordChangeResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordChangeResult.ProtoReflect.Descriptor instead.
func (*PasswordChangeResult) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_user_session_2_proto_rawDescGZIP(), []int{18}
}

func (x *PasswordChangeResult) GetResultCode() uint32 {
	if x != nil && x.ResultCode != nil {
		return *x.ResultCode
	}
	return 0
}

func (x *PasswordChangeResult) GetTextMessage() string {
	if x != nil && x.TextMessage != nil {
		return *x.TextMessage
	}
	return ""
}

// Request for temporary user name and password for demo.
// Clients of ObtainDemoCredentials are responsible to verify provided e-mail
// (e.g. by sending passwords by e-mail only) and prevent possible abuse.
// ObtainDemoCredentials requests are accepted
// only if client IP address is in the list of allowed IP addresses for service requests.
type ObtainDemoCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the client application as assigned by CQG.
	ClientAppId *string `protobuf:"bytes,1,req,name=client_app_id,json=clientAppId" json:"client_app_id,omitempty"`
	// User first name.
	FirstName *string `protobuf:"bytes,2,req,name=first_name,json=firstName" json:"first_name,omitempty"`
	// User second name.
	SecondName *string `protobuf:"bytes,3,req,name=second_name,json=secondName" json:"second_name,omitempty"`
	// E-mail address of a user who requested demo access.
	EMail *string `protobuf:"bytes,4,req,name=e_mail,json=eMail" json:"e_mail,omitempty"`
	// Private label identifies the Firm or Vendor that connects to the server,
	// client_app_id field value is taken by default.
	PrivateLabel *string `protobuf:"bytes,5,opt,name=private_label,json=privateLabel" json:"private_label,omitempty"`
}

func (x *ObtainDemoCredentials) Reset() {
	*x = ObtainDemoCredentials{}
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObtainDemoCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObtainDemoCredentials) ProtoMessage() {}

func (x *ObtainDemoCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObtainDemoCredentials.ProtoReflect.Descriptor instead.
func (*ObtainDemoCredentials) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_user_session_2_proto_rawDescGZIP(), []int{19}
}

func (x *ObtainDemoCredentials) GetClientAppId() string {
	if x != nil && x.ClientAppId != nil {
		return *x.ClientAppId
	}
	return ""
}

func (x *ObtainDemoCredentials) GetFirstName() string {
	if x != nil && x.FirstName != nil {
		return *x.FirstName
	}
	return ""
}

func (x *ObtainDemoCredentials) GetSecondName() string {
	if x != nil && x.SecondName != nil {
		return *x.SecondName
	}
	return ""
}

func (x *ObtainDemoCredentials) GetEMail() string {
	if x != nil && x.EMail != nil {
		return *x.EMail
	}
	return ""
}

func (x *ObtainDemoCredentials) GetPrivateLabel() string {
	if x != nil && x.PrivateLabel != nil {
		return *x.PrivateLabel
	}
	return ""
}

type ObtainDemoCredentialsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This field is associated with ResultCode enum type.
	ResultCode *uint32 `protobuf:"varint,1,req,name=result_code,json=resultCode" json:"result_code,omitempty"`
	// demo user name.
	UserName *string `protobuf:"bytes,2,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	// demo password.
	Password *string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
	// Optional details.
	TextMessage *string `protobuf:"bytes,4,opt,name=text_message,json=textMessage" json:"text_message,omitempty"`
	// Unique user identification.
	// Required in case of success.
	UserId *int32 `protobuf:"zigzag32,5,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// Expiration date/time in UTC as ISO 8601 string (e.g. '2013-04-03T14:23:20Z').
	ExpirationUtc *string `protobuf:"bytes,6,opt,name=expiration_utc,json=expirationUtc" json:"expiration_utc,omitempty"`
}

func (x *ObtainDemoCredentialsResult) Reset() {
	*x = ObtainDemoCredentialsResult{}
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObtainDemoCredentialsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObtainDemoCredentialsResult) ProtoMessage() {}

func (x *ObtainDemoCredentialsResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObtainDemoCredentialsResult.ProtoReflect.Descriptor instead.
func (*ObtainDemoCredentialsResult) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_user_session_2_proto_rawDescGZIP(), []int{20}
}

func (x *ObtainDemoCredentialsResult) GetResultCode() uint32 {
	if x != nil && x.ResultCode != nil {
		return *x.ResultCode
	}
	return 0
}

func (x *ObtainDemoCredentialsResult) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *ObtainDemoCredentialsResult) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *ObtainDemoCredentialsResult) GetTextMessage() string {
	if x != nil && x.TextMessage != nil {
		return *x.TextMessage
	}
	return ""
}

func (x *ObtainDemoCredentialsResult) GetUserId() int32 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *ObtainDemoCredentialsResult) GetExpirationUtc() string {
	if x != nil && x.ExpirationUtc != nil {
		return *x.ExpirationUtc
	}
	return ""
}

// Text message from server.
type UserMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This field is associated with MessageType enum type.
	MessageType *uint32 `protobuf:"varint,1,req,name=message_type,json=messageType" json:"message_type,omitempty"`
	// Information about source of the message.
	Source *string `protobuf:"bytes,2,req,name=source" json:"source,omitempty"`
	// Message subject.
	Subject *string `protobuf:"bytes,3,opt,name=subject" json:"subject,omitempty"`
	// Message text.
	Text *string `protobuf:"bytes,4,req,name=text" json:"text,omitempty"`
	// Optional time when this message is expired, it should be hidden from user after this time (UTC).
	ExpirationUtcTime *int64 `protobuf:"zigzag64,5,opt,name=expiration_utc_time,json=expirationUtcTime" json:"expiration_utc_time,omitempty"`
}

func (x *UserMessage) Reset() {
	*x = UserMessage{}
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMessage) ProtoMessage() {}

func (x *UserMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMessage.ProtoReflect.Descriptor instead.
func (*UserMessage) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_user_session_2_proto_rawDescGZIP(), []int{21}
}

func (x *UserMessage) GetMessageType() uint32 {
	if x != nil && x.MessageType != nil {
		return *x.MessageType
	}
	return 0
}

func (x *UserMessage) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *UserMessage) GetSubject() string {
	if x != nil && x.Subject != nil {
		return *x.Subject
	}
	return ""
}

func (x *UserMessage) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *UserMessage) GetExpirationUtcTime() int64 {
	if x != nil && x.ExpirationUtcTime != nil {
		return *x.ExpirationUtcTime
	}
	return 0
}

// Request information about user session.
// UserSessionState requests are accepted
// only if client ip address is in the list of allowed IP addresses for service requests.
type UserSessionStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken *string `protobuf:"bytes,1,req,name=session_token,json=sessionToken" json:"session_token,omitempty"`
}

func (x *UserSessionStateRequest) Reset() {
	*x = UserSessionStateRequest{}
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserSessionStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSessionStateRequest) ProtoMessage() {}

func (x *UserSessionStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSessionStateRequest.ProtoReflect.Descriptor instead.
func (*UserSessionStateRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_user_session_2_proto_rawDescGZIP(), []int{22}
}

func (x *UserSessionStateRequest) GetSessionToken() string {
	if x != nil && x.SessionToken != nil {
		return *x.SessionToken
	}
	return ""
}

type UserSessionStateResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Session token from UserSessionStateRequest.
	SessionToken *string `protobuf:"bytes,1,req,name=session_token,json=sessionToken" json:"session_token,omitempty"`
	// This field is associated with ResultCode enum type.
	ResultCode *uint32 `protobuf:"varint,2,req,name=result_code,json=resultCode" json:"result_code,omitempty"`
	// / User session information.
	UserId   *int32  `protobuf:"zigzag32,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Username *string `protobuf:"bytes,4,opt,name=username" json:"username,omitempty"`
}

func (x *UserSessionStateResult) Reset() {
	*x = UserSessionStateResult{}
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserSessionStateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSessionStateResult) ProtoMessage() {}

func (x *UserSessionStateResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSessionStateResult.ProtoReflect.Descriptor instead.
func (*UserSessionStateResult) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_user_session_2_proto_rawDescGZIP(), []int{23}
}

func (x *UserSessionStateResult) GetSessionToken() string {
	if x != nil && x.SessionToken != nil {
		return *x.SessionToken
	}
	return ""
}

func (x *UserSessionStateResult) GetResultCode() uint32 {
	if x != nil && x.ResultCode != nil {
		return *x.ResultCode
	}
	return 0
}

func (x *UserSessionStateResult) GetUserId() int32 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *UserSessionStateResult) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

// Ping request which can be initiated by any side to ensure connection is alive. Both client and
// server sides must respond such request with Pong.
type Ping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token routed back in Pong response.
	Token *string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	// UTC time when this request was composed. Used for network latency diagnostics.
	PingUtcTime *int64 `protobuf:"zigzag64,2,req,name=ping_utc_time,json=pingUtcTime" json:"ping_utc_time,omitempty"`
}

func (x *Ping) Reset() {
	*x = Ping{}
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ping) ProtoMessage() {}

func (x *Ping) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ping.ProtoReflect.Descriptor instead.
func (*Ping) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_user_session_2_proto_rawDescGZIP(), []int{24}
}

func (x *Ping) GetToken() string {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return ""
}

func (x *Ping) GetPingUtcTime() int64 {
	if x != nil && x.PingUtcTime != nil {
		return *x.PingUtcTime
	}
	return 0
}

// Pong response which must be sent in response on Ping request.
type Pong struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token passed in Ping request.
	Token *string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	// Corresponding value from Ping request.
	PingUtcTime *int64 `protobuf:"zigzag64,2,req,name=ping_utc_time,json=pingUtcTime" json:"ping_utc_time,omitempty"`
	// UTC time when this response was composed.
	PongUtcTime *int64 `protobuf:"zigzag64,3,req,name=pong_utc_time,json=pongUtcTime" json:"pong_utc_time,omitempty"`
}

func (x *Pong) Reset() {
	*x = Pong{}
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pong) ProtoMessage() {}

func (x *Pong) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pong.ProtoReflect.Descriptor instead.
func (*Pong) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_user_session_2_proto_rawDescGZIP(), []int{25}
}

func (x *Pong) GetToken() string {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return ""
}

func (x *Pong) GetPingUtcTime() int64 {
	if x != nil && x.PingUtcTime != nil {
		return *x.PingUtcTime
	}
	return 0
}

func (x *Pong) GetPongUtcTime() int64 {
	if x != nil && x.PongUtcTime != nil {
		return *x.PongUtcTime
	}
	return 0
}

// Message to change max collapsing level for real-time market data.
// If "market_data_bandwidth" was set for the session in Logon or RestoreOrJoinSession message, the request will fail.
type SetCollapsingLevelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Max collapsing level.
	// This field is associated with RealTimeCollapsingLevel enum type.
	// If max_collapsing_level is omitted then REAL_TIME_COLLAPSING_LEVEL_NONE will be used.
	MaxCollapsingLevel *uint32 `protobuf:"varint,1,opt,name=max_collapsing_level,json=maxCollapsingLevel" json:"max_collapsing_level,omitempty"`
}

func (x *SetCollapsingLevelRequest) Reset() {
	*x = SetCollapsingLevelRequest{}
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetCollapsingLevelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCollapsingLevelRequest) ProtoMessage() {}

func (x *SetCollapsingLevelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCollapsingLevelRequest.ProtoReflect.Descriptor instead.
func (*SetCollapsingLevelRequest) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_user_session_2_proto_rawDescGZIP(), []int{26}
}

func (x *SetCollapsingLevelRequest) GetMaxCollapsingLevel() uint32 {
	if x != nil && x.MaxCollapsingLevel != nil {
		return *x.MaxCollapsingLevel
	}
	return 0
}

// Response to SetCollapsingLevelRequest
type SetCollapsingLevelResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This field is associated with ResultCode enum type.
	ResultCode *uint32 `protobuf:"varint,1,req,name=result_code,json=resultCode" json:"result_code,omitempty"`
	// Possible details of status or failure.
	TextMessage *common.Text `protobuf:"bytes,2,opt,name=text_message,json=textMessage" json:"text_message,omitempty"`
	// Current value of max collapsing level.
	// Field is set if result_code is RESULT_CODE_SUCCESS.
	// If result_code is RESULT_CODE_SUCCESS and max_collapsing_level is omitted
	// it should be treated as a REAL_TIME_COLLAPSING_LEVEL_NONE value.
	MaxCollapsingLevel *uint32 `protobuf:"varint,3,opt,name=max_collapsing_level,json=maxCollapsingLevel" json:"max_collapsing_level,omitempty"`
}

func (x *SetCollapsingLevelResult) Reset() {
	*x = SetCollapsingLevelResult{}
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetCollapsingLevelResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCollapsingLevelResult) ProtoMessage() {}

func (x *SetCollapsingLevelResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_WebAPI_user_session_2_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCollapsingLevelResult.ProtoReflect.Descriptor instead.
func (*SetCollapsingLevelResult) Descriptor() ([]byte, []int) {
	return file_protos_WebAPI_user_session_2_proto_rawDescGZIP(), []int{27}
}

func (x *SetCollapsingLevelResult) GetResultCode() uint32 {
	if x != nil && x.ResultCode != nil {
		return *x.ResultCode
	}
	return 0
}

func (x *SetCollapsingLevelResult) GetTextMessage() *common.Text {
	if x != nil {
		return x.TextMessage
	}
	return nil
}

func (x *SetCollapsingLevelResult) GetMaxCollapsingLevel() uint32 {
	if x != nil && x.MaxCollapsingLevel != nil {
		return *x.MaxCollapsingLevel
	}
	return 0
}

var File_protos_WebAPI_user_session_2_proto protoreflect.FileDescriptor

var file_protos_WebAPI_user_session_2_proto_rawDesc = []byte{
	0x0a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x32, 0x1a, 0x23, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62,
	0x41, 0x50, 0x49, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x5f, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xef, 0x06, 0x0a, 0x05, 0x4c, 0x6f,
	0x67, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x36, 0x0a, 0x17, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x15, 0x64, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f,
	0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6c, 0x6c, 0x61,
	0x70, 0x73, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x69, 0x6e, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x6f, 0x72,
	0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x61, 0x6c, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x63,
	0x0a, 0x0e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x29, 0x0a, 0x25, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x53,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41,
	0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4a, 0x4f, 0x49,
	0x4e, 0x10, 0x02, 0x2a, 0x06, 0x08, 0xac, 0x02, 0x10, 0xad, 0x02, 0x22, 0x98, 0x05, 0x0a, 0x0b,
	0x4c, 0x6f, 0x67, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x08, 0x62, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x55, 0x72, 0x6c, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x06,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x61, 0x6a, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6a, 0x6f, 0x72,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x02, 0x28, 0x12, 0x52, 0x0a,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x8a, 0x02, 0x0a, 0x0a, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x00, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x45,
	0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x4f, 0x4e, 0x45,
	0x54, 0x49, 0x4d, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x67, 0x12,
	0x20, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50,
	0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10,
	0x68, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x10, 0x69, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10,
	0x6a, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x6b,
	0x12, 0x24, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x45, 0x58, 0x50,
	0x49, 0x52, 0x45, 0x44, 0x10, 0x6c, 0x22, 0x9a, 0x02, 0x0a, 0x12, 0x4c, 0x6f, 0x67, 0x6f, 0x6e,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a,
	0x0a, 0x6c, 0x6f, 0x67, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x32, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x09, 0x6c, 0x6f,
	0x67, 0x6f, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x4f, 0x0a, 0x12, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x11, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x72, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x72, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0b, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x6f,
	0x67, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x41, 0x62, 0x6f, 0x72, 0x74,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x52, 0x0a, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x4c, 0x6f,
	0x67, 0x6f, 0x6e, 0x22, 0xd4, 0x01, 0x0a, 0x12, 0x4c, 0x6f, 0x67, 0x6f, 0x6e, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0c, 0x6c, 0x6f,
	0x67, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x32, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b, 0x6c,
	0x6f, 0x67, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4c, 0x0a, 0x11, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x10, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x72, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x41, 0x67,
	0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x22, 0xf2, 0x01, 0x0a, 0x1b, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e,
	0x69, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x4f, 0x0a, 0x12,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x11, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x50, 0x0a,
	0x15, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x41, 0x62,
	0x6f, 0x72, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x52, 0x13, 0x61, 0x62, 0x6f, 0x72,
	0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22,
	0xc7, 0x01, 0x0a, 0x1b, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x4c, 0x0a, 0x11, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x10, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x5a, 0x0a,
	0x16, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x14, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x28, 0x0a, 0x0c, 0x41, 0x62, 0x6f,
	0x72, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0xf6, 0x04, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x6f, 0x6e, 0x49, 0x6e, 0x69,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36,
	0x0a, 0x17, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x15, 0x64, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f,
	0x6c, 0x6c, 0x61, 0x70, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73,
	0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e,
	0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x12, 0x34,
	0x0a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d,
	0x61, 0x6a, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x32, 0x0a, 0x15, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x88, 0x04, 0x0a,
	0x0f, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f,
	0x6d, 0x70, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f,
	0x0a, 0x14, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x61, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x75, 0x73,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x41, 0x6c, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74,
	0x12, 0x36, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x61, 0x6e, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x5f, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x49, 0x73, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x0c, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52,
	0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x01, 0x12,
	0x1a, 0x0a, 0x16, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x50,
	0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x57,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x41, 0x53,
	0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x52, 0x5f, 0x41,
	0x4e, 0x44, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x04, 0x12,
	0x16, 0x0a, 0x12, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x05, 0x22, 0xa7, 0x01, 0x0a, 0x10, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x22, 0xa8, 0x01, 0x0a, 0x08, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x23,
	0x0a, 0x0d, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x52, 0x0a, 0x13, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x12, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x3d, 0x0a, 0x11,
	0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd6, 0x02, 0x0a, 0x14,
	0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4f, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x22,
	0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70,
	0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x69, 0x6e, 0x67, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x61, 0x6a, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6a, 0x6f, 0x72,
	0x12, 0x32, 0x0a, 0x15, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x13, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x22, 0x8d, 0x03, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x4f, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x12, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x61, 0x6c, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x22, 0x9e, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x10, 0x68, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x10, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x45, 0x4e, 0x49,
	0x45, 0x44, 0x10, 0x66, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x53, 0x10, 0x67, 0x22, 0x43, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x69, 0x6e,
	0x12, 0x27, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x53, 0x61,
	0x6d, 0x65, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2b, 0x0a, 0x06, 0x4c, 0x6f, 0x67,
	0x6f, 0x66, 0x66, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x78, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xfb, 0x01, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x67, 0x65,
	0x64, 0x4f, 0x66, 0x66, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x6f, 0x66, 0x66, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x6f, 0x67,
	0x6f, 0x66, 0x66, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x65, 0x78,
	0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x22,
	0x82, 0x01, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x6f, 0x66, 0x66, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x4f, 0x47, 0x4f, 0x46, 0x46, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x42, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x1c,
	0x0a, 0x18, 0x4c, 0x4f, 0x47, 0x4f, 0x46, 0x46, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14,
	0x4c, 0x4f, 0x47, 0x4f, 0x46, 0x46, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x46, 0x4f,
	0x52, 0x43, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x4f, 0x47, 0x4f, 0x46, 0x46,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e,
	0x45, 0x44, 0x10, 0x04, 0x22, 0x56, 0x0a, 0x0e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x6c,
	0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x77,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xb9, 0x01, 0x0a,
	0x14, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65,
	0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5d, 0x0a, 0x0a, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x55, 0x4c,
	0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00,
	0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x45,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x66, 0x22, 0xb7, 0x01, 0x0a, 0x15, 0x4f, 0x62, 0x74,
	0x61, 0x69, 0x6e, 0x44, 0x65, 0x6d, 0x6f, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x5f, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x22, 0x9a, 0x02, 0x0a, 0x1b, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x6d,
	0x6f, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x74, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x74, 0x63, 0x22,
	0x3e, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a,
	0x13, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x65, 0x22,
	0x9d, 0x02, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x12, 0x52, 0x11, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x75, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47,
	0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x10, 0x04, 0x22,
	0x3e, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x93, 0x02, 0x0a, 0x16, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x7e, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x55, 0x52, 0x45, 0x10, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x10, 0x66, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x45, 0x4e,
	0x49, 0x45, 0x44, 0x10, 0x67, 0x22, 0x40, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x74, 0x63, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x12, 0x52, 0x0b, 0x70, 0x69, 0x6e, 0x67,
	0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x64, 0x0a, 0x04, 0x50, 0x6f, 0x6e, 0x67, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x74,
	0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x12, 0x52, 0x0b, 0x70, 0x69,
	0x6e, 0x67, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x6f, 0x6e,
	0x67, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x12,
	0x52, 0x0b, 0x70, 0x6f, 0x6e, 0x67, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x4d, 0x0a,
	0x19, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x69, 0x6e, 0x67, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61,
	0x78, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6c,
	0x6c, 0x61, 0x70, 0x73, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x82, 0x02, 0x0a,
	0x18, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x69, 0x6e, 0x67, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74,
	0x52, 0x0b, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a,
	0x14, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x69, 0x6e, 0x67, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x61, 0x78,
	0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22,
	0x60, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a,
	0x13, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x65, 0x12,
	0x20, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x42,
	0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x5f, 0x49, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x10,
	0x66, 0x2a, 0xb9, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f,
	0x6c, 0x6c, 0x61, 0x70, 0x73, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x23, 0x0a,
	0x1f, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x41,
	0x50, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f,
	0x43, 0x4f, 0x4c, 0x4c, 0x41, 0x50, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x5f, 0x44, 0x4f, 0x4d, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x41, 0x50, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x5f, 0x44, 0x4f, 0x4d, 0x5f, 0x42, 0x42, 0x41, 0x10, 0x02, 0x12, 0x2d,
	0x0a, 0x29, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4c,
	0x41, 0x50, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x44, 0x4f, 0x4d,
	0x5f, 0x42, 0x42, 0x41, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x53, 0x10, 0x03, 0x42, 0x11, 0x5a,
	0x0f, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x57, 0x65, 0x62, 0x41, 0x50, 0x49,
}

var (
	file_protos_WebAPI_user_session_2_proto_rawDescOnce sync.Once
	file_protos_WebAPI_user_session_2_proto_rawDescData = file_protos_WebAPI_user_session_2_proto_rawDesc
)

func file_protos_WebAPI_user_session_2_proto_rawDescGZIP() []byte {
	file_protos_WebAPI_user_session_2_proto_rawDescOnce.Do(func() {
		file_protos_WebAPI_user_session_2_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_WebAPI_user_session_2_proto_rawDescData)
	})
	return file_protos_WebAPI_user_session_2_proto_rawDescData
}

var file_protos_WebAPI_user_session_2_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_protos_WebAPI_user_session_2_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_protos_WebAPI_user_session_2_proto_goTypes = []any{
	(RealTimeCollapsingLevel)(0),                // 0: user_session_2.RealTimeCollapsingLevel
	(Logon_SessionSetting)(0),                   // 1: user_session_2.Logon.SessionSetting
	(LogonResult_ResultCode)(0),                 // 2: user_session_2.LogonResult.ResultCode
	(PasswordRequest_PasswordType)(0),           // 3: user_session_2.PasswordRequest.PasswordType
	(RestoreOrJoinSessionResult_ResultCode)(0),  // 4: user_session_2.RestoreOrJoinSessionResult.ResultCode
	(LoggedOff_LogoffReason)(0),                 // 5: user_session_2.LoggedOff.LogoffReason
	(PasswordChangeResult_ResultCode)(0),        // 6: user_session_2.PasswordChangeResult.ResultCode
	(ObtainDemoCredentialsResult_ResultCode)(0), // 7: user_session_2.ObtainDemoCredentialsResult.ResultCode
	(UserMessage_MessageType)(0),                // 8: user_session_2.UserMessage.MessageType
	(UserSessionStateResult_ResultCode)(0),      // 9: user_session_2.UserSessionStateResult.ResultCode
	(SetCollapsingLevelResult_ResultCode)(0),    // 10: user_session_2.SetCollapsingLevelResult.ResultCode
	(*Logon)(nil),                               // 11: user_session_2.Logon
	(*LogonResult)(nil),                         // 12: user_session_2.LogonResult
	(*LogonRoutineClient)(nil),                  // 13: user_session_2.LogonRoutineClient
	(*LogonRoutineServer)(nil),                  // 14: user_session_2.LogonRoutineServer
	(*PasswordChangeRoutineClient)(nil),         // 15: user_session_2.PasswordChangeRoutineClient
	(*PasswordChangeRoutineServer)(nil),         // 16: user_session_2.PasswordChangeRoutineServer
	(*AbortRoutine)(nil),                        // 17: user_session_2.AbortRoutine
	(*LogonInit)(nil),                           // 18: user_session_2.LogonInit
	(*PasswordRequest)(nil),                     // 19: user_session_2.PasswordRequest
	(*PasswordResponse)(nil),                    // 20: user_session_2.PasswordResponse
	(*Encoding)(nil),                            // 21: user_session_2.Encoding
	(*EncodingParameter)(nil),                   // 22: user_session_2.EncodingParameter
	(*RestoreOrJoinSession)(nil),                // 23: user_session_2.RestoreOrJoinSession
	(*RestoreOrJoinSessionResult)(nil),          // 24: user_session_2.RestoreOrJoinSessionResult
	(*ConcurrentConnectionJoin)(nil),            // 25: user_session_2.ConcurrentConnectionJoin
	(*Logoff)(nil),                              // 26: user_session_2.Logoff
	(*LoggedOff)(nil),                           // 27: user_session_2.LoggedOff
	(*PasswordChange)(nil),                      // 28: user_session_2.PasswordChange
	(*PasswordChangeResult)(nil),                // 29: user_session_2.PasswordChangeResult
	(*ObtainDemoCredentials)(nil),               // 30: user_session_2.ObtainDemoCredentials
	(*ObtainDemoCredentialsResult)(nil),         // 31: user_session_2.ObtainDemoCredentialsResult
	(*UserMessage)(nil),                         // 32: user_session_2.UserMessage
	(*UserSessionStateRequest)(nil),             // 33: user_session_2.UserSessionStateRequest
	(*UserSessionStateResult)(nil),              // 34: user_session_2.UserSessionStateResult
	(*Ping)(nil),                                // 35: user_session_2.Ping
	(*Pong)(nil),                                // 36: user_session_2.Pong
	(*SetCollapsingLevelRequest)(nil),           // 37: user_session_2.SetCollapsingLevelRequest
	(*SetCollapsingLevelResult)(nil),            // 38: user_session_2.SetCollapsingLevelResult
	(*common.Text)(nil),                         // 39: shared_1.Text
}
var file_protos_WebAPI_user_session_2_proto_depIdxs = []int32{
	18, // 0: user_session_2.LogonRoutineClient.logon_init:type_name -> user_session_2.LogonInit
	20, // 1: user_session_2.LogonRoutineClient.password_responses:type_name -> user_session_2.PasswordResponse
	17, // 2: user_session_2.LogonRoutineClient.abort_logon:type_name -> user_session_2.AbortRoutine
	12, // 3: user_session_2.LogonRoutineServer.logon_result:type_name -> user_session_2.LogonResult
	19, // 4: user_session_2.LogonRoutineServer.password_requests:type_name -> user_session_2.PasswordRequest
	20, // 5: user_session_2.PasswordChangeRoutineClient.password_responses:type_name -> user_session_2.PasswordResponse
	17, // 6: user_session_2.PasswordChangeRoutineClient.abort_password_change:type_name -> user_session_2.AbortRoutine
	19, // 7: user_session_2.PasswordChangeRoutineServer.password_requests:type_name -> user_session_2.PasswordRequest
	29, // 8: user_session_2.PasswordChangeRoutineServer.password_change_result:type_name -> user_session_2.PasswordChangeResult
	21, // 9: user_session_2.PasswordRequest.encodings:type_name -> user_session_2.Encoding
	22, // 10: user_session_2.Encoding.encoding_parameters:type_name -> user_session_2.EncodingParameter
	39, // 11: user_session_2.SetCollapsingLevelResult.text_message:type_name -> shared_1.Text
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_protos_WebAPI_user_session_2_proto_init() }
func file_protos_WebAPI_user_session_2_proto_init() {
	if File_protos_WebAPI_user_session_2_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_WebAPI_user_session_2_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_WebAPI_user_session_2_proto_goTypes,
		DependencyIndexes: file_protos_WebAPI_user_session_2_proto_depIdxs,
		EnumInfos:         file_protos_WebAPI_user_session_2_proto_enumTypes,
		MessageInfos:      file_protos_WebAPI_user_session_2_proto_msgTypes,
	}.Build()
	File_protos_WebAPI_user_session_2_proto = out.File
	file_protos_WebAPI_user_session_2_proto_rawDesc = nil
	file_protos_WebAPI_user_session_2_proto_goTypes = nil
	file_protos_WebAPI_user_session_2_proto_depIdxs = nil
}
